{"version":3,"sources":["i18n.js","queries/system/auth.js","tools/cs_error_codes.js","tools/cs_local_storage.js","tools/authentication.js","components/settings/general/date_time/queries.js","components/organization/organization/queries.js","components/ui/CSStandalonePageWide.jsx","components/ui/CSStandalonePageLoader.jsx","components/context/AppSettingsContext.js","components/context/OrganizationContext.js","components/settings/shop/features/queries.js","components/SiteWrapperShop.js","components/shop/ShopCheckoutProgress.jsx","components/ui/ButtonBack.jsx","components/shop/ShopBase.jsx","components/shop/cookie_policy/CookiePolicyBase.jsx","components/shop/cookie_policy/CookiePolicy.jsx","tools/string_tools.js","components/ui/StatusIcon.jsx","components/schedule/classes/tools.js","queries/system/get_user.js","tools/user_tools.js","components/HasPermissionWrapper.js","queries/system/get_user_profile.js","components/home/home/queries.js","components/SiteWrapper.js","components/home/home/HomeHomeBase.jsx","components/home/home/HomeHome.jsx","components/automation/home/AutomationHomeItemButton.jsx","components/automation/home/AutomationHome.jsx","components/general/ContentCard.jsx","components/automation/queries.js","components/automation/AutomationBack.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditsBase.jsx","components/automation/AutomationTaskResultStatus.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits.jsx","components/automation/account/subscription/credits/yupSchema.js","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditForm.jsx","components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesBase.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices.jsx","components/automation/account/subscription/invoices/yupSchema.js","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesForm.jsx","components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionBase.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections.jsx","components/automation/account/subscription/mollie_collection/yupSchema.js","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionForm.jsx","components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd.jsx","components/ui/HomeItemButton.jsx","components/finance/home/FinanceHome.jsx","components/finance/costcenters/queries.js","components/ui/ButtonAdd.jsx","components/finance/costcenters/FinanceCostCentersBase.jsx","components/finance/costcenters/FinanceCostCenters.jsx","components/finance/costcenters/yupSchema.js","components/finance/costcenters/FinanceCostCenterAdd.jsx","components/finance/costcenters/FinanceCostCenterEdit.jsx","components/ui/ButtonExport.jsx","components/finance/expenses/FinanceExpensesBase.jsx","tools/refresh_token_and_open_export_link.js","components/ui/FileProtectedDownloadTableButton.jsx","tools/confirm_action.js","components/ui/ButtonConfirm.jsx","components/finance/expenses/queries.js","tools/confirm_delete.js","components/finance/expenses/FinanceExpensesList.jsx","components/finance/expenses/tools.js","components/ui/CSDatePicker.jsx","components/finance/expenses/FinanceExpensesFilter.jsx","components/finance/expenses/FinanceExpenses.jsx","tools/date_tools.js","components/finance/expenses/yupSchema.js","tools/custom_file_input_label_style.js","components/ui/ButtonFormSubmit.jsx","components/ui/ButtonFormCancel.jsx","components/finance/expenses/FinanceExpenseForm.jsx","components/finance/expenses/FinanceExpenseAdd.jsx","components/finance/expenses/FinanceExpenseEdit.jsx","components/finance/expenses/export/yupSchema.js","components/finance/expenses/export/FinanceExpensesExportForm.jsx","components/finance/expenses/export/FinanceExpensesExport.jsx","components/finance/glaccounts/queries.js","components/finance/glaccounts/FinanceGLAccountsBase.jsx","components/finance/glaccounts/FinanceGLAccounts.jsx","components/finance/glaccounts/yupSchema.js","components/finance/glaccounts/FinanceGLAccountAdd.jsx","components/finance/glaccounts/FinanceGLAccountEdit.jsx","components/general/InputSearch.jsx","components/finance/invoices/tools.js","components/finance/invoices/FinanceInvoicesFilter.jsx","components/finance/invoices/FinanceInvoicesBase.jsx","components/ui/FinanceInvoiceStatus.jsx","components/finance/invoices/queries.js","components/finance/invoices/FinanceInvoicesList.jsx","components/finance/invoices/FinanceInvoices.jsx","components/finance/invoices/export/yupSchema.js","components/finance/invoices/export/FinanceInvoicesExportForm.jsx","components/finance/invoices/export/FinanceInvoicesExport.jsx","components/finance/invoices/edit/FinanceInvoiceEditBase.jsx","components/finance/invoices/edit/FinanceInvoiceItemAdd.jsx","components/finance/invoices/edit/FinanceInvoiceItemDelete.jsx","components/finance/invoices/edit/FinanceInvoiceItemEditForm.jsx","components/finance/invoices/edit/FinanceInvoiceItemEdit.jsx","components/finance/invoices/edit/FinanceInvoiceEditItems.jsx","plugin_config/tinymce.js","components/finance/invoices/edit/FinanceInvoiceEditTermsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditFooterForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditNoteForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditAdditional.jsx","components/finance/invoices/edit/FinanceInvoiceEditBalance.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptionsForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditOptions.jsx","components/finance/invoices/edit/FinanceInvoiceEditOrganization.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummaryForm.jsx","components/finance/invoices/edit/FinanceInvoiceEditSummary.jsx","components/finance/invoices/edit/FinanceInvoiceEditTo.jsx","components/finance/invoices/edit/FinanceInvoiceEditPaymentDelete.jsx","components/finance/invoices/edit/FinanceInvoiceEditPayments.jsx","components/finance/invoices/edit/FinanceInvoiceEdit.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToBase.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditToForm.jsx","components/finance/invoices/edit_to/FinanceInvoiceEditTo.jsx","components/ui/BadgeBoolean.jsx","components/finance/invoices/groups/queries.js","components/finance/invoices/groups/FinanceInvoiceGroupsBase.jsx","components/finance/invoices/groups/FinanceInvoiceGroups.jsx","components/finance/invoices/groups/yupSchema.js","components/finance/invoices/groups/FinanceInvoiceGroupForm.jsx","components/finance/invoices/groups/FinanceInvoiceGroupAdd.jsx","components/finance/invoices/groups/FinanceInvoiceGroupEdit.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultsBase.jsx","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaultForm.jsx","components/finance/invoices/groups/defaults/yupSchema.js","components/finance/invoices/groups/defaults/queries.js","components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults.jsx","components/finance/invoices/payments/queries.js","components/finance/invoices/payments/FinanceInvoicePaymentBase.jsx","components/finance/invoices/payments/FinanceInvoicePaymentForm.jsx","components/finance/invoices/payments/FinanceInvoicePaymentAdd.jsx","components/finance/invoices/payments/FinanceInvoicePaymentEdit.jsx","components/finance/orders/tools.js","components/finance/orders/FinanceOrdersFilter.jsx","components/finance/orders/FinanceOrdersBase.jsx","components/finance/orders/FinanceOrderStatus.jsx","components/finance/orders/queries.js","components/finance/orders/FinanceOrderDelete.jsx","components/finance/orders/FinanceOrders.jsx","components/finance/payment_batches/tools.js","components/ui/BadgeFinancePaymentBatchStatus.jsx","components/finance/payment_batches/FinancePaymentBatchesBase.jsx","components/finance/payment_batches/queries.js","components/finance/payment_batches/FinancePaymentBatches.jsx","components/finance/payment_batches/FinancePaymentBatchAddWhat.jsx","components/ui/FinancePaymentBatchCategory.jsx","components/finance/payment_batches/FinancePaymentBatchViewBase.jsx","components/finance/payment_batches/FinancePaymentBatchView.jsx","components/finance/payment_batches/yupSchema.js","components/finance/payment_batches/FinancePaymentCollectionBatchForm.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchAdd.jsx","components/finance/payment_batches/FinancePaymentCollectionBatchEdit.jsx","components/finance/payment_batch_categories/tools.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoriesBase.jsx","components/finance/payment_batch_categories/queries.js","components/finance/payment_batch_categories/FinancePaymentBatchCategories.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryForm.jsx","components/finance/payment_batch_categories/yupSchema.js","components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd.jsx","components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit.jsx","components/finance/orders/edit/queries.js","components/finance/orders/edit/FinanceOrderEditForm.jsx","components/finance/orders/edit/FinanceOrderEditBase.jsx","components/finance/orders/edit/FinanceOrderEdit.jsx","components/finance/payment_methods/FinancePaymentMethodsBase.jsx","components/finance/payment_methods/queries.js","components/finance/payment_methods/FinancePaymentMethods.jsx","components/finance/payment_methods/yupSchema.js","components/finance/payment_methods/FinancePaymentMethodForm.jsx","components/finance/payment_methods/FinancePaymentMethodAdd.jsx","components/finance/payment_methods/FinancePaymentMethodEdit.jsx","components/finance/quotes/tools.js","components/finance/quotes/FinanceQuotesFilter.jsx","components/finance/quotes/FinanceQuotesBase.jsx","components/ui/FinanceQuoteStatus.jsx","components/finance/quotes/queries.js","components/finance/quotes/FinanceQuotesList.jsx","components/finance/quotes/FinanceQuotes.jsx","components/finance/quotes/export/yupSchema.js","components/finance/quotes/export/FinanceQuotesExportForm.jsx","components/finance/quotes/export/FinanceQuotesExport.jsx","components/finance/quotes/edit/FinanceQuoteEditBase.jsx","components/finance/quotes/edit/FinanceQuoteItemAdd.jsx","components/finance/quotes/edit/FinanceQuoteItemDelete.jsx","components/finance/quotes/edit/FinanceQuoteItemEditForm.jsx","components/finance/quotes/edit/FinanceQuoteItemEdit.jsx","components/finance/quotes/edit/FinanceQuoteEditItems.jsx","components/finance/quotes/edit/FinanceQuoteEditTermsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditFooterForm.jsx","components/finance/quotes/edit/FinanceQuoteEditNoteForm.jsx","components/finance/quotes/edit/FinanceQuoteEditAdditional.jsx","components/finance/quotes/edit/FinanceQuoteEditBalance.jsx","components/finance/quotes/edit/FinanceQuoteEditOptionsForm.jsx","components/finance/quotes/edit/FinanceQuoteEditOptions.jsx","components/finance/quotes/edit/FinanceQuoteEditOrganization.jsx","components/finance/quotes/edit/FinanceQuoteEditSummaryForm.jsx","components/finance/quotes/edit/FinanceQuoteEditSummary.jsx","components/finance/quotes/edit/FinanceQuoteEditTo.jsx","components/finance/quotes/edit/FinanceQuoteEdit.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToBase.jsx","components/finance/quotes/edit_to/FinanceQuoteEditToForm.jsx","components/finance/quotes/edit_to/FinanceQuoteEditTo.jsx","components/finance/quotes/groups/queries.js","components/finance/quotes/groups/FinanceQuoteGroupsBase.jsx","components/finance/quotes/groups/FinanceQuoteGroups.jsx","components/finance/quotes/groups/yupSchema.js","components/finance/quotes/groups/FinanceQuoteGroupForm.jsx","components/finance/quotes/groups/FinanceQuoteGroupAdd.jsx","components/finance/quotes/groups/FinanceQuoteGroupEdit.jsx","components/finance/taxrates/FinanceTaxRatesBase.jsx","components/finance/taxrates/queries.js","components/finance/taxrates/FinanceTaxRates.jsx","components/finance/taxrates/yupSchema.js","components/finance/taxrates/FinanceTaxRateAdd.jsx","components/finance/taxrates/FinanceTaxRateEdit.jsx","components/finance/taxrates_summary/yupSchema.js","components/finance/taxrates_summary/FinanceTaxRatesSummaryFilter.jsx","components/finance/taxrates_summary/FinanceTaxRatesSummaryBase.jsx","components/finance/taxrates_summary/queries.js","components/finance/taxrates_summary/FinanceTaxRatesSummary.jsx","components/insight/home/InsightHome.jsx","components/insight/inactive_accounts/InsightInactiveAccountsBase.jsx","components/insight/inactive_accounts/queries.js","components/insight/inactive_accounts/InsightInactiveAccounts.jsx","components/insight/inactive_accounts/InsightInactiveAccountsForm.jsx","components/insight/inactive_accounts/InsightInactiveAccountsAdd.jsx","components/ui/ButtonDelete.jsx","components/insight/inactive_accounts/InsightInactiveAccountsViewBase.jsx","components/insight/inactive_accounts/InsightInactiveAccountsView.jsx","components/insight/invoices_open_on_date/yupSchema.js","components/insight/invoices_open_on_date/InsightFinanceInvoicesOpenOnDateFilter.jsx","components/insight/invoices_open_on_date/InsightFinanceInvoicesOpenOnDateBase.jsx","components/insight/invoices_open_on_date/queries.js","components/insight/invoices_open_on_date/InsightFinanceInvoicesOpenOnDate.jsx","components/insight/classpasses/queries.js","components/insight/InsightBackHome.jsx","components/insight/classpasses/InsightClasspassesBase.jsx","components/insight/classpasses/InsightClasspasses.jsx","components/insight/keynumbers_wo_subscription/queries.js","components/insight/keynumbers_wo_subscription/InsightKeyNumbersWoSubscriptionBase.jsx","components/insight/keynumbers_wo_subscription/InsightKeyNumbersWoSubscription.jsx","components/insight/revenue/queries.js","components/insight/revenue/InsightRevenueBase.jsx","components/insight/revenue/InsightRevenueDisplay.jsx","components/insight/revenue/InsightRevenue.jsx","components/insight/instructor_classes/yupSchema.js","components/insight/instructor_classes/queries.js","components/insight/instructor_classes/InsightInstructorClassesMonthBase.jsx","components/insight/instructor_classes/InsightInstructorClassesForm.jsx","components/insight/instructor_classes/InsightInstructorClassesMonth.jsx","components/insight/subscriptions/queries.js","components/insight/subscriptions/InsightSubscriptionsBase.jsx","components/insight/subscriptions/InsightSubscriptions.jsx","components/insight/trialpasses/queries.js","components/insight/trialpasses/InsightTrialpassesFilter.jsx","components/insight/trialpasses/tools.js","components/insight/trialpasses/InsightTrialpassesBase.jsx","components/insight/trialpasses/InsightTrialpasses.jsx","components/organization/home/OrganizationHome.jsx","components/organization/organization/yupSchema.js","components/organization/organization/OrganizationForm.jsx","components/organization/organization/OrganizationEditBase.jsx","components/organization/organization/OrganizationEdit.jsx","components/organization/organization/branding/OrganizationBrandingBase.jsx","components/organization/organization/branding/OrganizationBrandingEditColorsForm.jsx","components/organization/organization/branding/OrganizationBranding.jsx","components/organization/organization/branding/OrganizationBrandingEditForm.jsx","components/organization/organization/branding/OrganizationBrandingEdit.jsx","components/organization/announcements/OrganizationAnnouncementsBase.jsx","components/organization/announcements/queries.js","components/organization/announcements/OrganizationAnnouncements.jsx","components/organization/announcements/yupSchema.js","components/organization/announcements/OrganizationAnnouncementForm.jsx","components/organization/announcements/OrganizationAnnouncementAdd.jsx","components/organization/announcements/OrganizationAnnouncementEdit.jsx","components/organization/classpasses/OrganizationClasspassesBase.jsx","components/organization/classpasses/queries.js","components/organization/classpasses/OrganizationClasspasses.jsx","components/organization/classpasses/yupSchema.js","components/organization/classpasses/OrganizationClasspassForm.jsx","components/organization/classpasses/OrganizationClasspassAdd.jsx","components/organization/classpasses/OrganizationClasspassEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupsBase.jsx","components/organization/classpasses_groups/queries.js","components/organization/classpasses_groups/OrganizationClasspassesGroups.jsx","components/organization/classpasses_groups/yupSchema.js","components/organization/classpasses_groups/OrganizationClasspassesGroupAdd.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEdit.jsx","components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses.jsx","components/organization/classtypes/tools.js","components/organization/classtypes/queries.js","components/organization/classtypes/OrganizationClasstypesBase.jsx","components/organization/classtypes/OrganizationClasstypes.jsx","components/organization/classtypes/yupSchema.js","components/organization/classtypes/OrganizationClasstypeAdd.jsx","components/organization/classtypes/OrganizationClasstypeEdit.jsx","components/organization/classtypes/OrganizationClasstypeEditImage.jsx","components/organization/discovery/queries.js","components/organization/discovery/OrganizationDiscoveriesBase.jsx","components/organization/discovery/OrganizationDiscoveries.jsx","components/organization/discovery/yupSchema.js","components/organization/discovery/OrganizationDiscoveryAdd.jsx","components/organization/discovery/OrganizationDiscoveryEdit.jsx","components/organization/documents/OrganizationDocuments.jsx","components/ui/ISODateString.jsx","components/ui/FileDownloadTableButton.jsx","components/organization/documents/OrganizationDocumentsBase.jsx","components/organization/documents/queries.js","components/organization/documents/OrganizationDocumentDelete.jsx","components/organization/documents/tools.js","components/organization/documents/OrganizationListDocuments.jsx","components/organization/documents/OrganizationDocumentAdd.jsx","components/organization/documents/OrganizationDocumentEdit.jsx","components/organization/holidays/OrganizationHolidaysBase.jsx","components/organization/holidays/queries.js","components/organization/holidays/OrganizationHolidays.jsx","components/organization/holidays/yupSchema.js","components/organization/holidays/OrganizationHolidayForm.jsx","components/organization/holidays/OrganizationHolidayAdd.jsx","components/organization/holidays/OrganizationHolidayEdit.jsx","components/organization/holidays/OrganizationHolidayEditLocations.jsx","components/organization/languages/OrganizationLanguagesBase.jsx","components/organization/languages/queries.js","components/organization/languages/OrganizationLanguages.jsx","components/organization/languages/yupSchema.js","components/organization/languages/OrganizationLanguageForm.jsx","components/organization/languages/OrganizationLanguageAdd.jsx","components/organization/languages/OrganizationLanguageEdit.jsx","components/organization/locations/queries.js","components/organization/locations/OrganizationLocationsBase.jsx","components/organization/locations/OrganizationLocations.jsx","components/organization/locations/yupSchema.js","components/organization/locations/OrganizationLocationAdd.jsx","components/organization/locations/OrganizationLocationEdit.jsx","components/organization/locations/rooms/queries.js","components/organization/locations/rooms/OrganizationLocationRoomsBase.jsx","components/organization/locations/rooms/OrganizationLocationRooms.jsx","components/organization/locations/rooms/yupSchema.js","components/organization/locations/rooms/OrganizationLocationRoomForm.jsx","components/organization/locations/rooms/OrganizationLocationRoomAdd.jsx","components/organization/locations/rooms/OrganizationLocationRoomEdit.jsx","components/organization/levels/OrganizationLevelsBase.jsx","components/organization/levels/queries.js","components/organization/levels/OrganizationLevels.jsx","components/organization/levels/yupSchema.js","components/organization/levels/OrganizationLevelForm.jsx","components/organization/levels/OrganizationLevelAdd.jsx","components/organization/levels/OrganizationLevelEdit.jsx","components/ui/ButtonEdit.jsx","components/organization/products/queries.js","tools/confirm_archive.js","components/ui/ButtonArchive.jsx","tools/confirm_unarchive.js","components/ui/ButtonUnArchive.jsx","components/organization/products/OrganizationProductArchive.jsx","components/organization/products/OrganizationProductsBase.jsx","components/organization/products/OrganizationProducts.jsx","components/organization/products/yupSchema.js","components/organization/products/OrganizationProductForm.jsx","components/organization/products/OrganizationProductAdd.jsx","components/organization/products/OrganizationProductEdit.jsx","components/organization/shifts/OrganizationShiftsBase.jsx","components/organization/shifts/queries.js","components/organization/shifts/OrganizationShifts.jsx","components/organization/shifts/yupSchema.js","components/organization/shifts/OrganizationShiftForm.jsx","components/organization/shifts/OrganizationShiftAdd.jsx","components/organization/shifts/OrganizationShiftEdit.jsx","components/organization/subscriptions/OrganizationSubscriptionsBase.jsx","components/organization/subscriptions/queries.js","components/organization/subscriptions/OrganizationSubscriptions.jsx","components/organization/subscriptions/yupSchema.js","components/organization/subscriptions/OrganizationSubscriptionForm.jsx","components/organization/subscriptions/OrganizationSubscriptionAdd.jsx","components/organization/subscriptions/OrganizationSubscriptionEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupsBase.jsx","components/organization/subscriptions_groups/queries.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroups.jsx","components/organization/subscriptions_groups/yupSchema.js","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupForm.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit.jsx","components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionsPricesBase.jsx","components/organization/subscriptions/prices/queries.js","components/organization/subscriptions/prices/OrganizationSubscriptionsPrices.jsx","components/organization/subscriptions/prices/yupSchema.js","components/organization/subscriptions/prices/OrganizationSubscriptionPriceForm.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd.jsx","components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit.jsx","components/relations/home/RelationsHome.jsx","components/relations/accounts/tools.js","components/relations/accounts/RelationsAccountsBase.jsx","components/relations/accounts/queries.js","components/relations/accounts/RelationsAccounts.jsx","components/relations/accounts/yupSchema.js","components/relations/accounts/RelationsAccountForm.jsx","components/relations/accounts/RelationsAccountAdd.jsx","tools/iso_country_codes.js","components/relations/accounts/RelationsAccountProfileForm.jsx","components/ui/ProfileCardSmall.jsx","components/relations/accounts/ProfileMenu.jsx","components/relations/accounts/RelationsAccountProfileBase.jsx","components/relations/accounts/RelationsAccountProfile.jsx","components/relations/accounts/RelationsAccountProfileImageForm.jsx","components/relations/accounts/RelationsAccountProfileImage.jsx","components/relations/accounts/RelationsAccountsBack.jsx","components/ui/DocumentType.jsx","components/relations/accounts/accepted_documents/queries.js","components/relations/accounts/accepted_documents/AcceptedDocuments.jsx","components/relations/accounts/bank_accounts/queries.js","components/relations/accounts/bank_accounts/mandates/queries.js","components/relations/accounts/bank_accounts/RelationsAccountBankAccountBase.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccountForm.jsx","components/relations/accounts/bank_accounts/RelationsAccountBankAccount.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateForm.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd.jsx","components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit.jsx","components/ui/BadgeBookingStatus.jsx","components/relations/accounts/classes/AccountClassesBase.jsx","components/relations/accounts/classes/queries.js","components/schedule/classes/class/attendance/queries.js","components/relations/accounts/classes/AccountClassDelete.jsx","components/schedule/classes/class/attendance/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceItemCheckinAndStatus.jsx","components/relations/accounts/classes/AccountClasses.jsx","queries/accounts/get_account.js","components/ui/SearchClassesOnDateBtnAttendanceAdd.jsx","components/ui/BadgePublic.jsx","components/schedule/classes/queries.js","components/ui/SearchClassesOnDate.jsx","components/relations/accounts/classes/AccountClassesBack.jsx","components/relations/accounts/classes/AccountClassesFindClass.jsx","components/relations/accounts/enrollments/AccountEnrollmentsBase.jsx","components/schedule/classes/all/enrollments/queries.js","components/relations/accounts/enrollments/queries.js","components/schedule/classes/all/enrollments/tools.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete.jsx","components/relations/accounts/enrollments/AccountEnrollments.jsx","components/schedule/classes/all/enrollments/yupSchema.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentForm.jsx","components/relations/accounts/enrollments/AccountEnrollmentBack.jsx","components/relations/accounts/enrollments/AccountEnrollmentEdit.jsx","components/relations/accounts/enrollments/AccountEnrollmentFindClass.jsx","components/relations/accounts/tools/queries.js","components/relations/accounts/tools/RelationsAccountMollieCustomerForm.jsx","components/relations/accounts/tools/RelationsAccountPasswordForm.jsx","components/relations/accounts/tools/RelationsAccountTools.jsx","components/relations/accounts/classpasses/queries.js","components/relations/accounts/classpasses/AccountClasspasses.jsx","components/relations/accounts/classpasses/yupSchema.js","components/relations/accounts/classpasses/AccountClasspassForm.jsx","components/relations/accounts/classpasses/AccountClasspassAdd.jsx","components/relations/accounts/classpasses/AccountClasspassEdit.jsx","components/relations/accounts/classpass_classes/queries.js","components/relations/accounts/classpass_classes/AccountClasspassClasses.jsx","components/relations/accounts/documents/queries.js","components/relations/accounts/documents/AccountDocuments.jsx","components/relations/accounts/documents/AccountDocumentForm.jsx","components/relations/accounts/documents/AccountDocumentAdd.jsx","components/relations/accounts/documents/yupSchema.js","components/relations/accounts/documents/AccountDocumentFormEdit.jsx","components/relations/accounts/documents/AccountDocumentEdit.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsBase.jsx","components/relations/accounts/finance_payment_batch_category_items/queries.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems.jsx","components/relations/accounts/finance_payment_batch_category_items/yupSchema.js","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemsForm.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd.jsx","components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit.jsx","components/relations/accounts/invoices/queries.js","components/relations/accounts/invoices/AccountInvoicesBase.jsx","components/relations/accounts/invoices/AccountInvoices.jsx","components/relations/accounts/invoices/AccountInvoiceAddForm.jsx","components/relations/accounts/invoices/AccountInvoiceAdd.jsx","components/general/LoadMoreOnBottomScroll.jsx","components/relations/accounts/notes/AccountNotesBase.jsx","components/relations/accounts/notes/queries.js","components/relations/accounts/notes/tools.js","components/relations/accounts/notes/AccountNotes.jsx","components/relations/accounts/notes/AccountNoteForm.jsx","components/relations/accounts/notes/AccountNoteAdd.jsx","components/relations/accounts/notes/AccountNoteEdit.jsx","components/relations/accounts/orders/AccountOrdersBase.jsx","components/relations/accounts/orders/queries.js","components/relations/accounts/orders/AccountOrderDelete.jsx","components/relations/accounts/orders/AccountOrders.jsx","components/relations/accounts/products/queries.js","components/relations/accounts/products/AccountProducts.jsx","components/ui/CSStoreCard.jsx","components/relations/accounts/products/AccountProductAdd.jsx","components/relations/accounts/quotes/queries.js","components/relations/accounts/quotes/AccountQuotesBase.jsx","components/relations/accounts/quotes/AccountQuotes.jsx","components/relations/accounts/quotes/AccountQuoteAddForm.jsx","components/relations/accounts/quotes/AccountQuoteAdd.jsx","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTicketsBase.jsx","components/schedule/events/tickets/customers/queries.js","components/relations/accounts/schedule_event_tickets/queries.js","components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets.jsx","components/relations/accounts/subscriptions/queries.js","components/relations/accounts/subscriptions/AccountSubscriptions.jsx","components/relations/accounts/subscriptions/yupSchema.js","components/relations/accounts/subscriptions/AccountSubscriptionForm.jsx","components/relations/accounts/subscriptions/AccountSubscriptionAdd.jsx","components/ui/CardTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditTabs.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit.jsx","components/relations/accounts/subscriptions/edit/alt_prices/queries.js","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBaseBase.jsx","components/relations/accounts/subscriptions/edit/AccountSubscriptionEditListBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceDelete.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices.jsx","components/relations/accounts/subscriptions/edit/alt_prices/yupSchema.js","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceBase.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceForm.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd.jsx","components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit.jsx","components/relations/accounts/subscriptions/edit/blocks/queries.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockDelete.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks.jsx","components/relations/accounts/subscriptions/edit/blocks/yupSchema.js","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockBase.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockForm.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd.jsx","components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit.jsx","components/relations/accounts/subscriptions/edit/credits/queries.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditDelete.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits.jsx","components/relations/accounts/subscriptions/edit/credits/yupSchema.js","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditBase.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAddForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEditForm.jsx","components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit.jsx","components/relations/accounts/subscriptions/edit/invoices/queries.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceDelete.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices.jsx","components/relations/accounts/subscriptions/edit/invoices/yupSchema.js","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddBase.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAddForm.jsx","components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/queries.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseDelete.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses.jsx","components/relations/accounts/subscriptions/edit/pauses/yupSchema.js","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseBase.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseForm.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd.jsx","components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit.jsx","components/relations/accounts/instructor_profile/queries.js","components/relations/accounts/instructor_profile/yupSchema.js","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfileForm.jsx","components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile.jsx","components/relations/b2b/tools.js","components/relations/b2b/RelationsB2BBase.jsx","components/relations/b2b/queries.js","components/relations/b2b/RelationsB2B.jsx","components/relations/b2b/RelationB2BAddForm.jsx","components/relations/b2b/RelationsB2BAdd.jsx","components/relations/b2b/RelationsB2BEditMenu.jsx","components/relations/b2b/RelationsB2BEditBase.jsx","components/relations/b2b/RelationsB2BEditForm.jsx","components/relations/b2b/RelationsB2BEdit.jsx","components/relations/b2b/invoices/queries.js","components/relations/b2b/invoices/RelationsB2BInvoices.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAddForm.jsx","components/relations/b2b/invoices/RelationsB2BInvoiceAdd.jsx","components/schedule/home/ScheduleHome.jsx","components/ui/ButtonListWeekChooser.jsx","components/schedule/classes/ScheduleClassesFilter.jsx","components/schedule/classes/ScheduleClassesBase.jsx","components/schedule/classes/ScheduleClasses.jsx","components/schedule/classes/yupSchema.js","components/ui/CSTimePicker.jsx","components/schedule/classes/ScheduleClassForm.jsx","components/schedule/classes/ScheduleClassAddBase.jsx","components/schedule/classes/ScheduleClassAdd.jsx","components/schedule/classes/all/edit/queries.js","components/schedule/classes/all/ClassEditMenu.jsx","components/schedule/classes/all/ClassEditBaseBase.jsx","components/schedule/classes/all/tools.js","components/schedule/classes/all/ClassEditBase.jsx","components/schedule/classes/all/edit/ScheduleClassEditAll.jsx","components/schedule/classes/all/ClassEditBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollments.jsx","queries/accounts/account_search_queries.js","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentBack.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollSubscriptions.jsx","components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions.jsx","components/ui/FormHelp.jsx","components/schedule/classes/all/classpasses/ScheduleClassClasspassForm.jsx","components/schedule/classes/all/classpasses/yupSchema.js","components/schedule/classes/all/classpasses/queries.js","components/schedule/classes/all/classpasses/ScheduleClassClasspasses.jsx","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptionForm.jsx","components/schedule/classes/all/subscriptions/yupSchema.js","components/schedule/classes/all/subscriptions/queries.js","components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions.jsx","components/schedule/classes/all/instructors/queries.js","components/schedule/classes/all/instructors/ScheduleClassInstructors.jsx","components/schedule/classes/all/instructors/yupSchema.js","components/schedule/classes/all/instructors/ScheduleClassInstructorForm.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorBack.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorAdd.jsx","components/schedule/classes/all/instructors/ScheduleClassInstructorEdit.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceSearch.jsx","components/schedule/classes/class/ScheduleClassBack.jsx","components/schedule/classes/class/ClassMenu.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceBaseBase.jsx","components/schedule/classes/class/tools.js","components/schedule/classes/class/attendance/ScheduleClassAttendanceBase.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendanceDelete.jsx","components/schedule/classes/class/attendance/ScheduleClassAttendance.jsx","components/schedule/classes/class/ScheduleClassEditBase.jsx","components/schedule/classes/class/attendance_chart/queries.js","components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart.jsx","components/schedule/classes/class/book/ScheduleClassBookBack.jsx","components/schedule/classes/class/book/queries.js","components/schedule/classes/class/book/tools.js","components/schedule/classes/class/book/ScheduleClassBookClasspassBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookClasspasses.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptionBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookSubscriptions.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceBtn.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceDropin.jsx","components/schedule/classes/class/book/ScheduleClassBookPriceTrial.jsx","components/schedule/classes/class/book/ScheduleClassBook.jsx","components/schedule/classes/class/edit/queries.js","components/schedule/classes/class/edit/yupSchema.js","components/schedule/classes/class/edit/ScheduleClassEditForm.jsx","components/schedule/classes/class/edit/ScheduleClassWeeklyOTCDelete.jsx","components/schedule/classes/class/edit/ScheduleClassEdit.jsx","components/schedule/classes/all/prices/queries.js","components/schedule/classes/all/prices/ScheduleClassPriceDelete.jsx","components/schedule/classes/all/prices/ScheduleClassPrices.jsx","components/schedule/classes/all/prices/ScheduleClassPriceForm.jsx","components/schedule/classes/all/prices/ScheduleClassPriceBack.jsx","components/schedule/classes/all/prices/ScheduleClassPriceAdd.jsx","components/schedule/classes/all/prices/ScheduleClassPriceEdit.jsx","components/schedule/events/ScheduleEventsBase.jsx","components/schedule/events/queries.js","components/schedule/events/tools.js","components/schedule/events/ScheduleEventArchive.jsx","components/schedule/events/ScheduleEvents.jsx","components/schedule/events/yupSchema.js","components/schedule/events/ScheduleEventForm.jsx","components/schedule/events/ScheduleEventAdd.jsx","components/schedule/events/edit/ScheduleEventEditMenu.jsx","components/schedule/events/edit/ScheduleEventEditBaseBase.jsx","components/schedule/events/edit/ScheduleEventEditBase.jsx","components/schedule/events/edit/ScheduleEventEdit.jsx","components/schedule/events/activities/queries.js","components/schedule/events/edit/ScheduleEventEditListBase.jsx","components/schedule/events/activities/ScheduleEventActivityDelete.jsx","components/schedule/events/activities/ScheduleEventActivities.jsx","components/schedule/events/activities/yupSchema.js","components/schedule/events/activities/ScheduleEventActivityBack.jsx","components/schedule/events/activities/ScheduleEventActivityForm.jsx","components/schedule/events/activities/ScheduleEventActivityAdd.jsx","components/schedule/events/activities/ScheduleEventActivityTabs.jsx","components/schedule/events/activities/ScheduleEventActivityEditBase.jsx","components/schedule/events/activities/ScheduleEventActivityEdit.jsx","components/schedule/events/activities/attendance/queries.js","components/schedule/events/activities/attendance/ScheduleEventActivityAttendanceBase.jsx","components/schedule/events/activities/attendance/ScheduleEventActivityAttendance.jsx","components/schedule/events/earlybirds/queries.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdDelete.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirds.jsx","components/schedule/events/earlybirds/yupSchema.js","components/schedule/events/earlybirds/ScheduleEventEarlybirdForm.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd.jsx","components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit.jsx","components/schedule/events/media/queries.js","components/schedule/events/media/ScheduleEventMediaDelete.jsx","components/schedule/events/media/ScheduleEventMedia.jsx","components/schedule/events/media/yupSchema.js","components/schedule/events/media/ScheduleEventMediaBack.jsx","components/schedule/events/media/ScheduleEventMediaForm.jsx","components/schedule/events/media/ScheduleEventMediaAdd.jsx","components/schedule/events/media/ScheduleEventMediaEditBase.jsx","components/schedule/events/media/ScheduleEventMediaEdit.jsx","components/schedule/events/subscription_group_discounts/queries.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountDelete.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts.jsx","components/schedule/events/subscription_group_discounts/yupSchema.js","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountForm.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd.jsx","components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit.jsx","components/schedule/events/tickets/queries.js","components/schedule/events/tickets/ScheduleEventTicketDelete.jsx","components/ui/BadgeSoldOut.jsx","components/schedule/events/tickets/ScheduleEventTickets.jsx","components/schedule/events/tickets/yupSchema.js","components/schedule/events/tickets/ScheduleEventTicketBack.jsx","components/schedule/events/tickets/ScheduleEventTicketForm.jsx","components/schedule/events/tickets/ScheduleEventTicketAdd.jsx","components/schedule/events/tickets/ScheduleEventTicketTabs.jsx","components/schedule/events/tickets/ScheduleEventTicketEditBase.jsx","components/schedule/events/tickets/ScheduleEventTicketEdit.jsx","components/schedule/events/tickets/activities/queries.js","components/schedule/events/tickets/activities/yupSchema.js","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivityForm.jsx","components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities.jsx","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers.jsx","components/schedule/events/tickets/customers/tools.js","components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch.jsx","components/schedule/shifts/tools.js","components/schedule/shifts/ScheduleShiftsFilter.jsx","components/schedule/shifts/ScheduleShiftsBase.jsx","components/schedule/shifts/queries.js","components/schedule/shifts/ScheduleShifts.jsx","components/schedule/shifts/yupSchema.js","components/schedule/shifts/ScheduleShiftForm.jsx","components/schedule/shifts/ScheduleShiftAddBase.jsx","components/schedule/shifts/ScheduleShiftAdd.jsx","components/schedule/shifts/all/edit/queries.js","components/schedule/shifts/all/ShiftEditBack.jsx","components/schedule/shifts/all/ShiftEditMenu.jsx","components/schedule/shifts/all/ShiftEditBaseBase.jsx","components/schedule/shifts/all/ShiftEditBase.jsx","components/schedule/shifts/all/tools.js","components/schedule/shifts/all/edit/ScheduleShiftEditAll.jsx","components/schedule/shifts/shift/edit/queries.js","components/schedule/shifts/shift/edit/ScheduleShiftEditForm.jsx","components/schedule/shifts/shift/ScheduleShiftBack.jsx","components/schedule/shifts/shift/ScheduleShiftEditBase.jsx","components/schedule/shifts/shift/edit/ScheduleShiftWeeklyOTCDelete.jsx","components/schedule/shifts/shift/edit/ScheduleShiftEdit.jsx","components/schedule/shifts/shift/tools.js","components/schedule/shifts/all/employees/queries.js","components/schedule/shifts/all/employees/ScheduleShiftEmployees.jsx","components/schedule/shifts/all/employees/yupSchema.js","components/schedule/shifts/all/employees/ScheduleShiftEmployeeForm.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeBack.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd.jsx","components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit.jsx","components/SiteWrapperSelfCheckin.js","components/selfcheckin/SelfCheckinBase.jsx","components/selfcheckin/Checkin/queries.js","components/selfcheckin/Checkin/tools.js","components/selfcheckin/Checkin/Checkin.jsx","components/selfcheckin/BookingOptions/queries.js","components/selfcheckin/BookingOptions/BookingOptions.jsx","components/selfcheckin/Locations/queries.js","components/selfcheckin/Locations/Locations.jsx","components/selfcheckin/LocationClasses/queries.js","components/selfcheckin/LocationClasses/LocationClasses.jsx","components/settings/queries.js","components/settings/SettingsBack.jsx","components/settings/SettingsBase.jsx","components/settings/about/SettingsAbout.jsx","components/settings/diagnostics/SettingsDiagnostics.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccountsForm.jsx","components/settings/finance/bank_accounts/SettingsFinanceBankAccounts.jsx","components/settings/finance/currency/SettingsFinanceCurrencyForm.jsx","components/settings/finance/currency/SettingsFinanceCurrency.jsx","components/settings/general/date_time/yupSchema.js","components/settings/general/date_time/SettingsGeneralDateTimeForm.jsx","components/settings/general/date_time/SettingsGeneralDateTime.jsx","components/settings/general/system/SettingsGeneralSystemForm.jsx","components/settings/general/system/SettingsGeneralSystem.jsx","components/settings/home/SettingsHome.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimpForm.jsx","components/settings/integration/mailchimp/SettingsIntegrationMailChimp.jsx","components/settings/integration/mollie/SettingsIntegrationMollieForm.jsx","components/settings/integration/mollie/SettingsIntegrationMollieCreateAccount.jsx","components/settings/integration/mollie/SettingsIntegrationMollie.jsx","components/settings/mail/mailchimp_lists/queries.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListsBase.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListDelete.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists.jsx","components/settings/mail/mailchimp_lists/yupSchema.js","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListForm.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd.jsx","components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit.jsx","components/settings/mail/notifications/queries.js","components/settings/mail/notifications/SettingsMailNotificationsBase.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonDeleteAccount.jsx","components/settings/mail/notifications/SettingsMailNotifications.jsx","components/settings/mail/notifications/SettingsMailNotificationButtonAddAccount.jsx","components/ui/SearchAccounts.jsx","components/settings/mail/notifications/SettingsMailNotificationsAddAccount.jsx","components/settings/mail/templates/SettingsMailTemplatesBase.jsx","components/settings/mail/templates/queries.js","components/settings/mail/templates/SettingsMailTemplates.jsx","components/settings/mail/templates/SettingsMailTemplateEditBase.jsx","components/settings/mail/templates/SettingsMailTemplateEditForm.jsx","components/settings/mail/templates/SettingsMailTemplateEdit.jsx","components/settings/mail/templates/tools.js","components/settings/shop/account_profiles/SettingsShopAccountProfileForm.jsx","components/settings/shop/account_profiles/SettingsShopAccountProfile.jsx","components/settings/shop/features/yupSchema.js","components/settings/shop/features/SettingsShopFeaturesForm.jsx","components/settings/shop/features/SettingsShopFeatures.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBookingForm.jsx","components/settings/workflow/class_booking/SettingsWorkflowClassBooking.jsx","components/settings/workflow/shop/SettingsWorkflowShopForm.jsx","components/settings/workflow/shop/SettingsWorkflowShop.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPausesForm.jsx","components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses.jsx","components/settings/workflow/trial/SettingsWorkflowTrialForm.jsx","components/settings/workflow/trial/SettingsWorkflowTrial.jsx","components/shop/account/home/ShopAccountHomeBase.jsx","components/shop/account/home/ShopAccountHomeButton.jsx","components/shop/account/home/ShopAccountHome.jsx","components/shop/tools.js","components/shop/account/class_cancel/queries.js","components/shop/account/class_cancel/ShopAccountClassCancelBase.jsx","components/shop/account/class_cancel/ShopAccountClassCancel.jsx","components/shop/account/class_uncancel/queries.js","components/shop/account/class_uncancel/ShopAccountClassUnCancelBase.jsx","components/shop/account/class_uncancel/ShopAccountClassUnCancel.jsx","components/shop/checkout/class_info/queries.js","components/shop/checkout/class_info/ShopCheckoutClassInfo.jsx","components/shop/account/class_info/ShopAccountClassInfoBase.jsx","components/shop/account/class_info/ShopAccountClassInfo.jsx","components/shop/account/classpasses/queries.js","components/shop/account/ShopAccountBack.jsx","components/shop/account/classpasses/ShopAccountClasspassesBase.jsx","components/shop/account/classpasses/ShopAccountClasspasses.jsx","components/shop/account/ShopAccountProfileBase.jsx","components/shop/account/event_tickets/ShopAccountEventTickets.jsx","components/shop/account/invoice_payment/queries.js","components/shop/account/invoice_payment/ShopAccountInvoicePaymentBase.jsx","components/shop/account/invoice_payment/ShopAccountInvoicePayment.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatusBase.jsx","components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus.jsx","components/shop/account/invoices/queries.js","components/shop/account/invoices/ShopAccountInvoicesBase.jsx","components/shop/account/invoices/ShopAccountInvoices.jsx","components/shop/account/invoice/queries.js","components/shop/account/invoice/ShopAccountInvoiceBase.jsx","components/shop/account/invoice/ShopAccountInvoice.jsx","components/shop/account/mailing_lists/queries.js","components/shop/account/mailing_lists/ShopAccountMailingListsBase.jsx","components/shop/account/mailing_lists/ShopAccountMailingListCard.jsx","components/shop/account/mailing_lists/ShopAccountMailingLists.jsx","components/shop/account/orders/queries.js","components/shop/account/orders/ShopAccountOrdersBase.jsx","components/shop/account/orders/tools.js","components/shop/account/orders/ShopAccountOrders.jsx","components/shop/account/orders/ShopAccountOrderCancel.jsx","components/shop/account/profile/queries.js","components/shop/account/profile/ShopAccountProfileBtnDownloadData.jsx","components/shop/account/profile/ShopAccountProfileBase.jsx","components/shop/account/profile/ShopAccountProfileForm.jsx","components/shop/account/profile/yupSchema.js","components/shop/account/profile/ShopAccountProfile.jsx","components/shop/account/subscriptions/queries.js","components/shop/account/subscriptions/ShopAccountSubscriptionsBase.jsx","components/shop/account/subscriptions/ShopAccountSubscriptions.jsx","components/shop/account/subscriptions/credits/queries.js","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCreditsBase.jsx","components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits.jsx","components/shop/classes/book/ShopClassBookBack.jsx","components/shop/classes/book/ShopClassBookBase.jsx","components/shop/classes/book/ShopClassBookClasspassBtn.jsx","components/shop/classes/book/ShopClassBookClasspasses.jsx","components/shop/classes/book/ShopClassBookSubscriptionBtn.jsx","components/shop/classes/book/ShopClassBookSubscriptions.jsx","components/shop/classes/book/ShopClassBookPriceBtn.jsx","components/shop/classes/book/ShopClassBookPriceDropin.jsx","components/shop/classes/book/ShopClassBookPriceTrial.jsx","components/shop/classes/book/queries.js","components/shop/classes/book/ShopClassBook.jsx","components/shop/classes/booked/ShopClassBookedBase.jsx","components/shop/queries.js","components/shop/classes/booked/ShopClassBooked.jsx","components/shop/classes/schedule/ShopClassesScheduleBase.jsx","components/shop/classes/schedule/tools.js","components/shop/classes/schedule/ShopClassesScheduleFilter.jsx","components/shop/classes/schedule/ShopClassesScheduleButtonBook.jsx","components/shop/classes/schedule/ShopClassesSchedule.jsx","components/shop/contact/ShopContactBase.jsx","components/shop/contact/ShopContact.jsx","components/shop/events/ShopEventsBase.jsx","components/shop/events/queries.js","components/shop/events/ShopEvents.jsx","components/shop/event/ShopEventBase.jsx","components/shop/event/ShopEventTicketPricingCard.jsx","components/shop/event/queries.js","components/shop/event/ShopEvent.jsx","components/shop/event_ticket/ShopEventTicketBase.jsx","tools/cs_django_links.js","components/shop/ShopCheckoutForm.jsx","components/shop/event_ticket/queries.js","components/shop/event_ticket/ShopEventTicket.jsx","components/shop/home/queries.js","components/shop/home/ShopHomeBase.jsx","components/shop/home/ShopHome.jsx","components/shop/checkout/payment/ShopCheckoutPaymentBase.jsx","components/shop/checkout/queries.js","components/shop/checkout/order_summary/ShopCheckoutOrderSummary.jsx","components/shop/checkout/payment/queries.js","components/shop/checkout/payment/ShopCheckoutPayment.jsx","components/shop/checkout/complete/ShopCheckoutCompleteBase.jsx","components/shop/checkout/complete/ShopCheckoutComplete.jsx","components/shop/account/classes/queries.js","components/shop/account/classes/ShopAccountClassesBase.jsx","components/shop/account/classes/ShopAccountClasses.jsx","components/shop/classpasses/ShopClasspassesBase.jsx","components/shop/classpass/ShopClasspassPricingCard.jsx","components/shop/classpasses/queries.js","components/shop/classpasses/ShopClasspasses.jsx","components/shop/classpass/ShopClasspassBase.jsx","components/shop/classpass/queries.js","components/shop/classpass/ShopClasspass.jsx","components/shop/subscriptions/ShopSubscriptionsBase.jsx","components/shop/subscription/ShopSubscriptionPricingCard.jsx","components/shop/subscriptions/queries.js","components/shop/subscriptions/ShopSubscriptions.jsx","components/shop/subscription/CheckoutCardMollie.jsx","components/shop/subscription/CheckoutCardDirectDebitAccountInfoRequired.jsx","components/shop/subscription/CheckoutCardBankAccountRequired.jsx","components/shop/subscription/CheckoutCardDirectDebitForm.jsx","components/shop/subscription/yupSchemaDirectDebit.js","components/shop/subscription/CheckoutCardDirectDebit.jsx","components/shop/subscription/ShopSubscriptionBase.jsx","components/shop/subscription/queries.js","components/shop/subscription/ShopSubscription.jsx","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivatedBase.jsx","components/shop/subscription_directdebit_activated/queries.js","components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated.jsx","components/user/password/yupSchema.js","components/user/password/UserPasswordChangeForm.jsx","components/ui/CSStandaloneFormPage.jsx","components/user/password/UserPasswordChange.jsx","components/user/login/UserLoginForm.jsx","components/user/login/UserLogin.jsx","components/user/login/UserLoginRequired.jsx","components/user/login/UserLogout.jsx","components/user/session/UserSessionExpired.jsx","components/user/welcome/UserWelcome.jsx","components/Error404.js","components/shop/account/bank_account/queries.js","components/shop/account/bank_account/ShopAccountBankAccountForm.jsx","components/shop/account/bank_account/yupSchema.js","components/shop/account/bank_account/ShopAccountBankAccount.jsx","AppRoot.js","App.js","serviceWorker.js","index.js"],"names":["resources","en_US","common","console","log","i18n","use","LanguageDetector","initReactI18next","init","lng","fallbackLng","ns","defaultNS","debug","keySeparator","interpolation","escapeValue","TOKEN_AUTH","gql","TOKEN_REFRESH","TOKEN_COOKIE_DELETE","TOKEN_REFRESH_COOKIE_DELETE","UPDATE_ACCOUNT_PASSWORD","cs_error_codes","USER_NOT_LOGGED_IN","cs_local_storage_keys","AUTH_TOKEN","AUTH_TOKEN_EXP","AUTH_TOKEN_ORIGIAT","AUTH_REFRESH_TOKEN","AUTH_REFRESH_TOKEN_EXP","AUTH_LOGIN_NEXT","FINANCE_EXPENSES_FILTER_DATE_FROM","FINANCE_EXPENSES_FILTER_DATE_UNTIL","FINANCE_EXPENSES_FILTER_SUPPLIER","FINANCE_INVOICES_FILTER_DATE_FROM","FINANCE_INVOICES_FILTER_DATE_UNTIL","FINANCE_INVOICES_FILTER_SEARCH","FINANCE_INVOICES_FILTER_STATUS","FINANCE_INVOICES_EDIT_RETURN","FINANCE_ORDERS_FILTER_STATUS","FINANCE_QUOTES_EDIT_RETURN","FINANCE_QUOTES_FILTER_STATUS","FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE","INSIGHT_CLASSPASSES_YEAR","INSIGHT_REVENUE_YEAR","INSIGHT_SUBSCRIPTIONS_YEAR","INSIGHT_TRIALPASSES_YEAR","INSIGHT_TRIALPASSES_MONTH","ORGANIZATION_CLASSTYPES_ARCHIVED","RELATIONS_ACCOUNTS_FILTER_TYPE","RELATIONS_ACCOUNTS_SEARCH","RELATIONS_ACCOUNTS_IS_ACTIVE","RELATIONS_ACCOUNT_NOTES_NOTE_TYPE","RELATIONS_ACCOUNT_PROFILE_RETURN","RELATIONS_BUSINESSES_EDIT_RETURN","RELATIONS_BUSINESSES_SHOW_ARCHIVE","RELATIONS_BUSINESSES_SEARCH","SCHEDULE_APPOINTMENTS_DATE_FROM","SCHEDULE_APPOINTMENTS_DATE_UNTIL","SCHEDULE_APPOINTMENTS_ORDER_BY","SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE","SCHEDULE_APPOINTMENTS_FILTER_LOCATION","SCHEDULE_CLASSES_BOOK_RETURN","SCHEDULE_CLASSES_DATE_FROM","SCHEDULE_CLASSES_DATE_UNTIL","SCHEDULE_CLASSES_ORDER_BY","SCHEDULE_CLASSES_FILTER_CLASSTYPE","SCHEDULE_CLASSES_FILTER_INSTRUCTOR","SCHEDULE_CLASSES_FILTER_LEVEL","SCHEDULE_CLASSES_FILTER_LOCATION","SCHEDULE_CLASSES_ENROLLMENT_SEARCH","SCHEDULE_CLASSES_ENROLLMENT_RETURN","SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH","SCHEDULE_EVENTS_ARCHIVED","SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH","SCHEDULE_SHIFTS_DATE_FROM","SCHEDULE_SHIFTS_DATE_UNTIL","SCHEDULE_SHIFTS_ORDER_BY","SCHEDULE_SHIFTS_FILTER_SHIFT","SCHEDULE_SHIFTS_FILTER_LOCATION","SELFCHECKIN_CHECKIN_SEARCH","SHOP_ACCOUNT_BANK_ACCOUNT_NEXT","SHOP_ACCOUNT_PROFILE_NEXT","SHOP_CLASSES_DATE_FROM","SHOP_CLASSES_DATE_UNTIL","SHOP_CLASSES_ORDER_BY","SHOP_CLASSES_FILTER_CLASSTYPE","SHOP_CLASSES_FILTER_INSTRUCTOR","SHOP_CLASSES_FILTER_LEVEL","SHOP_CLASSES_FILTER_LOCATION","CSAuth","login","tokenData","localStorage","setItem","CSLS","payload","exp","origIat","refreshExpiresIn","removeItem","updateTokenInfo","refreshTokenData","cleanup","warn","logout","arguments","length","undefined","this","GET_APP_SETTINGS_QUERY","UPDATE_APP_SETTINGS","GET_ORGANIZATION_QUERY","UPDATE_ORGANIZATION","withTranslation","_ref","t","urlLogo","children","_jsx","Page","className","Container","Grid","Row","_jsxs","src","alt","ToastContainer","autoClose","transition","Slide","CSStandalonePageWide","Dimmer","active","loader","AppSettingsContext","React","createContext","AppSettingsProvider","Provider","Consumer","OrganizationContext","OrganizationProvider","GET_SHOP_FEATURES_QUERY","UPDATE_SHOP_FEATURES","getNavBarItems","loading","error","data","shopFeatures","systemFeatureShop","items","push","value","to","icon","LinkComponent","withRouter","NavLink","useExact","subscriptions","classpasses","classes","events","refreshTokenExp","getItem","accountTitle","accountLink","Date","now","match","history","useQuery","organization","useContext","CSStandalonePageLoader","headerImageUrl","imageURL","urlLogoShopHeader","getHeaderImageUrl","Site","Wrapper","headerProps","href","navItems","Nav","Item","type","user","instructor","employee","Link","Button","outline","size","color","navProps","itemsObjects","routerContextComponentType","RouterContextProvider","footerProps","copyright","target","rel","getFullYear","nav","Col","auto","checkoutProgress","color_order","color_payment","color_complete","Tag","List","addOn","Icon","name","returnUrl","title","subTitle","pageHeaderOptions","SiteWrapperShop","Header","ButtonBack","md","ShopCheckoutProgress","ShopBase","CookiePolicyBase","Card","Body","capitalize","word","lower","toLowerCase","charAt","toUpperCase","slice","get_list_query_variables","orderBy","organizationClasstype","organizationLevel","organizationLocation","queryVars","dateFrom","dateUntil","represent_instructor","role","badge","Badge","Fragment","represent_class_status","status","StatusIcon","get_class_messages","description","holiday","holidayName","GET_USER","get_all_permissions","permissions","groups","edges","edge_index","group_edge","node","group_node","permission_index","permission_edge","codename_split","codename","split","Set","add","has_permission","permission","resource","you_shall_not_pass","has","hideLoading","check_permission","GET_USER_PROFILE","GET_BACKEND_ANNOUNCEMENTS_QUERY","avatarURL","urlImageThumbnailSmall","accountDropdown","firstName","lastName","options","isDivider","SiteWrapper","timeFormat","timeFormatMoment","loadingUser","errorUser","dataUser","skip","variables","accountId","moment","format","fetchPolicy","HomeHomeBase","announcements","organizationAnnouncements","upcomingClasses","i","scheduleClasses","cards","deck","map","_ref2","dangerouslySetInnerHTML","__html","DOMPurify","sanitize","content","v4","_ref3","date","_ref4","scheduleItemId","frequencyType","organizationLocationRoom","timeStart","timeEnd","spaces","countAttendingAndBooked","xs","sm","HasPermissionWrapper","link","linkTitle","block","params","AutomationHomeItemButton","ContentCard","Component","constructor","handleOnScroll","scrollTop","document","documentElement","body","scrollHeight","clientHeight","window","innerHeight","Math","ceil","pageInfo","props","hasNextPage","onLoadMore","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","render","cardTitle","headerContent","isLoadingMore","cardTabs","hasCardBody","Title","Footer","onClick","defaultProps","f","GET_TASK_RESULT_QUERY","showNewTask","AutomationBack","dateTimeFormatMoment","fetchMore","taskName","pollInterval","AutomationAccountSubscriptionCreditsBase","taskResults","djangoCeleryResultTaskResults","after","endCursor","updateQuery","previousResult","fetchMoreResult","newEdges","__typename","Table","ColHeader","AutomationTaskResultStatus","dateDone","taskKwargs","result","AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA","Yup","shape","subscriptionYear","required","positive","min","max","subscriptionMonth","isSubmitting","errors","FoForm","Form","Group","label","Field","autoComplete","ErrorMessage","component","disabled","ADD_TASK","addTask","useMutation","Formik","initialValues","getMonth","validationSchema","onSubmit","values","setSubmitting","input","month","year","refetchQueries","query","then","toast","success","position","POSITION","BOTTOM_RIGHT","catch","AutomationAccountSubscriptionCreditForm","AutomationAccountSubscriptionInvoicesBase","AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA","invoiceDate","AutomationAccountSubscriptionInvoicesForm","AutomationAccountSubscriptionMollieCollectionBase","AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA","AutomationAccountSubscriptionMollieCollectionForm","FinanceHome","super","linkTitleView","lg","HomeItemButton","GET_COSTCENTERS_QUERY","GET_COSTCENTER_QUERY","ADD_COSTCENTER","UPDATE_COSTCENTER","ARCHIVE_COSTCENTER","addUrl","buttonText","showBack","ButtonAdd","archived","setArchived","useState","refetch","archiveCostcenter","headerOptions","Options","FinanceCostCentersBase","costcenters","financeCostcenters","code","id","prefix","COSTCENTER_SCHEMA","addCostcenter","parseInt","updateCostcenter","initialData","financeCostcenter","url","showListButtons","ButtonExport","refreshTokenAndOpenExportLinkInNewTab","doTokenRefresh","exportUrl","refreshToken","dataurl","createElement","appendChild","click","removeChild","download","protectedMediaUrl","showLabel","RootComponent","confirm_action","msgConfirm","msgDescription","msgSuccess","actionFunction","functionVariables","confirmAlert","customUI","onClose","duplicateFinanceExpense","financeExpenseId","financeExpense","actionFunctionVariables","buttonClass","buttonIcon","buttonTextColor","GET_EXPENSES_QUERY","GET_EXPENSE_QUERY","GET_INPUT_VALUES_QUERY","CREATE_FINANCE_EXPENSE","UPDATE_FINANCE_EXPENSE","DUPLICATE_FINANCE_EXPENSE","DELETE_FINANCE_EXPENSE","confirm_delete","deleteFunction","expenses","showColRelation","dateFormat","deleteFinanceExpense","supplier","summary","totalAmountDisplay","percentageDisplay","totalTaxDisplay","financeGlaccount","FileProtectedDownloadTableButton","urlProtectedDocument","ButtonConfirm","expenseNumber","selected","onChange","onBlur","isClearable","placeholderText","DatePicker","todayButton","showMonthDropdown","showYearDropdown","dropdownMode","getDefaultValueDate","lsKey","dateValue","startOf","endOf","lsValue","updateLocalStorageAndRefetch","key","setSupplier","setDateFrom","setDateUntil","s","class","event","businesses","CSDatePicker","dateStr","dateFromDefault","dateUntilDefault","location","FinanceExpensesBase","financeExpenses","FinanceExpensesFilter","vars","FinanceExpensesList","dateToLocalISO","dateToLocalISOTime","getHours","getMinutes","TimeStringToJSDateOBJ","time_string","date_obj","time_split","setHours","setMinutes","getWeekdayNames","getMonthNamesShort","EXPENSE_SCHEMA","amount","tax","percentage","financeTaxRate","customFileInputLabelStyle","whiteSpace","display","overflow","inputData","setFieldTouched","setFieldValue","inputFileName","fileInputLabel","handleFileInputChange","financeGlaccounts","ref","style","ButtonFormSubmit","ButtonFormCancel","createFinanceExpense","fileName","setFileName","useRef","files","inputVars","documentFileName","reader","FileReader","onload","reader_event","b64_enc_file","file","current","readAsDataURL","FinanceExpenseForm","updateFinanceExpense","initialSupplier","initialGlaccount","initialCostcenter","doUpdate","EXPENSES_EXPORT_SCHEMA","dateStart","dateEnd","setDateStart","setDateEnd","prepared","setPrepared","setExportUrl","isoDateStart","isoDateEnd","touched","FinanceExpensesExportForm","GET_GLACCOUNTS_QUERY","GET_GLACCOUNT_QUERY","ADD_GLACCOUNT","UPDATE_GLACCOUNT","ARCHIVE_GLACCOUNT","archiveGlaccount","FinanceGLAccountsBase","glaccounts","GLACCOUNT_SCHEMA","addGlaccount","updateGlaccount","InputSearch","inputValue","createRef","initialValue","initialValueKey","state","submitValue","doneTypingInterval","typingTimer","focus","clearTimeout","onInputKeyUp","setTimeout","setState","onInputChange","placeholder","onKeyUp","bind","onClear","search","invoiceNumberSearch","setStatus","defaultValue","getDefaultValue","FinanceInvoicesFilter","FinanceInvoicesStatus","GET_INVOICES_QUERY","GET_INVOICE_QUERY","UPDATE_INVOICE","CANCEL_AND_CREATE_CREDIT_INVOICE","DELETE_FINANCE_INVOICE","CREATE_INVOICE_ITEM","UPDATE_INVOICE_ITEM","DELETE_INVOICE_ITEM","DELETE_INVOICE_PAYMENT","invoices","showBtnPDF","deleteFinanceInvoice","business","invoiceNumber","Text","Small","trunc","account","fullName","dateSent","dateDue","totalDisplay","balanceDisplay","pathname","FinanceInvoicesBase","financeInvoices","FinanceInvoicesList","INVOICES_EXPORT_SCHEMA","FinanceInvoicesExportForm","addInvoiceItem","financeInvoice","deleteInvoiceItem","productName","handleChange","e","quantity","price","financeTaxRates","rateType","FinanceInvoiceItemDelete","Object","keys","updateInvoiceItem","setTouched","FinanceInvoiceItemEditForm","refetchInvoice","updateItem","updating","setUpdating","DragDropContext","onDragEnd","draggableId","destination","source","reason","droppableId","index","node_id","line_number","lineNumber","updateLineNumber","statusColor","FinanceInvoiceItemAdd","Droppable","provided","snapshot","innerRef","droppableProps","idx","Draggable","draggableProps","dragHandleProps","FinanceInvoiceItemEdit","tinymceBasicConf","resize","menubar","plugins","statusbar","toolbar","Editor","tinymceScriptSrc","textareaName","terms","getContent","footer","submitForm","note","updateInvoice","TabbedCard","initialTab","Tab","FinanceInvoiceEditTermsForm","_ref5","_ref6","_ref7","FinanceInvoiceEditFooterForm","_ref8","_ref9","_ref10","FinanceInvoiceEditNoteForm","subtotalDisplay","taxDisplay","paidDisplay","financePaymentMethod","financePaymentMethods","initialPaymentMethod","FinanceInvoiceEditOptionsForm","address","phone","email","registration","taxRegistration","FinanceInvoiceEditSummaryForm","creditInvoiceId","Alert","creditInvoiceNumber","relationCompany","relationCompanyRegistration","relationCompanyTaxRegistration","relationContactName","relationAddress","relationPostcode","relationCity","relationCountry","deleteInvoicePayment","amountDisplay","paymentAddUrl","payments","onlinePaymentId","FinanceInvoiceEditPaymentDelete","cancelAndCreateCreditInvoice","FinanceInvoiceEditBase","export_url","payment_add_url","shopAccountInvoiceUrl","protocol","host","Dropdown","toggle","triggerContent","cancelAndCreateCreditFinanceInvoice","FinanceInvoiceEditSummary","ml","FinanceInvoiceEditOrganization","FinanceInvoiceEditTo","FinanceInvoiceEditBalance","FinanceInvoiceEditOptions","FinanceInvoiceEditItems","FinanceInvoiceEditAdditional","FinanceInvoiceEditPayments","pageTitle","Label","checked","customTo","_Fragment","FinanceInvoiceEditToBase","initialBusiness","FinanceInvoiceEditToForm","GET_INVOICE_GROUPS_QUERY","GET_INVOICE_GROUP_QUERY","UPDATE_INVOICE_GROUP","ADD_INVOICE_GROUP","ARCHIVE_INVOICE_GROUP","showEditBack","archiveInvoiceGroup","FinanceInvoiceGroupsBase","invoiceGroups","financeInvoiceGroups","nextId","dueAfterDays","prefixYear","autoResetPrefixYear","BadgeBoolean","displayPublic","INVOICE_GROUP_SCHEMA","moreThan","edit","addInvoiceGroup","FinanceInvoiceGroupForm","updateInvoiceGroup","financeInvoiceGroup","INVOICE_GROUP_DEFAULT_SCHEMA","GET_INVOICE_GROUPS_DEFAULTS_QUERY","UPDATE_INVOICE_GROUP_DEFAULT","fetch_default_type_name","itemType","updateDefaultGroup","FinanceInvoiceGroupDefaultsBase","financeInvoiceGroupDefaults","FinanceInvoiceGroupDefaultForm","GET_INVOICE_PAYMENT_QUERY","ADD_FINANCE_INVOICE_PAYMENT","UPDATE_FINANCE_INVOICE_PAYMENT","form_type","invoiceId","invoice_id","queryLoading","queryError","invoice_number","padding","relationName","addInvoicePayment","onCompleted","FinanceInvoicePaymentBase","balance","FinanceInvoicePaymentForm","invoiceQueryLoading","invoiceQueryError","invoiceData","paymentQueryLoading","paymentQueryError","paymentData","updateInvoicePayment","financeInvoicePayment","initialDate","FinanceOrdersFilter","FinanceOrderStatus","GET_ORDERS_QUERY","DELETE_FINANCE_ORDER","deleteOrder","orderNumber","dateTimeFormat","FinanceOrdersBase","orders","financeOrders","createdAt","FinanceOrderDelete","batchType","showAdd","batch_type","GET_PAYMENT_BATCHES_QUERY","GET_PAYMENT_BATCH_QUERY","GET_INPUT_VALUES","ADD_PAYMENT_BATCH","UPDATE_PAYMENT_BATCH","DELETE_PAYMENT_BATCH","deletePaymentBatch","msgEmptyList","FinancePaymentBatchesBase","financePaymentBatches","BadgeFinancePaymentBatchStatus","executionDate","financePaymentBatchCategory","unstyled","get_add_options_collection","get_add_options_payment","FinancePaymentBatchCategory","categoryType","batchId","setDisabled","updateFinancePaymentBatch","sentToBankColor","approvedColor","awaitingApprovalColor","rejectedColor","onClickStatusButton","newStatus","appSettings","FinancePaymentBatchViewBase","financePaymentBatch","includeZeroAmounts","countItems","exports","accountHolder","accountNumber","accountBic","currency","PAYMENT_BATCH_INVOICES_SCHEMA","PAYMENT_BATCH_CATEGORY_SCHEMA","PAYMENT_BATCH_EDIT_SCHEMA","create","category","financePaymentBatchCategories","category_type","batchCategoryType","addFinancePaymentBatch","yupSchema","createFinancePaymentBatch","FinancePaymentCollectionBatchForm","inputValues","showArchive","GET_PAYMENT_BATCH_CATEGORIES_QUERY","GET_PAYMENT_BATCH_CATEGORY_QUERY","ARCHIVE_PAYMENT_BATCH_CATEGORY","archivePaymentBatchCategory","FinancePaymentBatchCategoriesBase","payment_batch_categories","ADD_PAYMENT_BATCH_CATEGORY","addFinancePaymentBatchCategory","FinancePaymentBatchCategoryForm","UPDATE_PAYMENT_BATCH_CATEGORY","paymentBatchCategoryId","updateFinancePaymentBatchCategory","GET_FINANCE_ORDER_QUERY","UPDATE_ORDER","updateOrder","FinanceOrderEditBase","order","financeOrder","deliveryErrorMessage","FinanceOrderEditForm","priceDisplay","message","GET_PAYMENT_METHODS_QUERY","GET_PAYMENT_METHOD_QUERY","ADD_PAYMENT_METHOD","UPDATE_PAYMENT_METHOD","ARCHIVE_PAYMENT_METHOD","archivePaymentMethod","FinancePaymentMethodsBase","paymentMethods","systemMethod","PAYMENT_METHOD_SCHEMA","addPaymentMethod","FinancePaymentMethodForm","updatePaymentMethod","FinanceQuotesFilter","FinanceQuoteStatus","GET_QUOTES_QUERY","GET_QUOTE_QUERY","UPDATE_QUOTE","DELETE_FINANCE_QUOTE","CREATE_QUOTE_ITEM","UPDATE_QUOTE_ITEM","DELETE_QUOTE_ITEM","quotes","deleteFinanceQuote","quoteNumber","dateExpire","FinanceQuotesBase","financeQuotes","FinanceQuotesList","QUOTES_EXPORT_SCHEMA","FinanceQuotesExportForm","addQuoteItem","financeQuote","deleteQuoteItem","FinanceQuoteItemDelete","updateQuoteItem","FinanceQuoteItemEditForm","refetchQuote","FinanceQuoteItemAdd","FinanceQuoteItemEdit","updateQuote","FinanceQuoteEditTermsForm","FinanceQuoteEditFooterForm","FinanceQuoteEditNoteForm","FinanceQuoteEditOptionsForm","FinanceQuoteEditSummaryForm","FinanceQuoteEditBase","FinanceQuoteEditSummary","FinanceQuoteEditOrganization","FinanceQuoteEditTo","FinanceQuoteEditBalance","FinanceQuoteEditOptions","FinanceQuoteEditItems","FinanceQuoteEditAdditional","FinanceQuoteEditToBase","FinanceQuoteEditToForm","GET_QUOTE_GROUPS_QUERY","GET_QUOTE_GROUP_QUERY","UPDATE_QUOTE_GROUP","ADD_QUOTE_GROUP","ARCHIVE_QUOTE_GROUP","archiveQuoteGroup","FinanceQuoteGroupsBase","quoteGroups","financeQuoteGroups","expiresAfterDays","QUOTE_GROUP_SCHEMA","addQuoteGroup","FinanceQuoteGroupForm","updateQuoteGroup","financeQuoteGroup","GET_TAXRATES_QUERY","GET_TAXRATE_QUERY","ADD_TAXRATE","UPDATE_TAXRATE","ARCHIVE_TAXRATE","archiveTaxrate","FinanceTaxRatesBase","taxrates","TAX_RATE_SCHEMA","typeError","addFinanceTaxrate","updateTaxrate","TAX_SUMMARY_SCHEMA","FinanceTaxRatesSummaryFilter","GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY","FinanceTaxRatesSummaryBase","taxRatesSummary","insightFinanceTaxRateSummary","InsightHome","GET_INSIGHT_ACCOUNTS_INACTIVES","GET_INSIGHT_ACCOUNTS_INACTIVE","ADD_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE","DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS","deleteInsightAccountsInactive","InsightInactiveAccountsBase","insightAccountInactives","noActivityAfterDate","countInactiveAccounts","countDeletedInactiveAccounts","created_at","addInsightAccountsInactive","subtract","InsightInactiveAccountsForm","deleteFunctionVariables","pageHeaderButtonList","deleteAccounts","InsightInactiveAccountsViewBase","insightAccountInactive","ButtonDelete","accounts","lastLogin","OPEN_INVOICES_SCHEMA","setDate","FinanceInvoicesOpenOnDateFilter","GET_INSIGHT_FINANCE_OPEN_INVOICES_QUERY","RELATIONS_BUSINESS_EDIT_RETURN","InsightFinanceInvoicesOpenOnDateBase","openInvoices","insightFinanceOpenInvoices","totalOpenOnDateDisplay","FinanceInvoiceStatus","GET_INSIGHT_CLASSPASSES_QUERY","InsightBackHome","previousYear","currentYear","nextYear","export_url_active","export_url_sold","InsightClasspassesBase","monthNames","chartData","insightAccountClasspasses","months","item","monthName","ResponsiveContainer","width","aspect","AreaChart","height","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Area","stroke","colors","fillOpacity","fill","GET_ACCOUNT_SUBSCRIPTIONS_WO_KEYNUMBER_QUERY","InsightKeyNumbersWoSubscriptionBase","accountSubscriptions","organizationSubscription","GET_REVENUE_QUERY","BarChart","Bar","stackId","InsightRevenueBase","InsightRevenueDisplay","insightRevenueTotal","insightRevenueSubscriptions","insightRevenueClasspasses","insightRevenueEventTickets","insightRevenueOther","INSIGHT_INSTRUCTOR_CLASSES_SCHEMA","GET_INSTRUCTORS_QUERY","GET_INSTRUCTORS_CLASSES_MONTH_CLASSES","instructors","getInstructoClassesInMonth","called","calledReport","loadingReport","errorReport","dataReport","useLazyQuery","InsightInstructorClassesMonthBase","InsightInstructorClassesForm","insightInstructorClassesMonth","GET_INSIGHT_SUBSCRIPTIONS_QUERY","export_url_stopped","export_url_paused","export_url_blocked","InsightSubscriptionsBase","insightAccountSubscriptions","LineChart","CartesianGrid","strokeDasharray","Line","GET_TRIALPASSES_QUERY","getListQueryVariables","dateStartFrom","firstDayMonth","getFirstDayMonth","dateStartUntil","getLastDayMonth","listVariables","InsightTrialpassesFilter","InsightTrialpassesBase","accountClasspasses","organizationClasspass","OrganizationHome","ORGANIZATION_SCHEMA","updateOrganization","OrganizationEditBase","OrganizationForm","formTitle","colorBackground","colorText","colorAccent","colorSecondary","OrganizationBrandingBase","GalleryCard","Image","urlLogoLogin","Details","urlLogoInvoice","urlLogoEmail","urlLogoSelfCheckin","brandingColorBackground","brandingColorText","brandingColorAccent","brandingColorSecondary","OrganizationBrandingEditColorsForm","updateField","update_field","logoLoginFileName","logoLogin","logoInvoiceFileName","logoInvoice","logoEmailFileName","logoEmail","logoShopHeaderFileName","logoShopHeader","logoSelfCheckinFileName","logoSelfCheckin","OrganizationBrandingEditForm","GET_ANNOUNCEMENTS_QUERY","GET_ANNOUNCEMENT_QUERY","ADD_ANNOUNCEMENT","UPDATE_ANNOUNCEMENT","DELETE_ANNOUNCEMENT","deleteAnnouncement","OrganizationAnnouncementsBase","displayShop","displayBackend","priority","ANNOUNCEMENT_SCHEMA","addAnnouncement","OrganizationAnnouncementForm","announcementId","updateAnnouncement","organizationAnnouncement","GET_CLASSPASSES_QUERY","GET_CLASSPASS_QUERY","CREATE_CLASSPASS","UPDATE_CLASSPASS","ARCHIVE_CLASSPASS","archiveClasspass","OrganizationClasspassesBase","organizationClasspasses","trialPass","unlimited","validity","validityUnitDisplay","CLASSPASS_SCHEMA","validityUnit","quickStatsAmount","OrganizationClasspassForm","unlimied","createClasspass","updateClasspass","initialTaxRate","GET_CLASSPASS_GROUPS_QUERY","GET_CLASSPASS_GROUP_QUERY","GET_CLASSPASS_GROUP_PASSES_QUERY","ADD_CLASSPASS_GROUP","UPDATE_CLASSPASS_GROUP","DELETE_CLASSPASS_GROUP","ADD_CARD_TO_GROUP","DELETE_CARD_FROM_GROUP","deleteClasspassGroup","OrganizationClasspassesGroupsBase","classpass_groups","organizationClasspassGroups","substring","CLASSPASS_GROUP_SCHEMA","addClasspassGroup","hasExtraSpace","updateClasspassGroup","organizationClasspassGroup","groupId","addCardToGroup","deleteCardFromGroup","passes","group","group_passes","pass_id","GET_CLASSTYPES_QUERY","GET_CLASSTYPE_QUERY","ADD_CLASSTYPE","UPDATE_CLASSTYPE","UPDATE_CLASSTYPE_IMAGE","ARCHIVE_CLASSTYPE","archiveClasstype","OrganizationClasstypesBase","classtypes","organizationClasstypes","Avatar","CLASSTYPE_SCHEMA","urlWebsite","addClasstype","image","updateClasstype","classtypeId","uploadImage","imageFileName","GET_DISCOVERIES_QUERY","GET_DISCOVERY_QUERY","ADD_DISCOVERY","UPDATE_DISCOVERY","ARCHIVE_DISCOVERY","archiveDiscovery","OrganizationDiscoveriesBase","discoveries","organizationDiscoveries","DISCOVERY_SCHEMA","addDiscovery","updateDiscovery","organizationDiscovery","organizationId","organization_id","docTypes","docType","FormatISODateStr","ISODateStr","mediaUrl","GET_DOCUMENTS_QUERY","GET_DOCUMENT_QUERY","ADD_DOCUMENT","UPDATE_DOCUMENT","DELETE_DOCUMENT","deleteOrganizationDocument","confirmDelete","version","documentType","getSubtitle","document_type","OrganizationDocumentsBase","organizationDocuments","ISODateString","FileDownloadTableButton","urlDocument","OrganizationDocumentsDelete","addDocument","updateDocument","organizationDocument","GET_HOLIDAYS_QUERY","GET_HOLIDAY_QUERY","ADD_HOLIDAY","UPDATE_HOLIDAY","DELETE_HOLIDAY","GET_HOLIDAY_LOCATIONS_QUERY","ADD_LOCATION_TO_HOLIDAY","DELETE_LOCATION_FROM_HOLIDAY","deleteHoliday","OrganizationHolidaysBase","holidays","organizationHolidays","organizationLocations","HOLIDAY_SCHEMA","addHoliday","OrganizationHolidayForm","updateHoliday","organizationHoliday","holidayId","addLocationToHoliday","deleteLocationFromHoliday","locations","holiday_locations","locationId","GET_LANGUAGES_QUERY","GET_LANGUAGE_QUERY","ADD_LANGUAGE","UPDATE_LANGUAGE","ARCHIVE_LANGUAGE","archiveLanguage","OrganizationLanguagesBase","languages","organizationLanguages","LANGUAGE_SCHEMA","addLanguage","OrganizationLanguageForm","updateLanguage","organizationLanguage","GET_LOCATIONS_QUERY","GET_LOCATION_QUERY","ADD_LOCATION","UPDATE_LOCATION","ARCHIVE_LOCATION","archiveLocation","OrganizationLocationsBase","LOCATION_SCHEMA","addLocation","updateLocation","GET_LOCATION_ROOMS_QUERY","GET_LOCATION_ROOM_QUERY","ADD_LOCATION_ROOM","UPDATE_LOCATION_ROOM","ARCHIVE_LOCATION_ROOM","location_id","organizationLocationId","archiveLocationRoom","OrganizationLocationRoomsBase","locationRooms","organizationLocationRooms","organizationLocationsRooms","LOCATION_ROOM_SCHEMA","addLocationRoom","OrganizationLocationRoomForm","updateLocationRoom","GET_LEVELS_QUERY","GET_LEVEL_QUERY","ADD_LEVEL","UPDATE_LEVEL","ARCHIVE_LEVEL","archiveLevel","OrganizationLevelsBase","levels","organizationLevels","LEVEL_SCHEMA","addLevel","OrganizationLevelForm","updateLevel","editUrl","GET_ORGANIZATION_PRODUCTS_QUERY","GET_ORGANIZATION_PRODUCT_QUERY","ADD_ORGANIZATION_PRODUCT","UPDATE_ORGANIZATION_PRODUCT","ARCHIVE_ORGANIZATION_PRODUCT","confirm_archive","archiveFunction","archiveFunctionVariables","confirm_unarchive","unArchiveFunction","unArchiveFunctionVariables","archiveProduct","ButtonUnArchive","ButtonArchive","OrganizationProductsBase","products","organizationProducts","ButtonEdit","OrganizationProductArchive","PRODUCT_SCHEMA","addOrganizationProduct","OrganizationProductForm","updateOrganizationProduct","organizationProduct","updateProduct","GET_SHIFTS_QUERY","GET_SHIFT_QUERY","ADD_SHIFT","UPDATE_SHIFT","ARCHIVE_SHIFT","archiveShift","OrganizationShiftsBase","shifts","organizationShifts","SHIFT_SCHEMA","addShift","OrganizationShiftForm","updateShift","organizationShift","GET_SUBSCRIPTIONS_QUERY","GET_SUBSCRIPTION_QUERY","CREATE_SUBSCRIPTION","UPDATE_SUBSCRIPTION","ARCHIVE_SUBSCRIPTION","archiveSubscription","OrganizationSubscriptionsBase","organizationSubscriptions","subscriptionUnitDisplay","priceTodayDisplay","SUBSCRIPTION_SCHEMA","sortOrder","minDuration","subscriptionUnit","creditValidity","reconciliationClasses","termsAndConditions","createSubscription","organizationMembership","OrganizationSubscriptionForm","updateSubscription","initialMembership","GET_SUBSCRIPTION_GROUPS_QUERY","GET_SUBSCRIPTION_GROUP_QUERY","GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY","ADD_SUBSCRIPTION_GROUP","UPDATE_SUBSCRIPTION_GROUP","DELETE_SUBSCRIPTION_GROUP","deleteSubscriptionGroup","OrganizationGroupsSubscriptionsBase","subscription_groups","organizationSubscriptionGroups","SUBSCRIPTION_GROUP_SCHEMA","addSubscriptionGroup","OrganizationSubscriptionsGroupsBase","OrganizationSubscriptionGroupForm","updateSubscriptionGroup","organizationSubscriptionGroup","group_subscriptions","subscriptionId","subscription_id","GET_SUBSCRIPTION_PRICES_QUERY","GET_SUBSCRIPTION_PRICE_QUERY","ADD_SUBSCRIPTION_PRICE","UPDATE_SUBSCRIPTION_PRICE","DELETE_SUBSCRIPTION_PRICE","deleteSubscriptionPrice","OrganizationSubscriptionsPricesBase","subscriptionPrices","organizationSubscriptionPrices","organizationSubscriptionsPrices","SUBSCRIPTION_PRICE_SCHEMA","addSubscriptionPrice","OrganizationSubscriptionPriceForm","updateSubscriptionPrice","organizationSubscriptionPrice","RelationsHome","isActive","customer","searchName","Select","GET_ACCOUNTS_QUERY","GET_ACCOUNT_QUERY","ADD_ACCOUNT","UPDATE_ACCOUNT","UPDATE_ACCOUNT_ACTIVE","DELETE_ACCOUNT","setIsLoadingMore","onError","updateAccountActive","deleteAccount","RelationsAccountsBase","async","subscriptionsLatest","subscription","classpassesLatest","classpass","classesRemainingDisplay","SocialNetworksList","inline","placement","mobile","first_name","last_name","ACCOUNT_SCHEMA","addAccount","createAccount","RelationsAccountForm","ISO_COUNTRY_CODES","dateOfBirth","emergency","postcode","city","country","Code","Name","invoiceToBusiness","keyNumber","avatarSize","Media","profile_active","subscriptions_active","classpasses_active","classes_active","documents_active","tickets_active","instructor_profile_active","orders_active","invoices_active","bank_account_active","notes_active","finance_payment_batch_category_item_active","accepted_documents_active","activeLink","transparent","GroupItem","back","account_id","headerTitle","ProfileCardSmall","ProfileMenu","updateAccount","RelationsAccountProfileBase","gender","input_vars","RelationsAccountProfileForm","updateImage","RelationsAccountProfileImageForm","GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY","acceptedDocuments","accountAcceptedDocuments","RelationsAccountsBack","DocumentType","dateAccepted","clientIp","GET_ACCOUNT_BANK_ACCOUNTS_QUERY","UPDATE_ACCOUNT_BANK_ACCOUNT","GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY","CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE","UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE","DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE","bankAccountId","holder","number","bic","updateAccountBankAccount","deleteAccountBankAccountMandate","RelationsAccountBankAccountBase","accountBankAccount","accountBankAccounts","mandates","RelationsAccountBankAccountForm","reference","signatureDate","bank_account_id","createAccountBankAccountMandate","refrence","RelationsAccountBankAccountMandateForm","mandateId","updateAccountBankAccountMandate","mandate","accountBankAccountMandate","signDate","GET_ACCOUNT_CLASSES_QUERY","GET_SCHEDULE_CLASS_ATTENDANCE_QUERY","GET_SCHEDULE_CLASS_QUERY","DELETE_SCHEDULE_CLASS_ATTENDANCE","UPDATE_SCHEDULE_ITEM_ATTENDANCE","RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE","deleteScheduleItemAttendance","scheduleItem","get_accounts_query_variables","get_attendance_list_query_variables","schedule_item_id","setAttendanceStatus","updateAttendance","setAttendanceRefetching","refetchAccountAttendance","refetchScheduleItemAttendance","class_id","class_date","bookingStatus","awaitRefetchQueries","scheduleItemAttendanceNode","attendanceRefetching","AccountClassesBase","scheduleItemAttendances","BadgeBookingStatus","ScheduleClassAttendanceItemCheckinAndStatus","AccountClassDelete","GET_ACCOUNT","GET_ACCOUNT_ATTENDANCES_QUERY","scheduleClassId","classDate","isPublic","GET_CLASSES_QUERY","GET_CLASS_QUERY","CREATE_CLASS","get_classes_query_variables","searchDate","localStorateKeySearchValue","btnDisableClassesIds","btnDisabledMessage","btnAction","selectedDate","setSelectedDate","renderActionButton","SearchClassesOnDateBtnAttendanceAdd","Search","account2","role2","BadgePublic","AccountClassesBack","SearchClassesOnDate","GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_QUERY","GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY","GET_ACCOUNT_SUBSCRIPTION_QUERY","CREATE_SCHEDULE_ITEM_ENROLLMENT","UPDATE_SCHEDULE_ITEM_ENROLLMENT","DELETE_SCHEDULE_ITEM_ENROLLMENT","GET_ACCOUNT_ENROLLMENTS_QUERY","getAccountsQueryVariables","getEnrollmentsListQueryVariables","dateEnd_Isnull","deleteScheduleItemEnrollment","accountSubscription","weekdayNames","AccountEnrollmentsBase","scheduleItemEnrollments","frequencyInterval","ScheduleClassEnrollmentDelete","SCHEDULE_CLASS_ENROLLMENT_SCHEMA","menuActiveLink","AccountEnrollmentBack","updateScheduleClassEnrollment","scheduleItemEnrollment","ScheduleClassEnrollmentForm","mollieCustomerId","passwordNew","updateAccountPassword","RelationsAccountPasswordForm","RelationsAccountMollieCustomerForm","GET_ACCOUNT_CLASSPASSES_QUERY","GET_ACCOUNT_CLASSPASS_QUERY","CREATE_ACCOUNT_CLASSPASS","UPDATE_ACCOUNT_CLASSPASS","DELETE_ACCOUNT_CLASSPASS","deleteAccountClasspass","nullable","createAccountClasspass","classpassId","accountClasspass","AccountClasspassForm","initialdata","GET_ACCOUNT_CLASSPASS_CLASSES_QUERY","cardTitleWithCardInfo","deleteAccountDocument","accountDocuments","addAccountDocument","AccountDocumentForm","DOCUMENT_SCHEMA","accountDocument","AccountDocumentFormEdit","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY","GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY","CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM","deleteAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsBase","batchCategoryItems","accountFinancePaymentBatchCategoryItems","replace","ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA","addAccountFinancePaymentBatchCategoryItem","AccountFinancePaymentBatchCategoryItemsForm","accountFinancePaymentBatchCategoryItemId","updateAccountFinancePaymentBatchCategoryItem","accountFinancePaymentBatchCategoryItem","GET_ACCOUNT_INVOICES_QUERY","CREATE_ACCOUNT_INVOICE","pageHeader","AccountInvoicesBase","createInvoice","firstInvoiceGroup","createFinanceInvoice","AccountInvoiceAddForm","LoadMoreOnBottomScroll","GET_ACCOUNT_NOTES_QUERY","GET_ACCOUNT_NOTE_QUERY","CREATE_ACCOUNT_NOTE","UPDATE_ACCOUNT_NOTE","DELETE_ACCOUNT_NOTE","noteType","setNoteType","deleteAccountNote","AccountNotesBase","notes","accountNotes","injury","noteBy","addNote","AccountNoteForm","noteId","updateNote","accountNote","GET_ACCOUNT_ORDERS_QUERY","AccountOrdersBase","AccountOrderDelete","GET_ACCOUNT_PRODUCTS_QUERY","CREATE_ACCOUNT_PRODUCT","DELETE_ACCOUNT_PRODUCT","deleteAccountProduct","accountProducts","invoiceItems","subtitle","imgUrl","imgAlt","buttonOnClick","classname","buttonTextAdd","createAccountProduct","CSStoreCard","urlImageThumbnailLarge","GET_ACCOUNT_QUOTES_QUERY","CREATE_ACCOUNT_QUOTE","AccountQuotesBase","createQuote","quoteToBusiness","firstQuoteGroup","createFinanceQuote","AccountQuoteAddForm","GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY","ADD_ACCOUNT_SCHEDULE_EVENT_TICKET","UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET","updateAccountScheduleEventTicket","AccountScheduleEventTicketsBase","accountScheduleEventTickets","scheduleEventTicket","scheduleEvent","cancelled","infoMailSent","GET_ACCOUNT_SUBSCRIPTIONS_QUERY","CREATE_ACCOUNT_SUBSCRIPTION","UPDATE_ACCOUNT_SUBSCRIPTION","DELETE_ACCOUNT_SUBSCRIPTION","deleteAccountSubscription","table","creditTotal","registrationFeePaid","createAccountSubscription","AccountSubscriptionForm","tabs","class_tabs_position","CardTabs","activeTab","credits","AccountSubscriptionEditTabs","AccountSubscriptionEditBaseBase","AccountSubscriptionEditBase","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY","GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","AccountSubscriptionEditListBaseBase","deleteAccountSubscriptionAltPrice","query_vars","AccountSubscriptionEditListBase","accountSubscriptionAltPrices","AccountSubscriptionEditAltPriceDelete","ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE","addSubscriptionAltPrice","AccountSubscriptionEditAltPriceBase","AccountSubscriptionEditAltPriceForm","UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE","updateSubscriptionAltPrice","accountSubscriptionAltPrice","GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY","GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_BLOCK","deleteAccountSubscriptionBlock","accountSubscriptionBlocks","AccountSubscriptionEditBlockDelete","ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_BLOCK","addSubscriptionBlock","AccountSubscriptionEditBlockBase","AccountSubscriptionEditBlockForm","UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK","updateSubscriptionBlock","accountSubscriptionBlock","GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY","GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY","ADD_ACCOUNT_SUBSCRIPTION_CREDIT","UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT","DELETE_ACCOUNT_SUBSCRIPTION_CREDIT","deleteAccountSubscriptionCredit","accountSubscriptionCredits","reconciled","expiration","expired","scheduleItemAttendance","AccountSubscriptionEditCreditDelete","ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA","ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA","addSubscriptionCredit","AccountSubscriptionEditCreditBase","AccountSubscriptionEditCreditAddForm","updateSubscriptionCredit","accountSubscriptionCredit","AccountSubscriptionEditCreditEditForm","GET_FINANCE_INVOICE_ITEM_QUERY","deleteAccountSubscriptionInvoice","financeInvoiceItems","AccountSubscriptionEditInvoiceDelete","ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA","queryData","addFinanceInvoice","AccountSubscriptionEditInvoiceAddBase","financeInvoiceId","AccountSubscriptionEditInvoiceAddForm","GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY","GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY","DELETE_ACCOUNT_SUBSCRIPTION_PAUSE","deleteAccountSubscriptionPause","accountSubscriptionPauses","AccountSubscriptionEditPauseDelete","ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA","ADD_ACCOUNT_SUBSCRIPTION_PAUSE","addSubscriptionPause","AccountSubscriptionEditPauseBase","AccountSubscriptionEditPauseForm","UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE","updateSubscriptionPause","accountSubscriptionPause","GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY","UPDATE_ACCOUNT_INSTRUCTOR_PROFILE","ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA","appointments","education","bio","urlBio","updateAccountInstructorProfile","accountInstructorProfiles","showArchived","GET_BUSINESSES_QUERY","GET_BUSINESS_QUERY","UPDATE_BUSINESS","DELETE_BUSINESS","updateBusiness","deleteBusiness","RelationsB2BBase","vip","show_archive","ADD_BUSINESS","addBusiness","b2b","businessId","createBusiness","RelationsB2BAddForm","business_id","titleB2B","RelationsB2BEditMenu","emailContact","emailBilling","phone2","RelationsB2BEditBase","RelationsB2BEditForm","CREATE_B2B_INVOICE","B2BInvoiceAddForm","ScheduleHome","onClickPrevious","onClickNext","onClickCurrent","showCurrent","selectClass","setLocation","classtype","setClasstype","setInstructor","level","setLevel","tooltip","nextWeekFrom","nextWeekUntil","ButtonListWeekChooser","currentWeekFrom","currentWeekUntil","ScheduleClassesFilter","DELETE_SCHEDULE_CLASS","deleteScheduleClass","ScheduleClassesBase","ItemDivider","badgeType","CLASS_SCHEMA","walkInSpaces","enrollmentSpaces","clearable","showTimeSelect","showTimeSelectOnly","timeIntervals","timeCaption","infoMailEnabled","CSTimePicker","infoMailContent","createScheduleClass","ScheduleClassAddBase","classId","ScheduleClassForm","UPDATE_CLASS","defaultCard","ClassEditMenu","represent_instructor_role","ClassEditBaseBase","initialTimeStart","locationRoom","starttime","isoWeekday","weekdayName","class_edit_all_subtitle","updateScheduleClass","ClassEditBase","menu_activeLink","initialLevelID","initialTimeEnd","setShowCurrent","ButtonAddEnrollment","ClassEditBack","enrollments","countEnrollments","queryEnrollmentsData","setSearchName","accountSubscriptionId","account_subscription_id","nextUrl","addScheduleClassEnrollment","using","ScheduleClassEnrollmentBack","allowed","scheduleClassEnrollmentOptions","ScheduleClassEnrollSubscriptions","shopBook","attend","FormHelp","SCHEDULE_CLASS_CLASSPASS_SCHEMA","GET_SCHEDULE_CLASS_CLASSPASSES_QUERY","UPDATE_SCHEDULE_CLASS_CLASSPASS","updateScheduleClassClasspass","scheduleItemOrganizationClasspassGroups","ScheduleClassClasspassForm","enroll","SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA","GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY","UPDATE_SCHEDULE_CLASS_SUBSCRIPTION","updateScheduleClassSubscription","scheduleItemOrganizationSubscriptionGroups","ScheduleClassSubscriptionForm","GET_SCHEDULE_CLASS_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY","ADD_SCHEDULE_CLASS_INSTRUCTOR","UPDATE_SCHEDULE_CLASS_INSTRUCTOR","DELETE_SCHEDULE_CLASS_INSTRUCTOR","deleteScheduleItemAccount","ButtonAddInstructor","scheduleItemAccounts","SCHEDULE_CLASS_INSTRUCTOR_SCHEMA","ScheduleClassInstructorBack","addScheduleClassInstructor","ScheduleClassInstructorForm","updateScheduleClassInstructor","scheduleItemAccount","initialAccount2","checkedInIds","classStatus","showSearchResults","setShowSearchResults","getAccounts","queryAccountsData","includes","attendance_active","attendancechart_active","edit_active","pageSubTitle","ScheduleClassBack","previousWeek","ClassMenu","class_subtitle","ScheduleClassAttendanceBaseBase","scheduleClass","resendInfoMail","ScheduleClassAttendanceBase","countAttending","countBooked","ScheduleClassAttendanceSearch","ScheduleClassAttendanceDelete","GET_CLASS_ATTENDANCE_COUNT_YEAR","ScheduleClassEditBase","insightClassAttendanceCountYear","weeks","weekName","week","interval","ScheduleClassBookBack","GET_BOOKING_OPTIONS_QUERY","CREATE_SCHEDULE_ITEM_ATTENDANCE","getUrlFromReturnTo","returnTo","createInput","classCheckin","onClickCheckin","ClasspassCheckinButton","blocked","paused","creditsOnDate","SubscriptionCheckinButton","priceDropin","ScheduleClassBookPriceBtn","locationID","priceTrial","listType","scheduleClassBookingOptions","prices","scheduleItemPrices","ScheduleClassBookSubscriptions","ScheduleClassBookClasspasses","organizationClasspassDropin","ScheduleClassBookPriceDropin","organizationClasspassTrial","hasReachedTrialLimit","ScheduleClassBookPriceTrial","GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_CLASS_WEEKLY_OTC","UPDATE_SCHEDULE_CLASS_WEEKLY_OTC","SCHEDULE_CLASS_EDIT_OTC_SCHEMA","notRequired","deleteClassOTC","showDelete","updateScheduleClassWeeklyOTC","scheduleItemWeeklyOtcs","graphQLErrors","ScheduleClassEditForm","ScheduleClassWeeklyOTCDelete","GET_SCHEDULE_ITEM_PRICES_QUERY","GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY","ADD_SCHEDULE_ITEM_PRICE","UPDATE_SCHEDULE_ITEM_PRICE","DELETE_SCHEDULE_ITEM_PRICE","deleteClassPrice","ScheduleClassPriceDelete","ScheduleClassPriceBack","addScheduleClassPrice","ScheduleClassPriceForm","editScheduleClassPrice","initialOrganizationClasspassDropin","initialOrganizationClasspassTrial","scheduleItemPrice","GET_SCHEDULE_EVENTS_QUERY","GET_SCHEDULE_EVENT_QUERY","ARCHIVE_SCHEDULE_EVENT","DUPLICATE_SCHEDULE_EVENT","archiveScheduleEvent","duplicateScheduleEvent","cardHeaderContent","ScheduleEventsBase","scheduleEvents","ScheduleEventArchive","SCHEDULE_EVENT_EDIT_SCHEMA","autoSendInfoMail","instructor2","tagline","preview","CREATE_SCHEDULE_EVENT","createScheduleEvent","autoSentInfoMail","ScheduleEventForm","eventId","event_id","ScheduleEventEditMenu","ScheduleEventEditBaseBase","cardSubTitle","UPDATE_SCHEDULE_EVENT","updateScheduleEvent","ScheduleEventEditBase","initialOrgranizationlevel","initialInstructor","initialInstructor2","GET_SCHEDULE_EVENT_ACTIVITIES_QUERY","GET_SCHEDULE_EVENT_ACTIVITY_QUERY","DELETE_SCHEDULE_EVENT_ACTIVITY","deleteScheduleEventActivity","ScheduleEventEditListBase","scheduleItems","ScheduleEventActivityDelete","SCHEDULE_EVENT_ACTIVITY_SCHEMA","ADD_SCHEDULE_EVENT_ACTIVITY","addScheduleEventTicket","sidebarContent","ScheduleEventActivityBack","scheduleItemType","ScheduleEventActivityForm","loadingActivity","errorActivity","dataActivity","ScheduleEventActivityTabs","cardActivitySubtitle","UPDATE_SCHEDULE_EVENT_ACTIVITY","updateScheduleEventTicket","ScheduleEventActivityEditBase","initialDateStart","GET_SCHEDULE_ITEM_ATTENDANCES_QUERY","schedule_item","ScheduleEventActivityAttendanceBase","GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY","GET_SCHEDULE_EVENT_EARLYBIRD_QUERY","ADD_SCHEDULE_EVENT_EARLYBIRD","UPDATE_SCHEDULE_EVENT_EARLYBIRD","DELETE_SCHEDULE_EVENT_EARLYBIRD","deleteScheduleEventEarlybird","scheduleEventEarlybirds","discountPercentage","ScheduleEventEarlybirdDelete","SCHEDULE_EVENT_EARLYBIRDS_SCHEMA","addScheduleEventEarlybird","ScheduleEventEarlybirdForm","scheduleEventEarlybirdId","updateScheduleEventEarlybird","scheduleEventEarlybird","initialDateEnd","GET_SCHEDULE_EVENT_MEDIAS_QUERY","GET_SCHEDULE_EVENT_MEDIA_QUERY","DELETE_SCHEDULE_EVENT_MEDIA","deleteScheduleEventMedia","scheduleEventMedias","ScheduleEventMediaDelete","SCHEDULE_EVENT_MEDIA_SCHEMA","ADD_SCHEDULE_EVENT_MEDIA","addScheduleEventMedia","ScheduleEventMediaBack","ScheduleEventMediaForm","scheduleEventMediaId","loadingMedia","errorMedia","dataMedia","scheduleEventMedia","UPDATE_SCHEDULE_EVENT_MEDIA","updateScheduleEventMedia","ScheduleEventMediaEditBase","updateMedia","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY","GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY","ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT","deleteScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscounts","ScheduleEventSubscriptionGroupDiscountDelete","SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA","scheduleEventSubscriptionGroupDiscountId","updateScheduleEventSubscriptionGroupDiscount","scheduleEventSubscriptionGroupDiscount","ScheduleEventSubscriptionGroupDiscountForm","GET_SCHEDULE_EVENT_TICKETS_QUERY","GET_SCHEDULE_EVENT_TICKET_QUERY","DELETE_SCHEDULE_EVENT_TICKET","deleteScheduleEventTicket","scheduleEventTickets","isSoldOut","BadgeSoldOut","deletable","ScheduleEventTicketDelete","SCHEDULE_EVENT_TICKET_SCHEMA","ADD_SCHEDULE_EVENT_TICKET","ScheduleEventTicketBack","ScheduleEventTicketForm","ticketId","searchResults","loadingTicket","errorTicket","dataTicket","ScheduleEventTicketTabs","ticket","cardTicketSubtitle","UPDATE_SCHEDULE_EVENT_TICKET","ScheduleEventTicketEditBase","initialFinanceTaxRate","initialFinanceGlaccount","initialFinanceCostcenter","GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY","SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA","included","UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM","updateScheduleEventTicketScheduleItem","scheduleEventTicketActivities","scheduleEventTicketScheduleItems","ScheduleEventTicketEditActivityForm","fullEvent","addAccountScheduleEventTicket","accountIdsWithTickets","a","represent_shift_status","shift","setShift","ScheduleShiftsFilter","CREATE_SHIFT","DELETE_SCHEDULE_SHIFT","deleteScheduleShift","ScheduleShiftsBase","scheduleShifts","createScheduleShift","ScheduleShiftAddBase","ScheduleShiftForm","shiftId","shift_id","ShiftEditMenu","ShiftEditBaseBase","shift_edit_all_subtitle","ShiftEditBack","updateScheduleShift","ShiftEditBase","GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY","DELETE_SCHEDULE_ITEM_WEEKLY_OTC","UPDATE_SCHEDULE_ITEM_WEEKLY_OTC","ScheduleShiftBack","shiftDate","deleteScheduleShiftOTC","updateScheduleITEMWeeklyOTC","ScheduleShiftEditBase","shiftSubtitle","ScheduleShiftWeeklyOTCDelete","ScheduleShiftEditForm","GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY","GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY","ADD_SCHEDULE_SHIFT_ACCOUNT","UPDATE_SCHEDULE_SHIFT_ACCOUNT","DELETE_SCHEDULE_SHIFT_ACCOUNT","SCHEDULE_SHIFT_EMPLOYEE_SCHEMA","ScheduleShiftEmployeeBack","addScheduleShiftAccount","ScheduleShiftEmployeeForm","updateScheduleShiftAccount","SiteWrapperSelfCheckin","setRefetchingAttendance","showSearch","setShowSearch","refetchingAttendance","queryAttendanceLoading","queryAttendanceError","queryAttendanceData","fetchMoreAccounts","queryAccountsLoading","queryAccountsError","SelfCheckinBase","GET_ORGANIZATION_LOCATIONS_QUERY","action","GET_LOCATION_CLASSES_QUERY","today","GET_SYSTEM_SETTINGS_QUERY","UPDATE_SYSTEM_SETTING","headerSubTitle","alertBanner","SettingsBack","loadingVersion","errorVersion","dataVersion","setting","loadingPatch","errorPatch","dataPatch","SettingsBase","patch","systemSettings","objLSItems","getLocalStorageValuesAsObject","entries","finance_bank_accounts_iban","updateSettings","iban","settings","toString","SettingsFinanceBankAccountsForm","finance_currency","finance_currency_symbol","sidebarActive","loadingCurrency","errorCurrency","dataCurrency","loadingSymbol","errorSymbol","dataSymbol","symbol","SettingsFinanceCurrencyForm","DATETIME_SCHEMA","SettingsGeneralDateTimeForm","system_hostname","queryVariables","hostname","SettingsGeneralSystemForm","mailchimp_api_key","mailchimp_server_prefix","loadingKey","errorKey","mcUser","mcApiKey","SettingsIntegrationMailChimpForm","mollie_api_key","mollieApiKey","H4","SettingsIntegrationMollieCreateAccount","SettingsIntegrationMollieForm","GET_MAILCHIMP_LISTS_QUERY","GET_MAILCHIMP_LIST_QUERY","ADD_MAILCHIMP_LIST","UPDATE_MAILCHIMP_LIST","DELETE_MAILCHIMP_LIST","deleteMailChimpList","SettingsMailMailChimpListsBase","mailchimpLists","systemMailchimpLists","organizationmailchimpLists","mailchimpListId","SettingsMailMailChimpListDelete","MAILCHIMP_LIST_SCHEMA","frequency","addMailChimpList","SettingsMailMailChimpListForm","updateMailchimpList","systemMailchimpList","GET_NOTIFICATIONS_QUERY","CREATE_NOTIFICATION_ACCOUNT","DELETE_NOTIFICATION_ACCOUNT","notificationId","deleteNotificationAccount","systemNotification","SettingsMailNotificationsBase","notifications","systemNotifications","accountNode","SettingsMailNotificationButtonDeleteAccount","createNotificationAccount","placeholderSearch","btnDisableAccountIds","SettingsMailNotificationButtonAddAccount","SearchAccounts","GET_SYSTEM_MAIL_TEMPLATES_QUERY","GET_SYSTEM_MAIL_TEMPLATE_QUERY","UPDATE_SYSTEM_MAIL_TEMPLATE","SettingsMailTemplatesBase","mailTemplates","systemMailTemplates","help","subject","comments","SettingsMailTemplateEditBase","templateInfo","template_name","helpTexts","suffix","getTemplateInfo","systemMailTemplate","SettingsMailTemplateEditForm","shop_account_profile_required_fields","SettingsShopAccountProfileForm","SHOP_FEATURES_SCHEMA","memberships","SettingsShopFeaturesForm","workflow_class_book_days_advance","workflow_class_cancel_until","loadingDaysAdvance","errorDaysAdvance","dataDaysAdvance","loadingCancelUntil","errorCancelUntil","dataCancelUntil","SettingsWorkflowClassBookingForm","workflow_shop_subscription_payment_method","loadingSubscriptionPayment","errorSubscriptionPayment","dataSubscriptionPayment","SettingsWorkflowShopForm","workflow_subscription_pauses_min_duration_in_days","workflow_subscription_pauses_max_pauses_in_year","loadingMinDuration","errorMinDuration","dataMinDuration","loadingMaxPauses","errorMaxPauses","dataMaxPauses","SettingsWorkflowSubscriptionPausesForm","workflow_trial_pass_limit","loadingTrialClassLimit","errorTrialClassLimit","dataTrialClassLimit","SettingsWorkflowTrialForm","ShopAccountHomeBase","ShopAccountHomeButton","DisplayClassInfo","classData","showTimeEnd","GET_ACCOUNT_CLASS_QUERY","accountName","attendanceId","attendance_id","loadingAttendance","errorAttendance","dataAttendance","updateScheduleItemAttendance","ShopAccountClassCancelBase","cancellationPossible","ShopAccountClassUnCancelBase","uncancellationPossible","complete","ShopAccountClassInfoBase","ShopCheckoutClassInfo","QUERY_ACCOUNT_CLASSPASSES","ShopAccountBack","ShopAccountClasspassesBase","ShopAccountProfileBase","eventTickets","CREATE_PAYMENT_LINK","cardTitleLoadingError","btnPayNow","initialBtnText","btn_text","setBtnText","createPaymentLink","ShopAccountInvoicePaymentBase","invoice","setAttribute","paymentLink","createFinanceInvoicePaymentLink","financeInvoicePaymentLink","ShopAccountInvoicePaymentStatusBase","alert","QUERY_ACCOUNT_INVOICES","onlinePaymentsAvailable","ShopAccountInvoicesBase","QUERY_ACCOUNT_INVOICE","ShopAccountInvoiceBase","parseFloat","QUERY_SYSTEM_MAILCHIMP_LISTS","UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS","mailingList","btnLink","updateSubscriptionStatus","doUpdateSubscriptionStatus","subscribed","ShopAccountMailingListsBase","mailingLists","ShopAccountMailingListCard","QUERY_ACCOUNT_ORDERS","get_order_card_status_color","ShopAccountOrdersBase","cancelFunction","cancelOrder","UPDATE_PROFILE","ShopAccountProfileBtnDownloadData","ACCOUNT_SCHEMA_MINIMAL","ACCOUNT_SCHEMA_CONTACT","updateProfile","profileSubmitNext","profilePolicy","ShopAccountProfileForm","QUERY_ACCOUNT_SUBSCRIPTIONS","ShopAccountSubscriptionsBase","QUERY_ACCOUNT_SUBSCRIPTION_CREDITS","ShopAccountSubscriptionCreditsBase","subscriptionCredits","xl","ShopClassBookClasspassBtn","ShopClassBookSubscriptionBtn","ShopClassBookPriceBtn","ShopClassBookBase","ShopClassBookBack","extensions","alreadyBooked","classType","class_info","bookingOpenOn","ShopClassBookSubscriptions","ShopClassBookClasspasses","ShopClassBookPriceDropin","ShopClassBookPriceTrial","CREATE_ORDER","ShopClassBookedBase","buttonBook","isBefore","notifyOnNetworkStatusChange","prevWeekFrom","prevWeekUntil","ShopClassesScheduleBase","ShopClassesScheduleFilter","availableSpacesOnline","ShopClassesScheduleButtonBook","clear","Progress","ShopContactBase","ShopEventsBase","media","dateString","IconGroup","IconItem","pt","eventTicket","showButton","ticketScheduleItems","PricingCard","Category","Price","totalPriceDisplay","AttributeList","AttributeItem","isEarlybirdPrice","isSubscriptionDiscountPrice","tempTitle","userIsAuthenticated","ShopEventBase","tickets","ShopEventTicketPricingCard","eventID","cs_django_links","EXPORT_TERMS_AND_CONDITIONS","EXPORT_PRIVACY_POLICY","scheduleEventTicketId","createOrder","ShopEventTicketBase","createOrderInput","orderId","createFinanceOrder","ShopCheckoutForm","GET_SHOP_ANNOUNCEMENTS_QUERY","ShopHomeBase","GET_ORDER_QUERY","orderItems","attendanceDate","ShopCheckoutPaymentBase","msgNextStep","buttonNext","total","hasCompleteEnoughProfile","createFinanceOrderPaymentLink","financeOrderPaymentLink","ShopCheckoutOrderSummary","ShopCheckoutCompleteBase","subHeader","contentText","paymentText","ShopAccountClassesBase","GET_ORGANIZATION_CLASSPASSES_QUERY","ShopClasspassesBase","ShopClasspassPricingCard","loadingClass","errorClass","dataClass","ShopClasspassBase","ShopClasspassesPricingCard","displayCheckoutInfo","unit","priceFirstMonthDisplay","accountRegistrationFee","accountRegistrationFeeDisplay","rootComponent","GET_ORGANIZATION_SUBSCRIPTIONS_QUERY","ShopSubscriptionsBase","ShopSubscriptionPricingCard","organizationSubscriptionId","ACCOUNT_SUBSCRIPTION_SCHEMA","CheckoutCardDirectDebitForm","ShopSubscriptionBase","CheckoutCard","shopPaymentMethod","hasBankAccountInfo","CheckoutCardDirectDebit","CheckoutCardBankAccountRequired","CheckoutCardDirectDebitAccountInfoRequired","CheckoutCardMollie","ShopSubscriptionDirectDebitActivatedBase","PASSWORD_CHANGE_SCHEMA","passwordCurrent","passwordNew2","oneOf","updatePassword","CSStandaloneFormPage","messages","UserPasswordChangeForm","etFieldValue","esetFieldTouched","preventDefault","password","accountSignupEnabled","doTokenAuth","username","next","tokenAuth","UserLoginForm","setActive","deleteCookie","deleteRefreshCookie","info","offsetMd","Error404","Error404Page","GET_ACCOUNT_BANK_ACCOUNTS","UPDATE_BANK_ACCOUNT","ACCOUNT_BANK_ACCOUNT_SCHEMA","updateBankAccount","bankAccount","ShopAccountBankAccountForm","PrivateRoute","rest","refreshingToken","setRefreshingToken","authTokenExpired","path","ContinueAsYouAre","Route","WaitAsYouAre","LoginRequired","Redirect","tokenExp","SetCurrentUrlAsNext","loadingAppSettings","errorAppSettings","dataAppSettings","loadingOrganization","errorOrganization","dataOrganization","HashRouter","Switch","exact","CookiePolicy","HomeHome","AutomationHome","AutomationAccountSubscriptionCredits","AutomationAccountSubscriptionCreditAdd","AutomationAccountSubscriptionInvoices","AutomationAccountSubscriptionInvoicesAdd","AutomationAccountSubscriptionMollieCollections","AutomationAccountSubscriptionMollieCollectionAdd","FinanceCostCenters","FinanceCostCenterAdd","FinanceCostCenterEdit","FinanceExpenses","FinanceExpenseAdd","FinanceExpenseEdit","FinanceExpensesExport","FinanceInvoices","FinanceInvoicesExport","FinanceInvoiceEdit","FinanceInvoiceGroups","FinanceInvoiceGroupAdd","FinanceInvoiceGroupEdit","FinanceInvoiceGroupDefaults","FinanceInvoicePaymentAdd","FinanceInvoicePaymentEdit","FinanceGLAccounts","FinanceGLAccountAdd","FinanceGLAccountEdit","FinanceOrders","FinanceOrderEdit","FinancePaymentBatches","FinancePaymentBatchAddWhat","FinancePaymentBatchView","FinancePaymentCollectionBatchAdd","FinancePaymentCollectionBatchEdit","FinancePaymentBatchCategories","FinancePaymentBatchCategoryAdd","FinancePaymentBatchCategoryEdit","FinancePaymentMethods","FinancePaymentMethodAdd","FinancePaymentMethodEdit","FinanceQuotes","FinanceQuotesExport","FinanceQuoteEdit","FinanceQuoteGroups","FinanceQuoteGroupAdd","FinanceQuoteGroupEdit","FinanceTaxRates","FinanceTaxRatesAdd","FinanceTaxRatesEdit","FinanceTaxRatesSummary","OrganizationEdit","OrganizationBranding","OrganizationBrandingEdit","OrganizationDocuments","OrganizationListDocuments","OrganizationDocumentAdd","OrganizationDocumentEdit","OrganizationAnnouncements","OrganizationAnnouncementAdd","OrganizationAnnouncementEdit","OrganizationAppointmentCategories","OrganizationAppointmentCategoryAdd","OrganizationAppointmentCategoryEdit","OrganizationAppointments","OrganizationAppointmentAdd","OrganizationAppointmentEdit","OrganizationAppointmentPrices","OrganizationAppointmentPriceAdd","OrganizationAppointmentPriceEdit","OrganizationClasspasses","OrganizationClasspassAdd","OrganizationClasspassEdit","OrganizationClasspassesGroups","OrganizationClasspassesGroupAdd","OrganizationClasspassesGroupEdit","OrganizationClasspassesGroupEditPasses","OrganizationClasstypes","OrganizationClasstypeAdd","OrganizationClasstypeEdit","OrganizationClasstypeEditImage","OrganizationDiscoveries","OrganizationDiscoveryAdd","OrganizationDiscoveryEdit","OrganizationHolidays","OrganizationHolidayAdd","OrganizationHolidayEdit","OrganizationHolidayEditLocations","OrganizationLanguages","OrganizationLanguageAdd","OrganizationLanguageEdit","OrganizationLevels","OrganizationLevelAdd","OrganizationLevelEdit","OrganizationLocations","OrganizationLocationAdd","OrganizationLocationEdit","OrganizationLocationRooms","OrganizationLocationRoomAdd","OrganizationLocationRoomEdit","OrganizationProducts","OrganizationProductAdd","OrganizationProductEdit","OrganizationShifts","OrganizationShiftAdd","OrganizationShiftEdit","OrganizationSubscriptions","OrganizationSubscriptionAdd","OrganizationSubscriptionEdit","OrganizationSubscriptionsGroups","OrganizationSubscriptionsGroupAdd","OrganizationSubscriptionsGroupEdit","OrganizationSubscriptionsGroupEditSubscriptions","OrganizationSubscriptionsPrices","OrganizationSubscriptionPriceAdd","OrganizationSubscriptionPriceEdit","RelationsAccounts","RelationsAccountAdd","RelationsAccountProfile","RelationsAccountProfileImage","AccountAcceptedDocuments","RelationsAccountBankAccount","RelationsAccountBankAccountMandateAdd","RelationsAccountBankAccountMandateEdit","RelationsAccountClasses","RelationsAccountClassesFindClass","AccountClasspasses","AccountClasspassAdd","AccountClasspassEdit","AccountClasspassClasses","AccountDocuments","AccountDocumentAdd","AccountDocumentEdit","RelationsAccountEnrollments","RelationsAccountEnrollmentEdit","RelationsAccountEnrollmentFindClass","AccountFinancePaymentBatchCategoryItems","AccountFinancePaymentBatchCategoryItemAdd","AccountFinancePaymentBatchCategoryItemEdit","AccountInvoices","AccountInvoiceAdd","AccountMemberships","AccountMembershipAdd","AccountMembershipEdit","AccountNotes","AccountNoteAdd","AccountNoteEdit","AccountOrders","AccountProducts","AccountProductAdd","AccountQuotes","AccountQuoteAdd","AccountScheduleEventTickets","AccountSubscriptions","AccountSubscriptionAdd","AccountSubscriptionEdit","AccountSubscriptionEditAltPrices","AccountSubscriptionEditAltPriceAdd","AccountSubscriptionEditAltPriceEdit","AccountSubscriptionEditBlocks","AccountSubscriptionEditBlockAdd","AccountSubscriptionEditBlockEdit","AccountSubscriptionEditCredits","AccountSubscriptionEditCreditAdd","AccountSubscriptionEditCreditEdit","AccountSubscriptionEditInvoices","AccountSubscriptionEditInvoiceAdd","AccountSubscriptionEditPauses","AccountSubscriptionEditPauseAdd","AccountSubscriptionEditPauseEdit","RelationsAccountTools","RelationsAccountInstructorProfile","RelationsB2B","RelationsB2BAdd","RelationsB2BEdit","RelationsB2BInvoices","RelationsB2BInvoiceAdd","ScheduleAppointments","ScheduleAppointmentAdd","ScheduleAppointmentEditAll","ScheduleClasses","ScheduleClassAdd","ScheduleClassEditAll","ScheduleClassClasspasses","ScheduleClassEnrollments","ScheduleClassEnrollmentsSearch","ScheduleClassEnrollmentAdd","ScheduleClassEnrollmentEdit","ScheduleClassEnrollmentOptions","ScheduleClassPrices","ScheduleClassPriceAdd","ScheduleClassPriceEdit","ScheduleClassSubscriptions","ScheduleClassInstructors","ScheduleClassInstructorAdd","ScheduleClassInstructorEdit","ScheduleClassAttendance","ScheduleClassAttendanceChart","ScheduleClassBook","ScheduleClassEdit","ScheduleEvents","ScheduleEventAdd","ScheduleEventEdit","ScheduleEventActivities","ScheduleEventActivityAdd","ScheduleEventActivityEdit","ScheduleEventActivityAttendance","ScheduleEventEarlybirds","ScheduleEventEarlybirdAdd","ScheduleEventEarlybirdEdit","ScheduleEventMedia","ScheduleEventMediaAdd","ScheduleEventMediaEdit","ScheduleEventSubscriptionGroupDiscounts","ScheduleEventSubscriptionGroupDiscountAdd","ScheduleEventSubscriptionGroupDiscountEdit","ScheduleEventTickets","ScheduleEventTicketAdd","ScheduleEventTicketEdit","ScheduleEventTicketEditActivities","ScheduleEventTicketEditCustomers","ScheduleEventTicketEditCustomersSearch","ScheduleShifts","ScheduleShiftAdd","ScheduleShiftEditAll","ScheduleShiftEdit","ScheduleShiftEmployees","ScheduleShiftEmployeeAdd","ScheduleShiftEmployeeEdit","InsightInactiveAccounts","InsightInactiveAccountsAdd","InsightInactiveAccountsView","InsightClasspasses","InsightInstructorClassesMonth","InsightFinanceInvoicesOpenOnDate","InsightKeyNumbersWoSubscription","InsightRevenue","InsightSubscriptions","InsightTrialpasses","SelfCheckinCheckin","SelfCheckinBookingOptions","SelfCheckinLocations","SelfCheckinLocationClasses","ShopHome","ShopAccountHome","ShopAccountBankAccount","ShopAccountClassCancel","ShopAccountClassUnCancel","ShopAccountClassInfo","ShopClasses","ShopAccountClasspasses","ShopAccountEventTickets","ShopAccountInvoicePayment","ShopAccountInvoicePaymentStatus","ShopAccountInvoices","ShopAccountInvoice","ShopAccountMailingLists","ShopAccountOrders","ShopAccountProfile","ShopAccountSubscriptions","ShopAccountSubscriptionCredits","ShopCheckoutPayment","ShopCheckoutComplete","ShopClassesSchedule","ShopClassBook","ShopClassBooked","ShopClasspasses","ShopClasspass","ShopContact","ShopEvents","ShopEvent","ShopEventTicket","ShopSubscriptions","ShopSubscription","ShopSubscriptionDirectDebitActivated","SettingsHome","SettingsAbout","SettingsDiagnostics","SettingsFinanceBankAccounts","SettingsFinanceCurrency","SettingsGeneralDateTime","SettingsGeneralSystem","SettingsIntegrationMailChimp","SettingsIntegrationMollie","SettingsMailMailChimpLists","SettingsMailMailChimpListAdd","SettingsMailMailChimpListEdit","SettingsMailNotifications","SettingsMailNotificationsAddAccount","SettingsMailTemplates","SettingsMailTemplateEdit","SettingsShopAccountProfile","SettingsShopFeatures","SettingsWorkflowClassBooking","SettingsWorkflowShop","SettingsWorkflowSubscriptionPauses","SettingsWorkflowTrial","UserChangePassword","UserLogin","UserLoginRequired","UserLogout","UserSessionExpired","UserWelcome","String","prototype","n","substr","errorLink","networkError","operation","forward","response","user_not_logged_in_within_response_errors","forEach","reload","CSEC","Observable","observer","client","mutate","mutation","subscriber","subscribe","csrftoken","httpLink","createHttpLink","uri","credentials","csrfMiddleware","ApolloLink","fetch","json","Cookies","get","getCsrfToken","set","setContext","headers","ApolloClient","from","cache","InMemoryCache","typePolicies","Query","fields","relayStylePagination","App","locale","ApolloProvider","AppRoot","Boolean","ReactDOM","getElementById","navigator","serviceWorker","ready","unregister"],"mappings":"m1iFAgBA,MAAMA,EAAY,CACdC,MAAO,CACHC,O,SAIRC,QAAQC,IAAIJ,GAGZK,IAMGC,IAAIC,KAEJD,IAAIE,KAGJC,KAAK,CACJT,YACAU,IAAK,QACLC,YAAa,QACbC,GAAI,CAAC,UACLC,UAAW,SACXC,OAAO,EAGPC,aAAc,IAEdC,cAAe,CACbC,aAAa,KAIFZ,EAAI,E,OAAJA,I,6HCjDV,MAAMa,EAAaC,GAAI;;;;;;;;EAoBjBC,GATeD,GAAI;;;;;;EASHA,GAAI;;;;;;;;;GAqBpBE,GATeF,GAAI;;;;;;EASGA,GAAI;;;;;;GAS1BG,EAA8BH,GAAI;;;;;;EASlCI,EAA0BJ,GAAI;;;;;;EC1D5BK,MAJQ,CACnBC,mBAAoB,sBCmETC,MApEe,CAC1BC,WAAY,wBACZC,eAAgB,2BAChBC,mBAAoB,+BACpBC,mBAAoB,+BACpBC,uBAAwB,8BACxBC,gBAAiB,4BACjBC,kCAAmC,4CACnCC,mCAAoC,6CACpCC,iCAAkC,4CAClCC,kCAAmC,4CACnCC,mCAAoC,6CACpCC,+BAAgC,0CAChCC,+BAAgC,0CAChCC,6BAA8B,wCAC9BC,6BAA8B,wCAC9BC,2BAA4B,sCAC5BC,6BAA8B,wCAC9BC,8CAA+C,uDAC/CC,yBAA0B,qCAC1BC,qBAAsB,iCACtBC,2BAA4B,uCAC5BC,yBAA0B,qCAC1BC,0BAA2B,sCAC3BC,iCAAkC,6CAClCC,+BAAgC,0CAChCC,0BAA2B,sCAC3BC,6BAA8B,wCAC9BC,kCAAmC,4CACnCC,iCAAkC,4CAClCC,iCAAkC,0CAClCC,kCAAmC,6CACnCC,4BAA6B,uCAC7BC,gCAAiC,2CACjCC,iCAAkC,4CAClCC,+BAAgC,0CAChCC,uCAAwC,kDACxCC,sCAAuC,iDACvCC,6BAA8B,wCAC9BC,2BAA4B,sCAC5BC,4BAA6B,uCAC7BC,0BAA2B,qCAC3BC,kCAAmC,6CACnCC,mCAAoC,8CACpCC,8BAA+B,yCAC/BC,iCAAkC,4CAClCC,mCAAoC,8CACpCC,mCAAoC,8CACpCC,yCAA0C,mDAC1CC,yBAA0B,qCAC1BC,yCAA0C,mDAC1CC,0BAA2B,qCAC3BC,2BAA4B,sCAC5BC,yBAA0B,oCAC1BC,6BAA8B,uCAC9BC,gCAAiC,2CACjCC,2BAA4B,uCAC5BC,+BAAgC,yCAChCC,0BAA2B,qCAC3BC,uBAAwB,kCACxBC,wBAAyB,mCACzBC,sBAAuB,iCACvBC,8BAA+B,yCAC/BC,+BAAgC,0CAChCC,0BAA2B,qCAC3BC,6BAA8B,yCC9D3B,MAAMC,EAAS,CAClBC,MAAMC,GAEFC,aAAaC,QAAQC,EAAKrE,eAAgBkE,EAAUI,QAAQC,KAC5DJ,aAAaC,QAAQC,EAAKpE,mBAAoBiE,EAAUI,QAAQE,SAEhEL,aAAaC,QAAQC,EAAKlE,uBAAwB+D,EAAUO,kBAC5DN,aAAaO,WAAWL,EAAKjE,gBACjC,EACAuE,gBAAgBC,GACZrG,QAAQC,IAAI,kBACZD,QAAQC,IAAIoG,GAEZT,aAAaC,QAAQC,EAAKrE,eAAgB4E,EAAiBN,QAAQC,KACnEJ,aAAaC,QAAQC,EAAKpE,mBAAoB2E,EAAiBN,QAAQE,SAEvEL,aAAaC,QAAQC,EAAKlE,uBAAwByE,EAAiBH,iBACvE,EACAI,UACItG,QAAQuG,KAAK,0BAIbX,aAAaO,WAAWL,EAAKrE,gBAC7BmE,aAAaO,WAAWL,EAAKpE,oBAE7BkE,aAAaO,WAAWL,EAAKlE,uBACjC,EACA4E,SAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,KAGNG,KAAKN,UACLV,aAAaO,WAAWL,EAAKjE,iBAErC,G,2DClCG,MAAMgF,EAAyB7F,GAAI;;;;;;;;;;;EAc7B8F,EAAsB9F,GAAI;;;;;;;;ECd1B+F,EAAyB/F,GAAI;;;;;;;;;;;;;;;;;;;;;EAuB7BgG,EAAsBhG,GAAI;;;;;;;;oBCWxBiG,qBAxBf,SAA6BC,GAA8B,IAA7B,EAAEC,EAAC,QAAEC,EAAQ,GAAE,SAAEC,GAASH,EAEtD,OACEI,cAACC,IAAI,CAAAF,SACHC,cAAA,OAAKE,UAAU,cAAaH,SAC1BC,cAACG,IAAS,CAAAJ,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,OAAKE,UAAU,mBAAkBH,SAC5BD,EAAWE,cAAA,OAAKO,IAAKT,EAASI,UAAU,MAAMM,IAAI,SAAY,KAElET,EACDC,cAACS,IAAc,CACbC,UAAW,IACXC,WAAYC,gBAQ5B,IChBejB,qBAVf,WACE,OACEK,cAACa,EAAoB,CAAAd,SACnBC,cAAA,OAAKE,UAAU,cAAaH,SAC1BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,OAItC,ICfA,MAAMC,EAAqBC,IAAMC,cAAc,CAAC,GAEnCC,EAAsBH,EAAmBI,SACnBJ,EAAmBK,SAEvCL,QCLf,MAAMM,EAAsBL,IAAMC,cAAc,CAAC,GAEpCK,EAAuBD,EAAoBF,SACpBE,EAAoBD,SAEzCC,Q,cCJR,MAAME,GAA0B/H,GAAI;;;;;;;;;;EAa9BgI,GAAuBhI,GAAI;;;;;;;;ECoClCiI,GAAiBA,CAAC9B,EAAG+B,EAASC,EAAOC,KACzC,MAAMC,EAAeD,EAAKE,kBAE1B,IAAIC,EAAQ,GAGZ,GAAIL,EASF,OARAK,EAAMC,KAAK,CACTC,MAAOtC,EAAE,6BACTuC,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGT,GAAIJ,EASF,OARAI,EAAMC,KAAK,CACTC,MAAOtC,EAAE,4BACTuC,GAAI,IACJC,KAAM,GACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,EAGTA,EAAMC,KAAK,CACTC,MAAOtC,EAAE,mBACTuC,GAAI,IACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIRV,EAAaW,eACfT,EAAMC,KAAK,CACTC,MAAOtC,EAAE,4BACTuC,GAAI,sBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAaY,aACfV,EAAMC,KAAK,CACTC,MAAOtC,EAAE,0BACTuC,GAAI,oBACJC,KAAM,cACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAaa,SACfX,EAAMC,KAAK,CACTC,MAAOtC,EAAE,sBACTuC,GAAI,gBACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIVV,EAAac,QACfZ,EAAMC,KAAK,CACTC,MAAOtC,EAAE,qBACTuC,GAAI,eACJC,KAAM,WACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIdR,EAAMC,KAAK,CACTC,MAAOtC,EAAE,sBACTuC,GAAI,gBACJC,KAAM,iBACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAIZ,MAAMK,EAAkBxE,aAAayE,QAAQvE,EAAKlE,wBAClD,IAAI0I,EAAenD,EAAE,sBACjBoD,EAAc,gBAclB,OAbI,IAAIC,KAAS,KAAQJ,GAAsC,MAAnBA,KAC1CE,EAAenD,EAAE,mBACjBoD,EAAc,eAGhBhB,EAAMC,KAAK,CACTC,MAAOa,EACPZ,GAAIa,EACJZ,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAGLR,CAAK,EAed,MAAMkB,GAAM,IAAID,KA2IDvD,sBAzIf,SAAwBC,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EACpD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS7B,IACpC8B,EAAeC,qBAAWjC,GAEhC,GAAIK,EAAS,OAAO5B,cAACyD,EAAsB,IAC3C,GAAI5B,EAAO,OAAO7B,cAAA,KAAAD,SAAIF,EAAE,+BAExB,MAAM6D,EArBR,SAA2BH,GACzB,IAAII,EAAW,+CAQf,OANIJ,GACEA,EAAaK,oBACfD,EAAWJ,EAAaK,mBAIrBD,CACT,CAWyBE,CAAkBN,GAEzC,OACEjD,eAACwD,IAAKC,QAAO,CACXC,YAAa,CACTC,KAAM,IACNzD,IAAK,cACLmD,SAAUD,EACVQ,SACElE,cAACmE,IAAIC,KAAI,CAACC,KAAK,MAAMnE,UAAU,mBAAkBH,SAC7C+B,EAAKwC,OAASxC,EAAKwC,KAAKC,YAAczC,EAAKwC,KAAKE,UAAYxE,cAACyE,IAAI,CAACrC,GAAG,gBAAerC,SACpFC,cAAC0E,IAAM,CACLxE,UAAU,OACVmC,KAAK,OACLsC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS9E,SAEdF,EAAE,kBAEQ,MAuCrBiF,SAAU,CAAEC,aAAcpD,GAAe9B,EAAG+B,EAASC,EAAOC,IAC5DkD,2BAA4BzC,YAAW0C,KACvCC,YAAa,CAaXC,UACEnF,cAACkB,WAAc,CAAAnB,SACbO,eAAA,SAAAP,SAAA,CAAO,wBAELO,eAAA,KACE2D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBtF,SAAA,CAExB,IAAI,iBAEF,KAAK,4BACaoD,GAAImC,cAAc,SAI/CC,IACEjF,eAACY,WAAc,CAAAnB,SAAA,CACbC,cAACI,IAAKoF,IAAG,CAACC,MAAM,EAAK1F,SACnBC,cAACyE,IAAI,CAACrC,GAAG,iBAAgBrC,SACtBF,EAAE,2BAWPG,cAACI,IAAKoF,IAAG,CAACC,MAAM,QAapB1F,SAAA,CAEHA,EACDC,cAACS,IAAc,CACbC,UAAW,IACXC,WAAYC,QAIpB,ICjQejB,qBAAkB4C,aAxCjC,SAA6B3C,GAA8C,IAA7C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,iBAAEqC,EAAiB,IAAI9F,EAClE+F,EAAc,GACdC,EAAgB,GAChBC,EAAiB,GAErB,OAAOH,GACL,IAAK,QACHC,EAAc,OACd,MACF,IAAK,UACHA,EAAc,UACdC,EAAgB,OAChB,MACF,IAAK,WACHD,EAAc,UACdC,EAAgB,UAChBC,EAAiB,UAMrB,OACE7F,cAAA,OAAKE,UAAU,qCAAoCH,SACnDO,eAACwF,IAAIC,KAAI,CAAAhG,SAAA,CACPC,cAAC8F,IAAG,CAACjB,MAAOc,EAAaK,MAAOhG,cAACiG,IAAI,CAACC,KAAK,kBAAkBnG,SAC1DF,EAAE,kCAELG,cAAC8F,IAAG,CAACjB,MAAOe,EAAeI,MAAOhG,cAACiG,IAAI,CAACC,KAAK,gBAAiBnG,SAC3DF,EAAE,oCAELG,cAAC8F,IAAG,CAACjB,MAAOgB,EAAgBG,MAAOhG,cAACiG,IAAI,CAACC,KAAK,UAAWnG,SACtDF,EAAE,yCAKX,KC5BeF,sBAXIC,IAAA,IAAC,EAAEC,EAAC,UAAEsG,EAAS,UAAEjG,EAAU,IAAIN,EAAA,OAChDI,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLxE,UAAWA,EACX2E,MAAM,YACNxC,KAAK,aAAYtC,SACdF,EAAE,mBAEF,ICyBMF,qBAAkB4C,aA5BjC,SAAiB3C,GAA6G,IAA5G,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,MAAEqG,EAAK,SAAEC,EAAQ,UAAEF,EAAS,kBAAEG,EAAkB,GAAE,iBAAEZ,GAAiB,GAAO9F,EAEzH,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOA,EAAOC,SAAUA,EAAStG,SAC5CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAE/BoG,EAAanG,cAACyG,GAAU,CAACN,UAAWA,IAAgB,GACrDG,OAGJtG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACb2F,EACA1F,cAAC2G,GAAoB,CAACjB,iBAAkBA,IACtC,GACF3F,aAOlB,KCtBeJ,qBAAkB4C,aAVjC,SAAyB3C,GAAyD,IAAxD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,kBAAEuG,EAAkB,IAAI1G,EAE7E,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,uBAAwByG,kBAAmBA,EAAkBvG,SAC7EA,GAGP,KCSeJ,qBAAkB4C,aAbjC,SAAqB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACzC,OACEI,cAAC6G,GAAgB,CAAA9G,SACfC,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kCAKb,K,8BCnBO,SAASmH,GAAWC,GACvB,MAAMC,EAAQD,EAAKE,cACnB,OAAOF,EAAKG,OAAO,GAAGC,cAAgBH,EAAMI,MAAM,EACpD,CC2Ba3H,sBAxBf,SAAmBC,GAAc,IAC3BM,GADc,MAAC2E,EAAM,IAAGjF,EAG5B,OAAQiF,GACN,IAAK,UACH3E,EAAU,aACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,IAAK,SACHA,EAAU,YACV,MACF,IAAK,UACHA,EAAU,aACV,MACF,QACEA,EAAU,eAGd,OAAOF,cAAA,QAAME,UAAW,eAAiBA,GAC3C,IChBO,SAASqH,KACd,IAAIC,EACAC,EACAlD,EACAmD,EACAC,EAEAC,EAAY,CACdC,SAAUvJ,aAAayE,QAAQvE,EAAKhC,4BACpCsL,UAAWxJ,aAAayE,QAAQvE,EAAK/B,8BAsCvC,OAnCA+K,EAAUlJ,aAAayE,QAAQvE,EAAK9B,2BAChC8K,IACFI,EAAUJ,QAAUA,GAGtBC,EAAwBnJ,aAAayE,QAAQvE,EAAK7B,mCAEhDiL,EAAUH,sBADRA,GAGgC,GAGpClD,EAAajG,aAAayE,QAAQvE,EAAK5B,oCAErCgL,EAAUrD,WADRA,GAGqB,GAGzBmD,EAAoBpJ,aAAayE,QAAQvE,EAAK3B,+BAE5C+K,EAAUF,kBADRA,GAG4B,GAGhCC,EAAuBrJ,aAAayE,QAAQvE,EAAK1B,kCAE/C8K,EAAUD,qBADRA,GAG+B,GAGnCjP,QAAQC,IAAIiP,GAELA,CACT,CAGO,SAASG,GAAqB7B,EAAM8B,GACzC,IAAIC,EAEJ,OAAQD,GACN,IAAK,MACHC,EAAQjI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,YAAE,2CAClC,MACF,IAAK,YACHoI,EAAQjI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,YAAE,iDAClC,MACF,IAAK,QACHoI,EAAQjI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,YAAE,6CAMtC,OAAOS,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,SAAQ,IAAEA,EAAK,IAAE+B,IACrD,CAGO,SAASG,GAAuBC,GACrC,IAAIxD,EAEJ,OAAQwD,GACN,IAAK,MACHxD,EAAQ,UACR,MACF,IAAK,YACHA,EAAQ,UACR,MACF,IAAK,OACHA,EAAQ,SACR,MACF,QACEA,EAAQ,UAGZ,OAAO7E,cAACsI,GAAU,CAACzD,MAAOA,GAC5B,CAGO,SAAS0D,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,GAClE,OAAID,EACKnI,eAAA,QAAAP,SAAA,CAAOF,EAAE,mBAAmB,KAAG6I,EAAY,OAGrC,cAAXL,EACKG,OADT,CAGF,CCxEeG,OAtCEjP,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECFd,SAASkP,GAAoBtE,GAChC,MAAMuE,EAAc,CAAC,EACfC,EAASxE,EAAKwE,OACpB,GAAIA,EAAOC,MACT,IAAK,IAAIC,KAAcF,EAAOC,MAAO,CACnC,IAAIE,EAAaH,EAAOC,MAAMC,GAC9B,GAAIC,EAAWC,KAAM,CACnB,IAAIC,EAAaF,EAAWC,KAC5B,GAAIC,EAAWN,YAAYE,MACzB,IAAK,IAAIK,KAAoBD,EAAWN,YAAYE,MAAO,CACzD,IAAIM,EAAkBF,EAAWN,YAAYE,MAAMK,GACnD,GAAIC,EAAgBH,KAAM,CACtB,IAEII,EAFkBD,EAAgBH,KACPK,SACDC,MAAM,KAE9BF,EAAe,KAAMT,IAC3BA,EAAYS,EAAe,IAAM,IAAIG,KAGrCZ,EAAYS,EAAe,IAAII,IAAIJ,EAAe,GACtD,CACF,CAEJ,CACF,CAGF,OAAOT,CACX,CAGO,MAAMc,GAAiBA,CAACd,EAAae,EAAYC,KACtD,IAAIC,GAAqB,EAQzB,OANID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5BE,GAAqB,IAIjBA,CAAkB,ECAbnK,sBArBf,SAA6BC,GAA0D,IAAzD,EAACC,EAAC,WAAE+J,EAAU,SAAEC,EAAQ,SAAE9J,EAAQ,YAAEiK,GAAY,GAAMpK,EAClF,MAAM,QAACgC,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASqF,IAExC,OAAI/G,EACGoI,EAGI,GAFAhK,cAAA,KAAAD,SAAIF,EAAE,+BAKbgC,EAAc7B,cAAA,KAAAD,SAAG,6BAtBvB,SAA0B8I,EAAae,EAAYC,GACjD,IAAIC,GAAqB,EAQzB,OANID,KAAYhB,GACVA,EAAYgB,GAAUE,IAAIH,KAC5BE,GAAqB,IAIjBA,CACV,CAgBMG,CAFgBrB,GAAoB9G,EAAKwC,MAEXsF,EAAYC,GACrC9J,EAEA,EAEX,ICZemK,OAzBUxQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;ECAtB,MAAMyQ,GAAkCzQ,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgD7CiI,GAAiBA,CAAC9B,EAAGyE,KACzB,IAAIrC,EAAQ,GACR4G,EAAcD,GAAoBtE,GAgHtC,OA9GArC,EAAMC,KAAK,CACTC,MAAOtC,EAAE,cACTuC,GAAI,WACJC,KAAM,OACNC,cAAeC,YAAWC,KAC1BC,UAAU,IAKTkH,GAAed,EAAa,OAAQ,YAErC5G,EAAMC,KAAK,CACTC,MAAOtC,EAAE,mBACTuC,GAAI,aACJC,KAAM,QACNC,cAAeC,YAAWC,QAM3BmH,GAAed,EAAa,OAAQ,kBACpCc,GAAed,EAAa,OAAQ,mBAErC5G,EAAMC,KAAK,CACTC,MAAOtC,EAAE,kBACTuC,GAAI,YACJC,KAAM,WACNC,cAAeC,YAAWC,QAM3BmH,GAAed,EAAa,OAAQ,sBACpCc,GAAed,EAAa,OAAQ,qBACpCc,GAAed,EAAa,OAAQ,oBAErC5G,EAAMC,KAAK,CACTC,MAAOtC,EAAE,iBACTuC,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,QAM3BmH,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,0BACpCc,GAAed,EAAa,OAAQ,yBACpCc,GAAed,EAAa,OAAQ,2BACpCc,GAAed,EAAa,OAAQ,kBAEtC5G,EAAMC,KAAK,CACRC,MAAOtC,EAAE,sBACTuC,GAAI,gBACJC,KAAM,UACNC,cAAeC,YAAWC,OAM3BmH,GAAed,EAAa,OAAQ,YAErC5G,EAAMC,KAAK,CACTC,MAAOtC,EAAE,iBACTuC,GAAI,WACJC,KAAM,cACNC,cAAeC,YAAWC,OAM3BmH,GAAed,EAAa,OAAQ,eAErC5G,EAAMC,KAAK,CACTC,MAAOtC,EAAE,oBACTuC,GAAI,cACJC,KAAM,SACNC,cAAeC,YAAWC,OA0BvBP,CAAK,EAIRkB,GAAM,IAAID,KAqJDvD,sBAnJf,SAAoBC,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EAChD,MAAM,MAAEiC,EAAK,QAAED,EAAO,KAAEE,GAASwB,YAASqF,IAE1C,GAAI/G,EAAS,OAAO5B,cAACyD,EAAsB,IAC3C,GAAI5B,EAAO,OAAO7B,cAAA,KAAAD,SAAIF,EAAE,+BAExB,IAAIuK,EAAY,IAKhB,OAJItI,EAAKwC,KAAK+F,yBACZD,EAAYtI,EAAKwC,KAAK+F,wBAItB/J,eAACwD,IAAKC,QAAO,CACXC,YAAa,CACTC,KAAM,IACNzD,IAAK,cACLmD,SAAU,+CACVO,SACE5D,eAAC6D,IAAIC,KAAI,CAACC,KAAK,MAAMnE,UAAU,mBAAkBH,SAAA,CAC/CC,cAACyE,IAAI,CAACrC,GAAG,YAAWrC,SAClBC,cAAC0E,IAAM,CACLxE,UAAU,OACVmC,KAAK,WACLsC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS9E,SAEdF,EAAE,wBAGPG,cAACyE,IAAI,CAACrC,GAAG,gBAAerC,SACtBC,cAAC0E,IAAM,CACLxE,UAAU,OACVmC,KAAK,OACLsC,SAAO,EACPC,KAAK,KACLC,MAAM,UAAS9E,SAEdF,EAAE,qBA2BXyK,gBAAiB,CACjBF,UAAWA,EACXlE,KAAMpE,EAAKwC,KAAKiG,UAAY,IAAMzI,EAAKwC,KAAKkG,SAC5ChC,YAAa,GACbiC,QAAS,CAEP,CAAEpI,KAAM,OAAQF,MAAOtC,EAAE,8BAA+BuC,GAAI,4BAC5D,CAAEsI,WAAW,GACb,CAAErI,KAAM,OAAQF,MAAOtC,EAAE,sBAAuBuC,GAAI,oBACpD,CAAEsI,WAAW,GACb,CAAErI,KAAM,UAAWF,MAAOtC,EAAE,qBAAsBuC,GAAI,sBAK1D0C,SAAU,CAAEC,aAAcpD,GAAe9B,EAAGiC,EAAKwC,OACjDU,2BAA4BzC,YAAW0C,KACvCC,YAAa,CAaXC,UACEnF,cAACkB,WAAc,CAAAnB,SACbO,eAAA,SAAAP,SAAA,CAAO,iBACOoD,GAAImC,cAAc,IAC9BhF,eAAA,KACE2D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBtF,SAAA,CAExB,IAAI,sBAEF,KAAK,4BAKhBwF,IACEjF,eAACY,WAAc,CAAAnB,SAAA,CACbC,cAACI,IAAKoF,IAAG,CAACC,MAAM,IAUhBzF,cAACI,IAAKoF,IAAG,CAACC,MAAM,QAapB1F,SAAA,CAEDA,EACDC,cAACS,IAAc,CACbC,UAAW,IACXC,WAAYC,QAItB,ICjSejB,qBAAkB4C,aAfjC,SAAqB3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAEnD,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,6BACrBE,QAKX,KC6MeJ,qBAAkB4C,aA3MjC,SAAiB3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EAC5B,MACMgL,EADcpH,qBAAWvC,GACA4J,kBAGvBjJ,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS6G,GAAiC,CACzEc,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACT3G,WAAYyG,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,KAClEtD,SAAUuD,MAASC,OAAO,cAC1BvD,UAAWsD,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,cAC1C7D,QAAS,aAEX8D,YAAa,iBAGf,GAAI1J,GAAWkJ,EAAc,OAC3B9K,cAACuL,GAAY,CAAAxL,SACVF,EAAE,+BAGP,GAAIgC,GAASkJ,EAAY,OACvB/K,cAACuL,GAAY,CAAAxL,SACVF,EAAE,2CAIP,MAAM2L,EAAgB1J,EAAK2J,0BAG3B,IAAKD,EAAczC,MAAM3J,OAAQ,OAC/BY,cAACuL,GAAY,CAAAxL,SACVF,EAAE,wCAIPnH,QAAQC,IAAImJ,GACZ,IAAI4J,GAAkB,EACtB,IAAM,IAAIC,EAAE,EAAGA,EAAE7J,EAAK8J,gBAAgBxM,OAAQuM,IACxC7J,EAAK8J,gBAAgBD,GAAY,QAAEvM,SACrCsM,GAAkB,GAMtB,OACEpL,eAACiL,GAAY,CAAAxL,SAAA,CACXC,cAAA,MAAAD,SAAKF,EAAE,sCACPG,cAACI,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAChByL,EAAczC,MAAM3J,OAAUoM,EAAczC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC/DhM,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAO8C,EAAK9C,MAAMrG,SACtBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASlD,EAAKmD,iBAHhDC,eAMX,IACR,KAILZ,GAAmBpL,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAClCC,cAAA,MAAAD,SAAKF,EAAE,8CACHiC,EAAK8J,gBAAgBG,KAAIQ,IAAA,IAAC,KAAEC,EAAI,QAAE5J,GAAS2J,EAAA,OAC1C3J,EAAQxD,OAAckB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACpCO,eAAA,MAAAP,SAAA,CACGiH,GAAWoE,IAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3CrL,cAAA,SAAOE,UAAU,aAAYH,SACtBqL,IAAOoB,GAAMnB,OAAO,WAG5BzI,EAAQmJ,KAAIU,IAAA,IACX,eAAEC,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,QACNI,EAAO,YACPC,EAAW,YACXF,EAAW,yBACXoE,EAAwB,sBACxBnF,EAAqB,kBACrBC,EAAiB,UACjBmF,EAAS,QACTC,EAAO,OACPC,EAAM,wBACNC,GAAyBP,EAAA,OACvBzM,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAAA,CAC7BC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SACfO,eAAA,MAAAP,SAAA,CACGqI,GAAuBC,GACxB/H,eAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB0H,EAAsBvB,KAAK,IAAG,IAE9BkF,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAG,OAEnDlD,GAAqB1H,cAAA,SAAOE,UAAU,aAAYH,SAChD2H,EAAkBxB,cAK3BlG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAAA,CAEfC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE0G,EAAyBjF,qBAAqBzB,KACpE5F,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAI6M,EAAyB1G,gBAIjElG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAC5BC,cAACmN,GAAoB,CAAYvD,WAAW,OAAOC,SAAS,yBAAwB9J,SAClFC,cAACyE,IAAI,CAACvE,UAAU,cAAckC,GAAI,sCAAwCsK,EAAiB,IAAMF,EAAKzM,SACpGC,cAAC0E,IAAM,CACLE,KAAK,KACLC,MAAM,YACNxC,KAAK,eAActC,SAEhBF,EAAE,2BAPgByM,qBAa/BhM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAC7BO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CAEC,aAAlB4M,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,kBAC3C,KACkB,0BAAlB8M,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,qBAC3C,KACW,cAAXwI,EACArI,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,uBAC3C,KACAS,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,cAAA,SAAOuI,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,WAG/F1I,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAE5BO,eAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAE8G,EAAwB,IAAED,cA7DlFT,eAiEJ,MAvF6BA,gBAA1B,EA0FA,OAGvB,OAGP,KCjKe3M,qBAAkB4C,aAdjC,SAA+B3C,GAA+B,IAA9B,EAAEC,EAAC,KAAEuN,EAAI,UAAEC,EAAU,MAAMzN,EACzD,OACEI,cAACyE,IAAI,CAACrC,GAAIgL,EAAKrN,SACbO,eAACoE,IAAM,CACLC,SAAO,EACP2I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdsN,GAAuBxN,EAAE,6BAA6B,IAACG,cAACiG,IAAI,CAACC,KAAK,sBAI3E,KCsCevG,qBAAkB4C,aA/CjC,SAAuB3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,OAAEmK,GAAQ3N,EAC1C,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,8CAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qDACNA,EAAE,yDACHG,cAAA,SAAMA,cAAA,SACNA,cAACwN,GAAwB,CAACJ,KAAK,sDAIrCpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,oDACNA,EAAE,wDACHG,cAAA,SAAMA,cAAA,SACNA,cAACwN,GAAwB,CAACJ,KAAK,qDAIrCpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,8DACNA,EAAE,kEACHG,cAAA,SAAMA,cAAA,SACNA,cAACwN,GAAwB,CAACJ,KAAK,yEASjD,KClDA,MAAMK,WAAoBC,YAAUC,cAAA,SAAAxO,WAAA,KAShCyO,eAAiB,KAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,MAAMM,EAAWjP,KAAKkP,MAAMD,SACxBA,GACEA,EAASE,aACXnP,KAAKkP,MAAME,YAGjB,EACD,CA3BDC,oBACER,OAAOS,iBAAiB,SAAUtP,KAAKsO,eACzC,CAEAiB,uBACEV,OAAOW,oBAAoB,SAAUxP,KAAKsO,eAC5C,CAuBAmB,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfmP,EAAY1P,KAAKkP,MAAMQ,UACvBC,EAAgB3P,KAAKkP,MAAMS,cAC3BP,EAAapP,KAAKkP,MAAME,WACxBQ,EAAgB5P,KAAKkP,MAAMU,cAC3BX,EAAWjP,KAAKkP,MAAMD,SACtBxO,EAAWT,KAAKkP,MAAMzO,SACtBoP,EAAW7P,KAAKkP,MAAMW,SACtBC,EAAc9P,KAAKkP,MAAMY,YAG/B,OACE9O,eAACwG,IAAI,CAAA/G,SAAA,CACHO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,IACZC,KAEFE,EACCC,EACApP,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEA,IACZA,EAEFC,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRmP,EAAiBlP,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,EAAKjB,SAAC,YACnDwO,EACCA,EAASE,YACRzO,cAAC0E,IAAM,CACL0I,MAAI,EACJmC,QAASb,EAAW3O,SAEnBF,EAAE,uBAELA,EAAE,sBARQ,OAaxB,EAGJ4N,GAAY+B,aAAe,CACzBd,WAAYe,GAAGA,EACfL,aAAa,EACbF,eAAe,GAGFvP,qBAAkB8N,ICrF1B,MAAMiC,GAAwBhW,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;ECS1BiG,sBANf,SAAuBC,GAAkC,IAAjC,EAAEC,EAAC,UAAEsG,EAAU,eAAevG,EACpD,OACEI,cAACyG,GAAU,CAACN,UAAWA,GAE3B,ICiCexG,qBAAkB4C,aA5BjC,SAAiD3C,GAA6E,IAA5E,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,YAAE4P,GAAY,EAAK,UAAExJ,EAAU,eAAcvG,EACzH,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBAAoBE,SACxCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC4P,GAAc,CAACzJ,UAAWA,IACzBwJ,EACA3P,cAACyE,IAAI,CAACrC,GAAI,gDAAgDrC,SACxDC,cAAC0E,IAAM,CAACG,MAAM,UAAU3E,UAAU,OAAMH,SACrCF,EAAE,wBAGL,QAGRG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCTeJ,qBAAkB4C,aAnBjC,SAAmC3C,GAA+B,IAA9B,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,OAAEiF,GAAOzI,EAC7D,OAAOyI,GACL,IAAK,UACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,8CACrC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,8CACnC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,8CACnC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,8CAClC,IAAK,QACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,4CACnC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,8CACnC,QACE,MAAO,iBAEb,KC+FeF,qBAAkB4C,aAzGjC,SAA6C3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAC/D,MACMiQ,EADcrM,qBAAWvC,GACU4O,sBAEnC,MAAEhO,EAAK,QAAED,EAAO,KAAEE,EAAI,UAAEgO,GAAcxM,YAASoM,GAAuB,CAC1ExE,UAAW,CACT6E,SAAU,mGAEZC,aAAc,MAIhB,GAAIpO,EAAS,OACX5B,cAACiQ,GAAwC,CAACN,aAAa,EAAK5P,SAC1DC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAACiQ,GAAwC,CAACN,aAAa,EAAK5P,SAC1DC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAMqQ,EAAcpO,EAAKqO,8BAGzB,OACEnQ,cAACiQ,GAAwC,CAACN,aAAa,EAAK5P,SAC1DC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,uDACb0O,SAAU2B,EAAY3B,SACtBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOF,EAAY3B,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBL,8BAA8BpH,MACzDwF,EAAWiC,EAAgBL,8BAA8B5B,SAE/D,OAAOkC,EAASrR,OACZ,CAGE+Q,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3H,MAAO,IAAKwH,EAAeJ,8BAA8BpH,SAAU0H,GACnElC,aAGJgC,CAAc,GAElB,EACFxQ,SAEEmQ,EAAYnH,MAAM3J,OAOpBkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRmQ,EAAYnH,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC6Q,GAA0B,CAACxI,OAAQa,EAAKb,WAE3CrI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAK4H,UAAUzF,OAAOwE,KAEhC7P,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK6H,aAER/Q,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK8H,SAERhR,cAAC2Q,IAAMnL,IAAG,MAbI8G,eAgBJ,SAjClBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,8DAwCpB,K,iBCxHO,MAAMoR,GAAgDC,OAAaC,MAAM,CAC9EC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC+CM7R,qBAAkB4C,aA5CjC,SAAgD3C,GAAkD,IAAjD,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAUvG,EAC7F,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,mBACLhG,UAAYyR,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,oBACLhG,UAAYyR,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,+BAK1EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVO,eAACoE,IAAM,CACNG,MAAM,UACL3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAAA,CAEtBF,EAAE,oBAAoB,IAACG,cAACiG,IAAI,CAACC,KAAK,qBAErClG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAMf,KChCA,MAAMwS,GAAW3Y,GAAI;;;;;;EAgENiG,qBAAkB4C,aAvDjC,SAA+C3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC5D,MAAO0S,GAAWC,YAAYF,IACxBlM,EAAY,4CAElB,OACEnG,cAACiQ,GAAwC,CAAC9J,UAAWA,EAAUpG,SAC7DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,0DAEjBG,cAACwS,KAAM,CACLC,cAAe,CACbrB,kBAAkB,IAAIlO,MAAOoC,cAC7BmM,mBAAmB,IAAIvO,MAAOwP,WAAa,GAC7CC,iBAAkB1B,GAClB2B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCsG,EAAQ,CAAEpH,UAAW,CACnB6H,MAAO,CACLC,MAAOH,EAAOpB,kBACdwB,KAAMJ,EAAOzB,mBAEd8B,eAAgB,CACf,CAACC,MAAOzD,GACNxE,UAAW,CACT6E,SAAU,uGAGjBqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8DAAgE,CAC7E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAAC2T,GAAuC,CACtCjC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KC7CexG,qBAAkB4C,aA5BjC,SAAkD3C,GAA6E,IAA5E,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,YAAE4P,GAAY,EAAK,UAAExJ,EAAU,eAAcvG,EAC1H,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBAAoBE,SACxCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC4P,GAAc,CAACzJ,UAAWA,IACzBwJ,EACA3P,cAACyE,IAAI,CAACrC,GAAI,iDAAiDrC,SACzDC,cAAC0E,IAAM,CAACG,MAAM,UAAU3E,UAAU,OAAMH,SACvCF,EAAE,wBAGH,QAGRG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCoFeJ,qBAAkB4C,aA1GjC,SAA8C3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAChE,MACMiQ,EADcrM,qBAAWvC,GACU4O,sBAEnC,MAAEhO,EAAK,QAAED,EAAO,KAAEE,EAAI,UAAEgO,GAAcxM,YAASoM,GAAuB,CAC1ExE,UAAW,CACT6E,SAAU,qGAEZC,aAAc,MAKhB,GAAIpO,EAAS,OACX5B,cAAC4T,GAAyC,CAACjE,aAAa,EAAK5P,SAC3DC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC4T,GAAyC,CAACjE,aAAa,EAAK5P,SAC3DC,cAAA,KAAAD,SAAIF,EAAE,gCAKZnH,QAAQC,IAAI,6BACZD,QAAQC,IAAImJ,GACZ,MAAMoO,EAAcpO,EAAKqO,8BAKzB,OACEnQ,cAAC4T,GAAyC,CAACjE,aAAa,EAAK5P,SAC3DC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,wDACb0O,SAAU2B,EAAY3B,SACtBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOF,EAAY3B,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBL,8BAA8BpH,MACzDwF,EAAWiC,EAAgBL,8BAA8B5B,SAE/D,OAAOkC,EAASrR,OACZ,CAGE+Q,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3H,MAAO,IAAKwH,EAAeJ,8BAA8BpH,SAAU0H,GACnElC,aAGJgC,CAAc,GAElB,EACFxQ,SAEEmQ,EAAYnH,MAAM3J,OAOpBkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sCAJNyM,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRmQ,EAAYnH,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC6Q,GAA0B,CAACxI,OAAQa,EAAKb,WAE3CrI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAK4H,UAAUzF,OAAOwE,KAEhC7P,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK6H,aAER/Q,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK8H,WAXM1E,eAaJ,SA7BlBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,+DAoCpB,KCxHO,MAAMgU,GAAkD3C,OAAaC,MAAM,CAChFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPsC,YAAa5C,OACVG,aCoEU1R,qBAAkB4C,aAnEjC,SAAkD3C,GAAkD,IAAjD,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAUvG,EAC/F,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,mBACLhG,UAAYyR,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,oBACLhG,UAAYyR,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,0BAGtEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0DAA0DE,SAAA,CAC7EO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,cACLhG,UAAYyR,EAAOmC,YAAe,0BAA4B,eAC9D7B,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,oDAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,iBAAgBpC,SAAaF,EAAE,2EAATyM,mBAEtCtM,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,6BAIlEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVO,eAACoE,IAAM,CACNG,MAAM,UACL3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAAA,CAEtBF,EAAE,oBAAoB,IAACG,cAACiG,IAAI,CAACC,KAAK,qBAErClG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAMf,KC/DA,MAAMwS,GAAW3Y,GAAI;;;;;;EAqENiG,qBAAkB4C,aA5DjC,SAA+C3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC5D,MAAO0S,GAAWC,YAAYF,IACxBlM,EAAY,6CAElB,OACEnG,cAAC4T,GAAyC,CAACzN,UAAWA,EAAUpG,SAC9DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,2DAEjBG,cAACwS,KAAM,CACLC,cAAe,CACbrB,kBAAkB,IAAIlO,MAAOoC,cAC7BmM,mBAAmB,IAAIvO,MAAOwP,WAAa,EAC3ClK,YAAa,GACbsL,YAAa,SAEfnB,iBAAkBkB,GAClBjB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCsG,EAAQ,CAAEpH,UAAW,CACnB6H,MAAO,CACLC,MAAOH,EAAOpB,kBACdwB,KAAMJ,EAAOzB,iBACb5I,YAAaqK,EAAOrK,YACpBsL,YAAajB,EAAOiB,cAErBZ,eAAgB,CACf,CAACC,MAAOzD,GACNxE,UAAW,CACT6E,SAAU,yGAGjBqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,+DAAiE,CAC9E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAAC+T,GAAyC,CACxCrC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KC1CexG,qBAAkB4C,aA5BjC,SAA0D3C,GAA6E,IAA5E,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,YAAE4P,GAAY,EAAK,UAAExJ,EAAU,eAAcvG,EAClI,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBAAoBE,SACxCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC4P,GAAc,CAACzJ,UAAWA,IACzBwJ,EACA3P,cAACyE,IAAI,CAACrC,GAAI,2DAA2DrC,SACnEC,cAAC0E,IAAM,CAACG,MAAM,UAAU3E,UAAU,OAAMH,SACvCF,EAAE,wBAGH,QAGRG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCuFeJ,qBAAkB4C,aA7GjC,SAAuD3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACzE,MACMiQ,EADcrM,qBAAWvC,GACU4O,sBAEnC,MAAEhO,EAAK,QAAED,EAAO,KAAEE,EAAI,UAAEgO,GAAcxM,YAASoM,GAAuB,CAC1ExE,UAAW,CACT6E,SAAU,uHAEZC,aAAc,MAIhB,GAAIpO,EAAS,OACX5B,cAACgU,GAAiD,CAACrE,aAAa,EAAK5P,SACnEC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAACgU,GAAiD,CAACrE,aAAa,EAAK5P,SACnEC,cAAA,KAAAD,SAAIF,EAAE,gCAKZnH,QAAQC,IAAI,sCACZD,QAAQC,IAAImJ,GACZ,MAAMoO,EAAcpO,EAAKqO,8BAIzB,OACEnQ,cAACgU,GAAiD,CAACrE,aAAa,EAAK5P,SACnEC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,iEACb0O,SAAU2B,EAAY3B,SACtBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOF,EAAY3B,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBL,8BAA8BpH,MACzDwF,EAAWiC,EAAgBL,8BAA8B5B,SAE/D,OAAOkC,EAASrR,OACZ,CAGE+Q,8BAA+B,CAC7BO,WAAYH,EAAeJ,8BAA8BO,WACzD3H,MAAO,IAAKwH,EAAeJ,8BAA8BpH,SAAU0H,GACnElC,aAGJgC,CAAc,GAElB,EACFxQ,SAECmQ,EAAYnH,MAAM3J,OAOnBkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRmQ,EAAYnH,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC6Q,GAA0B,CAACxI,OAAQa,EAAKb,WAE3CrI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAK4H,UAAUzF,OAAOwE,KAEhC7P,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK6H,aAER/Q,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK8H,SAERhR,cAAC2Q,IAAMnL,IAAG,MAbI8G,eAgBJ,SAjClBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,wEAwCpB,KC1HO,MAAMoU,GAA2D/C,OAAaC,MAAM,CACzFC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MC+CM7R,qBAAkB4C,aA5CjC,SAA0D3C,GAAkD,IAAjD,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAUvG,EACvG,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,mBACLhG,UAAYyR,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,oBACLhG,UAAYyR,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,+BAK1EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVO,eAACoE,IAAM,CACNG,MAAM,UACL3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAAA,CAEtBF,EAAE,oBAAoB,IAACG,cAACiG,IAAI,CAACC,KAAK,qBAErClG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAMf,KChCA,MAAMwS,GAAW3Y,GAAI;;;;;;;;EAkENiG,qBAAkB4C,aAvDjC,SAAyD3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACtE,MAAO0S,GAAWC,YAAYF,IACxBlM,EAAY,uDAElB,OACEnG,cAACiQ,GAAwC,CAAC9J,UAAWA,EAAUpG,SAC7DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oEAEjBG,cAACwS,KAAM,CACLC,cAAe,CACbrB,kBAAkB,IAAIlO,MAAOoC,cAC7BmM,mBAAmB,IAAIvO,MAAOwP,WAAa,GAC7CC,iBAAkBsB,GAClBrB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCsG,EAAQ,CAAEpH,UAAW,CACnB6H,MAAO,CACLC,MAAOH,EAAOpB,kBACdwB,KAAMJ,EAAOzB,mBAEd8B,eAAgB,CACf,CAACC,MAAOzD,GACNxE,UAAW,CACT6E,SAAU,iHAGjBqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,wEAA0E,CACvF0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAACkU,GAAiD,CAChDxC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KCjEexG,qBAAkB4C,aAdjC,SAAuB3C,GAA+B,IAA9B,EAAEC,EAAC,KAAEuN,EAAI,UAAEC,EAAU,MAAMzN,EACjD,OACEI,cAACyE,IAAI,CAACrC,GAAIgL,EAAKrN,SACbO,eAACoE,IAAM,CACLC,SAAO,EACP2I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdsN,GAAuBxN,EAAE,2BAA2B,IAACG,cAACiG,IAAI,CAACC,KAAK,sBAIzE,KCPA,MAAMiO,WAAoBzG,YACxBC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,uBACZD,QAAQC,IAAI6V,EACd,CAGAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwN,EAAYxN,EAAE,kBACdwU,EAAgBxU,EAAE,gBAExB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,kCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,eAAc9J,SACjCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0BACNA,EAAE,8BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,6BAKnDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4BACNA,EAAE,gCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,6BAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0BACNA,EAAE,8BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,2BAIjDpN,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,iBAAgB9J,SACnCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4BACNA,EAAE,gCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,kCAMrD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,oCAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,8BACNA,EAAE,kCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,+BAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,gCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,mCACNA,EAAE,uCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,sCAKnD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,gCAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4BACNA,EAAE,gCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,6BAIjDpN,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,+BAA8B9J,SACjDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,oCACNA,EAAE,wCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWgH,EAAejH,KAAK,0CAMzD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,kCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,sBAAqB9J,SACxCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,6CACNA,EAAE,iDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,gDAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,sBAAqB9J,SACxCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0CACNA,EAAE,8CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,6CAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACrBC,SAAS,8BAA6B9J,SAChDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4CACNA,EAAE,gDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,sDAS5D,EAIUzN,qBAAkB4C,YAAW4R,KCpMrC,MAAMK,GAAwB9a,GAAI;;;;;;;;;;;;;;;;;;;EAqB5B+a,GAAuB/a,GAAI;;;;;;;;;EAW3Bgb,GAAiBhb,GAAI;;;;;;;;;;;EAarBib,GAAoBjb,GAAI;;;;;;;;;;EAYxBkb,GAAqBlb,GAAI;;;;;;;;;EClCvBiG,sBAjBf,SAAkBC,GAA8C,IAA7C,EAAEC,EAAC,OAAEgV,EAAM,UAAE3U,EAAU,GAAE,WAAE4U,EAAW,IAAIlV,EAK3D,OAJKkV,IACHA,EAAajV,EAAE,gBAIfG,cAACyE,IAAI,CAACrC,GAAIyS,EAAO9U,SACfC,cAAC0E,IAAM,CACLxE,UAAWA,EACX2E,MAAM,UACNxC,KAAK,cAAatC,SACf+U,KAIX,ICqBenV,qBAAkB4C,aA7BjC,SAA+B3C,GAA4E,IAA3E,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,EAAK,UAAE5O,EAAU,wBAAuBvG,EACtG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAWA,IAEvBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,mBAAkB9J,SAC/CC,cAACgV,GAAS,CAACH,OAAQ,mCAK3B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCoIeJ,qBAAkB4C,aArJjC,SAA2B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACjCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,8BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASkR,GAAuB,CACnFtJ,UAAW,CAAE+J,SAAUA,MAEjBI,GAAsB9C,YAAYqC,IAEpCU,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACwV,GAAsB,CAAAzV,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwV,GAAsB,CAAAzV,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,2CAKZ,MAAM4V,EAAc3T,EAAK4T,mBAGzB,OAAKD,EAAY1M,MAAM3J,OAYrBY,cAACwV,GAAsB,CAAAzV,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EACf/G,SAAUkH,EAAYlH,SACtBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOqF,EAAYlH,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBkF,mBAAmB3M,MAC9CwF,EAAWiC,EAAgBkF,mBAAmBnH,SAEpD,OAAOkC,EAASrR,OACZ,CAGEsW,mBAAoB,CAClBhF,WAAYH,EAAemF,mBAAmBhF,WAC9C3H,MAAO,IAAKwH,EAAemF,mBAAmB3M,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN0V,EAAY1M,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,6BAA+BgH,EAAK0M,IAChE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdP,EAAkB,CAAEnK,UAAW,CAC7B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOqB,GAAuBtJ,UAAW,CAAC,SAAY+J,OACvD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAPzBA,eA6CJ,aA/FxBtM,cAACwV,GAAsB,CAAAzV,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACuDF,EAAlDoV,EAAoD,oCAAtC,uCAkG3B,KCvKO,MAAMa,GAAoB5E,OAAaC,MAAM,CAChDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd8V,KAAMzE,SCuFKvR,qBAAkB4C,aA5EjC,SAA6B3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC1C,MAAMuG,EAAY,wBACV4P,GAAkBxD,YAAYmC,IAEtC,OACE1U,cAACwV,GAAsB,CAACT,UAAU,EAAKhV,SACrCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iCAAiCE,SAC9CC,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkBmD,GAClBlD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC+J,EAAc,CAAE7K,UAAW,CACzB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbyP,KAAMK,SAASnD,EAAO8C,QAEvBzC,eAAgB,CACf,CAACC,MAAOqB,GAAuBtJ,UAAW,CAAC,UAAY,OAE1DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAIN,OAMzB,KC4CeF,qBAAkB4C,aA/GjC,SAA8B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAChD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,kCACdsG,EAAY,wBACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASmR,GAAsB,CAC9DvJ,UAAW,CAAE0K,GAAIA,MAEXK,GAAqB1D,YAAYoC,IAEzC,GAAI/S,EAAS,OACX5B,cAACwV,GAAsB,CAACT,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwV,GAAsB,CAACT,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKqU,kBAEzB,OACEnW,cAACwV,GAAsB,CAACT,UAAU,EAAKhV,SACrCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClByP,KAAMO,EAAYP,MAEpBhD,iBAAkBmD,GAClBlD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZoD,EAAiB,CAAE/K,UAAW,CAC5B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbyP,KAAMK,SAASnD,EAAO8C,QAEvBzC,eAAgB,CACf,CAACC,MAAOqB,GAAuBtJ,UAAW,CAAC,UAAY,OAE1DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,OAMzB,KC3GeF,sBAjBf,SAAqBC,GAA2C,IAA1C,EAAEC,EAAC,IAAEuW,EAAG,UAAElW,EAAU,GAAE,WAAE4U,EAAW,IAAIlV,EAK3D,OAJKkV,IACHA,EAAajV,EAAE,mBAIfG,cAACyE,IAAI,CAACrC,GAAIgU,EAAIrW,SACZC,cAAC0E,IAAM,CACLxE,UAAWA,EACX2E,MAAM,YACNxC,KAAK,iBAAgBtC,SAClB+U,KAIX,ICsBenV,qBAAkB4C,aA3BjC,SAA4B3C,GAAwE,IAAtE,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,EAAO,UAAEjP,EAAS,gBAAEkQ,GAAgB,GAAOzW,EAC/F,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CACjCoG,GAAanG,cAACyG,GAAU,CAACN,UAAWA,IAEnCkQ,EACF/V,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACsW,GAAY,CAACF,IAAI,2BAA2BlW,UAAU,SACvDF,cAACgV,GAAS,CAACH,OAAO,wBAAwB3U,UAAU,YAClC,QAGxBF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC5BO,SAASwW,GAAsC1W,EAAG2W,EAAgBnT,EAASoT,GAChFD,IACGpD,MAAKxT,IAAa,IAAZ,KAACkC,GAAKlC,EACXlH,QAAQC,IAAImJ,GACZ3D,EAAOW,gBAAgBgD,EAAK4U,cAflC,SAAkBC,GAChB,IAAIvJ,EAAOU,SAAS8I,cAAc,KAClCxJ,EAAKnJ,KAAO0S,EACZvJ,EAAKhI,OAAS,SAEd0I,SAASE,KAAK6I,YAAYzJ,GAC1BA,EAAK0J,QAELhJ,SAASE,KAAK+I,YAAY3J,EAC5B,CASM4J,CAASP,EAAU,IAClB/C,OAAO7R,IACRnJ,QAAQC,IAAIkJ,GAIZwR,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,cACzB,GAER,CCEe9T,qBAAkB4C,aAnBjC,SAAyC3C,GAAmE,IAAlE,EAAEC,EAAC,QAAEwD,EAAO,kBAAE4T,EAAiB,UAAEC,GAAU,EAAI,UAAEhX,EAAU,IAAIN,EACvG,MAAO4W,GAAkBjE,YAAY5Y,GAErC,OACEqG,cAAC0E,IAAM,CACLG,MAAO,aAAe3E,EACtB0E,KAAK,KACLvC,KAAK,iBACL8U,cAAc,IACd/Q,MAAM,WACNmJ,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS4T,GAC9BlX,SAEEmX,GAAarX,EAAE,qBAGvB,K,SCoBeuX,OA5CQxX,IAAqG,IAApG,EAACC,EAAC,MAAEuG,EAAK,QAAE/C,EAAO,WAAEgU,EAAU,eAAEC,EAAc,WAAEC,EAAU,eAAEC,EAAc,kBAAEC,GAAkB7X,EAClH8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,cAAA,MAAAD,SAAKqG,IACJiR,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,+BACjES,eAAA,UACEJ,UAAU,kBACVqP,QAASA,KACPiI,EAAeC,GACZrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EAGb,GAFA7T,QAAQC,IAAI,WAAYmJ,GAEpBA,EAAK+V,wBAAyB,CAChCnf,QAAQC,IAAI,8BACZ,MAAMmf,EAAmBhW,EAAK+V,wBAAwBE,eAAenC,GACrEvS,EAAQnB,KAAM,0BAAyB4V,IACzC,CAGAzE,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAErG,EAAE,mCAEvB,GAGV,ECASF,qBAAkB4C,aAtCjC,SAA4B3C,GAcxB,IAdyB,EAC3BC,EAAC,MACDuD,EAAK,QACLC,EAAO,MACP+C,EAAK,WACLiR,EAAU,eACVC,EAAc,WACdC,EAAU,eACVC,EAAc,wBACdQ,EAAuB,YACvBC,EAAY,WAAU,WACtBC,EAAW,GAAE,WACbpD,EAAW,GAAE,gBACbqD,EAAgB,IACjBvY,EACC,OACEI,cAAA,UAAQE,UAAY,OAAM+X,WAExB1I,QAASA,KACP6H,GAAe,CACbvX,EAAGA,EACHuG,MAAOA,EACP/C,QAASA,EACTgU,WAAYrX,cAAA,KAAAD,SAAIsX,IAChBC,eAAgBA,EAChBC,WAAYA,EACZC,eAAgBA,EAChBC,kBAAmBO,GACnB,EACJjY,SACAO,eAAA,QAAMJ,UAAWiY,EAAgBpY,SAAA,CAC9BmY,EAAW,IAAEpD,MAItB,KC5CO,MAAMsD,GAAqB1e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyDzB2e,GAAoB3e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0ExB4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkD7B6e,GAAyB7e,GAAI;;;;;;;;EAU7B8e,GAAyB9e,GAAI;;;;;;;;EAU7B+e,GAA4B/e,GAAI;;;;;;;;EAUhCgf,GAAyBhf,GAAI;;;;;;ECzK3Bif,OApCQ/Y,IAAqF,IAApF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,eAAEqB,EAAc,kBAAEnB,GAAkB7X,EAClG8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,cAAA,MAAAD,SAAKF,EAAE,4BACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,+BACjES,eAAA,UACEJ,UAAU,iBACVqP,QAASA,KACPqJ,EAAenB,GACZrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,YAAY,IAAErG,EAAE,mCAEzB,GAGV,ECgGSF,qBAAkB4C,aAhHjC,SAA4B3C,GAAwD,IAAvD,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAEyV,EAAQ,gBAAEC,GAAgB,GAAMlZ,EAC/E,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAEvBlB,GAA4BtF,YAAYkG,KACxCO,GAAyBzG,YAAYmG,IAE7C,OACEpY,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACRC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBS,eAACqQ,IAAMC,UAAS,CAAC1Q,UAAU,kCAAiCH,SAAA,CAAEF,EAAE,mBAAmB,MAAIA,EAAE,0BAEzFS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,kBAAkB,MAAIA,EAAE,kBAC5CS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,2BAA2B,MAAIA,EAAE,yBACrDG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR8Y,EAAS9P,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC3B1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAY,IAAC/Y,cAAA,SACtCkJ,EAAK+P,UAAYjZ,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEmJ,EAAK+P,SAAS/S,SAF1CoG,gBAIhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKgQ,QAAQ,IAAClZ,cAAA,SACfA,cAAA,SAAOE,UAAU,aAAYH,SAAEmJ,EAAKV,iBAKtClI,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKiQ,mBAAmB,IAACnZ,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEmJ,EAAKkQ,oBAA0BpZ,cAAA,SACjFM,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAEmJ,EAAKmQ,gBAAgB,IAACrZ,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEmJ,EAAKkQ,0BAEpF9Y,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKoQ,kBAAoBtZ,cAAA,QAAAD,SACxBO,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAEmJ,EAAKoQ,iBAAiBpT,KAAK,IAAEgD,EAAKoQ,iBAAiB3D,MAAQrV,eAAA,QAAAP,SAAA,CAAM,IAAEmJ,EAAKoQ,iBAAiB3D,KAAK,YAChH,IAAC3V,cAAA,SACTA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKiN,mBAAqBnW,cAAA,QAAAD,SACzBO,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAEmJ,EAAKiN,kBAAkBjQ,KAAK,IAAEgD,EAAKiN,kBAAkBR,MAAQrV,eAAA,QAAAP,SAAA,CAAM,IAAEmJ,EAAKiN,kBAAkBR,KAAK,iBAI/HrV,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAE/BC,cAACuZ,GAAgC,CAC/BtC,kBAAmB/N,EAAKsQ,qBACxBtC,WAAW,IAGblX,cAACmN,GAAoB,CAAYvD,WAAW,MAAMC,SAAS,iBAAgB9J,SACvEC,cAACyZ,GAAa,CACZrT,MAAOvG,EAAE,sCACTwX,WAAY/W,eAAA,KAAAP,SAAA,CAAGO,eAAA,KAAAP,SAAA,CAAIqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAY,MAAI7P,EAAKgQ,WAAYlZ,cAAA,SAAK,IAAEkJ,EAAKV,eACzF+O,WAAa1X,EAAE,4CACf2X,eAAgBK,EAChBG,wBAAyB,CACvB9M,UAAW,CAAC6H,MAAO,CAAC6C,GAAI1M,EAAK0M,KAC7B1C,eAAgB,CACd,CAAEC,MAAOiF,MAGbH,YAAY,gBACZC,WAAYlY,cAACiG,IAAI,CAACC,KAAK,SACvB4O,WAAYjV,EAAE,qBACdsY,gBAAgB,MAfK7L,gBAmB3BtM,cAACyE,IAAI,CAACrC,GAAI,0BAA4B8G,EAAK0M,GAAG7V,SAC5CC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,uCACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKwQ,gBACzBnC,WAAY1X,EAAE,4BACd+Y,eAAgBI,EAChBvB,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOiF,OAIZ,EACJrY,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAvDfoG,kBA1BzBA,eAoFN,QAKtB,KCrIO,SAAS/E,KACd,IAAIK,EAAY,CAAC,EAGbqR,EAAW3a,aAAayE,QAAQvE,EAAK9D,kCAEvCkN,EAAUqR,SADRA,QAGmB5Z,EAIvB,IAAIwI,EAAWvJ,aAAayE,QAAQvE,EAAKhE,mCAEvCoN,EAAUC,SADRA,QAGmBxI,EAIvB,IAAIyI,EAAYxJ,aAAayE,QAAQvE,EAAK/D,oCAS1C,OAPEmN,EAAUE,UADRA,QAGoBzI,EAGxB3G,QAAQC,IAAIiP,GAELA,CACT,C,yBCSejI,sBAlCf,SAAqBC,GAA8G,IAG7HmZ,GAHiB,EAAClZ,EAAC,SAAE8Z,EAAQ,SAAEC,EAASnK,IAAGA,GAAC,OAAEoK,EAAOpK,IAAGA,GAAC,UAAEvP,EAAU,eAAc,YAAE4Z,GAAY,EAAI,gBAAEC,EAAgB,IAAGna,EAK9H,OAJoB4D,qBAAWvC,GACG8X,YAIhC,IAAK,aACHA,EAAa,aACb,MACF,IAAK,aACHA,EAAa,aACb,MACF,QACEA,EAAa,aAIjB,OACE/Y,cAACga,KAAU,CACPC,YAAapa,EAAE,iBACfkZ,WAAYA,EACZY,SAAUA,EACVI,gBAAkBA,GAAqCla,EAAE,0BACzDia,YAAaA,EACb5Z,UAAWA,EACXga,mBAAiB,EACjBC,kBAAgB,EAChBC,aAAa,SACbR,SAAWpN,GAASoN,EAASpN,GAC7BqN,OAAQA,IAAMA,KAGtB,ICfA,SAASQ,GAAoBC,GAC3B,IAAIC,EAEFA,EADED,IAAU9b,EAAKhE,kCACL,IAAI0I,KAAKkI,MAASoP,QAAQ,YAE1B,IAAItX,KAAKkI,MAASqP,MAAM,YAGtC,MAAMC,EAAUpc,aAAayE,QAAQuX,GAOrC,OANII,IACFH,EAAY,IAAIrX,KAAKwX,IAKhBH,CACT,CAEA,SAASI,GAA6BC,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KACV,CAsGe5H,qBAAkB4C,aAjGjC,SAA8B3C,GAAiC,IAAhC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,GACrDqZ,EAAU4B,GAAe1F,oBApCPmF,EAoCgC9b,EAAK9D,iCAnCzC4D,aAAayE,QAAQuX,IAI/B,KALX,IAAyBA,EAqCvB,IAAKzS,EAAUiT,GAAe3F,mBAASkF,GAAoB7b,EAAKhE,qCAC3DsN,EAAWiT,GAAgB5F,mBAASkF,GAAoB7b,EAAK/D,qCAElE,OACEuF,cAAA,OAAKE,UAAU,OAAMH,SAEnBO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CAEnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,4CACvBS,eAAA,UACEJ,UAhBQ,kCAiBRiC,MAAO8W,EACPW,SAAYsB,IACVL,EAAYK,EAAM9V,OAAOjD,OACzBwY,GACEnc,EAAK9D,iCACLwgB,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,yCAATyM,gBACrBxK,EAAKqZ,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAClChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,UAI7DhM,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CACnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,6CACvBG,cAACob,GAAY,CACXlb,UAAU,oBACVyZ,SAAU9R,EACViS,aAAa,EACbF,SAAWpN,IACT,IAAI6O,EAAUjQ,IAAOoB,GAAMnB,OAAO,cAClCyP,EAAYtO,GACZmO,GACEnc,EAAKhE,kCACL6gB,EACAjG,EACD,EAEH2E,gBAAiBla,EAAE,gDAGvBS,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CACnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,8CACvBG,cAACob,GAAY,CACXlb,UAAU,oBACVyZ,SAAU7R,EACVgS,aAAa,EACbF,SAAWpN,IACT,IAAI6O,EAAUjQ,IAAOoB,GAAMnB,OAAO,cAClC0P,EAAavO,GACbmO,GACEnc,EAAK/D,mCACL4gB,EACAjG,EACD,EAEH2E,gBAAiBla,EAAE,iDAGvBG,cAACI,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SACnCC,cAAC0E,IAAM,CACLxE,UAAU,cACV2E,MAAM,OACND,KAAK,KACL2K,QAASA,KAEPjR,aAAaC,QAAQC,EAAK9D,iCAAkC,IAC5DmgB,EAAY,IAEZ,MAAMS,EAAkBlQ,MAASoP,QAAQ,WACzClc,aAAaC,QAAQC,EAAKhE,kCACxB8gB,EAAgBjQ,OAAO,eACzByP,EAAY,IAAI5X,KAAKoY,IAErB,MAAMC,EAAmBnQ,MAASqP,MAAM,WACxCnc,aAAaC,QAAQC,EAAK/D,mCACxB8gB,EAAiBlQ,OAAO,eAC1B0P,EAAa,IAAI7X,KAAKqY,IAEtBnG,EAAQ7N,KAA2B,EACnCxH,SAEDF,EAAE,gCAMf,KC1CeF,qBAAkB4C,aArFjC,SAAwB3C,GAA4B,IAA3B,EAAEC,EAAC,SAAE2b,EAAQ,QAAEnY,GAASzD,EAE/C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS8U,GAAoB,CAChFlN,UAAW3D,KACX+D,YAAa,iBASf,GAAI1J,EAAS,OACX5B,cAACyb,GAAmB,CAACrG,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACyb,GAAmB,CAACrG,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAAA,KAAAD,SAAIF,EAAE,wCAKZ,MAAMgZ,EAAW/W,EAAK4Z,gBAGtB,OAAK7C,EAAS9P,MAAM3J,OAYlBkB,eAACmb,GAAmB,CAACrG,QAASA,EAASiB,iBAAiB,EAAKtW,SAAA,CAC3DC,cAAC2b,GAAqB,CAAC7Z,KAAMA,EAAMsT,QAxCvC,SAAcwG,GACZxG,EAAQ7N,MACR7O,QAAQC,IAAIijB,EACd,IAsCI5b,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,0BACbuP,aAAa,EACbb,SAAUsK,EAAStK,SACnBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyI,EAAStK,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBkL,gBAAgB3S,MAC3CwF,EAAWiC,EAAgBkL,gBAAgBnN,SAEjD,OAAOkC,EAASrR,OACZ,CAGEsc,gBAAiB,CACfhL,WAAYH,EAAemL,gBAAgBhL,WAC3C3H,MAAO,IAAKwH,EAAemL,gBAAgB3S,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC6b,GAAmB,CAClBhD,SAAUA,EACVC,iBAAiB,SA3CvBxY,eAACmb,GAAmB,CAACrG,QAASA,EAASiB,iBAAiB,EAAKtW,SAAA,CAC3DC,cAAC2b,GAAqB,CAAC7Z,KAAMA,EAAMsT,QAASA,IAC5CpV,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAAA,KAAAD,SACGF,EAAE,qCA4Cb,KCnGO,SAASic,GAAetP,GAC3B,OAAOpB,IAAOoB,GAAMnB,OAAO,aAQ/B,CAEO,SAAS0Q,GAAmBvP,GAC/B,OAAIA,aAAgBtJ,KACTsJ,EAAKwP,WAAa,KACjB,IAAMxP,EAAKyP,cAAc3U,OAAO,GAEjCkF,CAEf,CAGO,SAAS0P,GAAsBC,GAElC,IAAIC,EAAW,IAAIlZ,KACfmZ,EAAaF,EAAY3S,MAAM,KAInC,OAHA4S,EAASE,SAASD,EAAW,IAC7BD,EAASG,WAAWF,EAAW,IAExBD,CACX,CAcO,SAASI,GAAgB3c,GAC5B,MAAO,CACHA,EAAE,+BACFA,EAAE,gCACFA,EAAE,kCACFA,EAAE,iCACFA,EAAE,+BACFA,EAAE,iCACFA,EAAE,+BAEV,CAEO,SAAS4c,GAAmB5c,GAC/B,MAAO,CACHA,EAAE,iCACFA,EAAE,kCACFA,EAAE,+BACFA,EAAE,+BACFA,EAAE,6BACFA,EAAE,8BACFA,EAAE,8BACFA,EAAE,gCACFA,EAAE,mCACFA,EAAE,iCACFA,EAAE,kCACFA,EAAE,iCAEV,CCrEO,MAAM6c,GAAiBxL,OAAaC,MAAM,CAC/C3E,KAAM0E,OACLG,SAASxR,YAAE,uBACZqZ,QAAShI,OACNK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,OACbyL,OAAQzL,OACLG,SAASxR,YAAE,uBACd+c,IAAK1L,OACFG,SAASxR,YAAE,uBACdgd,WAAY3L,OACTK,IAAI,GACJC,IAAI,KACJH,SAASxR,YAAE,uBACdid,eAAgB5L,OAChBoI,iBAAkBpI,OAClBiF,kBAAmBjF,SCpBR6L,GAA4B,CACrCC,WAAY,SACZC,QAAS,QACTC,SAAU,UCeCvd,sBAXUC,IAAA,IAAC,EAAEC,EAAC,SAAEuS,EAAQ,UAAElS,EAAU,IAAIN,EAAA,OACrDI,cAAC0E,IAAM,CACLL,KAAK,SACL+N,SAAUA,EACVlS,UAAY,cAAaA,IACzB2E,MAAM,UAAS9E,SAEZF,EAAE,mBACE,ICKIF,sBAZUC,IAAA,IAAC,EAAEC,EAAC,UAAEsG,EAAS,UAAEjG,EAAU,IAAIN,EAAA,OACtDI,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLsD,KAAK,SACL9H,UAAWA,EACX2E,MAAM,OAAM9E,SAETF,EAAE,qBAEF,ICmJMF,qBAAkB4C,aAnJjC,SAA2B3C,GAavB,IAbwB,EAC1BC,EAAC,QACDwD,EAAO,OACPsO,EAAM,OACNkB,EAAM,UACNsK,EAAS,aACTzL,EAAY,gBACZ0L,EAAe,cACfC,EAAa,UACblX,EAAS,cACTmX,EAAa,eACbC,EAAc,sBACdC,EAAsB/N,IAAGA,IAC1B7P,EACC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOnF,KAAQ,0BAA4B,eACvDmN,SAAU9G,EAAOrG,KACjBoN,SAAWpN,IACT6Q,EAAc,OAAQ7Q,GACtB4Q,EAAgB,QAAQ,EAAK,EAE/BvD,OAAQA,IAAMuD,EAAgB,QAAQ,KAExCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIlEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,SACLhG,UAAYyR,EAAOgL,OAAU,0BAA4B,eACzD1K,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG7DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,eAAeE,SAAA,CAChCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,MACLhG,UAAYyR,EAAOiL,IAAO,0BAA4B,eACtD3K,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,aACLhG,UAAYyR,EAAOkL,WAAc,0BAA4B,eAC7D5K,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,6BAInEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAOsH,SAAY,0BAA4B,eAC3DhH,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,0BAG7DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,mBACLhG,UAAYyR,EAAO2H,iBAAoB,0BAA4B,eACnErH,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUM,kBAAkB1U,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CjM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,oBACLhG,UAAYyR,EAAOwE,kBAAqB,0BAA4B,eACpElE,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUzH,mBAAmB3M,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC/CnM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,6BAIxEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,gBAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAIvC,KCRexG,qBAAkB4C,aAvIjC,SAA0B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAMoP,EAAYnP,EAAE,8BACdsG,EAAa,qBAEb,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KACnCwF,GAAwBvL,YAAYgG,KAGpCwF,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,GAAItE,EAAS,OACX5B,cAACyb,GAAmB,CAACtV,UAAWA,EAAUpG,SACxCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,eAACmb,GAAmB,CAACtV,UAAWA,EAAUpG,SAAA,CACvCrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EAElB,OACE9B,cAACyb,GAAmB,CAClBtV,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CACbjK,YAAa,GACbqU,WAAY,KAEdlK,iBAAkB+J,GAClB9J,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACd3R,KAAMsP,GAAejJ,EAAOrG,MAC5B0M,QAASrG,EAAOqG,QAChB1Q,YAAaqK,EAAOrK,YACpBmU,OAAQ9J,EAAO8J,OACfC,IAAK/J,EAAO+J,IACZC,WAAYhK,EAAOgK,WACnB5D,SAAUpG,EAAOoG,SACjBK,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,kBAC1BiI,iBAAkBL,GAGhBM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAUrQ,SAAW2Q,EAErBX,EAAqB,CAAE5S,UAAW,CAChC6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAOiF,OAEXhF,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC6e,GAAkB,CACjB1B,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRyK,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACM,QAMjC,KCmCehS,qBAAkB4C,aAxKjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,+BACdsG,EAAa,qBAEb,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+U,GAAmB,CAC3DnN,UAAW,CACT0K,GAAIA,MAGAkJ,GAAyBvM,YAAYiG,KAGtCuF,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,GAAItE,EAAS,OACX5B,cAACyb,GAAmB,CAACtV,UAAWA,EAAUpG,SACxCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,eAACmb,GAAmB,CAACtV,UAAWA,EAAUpG,SAAA,CACvCrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMkY,EAAiBjW,EAAKiW,eAE5B,IAAIgH,EACAC,EACAC,EAcJ,OAZKlH,EAAekB,WAClB8F,EAAkBhH,EAAekB,SAASrD,IAGvCmC,EAAeuB,mBAClB0F,EAAmBjH,EAAeuB,iBAAiB1D,IAGhDmC,EAAe5B,oBAClB8I,EAAoBlH,EAAe5B,kBAAkBP,IAIrD5V,cAACyb,GAAmB,CAClBtV,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CAGbjG,KAAM,IAAItJ,KAAK6U,EAAevL,MAC9B0M,QAASnB,EAAemB,QACxB1Q,YAAauP,EAAevP,YAC5BmU,OAAQ5E,EAAe4E,OACvBC,IAAK7E,EAAe6E,IACpBC,WAAY9E,EAAe8E,WAC3B5D,SAAU8F,EACVzF,iBAAkB0F,EAClB7I,kBAAmB8I,GAErBtM,iBAAkB+J,GAClB9J,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdvI,GAAIA,EACJpJ,KAAMsP,GAAejJ,EAAOrG,MAC5B0M,QAASrG,EAAOqG,QAChB1Q,YAAaqK,EAAOrK,YACpBmU,OAAQ9J,EAAO8J,OACfC,IAAK/J,EAAO+J,IACZC,WAAYhK,EAAOgK,WACnB5D,SAAUpG,EAAOoG,SACjBK,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,mBAG5B,SAAS+I,IACPJ,EAAqB,CAAE5T,UAAW,CAChC6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAOiF,OAEXhF,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,uCAAyC,CACxD0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,CAGA,IAAIuL,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAUrQ,SAAW2Q,EACrBN,EAAUC,iBAAmBL,EAE7BmB,GACF,EAEA,IAAIR,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAEdoM,GACF,EACAnf,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC6e,GAAkB,CACjB1B,UAAWrb,EACX4P,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRyK,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACM,QAMjC,KCtLO,MAAMwN,GAAyBjO,OAAaC,MAAM,CACrDiO,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,yBC2DDF,qBAAkB4C,aAhDD3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACtHU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,+BAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACHG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAExBF,EAAE,gDAELG,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KCsDExG,qBAAkB4C,aAzFjC,SAA8B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACzC,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACxBqG,EAAWE,GAAgBnK,mBAAS,IAAIjS,KAAKkI,MAASoP,QAAQ,YAC9D6E,EAASE,GAAcpK,mBAAS,IAAIjS,KAAKkI,MAASqP,MAAM,YACxD+E,EAAUC,GAAetK,oBAAS,IAClCsB,EAAWiJ,GAAgBvK,mBAAS,IAErCnG,EAAYnP,EAAE,iCACdsG,EAAY,qBAEVqQ,GAAmBjE,YAAY5Y,GAEvC,OACEqG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAWA,QAG3BnG,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACPC,cAAe,CACb2M,UAAWA,EACXC,QAASA,GAEX1M,iBAAkBwM,GAClBvM,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZyM,EAAazM,EAAOuM,WACpBG,EAAW1M,EAAOwM,SAElB,MAAMM,EAAe7D,GAAejJ,EAAOuM,WACrCQ,EAAa9D,GAAejJ,EAAOwM,SACzCK,EACG,oCAAmCC,KAAgBC,KAGtD9M,GAAc,GACd2M,GAAY,EAAK,EACnB1f,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAAStT,EAAA,OACzEvM,cAAC8f,GAAyB,CACxBpO,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,MAKNqZ,EACAlf,eAACwG,IAAI,CAACV,MAAOvG,EAAE,uCAAuCE,SAAA,CACpDO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,6CACHG,cAAC+F,IAAI,CAAAhG,SACHO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,kBAAoB,KACtBuL,IAAOgU,GAAW/T,OAAO0N,GAAY,IAAG,MACxC3N,IAAOiU,GAAShU,OAAO0N,WAI9B/Y,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVO,eAACoE,IAAM,CACLG,MAAM,UACN0K,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,mBAAmB,IAAErG,EAAE,4BAItC,SAKZ,KChHO,MAAMkgB,GAAuBrmB,GAAI;;;;;;;;;;;;;;;;;;;EAqB3BsmB,GAAsBtmB,GAAI;;;;;;;;;EAW1BumB,GAAgBvmB,GAAI;;;;;;;;;;;EAapBwmB,GAAmBxmB,GAAI;;;;;;;;;;EAYvBymB,GAAoBzmB,GAAI;;;;;;;;;ECdtBiG,qBAAkB4C,aA7BjC,SAA8B3C,GAA6E,IAA5E,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,EAAK,UAAE5O,EAAU,uBAAuBvG,EAEtG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAWA,IAEvBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,mBAAkB9J,SAC/CC,cAACgV,GAAS,CAACH,OAAO,kCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCgIeJ,qBAAkB4C,aAnJjC,SAA0B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GAChCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,6BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASyc,GAAsB,CAClF7U,UAAW,CAAE+J,SAAUA,MAEjBmL,GAAqB7N,YAAY4N,IAEnC7K,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACqgB,GAAqB,CAAAtgB,SACpBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACqgB,GAAqB,CAAAtgB,SACpBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,0CAKZ,MAAMygB,EAAaxe,EAAK2b,kBAGxB,OAAK6C,EAAWvX,MAAM3J,OAYpBY,cAACqgB,GAAqB,CAAAtgB,SACpBC,cAACyN,GAAW,CAACuB,UAAWA,EACdC,cAAeqG,EACf/G,SAAU+R,EAAW/R,SACrBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOkQ,EAAW/R,SAAS8B,WAE7BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBiN,kBAAkB1U,MAC7CwF,EAAWiC,EAAgBiN,kBAAkBlP,SAEnD,OAAOkC,EAASrR,OACZ,CAGEqe,kBAAmB,CACjB/M,WAAYH,EAAekN,kBAAkB/M,WAC7C3H,MAAO,IAAKwH,EAAekN,kBAAkB1U,SAAU0H,GACvDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACRO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNugB,EAAWvX,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC7BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,4BAA8BgH,EAAK0M,IAC/D/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdwK,EAAiB,CAAElV,UAAW,CAC5B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAO4M,GAAsB7U,UAAW,CAAC,SAAY+J,OACtD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAPzBA,eA6CJ,aA9FxBtM,cAACqgB,GAAqB,CAAAtgB,SACpBC,cAACyN,GAAW,CAACuB,UAAWA,EACXC,cAAeqG,EAAcvV,SACxCC,cAAA,KAAAD,SACsDF,EAAjDoV,EAAmD,mCAArC,sCAiG3B,KCtKO,MAAMsL,GAAmBrP,OAAaC,MAAM,CAC/CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd8V,KAAMzE,SC0FKvR,qBAAkB4C,aA5EjC,SAA4B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACvC,MAAMuG,EAAY,uBACVqa,GAAiBjO,YAAY0N,IAErC,OACEjgB,cAACqgB,GAAqB,CAACtL,UAAU,EAAKhV,SACpCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,gCAAgCE,SAC7CC,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkB4N,GAClB3N,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCwU,EAAa,CAAEtV,UAAW,CACxB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbyP,KAAMK,SAASnD,EAAO8C,QAEvBzC,eAAgB,CACf,CAACC,MAAO4M,GAAsB7U,UAAW,CAAC,UAAY,OAEzDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,wCAA0C,CACvD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIR,OAMrB,KC0CeF,qBAAkB4C,aAjHjC,SAA6B3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAC/C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,sBACZ6I,EAAYnP,EAAE,kCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS0c,GAAqB,CAC7D9U,UAAW,CAAE0K,GAAIA,MAEX6K,GAAoBlO,YAAY2N,IAExC,GAAIte,EAAS,OACX5B,cAACqgB,GAAqB,CAACtL,UAAU,EAAKhV,SACpCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACqgB,GAAqB,CAACtL,UAAU,EAAKhV,SACpCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKwX,iBAIzB,OAHA5gB,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACqgB,GAAqB,CAACtL,UAAU,EAAKhV,SACpCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClByP,KAAMK,SAASE,EAAYP,OAE7BhD,iBAAkB4N,GAClB3N,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ4N,EAAgB,CAAEvV,UAAW,CAC3B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbyP,KAAMK,SAASnD,EAAO8C,QAEvBzC,eAAgB,CACf,CAACC,MAAO4M,GAAsB7U,UAAW,CAAC,UAAY,OAEzDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,OAMrB,KC5HA,MAAM6gB,WAAoBhT,YACxBC,YAAYa,GAKV,IAAImS,EAJJvM,MAAM5F,GACN9V,QAAQC,IAAI,uBACZD,QAAQC,IAAI6V,GACZlP,KAAKyT,MAAQ7R,IAAM0f,YAEnB,MAAMC,EAAeviB,aAAayE,QAAQzD,KAAKkP,MAAMsS,iBAEnDH,EADEE,GAGW,GAGfvhB,KAAKyhB,MAAQ,CACXJ,WAAYA,EACZK,YAAa,GACbC,mBAAoB,IAExB,CAEAtS,oBACErP,KAAK4hB,YAAc,KACnB5hB,KAAKyT,MAAM4L,QAAQwC,OACrB,CAEAtS,uBACEuS,aAAa9hB,KAAK4hB,YACpB,CAGAG,eAEM/hB,KAAK4hB,aACPE,aAAa9hB,KAAK4hB,aAGpB5hB,KAAK4hB,YAAcI,YAAW,KAE5BhiB,KAAKiiB,SAAS,CAACP,YAAa1hB,KAAKyT,MAAM4L,QAAQxc,QAE/C7C,KAAKkP,MAAMoL,SAASta,KAAKyhB,MAAMC,YAAY,GAC1C1hB,KAAKyhB,MAAME,mBAChB,CAGAO,cAActG,GACZ5b,KAAKiiB,SAAS,CAACZ,WAAYzF,EAAM9V,OAAOjD,OAC1C,CAGA4M,SAEE,MAAM0S,EAAcniB,KAAKkP,MAAMiT,YAE/B,OACInhB,eAAA,OAAKJ,UAAU,qBAAoBH,SAAA,CACjCC,cAAA,OAAKE,UAAU,MAAKH,SAClBO,eAAA,OAAKJ,UAAU,aAAYH,SAAA,CACzBC,cAAA,QAAME,UAAU,mBAAkBH,SAChCC,cAACiG,IAAI,CAACC,KAAK,aAEblG,cAAA,SACE0d,IAAKpe,KAAKyT,MACV7S,UAAY,gBAAeZ,KAAKkP,MAAMtO,YACtCmE,KAAK,OACLod,YAAaA,EACbtf,MAAO7C,KAAKyhB,MAAMJ,WAClBe,QAASpiB,KAAK+hB,aAAaM,KAAKriB,MAChCsa,SAAUta,KAAKkiB,cAAcG,KAAKriB,aAItCA,KAAKyhB,MAAMJ,WACX3gB,cAAA,OAAKE,UAAU,eAAcH,SAC3BC,cAAC0E,IAAM,CACLG,MAAM,YAENuN,UAAY9S,KAAKyhB,MAAMJ,WACvBpR,QAASA,KACPjQ,KAAKiiB,SAAS,CAACZ,WAAY,GAAIK,YAAa,KAAK,KAE/CtoB,QAAQC,IAAI2G,KAAKyhB,OACjBzhB,KAAKkP,MAAMoL,SAASta,KAAKyhB,MAAMC,YAAY,GAC3C,EACFjhB,SAEDT,KAAKkP,MAAM3O,EAAE,4BAGlB,KAGV,EAGF6gB,GAAYlR,aAAe,CACzBoK,SAAUnK,GAAGA,EACbmS,QAASnS,GAAGA,GAGC9P,qBAAkB+gB,IC5G1B,SAASnZ,KACd,IAAIK,EAAY,CAAC,EAEbS,EAAS/J,aAAayE,QAAQvE,EAAK1D,gCAErC8M,EAAUS,OADRA,QAGiBhJ,EAGrB,IAAIwiB,EAASvjB,aAAayE,QAAQvE,EAAK3D,gCAErC+M,EAAUka,oBADRD,QAG8BxiB,EAIlC,IAAIwI,EAAWvJ,aAAayE,QAAQvE,EAAK7D,mCAEvCiN,EAAUC,SADRA,QAGmBxI,EAIvB,IAAIyI,EAAYxJ,aAAayE,QAAQvE,EAAK5D,oCAS1C,OAPEgN,EAAUE,UADRA,QAGoBzI,EAGxB3G,QAAQC,IAAIiP,GAELA,CACT,CCVA,SAASyS,GAAoBC,GAC3B,IAAIC,EAAY,GAOhB,MAAMG,EAAUpc,aAAayE,QAAQuX,GAOrC,OANII,IACFH,EAAY,IAAIrX,KAAKwX,IAKhBH,CACT,CAGA,SAASI,GAA6BC,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KAEV,CAqGe5H,qBAAkB4C,aAhGjC,SAA8B3C,GAAiC,IAAhC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,GACrDyI,EAAQ0Z,GAAa5M,mBA1C5B,SAAyBhT,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GAGxC,OAFAzJ,QAAQC,IAAIqpB,GAERA,IAGFtpB,QAAQC,IAAI,wBACL,GAEX,CAgCqCspB,CAAgBzjB,EAAK1D,kCACnD+M,EAAUiT,GAAe3F,mBAASkF,GAAoB7b,EAAK7D,qCAC3DmN,EAAWiT,GAAgB5F,mBAASkF,GAAoB7b,EAAK5D,qCAElE,OACE0F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CAEnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,0CACvBG,cAAC0gB,GAAW,CACVI,gBAAiBtiB,EAAK3D,+BACtB4mB,YAAY,YACZ7H,SAAWzX,IACTwY,GACEnc,EAAK3D,+BACLsH,EACAiT,EACD,OAIP9U,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CAEnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,0CACvBS,eAAA,UACEJ,UAAY,oBACZiC,MAAOkG,EACPuR,SAAYsB,IACV6G,EAAU7G,EAAM9V,OAAOjD,OACvBwY,GACEnc,EAAK1D,+BACLogB,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,kCAATyM,gBACtBtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,oCAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,mCAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,mCAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,UAASpC,SAAaF,EAAE,sCAATyM,gBAC7BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,wCAATyM,sBAGnChM,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CACnCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,6CACvBG,cAACob,GAAY,CACXlb,UAAU,oBACVyZ,SAAU9R,EACViS,aAAa,EACbF,SAAWpN,IAET,IAAI6O,EADJP,EAAYtO,GAGV6O,EADE7O,EACQpB,IAAOoB,GAAMnB,OAAO,cAEpB,GAEZsP,GACEnc,EAAK7D,kCACL0gB,EACAjG,EACD,EAEH2E,gBAAiBla,EAAE,gDAGvBS,eAACF,IAAKoF,IAAG,CAAC8O,GAAI,EAAG5N,GAAI,EAAGsU,EAAG,EAAG/N,GAAI,GAAGlN,SAAA,CACjCC,cAAA,SAAOib,MAAM,OAAMlb,SAAEF,EAAE,8CACvBG,cAACob,GAAY,CACXlb,UAAU,oBACVyZ,SAAU7R,EACVgS,aAAa,EACbF,SAAWpN,IAGT,IAAI6O,EAFJ3iB,QAAQC,IAAI6T,GACZuO,EAAavO,GAGX6O,EADE7O,EACQpB,IAAOoB,GAAMnB,OAAO,cAEpB,GAEZsP,GACEnc,EAAK5D,mCACLygB,EACAjG,EACD,EAEH2E,gBAAiBla,EAAE,mDAK/B,KCvGeF,qBAAkB4C,aA9BjC,SAA4B3C,GAAsC,IAApC,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EAC7D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACsW,GAAY,CAACF,IAAI,2BAA2BlW,UAAU,SACvDF,cAACyE,IAAI,CAACrC,GAAG,2BAA0BrC,SACjCC,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,SAAQtC,SAEZF,EAAE,2BAKXG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAACkiB,GAAqB,CAAC9M,QAASA,IAC/BrV,aAOf,KCnCA,MAAMoiB,WAA8BzU,YAClCC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,kCACZD,QAAQC,IAAI6V,EACd,CAEAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EAGrB,OAFeP,KAAKkP,MAAMnG,QAGxB,IAAK,MACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,iCACrC,IAAK,QACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,mCACrC,IAAK,OACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,kCACnC,IAAK,OACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,kCACnC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,qCAClC,IAAK,YACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uCACnC,QACE,OAAOA,EAAE,qCAEf,EAIaF,qBAAkB4C,YAAW4f,KCvCrC,MAAMC,GAAqB1oB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoDzB2oB,GAAoB3oB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2JxB4oB,GAAiB5oB,GAAI;;;;;;;;;EAYrB6oB,GAAmC7oB,GAAI;;;;;;;;EAUvC8oB,GAAyB9oB,GAAI;;;;;;EAS7B+oB,GAAsB/oB,GAAI;;;;;;;;;;;;;;;;EAmB1BgpB,GAAsBhpB,GAAI;;;;;;;;;;;;;;;;EAmB1BipB,GAAsBjpB,GAAI;;;;;;EAS1BkpB,GAAyBlpB,GAAI;;;;;;ECjJ3BiG,qBAAkB4C,aAvHjC,SAA4B3C,GAOxB,IAPyB,EAC3BC,EAAC,QACDwD,EAAO,MACPD,EAAK,SACLyf,EAAQ,WACRC,GAAW,EAAK,gBAChBhK,GAAgB,GACjBlZ,EACC,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAExBvC,GAAkBjE,YAAY5Y,IAC7BopB,GAAyBxQ,YAAYiQ,IAE7C,OACEliB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACRC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,mCAAmC,MAAIA,EAAE,+BAC5DiZ,GAAmB9Y,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+BACxCS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,yBAAyB,MAAIA,EAAE,2BAEnDG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MARFtE,kBAWlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR8iB,EAAS9Z,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC3B1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACmiB,GAAqB,CAAC9Z,OAAQa,EAAKb,SAAU,IAACrI,cAAA,SAC7CkJ,EAAK8Z,WAAalK,GAClB9Y,cAACyE,IAAI,CAACrC,GAAI,kBAAoB8G,EAAK8Z,SAASpN,GAAK,QAAQ7V,SACvDO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAK8Z,SAAS9c,YAJjCoG,gBAQhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAI,0BAA4B8G,EAAK0M,GAAG7V,SAC3CmJ,EAAK+Z,gBACDjjB,cAAA,SACPA,cAACkjB,IAAKC,MAAK,CAACte,MAAM,OAAM9E,SAAEmJ,EAAKgQ,QAAQkK,MAAM,QAJ/B9W,gBAMfwM,GACCxY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAKma,SACL/iB,eAACmE,IAAI,CAACrC,GAAI,uBAAyB8G,EAAKma,QAAQzN,GAAK,WAAW7V,SAAA,CAC9DC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAKma,QAAQC,SAAS,IAACtjB,cAAA,YAG/CkJ,EAAK8Z,UACLhjB,cAACyE,IAAI,CAACrC,GAAI,kBAAoB8G,EAAK8Z,SAASpN,GAAK,QAAQ7V,SACvDO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAK8Z,SAAS9c,YARjCoG,gBAalBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKqa,UAAUlY,OAAO0N,GAAY,IAAC/Y,cAAA,SAC1CoL,IAAOlC,EAAKsa,SAASnY,OAAO0N,KAFfzM,gBAIhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKua,cADQnX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKwa,gBADQpX,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7B+iB,GAAe9iB,cAAC0E,IAAM,CACtBG,MAAM,YACNxC,KAAK,UACLnC,UAAU,OACV0E,KAAK,KACL2K,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAU,yBAAwB6F,EAAK0M,MAC1D7V,SAEDF,EAAE,iBAELG,cAACyE,IAAI,CAACrC,GAAI,0BAA4B8G,EAAK0M,GAAG7V,SAC5CC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,uCACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAK+Z,gBACzB1L,WAAY1X,EAAE,4BACd+Y,eAAgBmK,EAChBtL,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOiP,GAAoBlX,UAAW3D,SAG3C,EACJxH,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAxCfoG,kBAvCzBA,eAkFN,QAKtB,KCxCe3M,qBAAkB4C,aAnFjC,SAAwB3C,GAA4B,IAA3B,EAAEC,EAAC,SAAE2b,EAAQ,QAAEnY,GAASzD,EAE/CtB,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UAEjErlB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAErE,MAAM,QAAE/hB,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS8e,GAAoB,CAChFlX,UAAW3D,KACX+D,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAAC4jB,GAAmB,CAACxO,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC4jB,GAAmB,CAACxO,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAAA,KAAAD,SAAIF,EAAE,wCAKZ,MAAMgjB,EAAW/gB,EAAK+hB,gBAGtB,OAAKhB,EAAS9Z,MAAM3J,OAWlBY,cAAC4jB,GAAmB,CAACxO,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,0BACbuP,aAAa,EACbb,SAAUsU,EAAStU,SACnBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyS,EAAStU,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqT,gBAAgB9a,MAC3CwF,EAAWiC,EAAgBqT,gBAAgBtV,SAEjD,OAAOkC,EAASrR,OACZ,CAGEykB,gBAAiB,CACfnT,WAAYH,EAAesT,gBAAgBnT,WAC3C3H,MAAO,IAAKwH,EAAesT,gBAAgB9a,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC8jB,GAAmB,CAClBjB,SAAUA,EACVC,YAAY,EACZhK,iBAAiB,QA1CvB9Y,cAAC4jB,GAAmB,CAACxO,QAASA,EAAQrV,SACpCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAAA,KAAAD,SACGF,EAAE,oCA4Cb,KC/FO,MAAMkkB,GAAyB7S,OAAaC,MAAM,CACrD9I,OAAQ6I,OACLG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,yBCuEDF,qBAAkB4C,aA/DT3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC9GU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,gBAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,kCAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,iCAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,iCAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,sCAATyM,mBAEjCtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,+BAK/DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACHG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAExBF,EAAE,gDAELG,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KC8CExG,qBAAkB4C,aA/FjC,SAA8B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACzC,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACxBqG,EAAWE,GAAgBnK,mBAAS,IAAIjS,KAAKkI,MAASoP,QAAQ,YAC9D6E,EAASE,GAAcpK,mBAAS,IAAIjS,KAAKkI,MAASqP,MAAM,YACxDpS,EAAQ0Z,GAAa5M,mBAAS,QAC9BqK,EAAUC,GAAetK,oBAAS,IAClCsB,EAAWiJ,GAAgBvK,mBAAS,IAErCnG,EAAYnP,EAAE,iCACdsG,EAAY,qBAEVqQ,GAAmBjE,YAAY5Y,GAEvC,OACEqG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAWA,QAG3BnG,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACPC,cAAe,CACb2M,UAAWA,EACXC,QAASA,EACThX,OAAQA,GAEVsK,iBAAkBoR,GAClBnR,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZyM,EAAazM,EAAOuM,WACpBG,EAAW1M,EAAOwM,SAClB0C,EAAUlP,EAAOxK,QAEjB,MAAMsX,EAAe7D,GAAejJ,EAAOuM,WACrCQ,EAAa9D,GAAejJ,EAAOwM,SACzCK,EACG,sBAAqBC,KAAgBC,KAAcvX,KAGtDyK,GAAc,GACd2M,GAAY,EAAK,EACnB1f,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAAStT,EAAA,OACzEvM,cAACgkB,GAAyB,CACxBtS,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,MAKNqZ,EACAlf,eAACwG,IAAI,CAACV,MAAOvG,EAAE,uCAAuCE,SAAA,CACpDO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,6CACHS,eAACyF,IAAI,CAAAhG,SAAA,CACHO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,kBAAoB,KACtBuL,IAAOgU,GAAW/T,OAAO0N,GAAY,IAAG,MACxC3N,IAAOiU,GAAShU,OAAO0N,MAE1BzY,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,kBAAkB,KAAGA,EAAG,2BAA0BwI,cAI3DrI,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVO,eAACoE,IAAM,CACLG,MAAM,UACN0K,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,mBAAmB,IAAErG,EAAE,4BAItC,SAKZ,KCnGeF,qBAAkB4C,aAZjC,SAA+B3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EAC3D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SACzBC,cAACG,IAAS,CAAAJ,SACPA,OAKb,K,UC8BeJ,qBAAkB4C,aApCjC,SAA8B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACvC,MAAQqkB,GAAmB1R,YAAYkQ,IAErC,OACEniB,eAAA,UAAQJ,UAAU,yBAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACP0U,EAAe,CAAE/Y,UAAW,CAC1B6H,MAAO,CACLmR,eAAgB9gB,EAAMmK,OAAOqI,KAE9B1C,eAAgB,CACf,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAE3DxC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,cACzB,IAEHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE1D,EACN9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,SAAS,IAAG,IAClCrG,EAAE,8BAGX,KCEeF,qBAAkB4C,aAjCjC,SAAiC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EAChD,MAAOukB,GAAqB5R,YAAYoQ,IAEtC,OACE3iB,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,4CACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKkb,YAAY,IAACpkB,cAAA,SAAM,IAAEkJ,EAAKV,eACnD+O,WAAY1X,EAAE,iCACd+Y,eAAgBuL,EAChB1M,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOiP,GAAoBlX,UAAW3D,MACvC,CAAC4L,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAG5D,EACJ7V,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KC0FevG,qBAAkB4C,aAvHE3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,KAAEzI,EAAI,QAAE2W,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,UAAED,GAAWvd,EAAA,OACtHI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDC,cAAC4R,KAAM,CAAA7R,SACLO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CAEPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOyS,YAAe,0BAA4B,eAC9DnS,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,eAAe,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,sDAAqDH,SAC9EO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,MACbE,UAAU,WACVyH,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,eAAe,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEI,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,WACLhG,UAAYyR,EAAO4S,SAAY,0BAA4B,eAC3DtS,aAAa,MACb2H,SAAW0K,IACVD,EAAaC,GACblH,EAAgB,YAAY,GAAM,EAAK,IAG/Cpd,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,SAAS,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,2BAG1DF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,kBAAkB,GAAM,EAAK,EAC7Crd,SAAA,CAELrH,QAAQC,IAAI,wCACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUsH,gBAAgB1b,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC5C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,0BAGnEI,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CC,cAAA,QAAME,UAAU,cAAaH,SAAEmJ,EAAKua,eAAoB,IAACzjB,cAAA,SAAMA,cAAA,YAEjEM,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CC,cAAA,QAAME,UAAU,cAAaH,SAACC,cAAC2kB,GAAwB,CAACzb,KAAMA,MAAclJ,cAAA,SAAMA,cAAA,SAAM,IAACA,cAAA,SACvD,IAAhC4kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,6BAuBN,KCzDIF,qBAAkB4C,aAhEjC,SAA+B3C,GAA8C,IAA7C,EAACC,EAAC,MAAEuD,EAAK,cAAEqP,EAAa,KAAEvJ,EAAI,UAAEiU,GAAUvd,EACxE,MAAOklB,GAAqBvS,YAAYmQ,IAEtC,OACE1iB,cAACwS,KAAM,CACLC,cAAe,CACb2R,YAAa3R,EAAc2R,YAC3B5b,YAAaiK,EAAcjK,YAC3Bgc,MAAO/R,EAAc+R,MACrBD,SAAU9R,EAAc8R,SACxBzH,eAAiBrK,EAAcqK,eAAkBrK,EAAcqK,eAAelH,GAAK,MAGrFhD,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZiS,EAAkB,CAAE5Z,UAAW,CAC7B6H,MAAO,CACL6C,GAAInD,EAAcmD,GAClBwO,YAAavR,EAAOuR,YACpB5b,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACdD,SAAU1R,EAAO0R,SACjBzH,eAAgBjK,EAAOiK,iBAExB5J,eAAgB,CACjB,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAGzDxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,GAAiB3Q,EAAA,OACxEzM,cAACglB,GAA0B,CACzBtT,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBlU,KAAMA,EACNiU,UAAWA,GAEgB,GAIvC,KCpDO,MAAMuF,GAAsBhpB,GAAI;;;;;;;;EA4JxBiG,qBAAkB4C,aAlJjC,SAAgC3C,GAAqD,IAAnD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,eAAE6hB,EAAc,UAAE9H,GAAWvd,EAChF,MAAQslB,GAAe3S,YAAYmQ,KAC3ByC,EAAUC,GAAgBjQ,oBAAS,GAyF3C,OACEnV,cAACqlB,KAAe,CAACC,UA7DAtU,IAEjBtY,QAAQC,IAAI,0BACZD,QAAQC,IAAIqY,GACZ,MAAM,YAAEuU,EAAW,YAAEC,EAAW,OAAEC,EAAM,OAAEC,GAAW1U,EACrDtY,QAAQC,IAAI8sB,GACZ/sB,QAAQC,IAAI6sB,GACZ9sB,QAAQC,IAAI+sB,GAGZhtB,QAAQC,IAAI,qBACP6sB,GAA0B,WAAXE,IAKpBhtB,QAAQC,IAAI,4BAEV6sB,EAAYG,cAAgBF,EAAOE,aACnCH,EAAYI,QAAUH,EAAOG,OA9CR5Z,KAA+B,IAA9B,QAAE6Z,EAAO,YAAEC,GAAa9Z,EAChDoZ,GAAY,GACZF,EAAW,CACTha,UAAW,CACT6H,MAAO,CACL6C,GAAIiQ,EACJE,WAAYD,IAGhB5S,eAAgB,CACd,CAAEC,MAAOkP,GAAmBnX,UAAW,CAAE0K,GAAIuH,EAAU+G,eAAetO,QAEvExC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACf7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,eAE7B6N,YAAW,IAAM8D,GAAY,IAAQ,IAAI,IACxC1R,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDyf,YAAW,IAAM8D,GAAY,IAAQ,IAAI,GACzC,EA2BFY,CAAiB,CACfH,QAASN,EACTO,YAAaN,EAAYI,QACzB,EAkCoC7lB,SACpCO,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,mBACfG,cAAC8G,IAAKyO,QAAO,CAAAxV,SACXC,cAACkmB,GAAqB,SAG1BlmB,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACQ,IAAM,CAACC,OAAQokB,EAAUnkB,OAAQmkB,EAASplB,SAAA,CACvCO,eAACF,IAAKC,IAAG,CAACH,UAAU,uBAAsBH,SAAA,CACxCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,qBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,yBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,sCACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,iBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAACC,cAAA,QAAME,UAAU,cAAaH,SAAEF,EAAE,qBACjFG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,0BAE7BF,cAACmmB,KAAS,CAACR,YAAY,gBAAe5lB,SACnCA,CAACqmB,EAAUC,IACR/lB,eAAA,OACEod,IAAK0I,EAASE,YACVF,EAASG,eAAcxmB,SAAA,CAE1Bod,EAAU+G,eAAejiB,MAAM8G,MAAMgD,KAAI,CAAAU,EAAW+Z,KAAG,IAAb,KAAEtd,GAAMuD,EAAA,OACjDzM,cAACymB,KAAS,CACRlB,YAAarc,EAAK0M,GAClBgQ,MAAOY,EAAIzmB,SAGVA,CAACqmB,EAAUC,IACRrmB,cAAA,OACE0d,IAAK0I,EAASE,SACdV,MAAO1c,EAAK6c,cACRK,EAASM,kBACTN,EAASO,gBAAe5mB,SAE5BC,cAAC4mB,GAAsB,CAACnU,cAAevJ,EAAMiU,UAAWA,EAAWjU,KAAMA,OAT1EA,EAAK0M,GAYA,IAEbwQ,EAAS3E,0BAShC,K,SC7KO,MAAMoF,GAAmB,CAC5BC,QAAQ,EACRC,SAAS,EACTC,QAAS,yCACTC,WAAW,EACXC,QAAS,yJC0CEvnB,qBAAkB4C,aA5BG3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,QAAEkO,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAezd,EAAA,OAC7HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbxG,aAAchO,EAAOyU,MACrBtuB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,QAASiH,EAAElf,OAAOmiB,cAChCnK,EAAgB,SAAS,GAAM,EAAK,IAGxCpd,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KCCIF,qBAAkB4C,aA5BI3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,QAAEkO,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAezd,EAAA,OAC9HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbxG,aAAchO,EAAO2U,OACrBxuB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,SAAUiH,EAAElf,OAAOmiB,cACjCnK,EAAgB,UAAU,GAAM,EAAK,IAGzCpd,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KCIIF,qBAAkB4C,aA5BE3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,aAAE0S,EAAY,WAAEoD,EAAU,gBAAErK,EAAe,cAAEC,GAAezd,EAAA,OAC/HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,GAAM,EAAK,IAGvCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KC8HIF,qBAAkB4C,aAvJjC,SAAqC3C,GAAoC,IAAnC,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,YAAE8S,GAAYtW,EACpE,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAChB+R,GAAkBpV,YAAY+P,IAEtC,OACEhiB,eAACsnB,IAAU,CAACC,WAAYhoB,EAAE,gCAAgCE,SAAA,CACxDC,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,gCAAgCE,SAC5CC,cAACwS,KAAM,CACLC,cAAe,CACb6U,MAAOpR,EAAYgO,eAAeoD,OAGpC1U,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB0R,MAAOzU,EAAOyU,QAEfpU,eAAgB,CACf,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIA,OAE9CxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe5Q,EAAA,OACvFzM,cAAC+nB,GAA2B,CAC1BrW,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GAEa,MAIpCrd,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,kBAAkBE,SAC9BC,cAACwS,KAAM,CACLC,cAAe,CACb+U,OAAQtR,EAAYgO,eAAesD,QAGrC5U,SAAUA,CAACC,EAAMmV,KAAyB,IAAvB,cAAElV,GAAekV,EAClCtvB,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB4R,OAAQ3U,EAAO2U,SAEhBtU,eAAgB,CACjB,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIA,OAE5CxC,MAAK6U,IAAe,IAAd,KAAEnmB,GAAMmmB,EACXvvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEHmoB,IAAA,IAAC,aAAExW,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe6K,EAAA,OACvFloB,cAACmoB,GAA4B,CAC3BzW,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRwR,aAAcA,EACdxE,QAASA,EACTzC,gBAAiBA,EACjBC,cAAeA,GAEc,MAIrCrd,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,gBAAgBE,SAC5BC,cAACwS,KAAM,CACLC,cAAe,CACbiV,KAAMxR,EAAYgO,eAAewD,MAGnC9U,SAAUA,CAACC,EAAMuV,KAAyB,IAAvB,cAAEtV,GAAesV,EAClC1vB,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB8R,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACjB,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIA,OAE5CxC,MAAKiV,IAAe,IAAd,KAAEvmB,GAAMumB,EACX3vB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEHuoB,IAAA,IAAC,aAAE5W,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAeiL,EAAA,OACvFtoB,cAACuoB,GAA0B,CACzB7W,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GAEY,QAMzC,KCzGe1d,qBAAkB4C,aAlDC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,eAAE6gB,GAAgBtkB,EAAA,OAC/DU,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,sBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBmkB,EAAesE,qBAEdxoB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,iBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBmkB,EAAeuE,gBAEdzoB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,mBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBmkB,EAAeT,kBAEdzjB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,kBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBmkB,EAAewE,iBAEd1oB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,qBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBmkB,EAAeR,yBAIjB,KC2CM/jB,qBAAkB4C,aArFK3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,aAAE0S,EAAY,QAAExE,EAAO,cAAExC,EAAa,gBAAED,EAAe,UAAED,GAAWvd,EAAA,OAC1II,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,gBACLhG,UAAYyR,EAAOsR,cAAiB,0BAA4B,eAChEhR,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,iBAAiB,GAAM,EAAK,IAGtDpd,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,OAAOjS,UAAU,wBAEhEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CC,cAACob,GAAY,CACXlb,UAAYyR,EAAO4R,SAAY,0BAA4B,eAC3D5J,SAAU9G,EAAO0Q,SACjB3J,SAAWpN,IACT6Q,EAAc,WAAY7Q,GAC1B4Q,EAAgB,YAAY,EAAK,IAGrCpd,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wBAAwBE,SAAA,CAC3CC,cAACob,GAAY,CACXlb,UAAYyR,EAAO6R,QAAW,0BAA4B,eAC1D7J,SAAU9G,EAAO2Q,QACjB5J,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,IAGpCpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,UAAU,GAAM,EAAK,EACrCrd,SAAA,CAENC,cAAA,UAAQmC,MAAM,QAAOpC,SAAEF,EAAE,mCACzBG,cAAA,UAAQmC,MAAM,OAAMpC,SAAEF,EAAE,kCACxBG,cAAA,UAAQmC,MAAM,OAAMpC,SAAEF,EAAE,kCACxBG,cAAA,UAAQmC,MAAM,YAAWpC,SAAEF,EAAE,uCAC7BG,cAAA,UAAQmC,MAAM,UAASpC,SAAEF,EAAE,wCAE7BG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0BAA0BE,SAAA,CAC7CO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,uBACLhG,UAAYyR,EAAOgX,qBAAwB,0BAA4B,eACvE/O,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,wBAAwB,GAAM,EAAK,EAErDnL,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUyL,sBAAsB7f,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAClDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,uBAAuBiM,UAAU,OAAOjS,UAAU,wBAErC,IAAhC0kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAIF,KCGIF,qBAAkB4C,aAnFjC,SAAkC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,YAAE8S,GAAYtW,EACxD,MAAQ+nB,GAAkBpV,YAAY+P,IAEtC,IAAIuG,EAAuB,GACvB3S,EAAYgO,eAAeyE,uBAC7BE,EAAuB3S,EAAYgO,eAAeyE,qBAAqB/S,IAKzE,IAAI2N,EAAW,KACXrN,EAAYgO,eAAeX,WAC7BA,EAAW,IAAIrgB,KAAKgT,EAAYgO,eAAeX,WAEjD,IAAIC,EAAU,KAKd,OAJItN,EAAYgO,eAAeV,UAC7BA,EAAU,IAAItgB,KAAKgT,EAAYgO,eAAeV,UAI9CxjB,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mBAAoBomB,YAAY,OAAMlmB,SACnDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CACbwQ,cAAe/M,EAAYgO,eAAejB,cAC1CM,SAAUA,EACVC,QAASA,EACTnb,OAAQ6N,EAAYgO,eAAe7b,OACnCsgB,qBAAsBE,GAGxBjW,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBqN,cAAepQ,EAAOoQ,cACtBM,SAAUzH,GAAejJ,EAAO0Q,UAChCC,QAAS1H,GAAejJ,EAAO2Q,SAC/Bnb,OAAQwK,EAAOxK,OACfsgB,qBAAsB9V,EAAO8V,uBAE9BzV,eAAgB,CACf,CAACC,MAAOiP,GAAoBlX,UAAW3D,SAE1C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,WAAEoD,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OACnGzM,cAAC8oB,GAA6B,CAC5B3L,UAAWjH,EACXxE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdhH,cAAeA,EACfD,gBAAiBA,GAEa,OAM5C,KC7Dezd,qBAAkB4C,aA7BM3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEE,GAAc3D,EAAA,OAClEU,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,OAAKE,UAAU,OAAMH,SAClBwD,EAAa2C,OAEd3C,EAAawlB,QACb/oB,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS7I,EAAawlB,YACtE,GAEJ/oB,cAAA,OAAAD,SACGwD,EAAaylB,QAEhBhpB,cAAA,OAAAD,SACGwD,EAAa0lB,QAEhBjpB,cAAA,OAAAD,SACGwD,EAAa2lB,eAEhBlpB,cAAA,OAAAD,SACGwD,EAAa4lB,uBAGb,KCMMxpB,qBAAkB4C,aA9BK3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,QAAEkO,EAAO,gBAAEzC,EAAe,aAAEiH,GAAczkB,EAAA,OACxGI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CACJ3N,KAAK,OACL6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAExB,IAAhC0kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAIF,KCgDIF,qBAAkB4C,aApEjC,SAAkC3C,GAA8C,IAA7C,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAEoY,EAAQ,YAAEtF,GAAYtW,EAC3E,MAAQ+nB,GAAkBpV,YAAY+P,IAEtC,OACEhiB,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACwS,KAAM,CACLC,cAAe,CACbyG,QAAShD,EAAYgO,eAAehL,SAGtCtG,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBsD,QAASrG,EAAOqG,UAEjBhG,eAAgB,CACf,CAACC,MAAOiP,GAAoBlX,UAAW3D,SAE1C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,gBAAEzC,EAAe,aAAEiH,GAAc5X,EAAA,OACxEzM,cAACopB,GAA6B,CAC5B1X,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,GAEa,IAGlClH,EAAYgO,eAAemF,gBAC3B/oB,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CAClBF,EAAE,sCAAsC,IAAG,IAC5CG,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8T,EAAYgO,eAAemF,kBAAkBtpB,SAC/EC,cAACspB,IAAM7kB,KAAI,CAAA1E,SAAEmW,EAAYgO,eAAeqF,2BAG5C,QAIV,KCbe5pB,qBAAkB4C,aA3DjC,SAA6B3C,GAAyC,IAAxC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,eAAE8gB,GAAgBtkB,EACjE,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAExB,OACEtV,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEF,EAAE,cAAc,OAC7BG,cAAC8G,IAAKyO,QAAO,CAAAxV,SACXC,cAACyE,IAAI,CAACrC,GAAK,0BAAyBwT,OAAQ7V,SAC1CC,cAAC0E,IAAM,CAACG,MAAM,YAAYD,KAAK,KAAI7E,SAChCF,EAAE,yBAKXS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,cAAA,OAAKE,UAAU,OAAMH,SAClBmkB,EAAesF,kBAElBxpB,cAAA,OAAAD,SACGmkB,EAAeuF,8BAElBzpB,cAAA,OAAAD,SACGmkB,EAAewF,oCAGlB1pB,cAAA,OAAKE,UAAU,OAAMH,SAClBmkB,EAAeyF,sBAElB3pB,cAAA,OAAAD,SACGmkB,EAAe0F,kBAElBtpB,eAAA,OAAAP,SAAA,CACGmkB,EAAe2F,iBAAiB,IAAE3F,EAAe4F,gBAEpD9pB,cAAA,OAAAD,SACGmkB,EAAe6F,qBAGtBzpB,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRmkB,EAAelB,UAAahjB,cAAA,QAAME,UAAU,cAAaH,SACzDC,cAACyE,IAAI,CAACrC,GAAK,kBAAiB8hB,EAAelB,SAASpN,UAAU7V,SAC5DC,cAAC0E,IAAM,CAACrC,KAAK,OAAOwC,MAAM,OAAM9E,SAC7BmkB,EAAelB,SAAS9c,WAI7Bge,EAAeb,SAAYrjB,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8hB,EAAeb,QAAQzN,aAAa7V,SAChGC,cAAC0E,IAAM,CAACrC,KAAK,OAAOwC,MAAM,OAAM9E,SAC7BmkB,EAAeb,QAAQC,kBAMpC,KCbe3jB,qBAAkB4C,aAnCjC,SAAwC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EACvD,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACxBiR,GAAwBzX,YAAYqQ,IAEzC,OACE5iB,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,+CACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAKqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAa,MAAI7P,EAAK+gB,iBACpE1S,WAAY1X,EAAE,oCACd+Y,eAAgBoR,EAChBvS,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOiP,GAAoBlX,UAAW3D,MACvC,CAAC4L,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAG5D,EACJ7V,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KCqCevG,qBAAkB4C,aApEjC,SAAmC3C,GAAqD,IAAnD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,eAAE6hB,EAAc,UAAE9H,GAAWvd,EACnF,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAElBmD,EADcvV,qBAAWvC,GACA8X,WACzBmR,EAAiB,qBAAoBtU,gBAE3C,OACEtV,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,sBACfG,cAAC8G,IAAKyO,QAAO,CAAAxV,SAEXC,cAACyE,IAAI,CAACrC,GAAI8nB,EAAcnqB,SACtBO,eAACoE,IAAM,CAACxE,UAAU,SAAS2E,MAAM,UAAS9E,SAAA,CACxCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,SAAS,IAAErG,EAAE,0CAKzCsd,EAAU+G,eAAeiG,SAASphB,MAAM3J,OAIzCkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRod,EAAU+G,eAAeiG,SAASphB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACpD1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,KAE7B/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK+gB,gBAET3pB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACLmJ,EAAKyf,qBAAwBzf,EAAKyf,qBAAqBziB,KAAO,GAC9DgD,EAAKkhB,gBAAmBpqB,cAAA,OAAAD,SAAKC,cAAA,SAAOE,UAAU,aAAYH,SAAEmJ,EAAKkhB,oBAAiC,MAEvGpqB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASlD,EAAKwe,WAElE1nB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRO,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,cAACyE,IAAI,CAACrC,GAAK,qBAAuB+a,EAAU+G,eAAetO,GAAK,iBAAmB1M,EAAK0M,GAClF1V,UAAU,gCAA+BH,SAE5CF,EAAE,kBAELG,cAACqqB,GAA+B,CAACnhB,KAAMA,WArB7B,WAAaA,EAAK0M,GAwBtB,SAvClB5V,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,6CA6ChB,KCiFeF,qBAAkB4C,aAtIjC,SAA2B3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEmY,GAAS5b,EACvD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAClB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAAS+e,GAAmB,CACpEnX,UAAW,CACT0K,GAAIA,GAENtK,YAAa,kBAGRkL,GAAkBjE,YAAY5Y,IAC9B2wB,GAAgC/X,YAAYgQ,IAMnD,GAHAjkB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAGjE/hB,EAAS,OAAO5B,cAACuqB,GAAsB,CAAAxqB,SAAEF,EAAE,+BAE/C,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACuqB,GAAsB,CAAAxqB,SAAEF,EAAE,8BAIpC,IAAIsG,EAAY7H,aAAayE,QAAQvE,EAAKzD,8BACrCoL,IACHA,EAAY,qBAEd,MAAMqkB,EAAa,yBAA2B5U,EACxC6U,EAAmB,qBAAoB7U,gBACvC8U,EAAyB,GAAEvc,OAAOqN,SAASmP,aAAaxc,OAAOqN,SAASoP,+BAA+BhV,IAE7G,OACEtV,eAACiqB,GAAsB,CAAAxqB,SAAA,CACrBC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,yBAA2B,KAAOiC,EAAKoiB,eAAejB,cAAcljB,SACxFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCO,eAACmE,IAAI,CAACrC,GAAI+D,EACJjG,UAAU,yBAAwBH,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,mBAG9CS,eAACmE,IAAI,CAACrC,GAAIqoB,EACNvqB,UAAU,yBAAwBH,SAAA,CAClCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAErG,EAAE,mCAG/CG,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,UACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASmnB,GAC5BzqB,SAEDF,EAAE,iBAGLG,cAAC6qB,IAAQ,CACP3qB,UAAU,GACVmE,KAAK,SACLymB,QAAM,EACNzoB,KAAK,OACLwC,MAAM,YACNkmB,eAAgBlrB,EAAE,iBAClBoC,MAAO,CACLjC,cAACmN,GAAoB,CAACvD,WAAW,SAASC,SAAS,iBAAgB9J,SACjEC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,QACLkN,QAASA,KACP+a,EAA6B,CAAEpf,UAAW,CACxC6H,MAAO,CACL6C,GAAIA,IAEL1C,eAAgB,KAElBE,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxB,MAAMunB,EAAkBvnB,EAAKkpB,oCAAoC9G,eAAetO,GAChFvS,EAAQnB,KAAM,0BAAyBmnB,KACvChW,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACJ9B,SACCF,EAAE,qDAvBAyM,0BA8BjBhM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAACirB,GAAyB,CACxB/U,YAAapU,IAEjBxB,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CACnBC,cAAA,OAAKE,UAAU,OAAMH,SAACC,cAAA,KAAAD,SAAIF,EAAE,4CAC3B6qB,EAAsB1qB,cAAA,SACvBA,cAAA,OAAKE,UAAU,OAAMH,SAACO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAErG,EAAE,4DAErDS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGwkB,GAAI,EAAEnrB,SACrBC,cAACmrB,GAA8B,CAAC5nB,aAAczB,EAAKyB,iBAErDvD,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGwkB,GAAI,EAAEnrB,SACrBC,cAACorB,GAAoB,CAAClH,eAAgBpiB,EAAKoiB,yBAIjD5jB,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAACqrB,GAAyB,CAACnH,eAAgBpiB,EAAKoiB,iBAChDlkB,cAACsrB,GAAyB,CAACpV,YAAapU,UAG5C9B,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAACurB,GAAuB,CAACpO,UAAWrb,EAAMmjB,eAAgB7P,IAC1DpV,cAACwrB,GAA4B,CAACtV,YAAapU,IAC3C9B,cAACyrB,GAA0B,CAACtO,UAAWrb,WAKjD,KCxIenC,qBAAkB4C,aAjBjC,SAAiC3C,GAAgD,IAA/C,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,cAAEkjB,GAAcrjB,EAC5E,MAAM8rB,EAAY7rB,EAAE,iCAAmC,KAAOojB,GAAiBA,EAE/E,OACEjjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SACzBO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOslB,IACpB1rB,cAACI,IAAKC,IAAG,CAACqG,GAAI,GAAG3G,SACdA,UAMf,KCsHeJ,qBAAkB4C,aAjIA3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,EAAe,UAAED,EAAS,UAAEhX,GAAWvG,EAAA,OAClIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0lB,QAAS/Y,EAAOgZ,SAChBjS,SAAYsB,IACVkC,EAAgB,YAAY,GAAM,GAClCC,EAAc,YAAcxK,EAAOgZ,SAAU,IAG/C7rB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,2CAEnDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,WAEtCU,EAAOgZ,SAgBTvrB,eAAAwrB,WAAA,CAAA/rB,SAAA,CACEO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qCAAqCE,SAAA,CACxDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAO6X,gBAAmB,0BAA4B,eAClEvX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,wBAElEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kDAAkDE,SAAA,CACrEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,8BACLhG,UAAYyR,EAAO8X,4BAA+B,0BAA4B,eAC9ExX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,0BAGhFF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sDAAsDE,SAAA,CACzEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,iCACLhG,UAAYyR,EAAO+X,+BAAkC,0BAA4B,eACjFzX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,iCAAiCiM,UAAU,OAAOjS,UAAU,6BAIrFI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,sBACLhG,UAAYyR,EAAOgY,oBAAuB,0BAA4B,eACtE1X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,wBAEtEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qCAAqCE,SAAA,CACxDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOiY,gBAAmB,0BAA4B,eAClE3X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,0BAGpEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,mBACLhG,UAAYyR,EAAOkY,iBAAoB,0BAA4B,eACnE5X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,6BAIvEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kCAAkCE,SAAA,CACrDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOmY,aAAgB,0BAA4B,eAC/D7X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,0BAGjEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qCAAqCE,SAAA,CACxDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOoY,gBAAmB,0BAA4B,eAClE9X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,gCA9FtEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,WACLhG,UAAYyR,EAAOqR,SAAY,0BAA4B,eAC3D/Q,aAAa,MAAKlS,SAAA,CACpBod,EAAU+G,eAAeb,SACzB/iB,eAAA,UAAQ6B,MAAM,GAAEpC,SAAA,CAAaF,EAAE,yCAAyC,KAAGsd,EAAU+G,eAAeb,QAAQC,WAAtFhX,gBAEvB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,2BAyFjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KCtBIxG,qBAAkB4C,aArGjC,SAA6B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACjD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAa,0BAAyByP,KACtC,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+e,GAAmB,CAC3DnX,UAAW,CACT0K,GAAIA,MAGA+R,GAAkBpV,YAAY+P,IAGtC,GAAI1gB,EAAS,OAAO5B,cAAC+rB,GAAwB,CAAAhsB,SAAEF,EAAE,+BAEjD,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAC+rB,GAAwB,CAAAhsB,SAAEF,EAAE,8BAGtCnH,QAAQC,IAAImJ,GAEZ,IAAIkqB,EAAkB,GAKtB,OAJIlqB,EAAKoiB,eAAelB,WACtBgJ,EAAkBlqB,EAAKoiB,eAAelB,SAASpN,IAI/C5V,cAAC+rB,GAAwB,CAAC9I,cAAenhB,EAAKoiB,eAAejB,cAAcljB,SACzEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,cAAeomB,YAAY,OAAMlmB,SAC9CC,cAACwS,KAAM,CACLC,cAAe,CACboZ,SAAU/pB,EAAKoiB,eAAe2H,SAC9BrC,gBAAiB1nB,EAAKoiB,eAAesF,gBACrCC,4BAA6B3nB,EAAKoiB,eAAeuF,4BACjDC,+BAAgC5nB,EAAKoiB,eAAewF,+BACpDC,oBAAqB7nB,EAAKoiB,eAAeyF,oBACzCC,gBAAiB9nB,EAAKoiB,eAAe0F,gBACrCC,iBAAkB/nB,EAAKoiB,eAAe2F,iBACtCC,aAAchoB,EAAKoiB,eAAe4F,aAClCC,gBAAiBjoB,EAAKoiB,eAAe6F,gBACrC/G,SAAUgJ,GAGZpZ,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8U,EAAc,CAAEzc,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBiW,SAAUhZ,EAAOgZ,SACjBrC,gBAAiB3W,EAAO2W,gBACxBC,4BAA6B5W,EAAO4W,4BACpCC,+BAAgC7W,EAAO6W,+BACvCC,oBAAqB9W,EAAO8W,oBAC5BC,gBAAiB/W,EAAO+W,gBACxBC,iBAAkBhX,EAAOgX,iBACzBC,aAAcjX,EAAOiX,aACrBC,gBAAiBlX,EAAOkX,gBACxB/G,SAAUnQ,EAAOmQ,WAElB9P,eAAgB,CACf,CAACC,MAAOkP,GAAmBnX,UAAW,CAAC0K,GAAGA,IAC1C,CAACzC,MAAOiP,GAAoBlX,UAAW3D,SAE1C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe5Q,EAAA,OACvFzM,cAACisB,GAAwB,CACvBva,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,EACfF,UAAWrb,EACXqE,UAAWA,GAEc,OAMvC,KCpGexG,sBANMC,IAAA,IAAC,EAAEC,EAAC,MAAEsC,GAAOvC,EAAA,OAC7BuC,EACGnC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,iBAC1BG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,eAAsB,ICXhD,MAAMqsB,GAA2BxyB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6B/ByyB,GAA0BzyB,GAAI;;;;;;;;;;;;;;;;;EAmB9B0yB,GAAuB1yB,GAAI;;;;;;;;;;EAY3B2yB,GAAoB3yB,GAAI;;;;;;;;;;;;;;;;;;;EAqBxB4yB,GAAwB5yB,GAAI;;;;;;;;;EC9B1BiG,qBAAkB4C,aApCjC,SAAiC3C,GAA8C,IAA7C,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,aAAEwsB,GAAa,GAAM3sB,EAC1E,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCwsB,EAEAvsB,cAACyG,GAAU,CAACN,UAAU,2BAA2BjG,UAAU,SAG3DF,cAACyG,GAAU,CAACN,UAAU,oBAAoBjG,UAAU,SAEtDI,eAACmE,IAAI,CAACrC,GAAG,oCACHlC,UAAU,yBAAwBH,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAAa,IAAErG,EAAE,4CAE5CG,cAACmN,GAAoB,CAACvD,WAAW,MACTC,SAAS,sBAAqB9J,SACpDC,cAACgV,GAAS,CAACH,OAAO,wCAIxB7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCiIeJ,qBAAkB4C,aA5JjC,SAA6B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACnCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,iCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS4oB,GAA0B,CACtFhhB,UAAW,CAAE+J,SAAUA,MAEjBuX,GAAwBja,YAAY+Z,IAEtChX,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACysB,GAAwB,CAAA1sB,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACysB,GAAwB,CAAA1sB,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CAKZ,MAAM6sB,EAAgB5qB,EAAK6qB,qBAE3B,OACE3sB,cAACysB,GAAwB,CAAA1sB,SACvBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,gCACboP,cAAeqG,EACf/G,SAAUme,EAAcne,SACxBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOsc,EAAcne,SAAS8B,WAE/BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBmc,qBAAqB5jB,MAChDwF,EAAWiC,EAAgBmc,qBAAqBpe,SAEtD,OAAOkC,EAASrR,OACZ,CAGEutB,qBAAsB,CACpBjc,WAAYH,EAAeoc,qBAAqBjc,WAChD3H,MAAO,IAAKwH,EAAeoc,qBAAqB5jB,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,2CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAPFtE,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN2sB,EAAc3jB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK0jB,QADQtgB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK2jB,cADQvgB,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK2M,OACJ3M,EAAK4jB,WAAcxsB,eAAA,QAAAP,SAAA,CAAM,IAAEF,EAAE,gBAAgB,IAACG,cAAA,YAAe,GAC7DkJ,EAAK6jB,oBAAuB/sB,cAACkjB,IAAKC,MAAK,CAACte,MAAM,OAAM9E,SACnDF,EAAE,mDACU,KALDyM,gBAOhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,iBADZ3gB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,iCAAmCgH,EAAK0M,IACpE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd4W,EAAoB,CAAEthB,UAAW,CAC/B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAO+Y,GAA0BhhB,UAAW,CAAC,SAAY+J,OAC1D7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAACC,KAAK,cAnCwBoG,kBAvBzBA,eA6DJ,YAO5B,KC9KO,MAAM4gB,GAAuBhc,OAAaC,MAAM,CACnDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdgtB,aAAc3b,OACXic,SAAS,EAAGttB,YAAE,sBACdwR,SAASxR,YAAE,uBACd+sB,OAAQ1b,OACR2E,OAAQ3E,OACR4b,WAAY5b,OACZ6b,oBAAqB7b,OACrBoW,MAAOpW,OACPsW,OAAQtW,SCgJGvR,qBAAkB4C,aA1ID3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAE1L,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,KAAEinB,GAAK,GAAOxtB,EAAA,OAClIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,sCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,eAInD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACLqtB,EACFptB,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kCAAkCE,SAAA,CACrDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOib,OAAU,0BAA4B,eACzD3a,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAE7C,GACdF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yCAAyCE,SAAA,CAC5DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOkb,aAAgB,0BAA4B,eAC/D5a,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,6BAInEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOkE,OAAU,0BAA4B,eACzD5D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,aACL0lB,QAAS/Y,EAAOia,aAClB9sB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,2CAEjDG,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,aAG9CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,sBACL0lB,QAAS/Y,EAAOka,sBAClB/sB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,sDAEjDG,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,gBAIzD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbxG,aAAchO,EAAOyU,MACrBtuB,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,SAAS,GAAM,GAC/BC,EAAc,QAASiH,EAAElf,OAAOmiB,aAAa,IAGjDvnB,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbxG,aAAchO,EAAO2U,OACrBxuB,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,UAAU,GAAM,GAChCC,EAAc,SAAUiH,EAAElf,OAAOmiB,aAAa,IAGlDvnB,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SACTF,EAAE,2BAIN,KCtEIF,qBAAkB4C,aApEjC,SAA+B3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC5C,MAAMuG,EAAY,4BACXknB,GAAmB9a,YAAY8Z,IAEtC,OACErsB,cAACysB,GAAwB,CAACF,cAAc,EAAKxsB,SAC3CC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,oCAAoCE,SACjDC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAM,GACN+mB,eAAe,EACfJ,aAAc,GACdhX,OAAQ,MACRiX,YAAY,EACZC,qBAAqB,EACrBzF,MAAO,GACPE,OAAQ,GACR7R,KAAM,IAERhD,iBAAkBua,GAClBta,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCqhB,EAAgB,CAAEniB,UAAW,CAC3B6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,cACtBJ,aAAcha,EAAOga,aACrBhX,OAAQhD,EAAOgD,OACfiX,WAAYja,EAAOia,WACnBC,oBAAqBla,EAAOka,oBAC5BzF,MAAOzU,EAAOyU,MACdE,OAAQ3U,EAAO2U,OACf7R,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAO+Y,GAA0BhhB,UAAW,CAAC,UAAY,OAE7DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,EAAM,OAAElB,EAAM,cAAE0L,EAAa,gBAAED,GAAiB3Q,EAAA,OAChEzM,cAACstB,GAAuB,CACtB5b,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXiX,gBAAiBA,EACjBC,cAAeA,GACf,OAMd,KCwCe1d,qBAAkB4C,aArGjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAClD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,2BACZ6I,EAAYnP,EAAE,sCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS6oB,GAAyB,CACjEjhB,UAAW,CAAE0K,GAAIA,MAEX2X,GAAuBhb,YAAY6Z,IAE3C,GAAIxqB,EAAS,OACX5B,cAACysB,GAAwB,CAACF,cAAc,EAAKxsB,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACysB,GAAwB,CAACF,cAAc,EAAKxsB,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CAKZ,MAAMqW,EAAcpU,EAAK0rB,oBAIzB,OAHA90B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACysB,GAAwB,CAACF,cAAc,EAAKxsB,SAC3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB+mB,cAAe/W,EAAY+W,cAC3BJ,aAAc3W,EAAY2W,aAC1BD,OAAQ5W,SAASE,EAAY0W,QAC7B/W,OAAQK,EAAYL,OACpBiX,WAAY5W,EAAY4W,WACxBC,oBAAqB7W,EAAY6W,oBACjCzF,MAAOpR,EAAYoR,MACnBE,OAAQtR,EAAYsR,OACpB7R,KAAMO,EAAYP,MAEpBhD,iBAAkBua,GAClBta,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ0a,EAAmB,CAAEriB,UAAW,CAC9B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,cACtBL,OAAQ/Z,EAAO+Z,OACfC,aAAcha,EAAOga,aACrBhX,OAAQhD,EAAOgD,OACfiX,WAAYja,EAAOia,WACnBC,oBAAqBla,EAAOka,oBAC5BzF,MAAOzU,EAAOyU,MACdE,OAAQ3U,EAAO2U,OACf7R,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAO+Y,GAA0BhhB,UAAW,CAAC,UAAY,OAE7DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACstB,GAAuB,CACtB5b,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXiX,gBAAiBA,EACjBC,cAAeA,EACf+P,MAAM,GACN,OAMd,KCvFeztB,qBAAkB4C,aArBjC,SAAyC3C,GAA4B,IAA3B,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,GAAUH,EAChE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAU,iCAG1BnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCOeJ,qBAAkB4C,aAzBjC,SAAuC3C,GAAuG,IAAtG,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAE1L,EAAM,OAAEkB,EAAM,WAAE4U,GAAY7nB,EACzI,OACEI,cAAC4R,KAAM,CAAA7R,SACLC,cAACc,IAAM,CAACC,OAAQ2Q,EAAc1Q,OAAQ0Q,EAAa3R,SACjDO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAACG,UAAU,SACXjM,KAAK,sBACLhG,UAAYyR,EAAO6b,oBAAuB,0BAA4B,eACtE5T,SAAW0K,IACTjH,EAAc,sBAAuBiH,EAAElf,OAAOjD,OAC9Cib,EAAgB,uBAAuB,GACvCkE,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCxV,aAAa,MAAKlS,SACrBod,EAAUwP,qBAAqB5jB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,MAG3DtM,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,2BAK9E,KCnCO,MAAMutB,GAA+Bvc,OAAaC,MAAM,CAC3Dqc,oBAAqBtc,SCDZwc,GAAoCh0B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4DxCi0B,IAnB0Bj0B,GAAI;;;;;;;;;;;;;;;;;EAmBCA,GAAI;;;;;;;;;;;;;GCzC1Ck0B,GAA0BA,CAAC/tB,EAAGguB,KAClC,OAAOA,GACL,IAAK,cACH,OAAOhuB,EAAE,+CACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,cACH,OAAOA,EAAE,+CACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,eACH,OAAOA,EAAE,gDACX,IAAK,gBACH,OAAOA,EAAE,iDACX,IAAK,aACH,OAAOA,EAAE,8CACX,IAAK,sBACH,OAAOA,EAAE,uDACX,IAAK,oBACH,OAAOA,EAAE,qDACX,QACE,OAAOA,EAAE,kDACb,EA2IaF,qBAAkB4C,aAvIjC,SAAqC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAClD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASoqB,GAAmC,CACtFxiB,UAAW,CAAE+J,UAAU,MAGlB6Y,GAAsBvb,YAAYob,IAGzC,GAAI/rB,EAAS,OACX5B,cAAC+tB,GAA+B,CAAAhuB,SAC9BC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,yCAAyCE,SACjEC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC+tB,GAA+B,CAAAhuB,SAC9BC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,yCAAyCE,SACjEC,cAAA,KAAAD,SAAIF,EAAE,uDAKZ,MAAMmuB,EAA8BlsB,EAAKksB,4BAGzC,OAAKA,EAA4BjlB,MAAM3J,OAWrCY,cAAC+tB,GAA+B,CAAAhuB,SAC9BC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,yCACd0O,SAAUyf,EAA4Bzf,SACtCa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO4d,EAA4Bzf,SAAS8B,WAE9CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBmc,qBAAqB5jB,MAChDwF,EAAWiC,EAAgBmc,qBAAqBpe,SAEtD,OAAOkC,EAASrR,OACZ,CAGEutB,qBAAsB,CACpBjc,WAAYH,EAAeoc,qBAAqBjc,WAChD3H,MAAO,IAAKwH,EAAeoc,qBAAqB5jB,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qDAFNyM,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNiuB,EAA4BjlB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACN6tB,GAAwB/tB,EAAGqJ,EAAK2kB,WADpBvhB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACwS,KAAM,CACLC,cAAe,CACb+a,oBAAoBtkB,EAAKskB,oBAAoB5X,IAE/CjD,iBAAkB8a,GAClB7a,SAAUA,CAACC,EAAMpG,KAAyB,IAAvB,cAAEqG,GAAerG,EAChC/T,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZib,EAAmB,CAAE5iB,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT4X,oBAAqB3a,EAAO2a,sBAE7Bta,eAAgB,KAGlBE,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EACXtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAEDkoB,IAAA,IAAC,aAAEvW,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,WAAEoK,GAAYQ,EAAA,OAC5EjoB,cAACiuB,GAA8B,CAC7B9Q,UAAWrb,EACX4P,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACfoK,WAAYA,GACZ,QA7CMnb,eAiDJ,aAhGxBtM,cAAC+tB,GAA+B,CAAAhuB,SAC9BC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,yCAAyCE,SACjEC,cAAA,KAAAD,SACGF,EAAE,mDAoGb,KCjLO,MAAMquB,GAA4Bx0B,GAAI;;;;;;;;;;;;;;EAgBhCy0B,GAA8Bz0B,GAAI;;;;;;;;EAUlC00B,GAAiC10B,GAAI;;;;;;;;ECuEnCiG,qBAAkB4C,aAlFjC,SAAkC3C,GAAuD,IAAtD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,UAAEsuB,EAAU,UAAUzuB,EACpF,MAAM0uB,EAAYlrB,EAAMmK,OAAOghB,WACzBpoB,EAAY,0BAA4BmoB,GACtC1sB,QAAS4sB,EAAc3sB,MAAO4sB,EAAU,KAAE3sB,GAAUwB,YAAS+e,GAAmB,CACtFnX,UAAW,CACT0K,GAAI0Y,KAIR,GAAIE,EAAc,OAChBxuB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAI4uB,EACF,OACEzuB,cAAC2K,GAAW,CAAA5K,SACVO,eAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBrH,QAAQC,IAAI81B,GACdzuB,cAAA,KAAAD,SAAIF,EAAE,mCAMdnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZ4sB,EAAiBvR,EAAU+G,eAAejB,cAEhD,IAAI7c,EASJ,OAPEA,EAAQvG,EADS,WAAdwuB,EACO,+BAEA,iCAGZjoB,EAAQA,EAAQ,KAAOsoB,EAGrB1uB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAQA,EAAOrG,SAC1BC,cAAA,OAAKE,UAAU,sBAAqBH,SAElCO,eAACmE,IAAI,CAACrC,GAAI+D,EACJjG,UAAU,yBAAwBH,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,uBAIlDS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAEbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CAChBO,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oBAEjBS,eAACwG,IAAKC,KAAI,CAAC4nB,QAAS,EAAE5uB,SAAA,CACpBO,eAAA,MAAAP,SAAA,CAAI,KAAI2uB,EAAgB,OACrBvR,EAAU+G,eAAesF,iBAAoBlpB,eAAA,QAAAP,SAAA,CAAOod,EAAU+G,eAAesF,gBAAgBxpB,cAAA,YAC7Fmd,EAAU+G,eAAe0K,cAAiBtuB,eAAA,QAAAP,SAAA,CAAOod,EAAU+G,eAAe0K,aAAa5uB,cAAA,YACxFmd,EAAU+G,eAAehL,cAG/BlZ,cAACqrB,GAAyB,CAACnH,eAAgB/G,EAAU+G,6BAOjE,KCGevkB,qBAAkB4C,aAjFC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,UAAEhX,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OAC1II,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOrG,KACjBoN,SAAWpN,GAAS6Q,EAAc,OAAQ7Q,GAC1CqN,OAAQA,IAAMuD,EAAgB,QAAQ,KAExCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOgL,OAAU,0BAA4B,eACzD1K,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0BAA0BE,SAAA,CAC7CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,uBACLhG,UAAYyR,EAAOgX,qBAAwB,0BAA4B,eACvE1W,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,uCACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,KAATyM,gBACrB6Q,EAAUyL,sBAAsB7f,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAClDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,uBAAuBiM,UAAU,OAAOjS,UAAU,4BAI3EF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACfC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,EAAK,IAGnCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,+BAK3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,2BAIN,KCYIF,qBAAkB4C,aA1FjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACrD,MAAM0uB,EAAYlrB,EAAMmK,OAAOghB,WACzBpoB,EAAY,0BAA4BmoB,GACtC1sB,QAAS4sB,EAAc3sB,MAAO4sB,EAAU,KAAE3sB,GAAUwB,YAAS+e,GAAmB,CACtFnX,UAAW,CACT0K,GAAI0Y,MAGDO,GAAqBtc,YAAY4b,GAA6B,CACnEW,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIqoB,EAAc,OAChBxuB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAI4uB,EACF,OACEzuB,cAAC2K,GAAW,CAAA5K,SACVO,eAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBrH,QAAQC,IAAI81B,GACdzuB,cAAA,KAAAD,SAAIF,EAAE,mCAMdnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAGlB,OACE9B,cAAC+uB,GAAyB,CAACV,UAAW,SAAStuB,SAC7CC,cAACwS,KAAM,CACLC,cAAe,CACbjG,KAAM,IAAItJ,KACVyZ,OAAQQ,EAAU+G,eAAe8K,QACjCrG,qBAAsB,GACtBjB,KAAM,IAGR9U,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC6iB,EAAkB,CAAE3jB,UAAW,CAC7B6H,MAAO,CACLmR,eAAgBoK,EAChB9hB,KAAMsP,GAAejJ,EAAOrG,MAC5BmQ,OAAQ9J,EAAO8J,OACfgM,qBAAsB9V,EAAO8V,qBAC7BjB,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOiP,GAAoBlX,UAAW3D,MACvC,CAAC4L,MAAOkP,GAAmBnX,UAAW,CAAE0K,GAAI0Y,OAE/Clb,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACivB,GAAyB,CACxB9R,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KCsCexG,qBAAkB4C,aA5HjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtD,MAAM0uB,EAAYlrB,EAAMmK,OAAOghB,WACzB3Y,EAAKxS,EAAMmK,OAAOqI,GACxBld,QAAQC,IAAI21B,GACZ51B,QAAQC,IAAIid,GAEZ,MAAMzP,EAAY,0BAA4BmoB,GACtC1sB,QAASstB,EAAqBrtB,MAAOstB,EAAmBrtB,KAAMstB,GAAiB9rB,YAAS+e,GAAmB,CACjHnX,UAAW,CACT0K,GAAI0Y,MAGA1sB,QAASytB,EAAqBxtB,MAAOytB,EAAmBxtB,KAAMytB,GAAiBjsB,YAAS4qB,GAA2B,CACzHhjB,UAAW,CACT0K,GAAIA,MAGD4Z,GAAwBjd,YAAY6b,GAAgC,CACzEU,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAI+oB,GAAuBG,EAAqB,OAC9CrvB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIsvB,EACF,OACEnvB,cAAC2K,GAAW,CAAA5K,SACVO,eAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBrH,QAAQC,IAAIw2B,GACdnvB,cAAA,KAAAD,SAAIF,EAAE,mCAMd,GAAIyvB,EACF,OACEtvB,cAAC2K,GAAW,CAAA5K,SACVO,eAAA,OAAKJ,UAAU,eAAcH,SAAA,CACzBrH,QAAQC,IAAI22B,GACdtvB,cAAA,KAAAD,SAAIF,EAAE,mCAMdnH,QAAQC,IAAI,cACZD,QAAQC,IAAIy2B,GACZ12B,QAAQC,IAAI42B,GACZ,MAAMpS,EAAYiS,EACZ3c,EAAgB8c,EAAYE,sBAElC,IAAI5G,EACApW,EAAckW,uBAChBE,EAAuBpW,EAAckW,qBAAqB/S,IAK5D,IAAI8Z,EAAc,KAKlB,OAJIjd,EAAcjG,OAChBkjB,EAAc,IAAIxsB,KAAKuP,EAAcjG,OAIrCxM,cAAC+uB,GAAyB,CAACV,UAAW,SAAStuB,SAC7CC,cAACwS,KAAM,CACLC,cAAe,CACbjG,KAAMkjB,EACN/S,OAAQlK,EAAckK,OACtBgM,qBAAsBE,EACtBnB,KAAMjV,EAAciV,MAGtB9U,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCwjB,EAAqB,CAAEtkB,UAAW,CAChC6H,MAAO,CACL6C,GAAIA,EACJpJ,KAAMsP,GAAejJ,EAAOrG,MAC5BmQ,OAAQ9J,EAAO8J,OACfgM,qBAAsB9V,EAAO8V,qBAC7BjB,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOiP,GAAoBlX,UAAW3D,MACvC,CAAC4L,MAAOkP,GAAmBnX,UAAW,CAAE0K,GAAI0Y,OAE/Clb,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EAEP/S,SAEA0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACivB,GAAyB,CACxB9R,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KC3IO,SAASoB,KACd,IAAIK,EAAY,CAAC,EAEbS,EAAS/J,aAAayE,QAAQvE,EAAKxD,8BASvC,OAPE4M,EAAUS,OADRA,QAGiBhJ,EAGrB3G,QAAQC,IAAIiP,GAELA,CACT,CCHA,SAASqa,GAAgB9f,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GAGxC,OAFAzJ,QAAQC,IAAIqpB,GAERA,IAGFtpB,QAAQC,IAAI,wBACL,GAEX,CAqCegH,qBAAkB4C,aAzBL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,EAAA,OACxDI,cAAA,OAAAD,SAEEO,eAAA,UACEJ,UAPc,oBAQdiC,MAAO8f,GAAgBzjB,EAAKxD,8BAC5B4e,SAAYsB,KAflB,SAAsCN,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KAEV,CAYQoT,CACEnc,EAAKxD,6BACLkgB,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,gCAATyM,gBACtBtM,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,qCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,mBAAkBpC,SAAaF,EAAE,6CAATyM,gBACtCtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,iCAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,sCAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,sCAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,gBAAepC,SAAaF,EAAE,2CAATyM,oBAEjC,KCtBO3M,qBAAkB4C,aAnBP3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EAAA,OAC1DI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2vB,GAAmB,CAACva,QAASA,QAGlCpV,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAKG,KCvBhB,MAAM6vB,WAA2BliB,YAC/BC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,+BACZD,QAAQC,IAAI6V,EACd,CAQAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EAGrB,OAFeP,KAAKkP,MAAMnG,QAGxB,IAAK,WACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,sCACrC,IAAK,mBACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,8CACnC,IAAK,OACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,kCACnC,IAAK,YACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uCACnC,IAAK,YACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uCACnC,IAAK,iBACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,4CAClC,QACE,OAAOA,EAAE,qCAEf,EAIaF,qBAAkB4C,YAAWqtB,KC3CrC,MAAMC,GAAmBn2B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0EvBo2B,IA1CkBp2B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCCA,GAAI;;;;;;;;EAUJA,GAAI;;;;;;GC9BzBiG,qBAAkB4C,aAhCjC,SAA2B3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EAC1C,MAAOmwB,GAAexd,YAAYud,IAEhC,OACE9vB,cAAA,UAAQE,UAAU,uCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,qCACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAIF,EAAE,iBAAiB,MAAKqJ,EAAK8mB,eACjDzY,WAAY1X,EAAE,0BACd+Y,eAAgBmX,EAChBtY,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAO0c,GAAkB3kB,UAAW3D,SAGzC,EACJxH,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KC4GevG,qBAAkB4C,aA7HjC,SAAsB3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,SAAEoY,EAAQ,QAAEnY,GAAQzD,EAClD,MACMqwB,EADczsB,qBAAWvC,GACI4O,qBAE7BzJ,EAAQvG,EAAE,oBACV,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASusB,GAAkB,CAC9E3kB,UAAW,CAAC3D,6BACZ+D,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACkwB,GAAiB,CAAC9pB,MAAOA,EAAMrG,SAC7BF,EAAE,+BAIP,GAAIgC,EAAO,OACT7B,cAACkwB,GAAiB,CAAC9pB,MAAOA,EAAMrG,SAC7BF,EAAE,kCAIP,MAAMswB,EAASruB,EAAKsuB,cAKpB,OAHA9xB,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UAG5DwM,EAAOpnB,MAAM3J,OAWhBY,cAACkwB,GAAiB,CAAC9pB,MAAOA,EAAOgP,QAASA,EAAQrV,SAChDC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,wBACb0O,SAAU4hB,EAAO5hB,SACjBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+f,EAAO5hB,SAAS8B,WAEzBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4f,cAAcrnB,MACzCwF,EAAWiC,EAAgB4f,cAAc7hB,SAE/C,OAAOkC,EAASrR,OACZ,CAGEgxB,cAAe,CACb1f,WAAYH,EAAe6f,cAAc1f,WACzC3H,MAAO,IAAKwH,EAAe6f,cAAcrnB,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CAERC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MAPFtE,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNowB,EAAOpnB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACzBjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRO,eAACmE,IAAI,CAACrC,GAAI,wBAA0B8G,EAAK0M,GAAG7V,SAAA,CAAC,KACxCmJ,EAAK8mB,YAAY,IAAChwB,cAAA,YAEvBA,cAAC4vB,GAAkB,CAACvnB,OAAQa,EAAKb,WAJnBiE,gBAShBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO4kB,IADjB3jB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKma,SAAWna,EAAKma,QAAQC,UADhBhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKua,cADQnX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKgb,gBACLlkB,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8G,EAAKgb,eAAetO,KAAK7V,SAC1DmJ,EAAKgb,eAAejB,kBAG3B3iB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACswB,GAAkB,CAACpnB,KAAMA,IAC1BlJ,cAACyE,IAAI,CAACrC,GAAI,wBAA0B8G,EAAK0M,GAAG7V,SAC1CC,cAAC0E,IAAM,CAACxE,UAAU,qBACV2E,MAAM,YAAW9E,SACtBF,EAAE,sBALOyM,kBAzBFA,eAkCJ,aAvFxBtM,cAACkwB,GAAiB,CAAC9a,QAASA,EAAQrV,SAClCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,wBAAwBE,SAChDC,cAAA,KAAAD,SACGF,EAAE,kCA2Fb,KC3IO,SAAS0H,GAAyBgpB,GACvC,IAAI3oB,EAAY,CACd2oB,UAAWA,EAAUlpB,eAKvB,OAFA3O,QAAQC,IAAIiP,GAELA,CACT,CCMejI,sBAff,SAAuCC,GAAiB,IAAhB,EAAEC,EAAC,OAAEwI,GAAQzI,EACnD,OAAQyI,GACN,IAAK,eACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,iDACnC,IAAK,WACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,6CACnC,IAAK,oBACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,sDACnC,IAAK,WACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,6CAClC,QACE,OAAOA,EAAE,+CAEf,IC8BeF,qBAAkB4C,aApCjC,SAAkC3C,GAA8E,IAA7E,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,QAAEywB,GAAQ,EAAK,SAAEzb,GAAS,EAAK,UAAE5O,EAAU,IAAGvG,EAC3G,MAAM2wB,EAAYntB,EAAMmK,OAAOkjB,WAE/B,OACEzwB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCywB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,sBAAqB9J,SAClDC,cAACgV,GAAS,CAACH,OAAS,2BAA0B0b,iBAE9C,GAEFxb,EACA/U,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,sBAAqB9J,SAClDC,cAACyG,GAAU,CAACN,UAAWA,MAEvB,QAIRnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC/CO,MAAM2wB,GAA4Bh3B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BhCi3B,GAA0Bj3B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwE9Bk3B,GAAmBl3B,GAAI;;;;;;;;;;;;;;;;;EAoBvBm3B,GAAoBn3B,GAAI;;;;;;;;EAWxBo3B,GAAuBp3B,GAAI;;;;;;;;EAW3Bq3B,GAAuBr3B,GAAI;;;;;;ECiBzBiG,qBAAkB4C,aA7IjC,SAA8B3C,GAAwB,IAAvB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACjD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzBwX,EAAYntB,EAAMmK,OAAOkjB,YAEzB,QAAE7uB,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASotB,GAA2B,CAC9ExlB,UAAW3D,GAAyBgpB,MAE/BS,GAAsBze,YAAYwe,IAEzC,IAAI/hB,EACAiiB,EAUJ,GATkB,eAAdV,GACFvhB,EAAYnP,EAAE,2CACdoxB,EAAepxB,EAAE,kDAEjBmP,EAAYnP,EAAE,wCACdoxB,EAAepxB,EAAE,8CAIf+B,EAAS,OACX5B,cAACkxB,GAAyB,CAACV,SAAS,EAAKzwB,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACkxB,GAAyB,CAACV,SAAS,EAAKzwB,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,+CAKZ,IAAIsxB,EAAwBrvB,EAAKqvB,sBAEjC,OAAKA,EAAsBpoB,MAAM3J,OAS/BY,cAACkxB,GAAyB,CAACV,SAAS,EAAKzwB,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EACtBT,SAAU4iB,EAAsB5iB,SAChCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+gB,EAAsB5iB,SAAS8B,WAExCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2gB,sBAAsBpoB,MACjDwF,EAAWiC,EAAgB2gB,sBAAsB5iB,SAEvD,OAAOkC,EAASrR,OACZ,CAGE+xB,sBAAuB,CACrBzgB,WAAYH,EAAe4gB,sBAAsBzgB,WACjD3H,MAAO,IAAKwH,EAAe4gB,sBAAsBpoB,SAAU0H,GAC3DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4CACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRoxB,EAAsBpoB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACxCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACoxB,GAA8B,CAAC/oB,OAAQa,EAAKb,UAD/BiE,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmoB,eAAehmB,OAAO0N,KAErCzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAKooB,4BAA+BpoB,EAAKooB,4BAA4BprB,KAAOrG,EAAE,oBAC9EqJ,EAAK+J,KAAQjT,cAAA,OAAAD,SAAKO,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAEmJ,EAAK+J,KAAK,MAAI/J,EAAK8J,WAAuB,MAE/F1S,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BmuB,UAAkBrnB,EAAK0M,KAAK7V,SAC/DC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,8CACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKhD,OACzBqR,WAAY1X,EAAE,mCACd+Y,eAAgBoY,EAChBvZ,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOud,GAA2BxlB,UAAW3D,GAAyBgpB,OAEzE,EACJxwB,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,qBAxCxCoG,eA2CJ,aA1FtBtM,cAACkxB,GAAyB,CAACV,SAAS,EAAKzwB,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIkxB,OA+FZ,KC1HetxB,qBAAkB4C,aA5BjC,SAAmC3C,GAAwB,IAAvB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtD,MAAM2wB,EAAYntB,EAAMmK,OAAOkjB,WACzBtqB,EAAa,2BAA0BoqB,IAE7C,IAAIvhB,EACAvE,EASJ,MARkB,eAAd8lB,GACFvhB,EAAYnP,EAAE,oDACd4K,ELAG,SAAoC5K,EAAG0wB,GAC5C,OACEjwB,eAACyF,IAAI,CAACwrB,UAAQ,EAAAxxB,SAAA,CACZO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BmuB,iBAAyBxwB,SAC5DO,eAAA,KAAAP,SAAA,CAAIF,EAAE,oDAAoD,IAACG,cAACiG,IAAI,CAACC,KAAK,uBACjElG,cAAA,SACPA,cAAA,KAAAD,SAAIF,EAAE,qEAERS,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BmuB,iBAAyBxwB,SAC5DO,eAAA,KAAAP,SAAA,CAAIF,EAAE,oDAAoD,IAACG,cAACiG,IAAI,CAACC,KAAK,uBACjElG,cAAA,SACPA,cAAA,KAAAD,SAAIF,EAAE,uEAId,CKjBc2xB,CAA2B3xB,EAAG0wB,KAExCvhB,EAAYnP,EAAE,iDACd4K,ELiBG,SAAiC5K,EAAG0wB,GACzC,OACEvwB,cAAC+F,IAAI,CAACwrB,UAAQ,EAAAxxB,SACZO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BmuB,iBAAyBxwB,SAC5DO,eAAA,KAAAP,SAAA,CAAIF,EAAE,iDAAiD,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAC9DlG,cAAA,SACPA,cAAA,KAAAD,SAAIF,EAAE,mEAId,CK5Bc4xB,CAAwB5xB,EAAG0wB,IAIrCvwB,cAACkxB,GAAyB,CAACnc,UAAU,EAAM5O,UAAWA,EAAUpG,SAC9DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAAC8G,IAAKC,KAAI,CAAAhH,SACP0K,QAKX,KC5BA,MAAMinB,WAAoChkB,YACxCqB,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EAGrB,OAFqBP,KAAKkP,MAAMmjB,cAG9B,IAAK,aACH,OAAO3xB,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,6EACnC,IAAK,UACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,0EACnC,QACE,OAAOA,EAAE,0EAEf,EAIaF,qBAAkB4C,YAAWmvB,KCmJ7B/xB,qBAAkB4C,aAxJjC,SAAoC3C,GAAyC,IAAxC,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,OAAEsI,GAAOzI,EACxE,MAAMgyB,EAAUxuB,EAAMmK,OAAOqI,GACvB2a,EAAYntB,EAAMmK,OAAOkjB,WACzBtqB,EAAa,2BAA0BoqB,IACvC9Z,EAAa,uCAAsCmb,KAClDxf,EAAUyf,GAAe1c,oBAAS,IAElCqB,GAAkBjE,YAAY5Y,IAC9Bm4B,GAA6Bvf,YAAYue,IAEhD,IAAIiB,EAAkB,YAClBC,EAAgB,YAChBC,EAAwB,YACxBC,EAAgB,YAEpB,OAAQ7pB,GACN,IAAK,eACH0pB,EAAkB,UAClB,MACF,IAAK,WACHC,EAAgB,UAChB,MACF,IAAK,oBACHC,EAAwB,UACxB,MACF,IAAK,WACHC,EAAgB,SAMpB,SAASC,EAAoBC,GAC3BP,GAAY,GAEZC,EAA0B,CACxB5mB,UAAW,CAAE6H,MAAO,CAAC6C,GAAIgc,EAASvpB,OAAQ+pB,IAC1Clf,eAAgB,CACd,CAACC,MAAOud,GAA2BxlB,UAAW3D,GAAyBgpB,OAE1End,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,qDAAuD,CACpE0T,SAAUF,IAAMG,SAASC,eAEd,iBAAXpL,IACF3P,QAAQC,IAAI0P,GACZwpB,GAAY,GACd,IACCne,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACrC,iBAAXwG,IACF3P,QAAQC,IAAI0P,GACZwpB,GAAY,GACd,GAEN,CAEA,OACE7xB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,oCAAoCE,SACtFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCO,eAACmE,IAAI,CAACrC,GAAI+D,EACJjG,UAAU,yBAAwBH,SAAA,CACtCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,mBAG5CG,cAAC0E,IAAM,CACLxE,UAAU,OACV2E,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAEDF,EAAE,oBAELS,eAACmE,IAAI,CAACrC,GAAK,2BAA0BmuB,UAAkBqB,IACjD1xB,UAAU,oBAAmBH,SAAA,CACjCC,cAACiG,IAAI,CAACC,KAAK,WAAW,IAAErG,EAAE,wBAI9BwI,EACY,iBAAXA,EACCrI,cAAC0E,IAAOqB,KAAI,CAAAhG,SACVC,cAAC0E,IAAM,CACLrC,KAAK,OACL+P,UAAU,EACVvN,MAAOktB,EACPxiB,QAASA,IAAM4iB,EAAoB,gBAAgBpyB,SAElDF,EAAE,iDAIPG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAIxG,UAAU,QAAOH,SAAA,CAGjCO,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,cAAaH,SAAA,CAClCC,cAAC0E,IAAM,CACLrC,KAAK,OACL+P,SAAUA,EACVvN,MAAOktB,EACPxiB,QAASA,IAAM4iB,EAAoB,gBAAgBpyB,SAElDF,EAAE,+CAELG,cAAC0E,IAAM,CACLrC,KAAK,QACL+P,SAAUA,EACVvN,MAAOmtB,EACPziB,QAASA,IAAM4iB,EAAoB,YAAYpyB,SAE9CF,EAAE,2CAELG,cAAC0E,IAAM,CACLrC,KAAK,QACL+P,SAAUA,EACVvN,MAAOotB,EACP1iB,QAASA,IAAM4iB,EAAoB,qBAAqBpyB,SAEvDF,EAAE,oDAELG,cAAC0E,IAAM,CACLrC,KAAK,IACL+P,SAAUA,EACVvN,MAAOqtB,EACP3iB,QAASA,IAAM4iB,EAAoB,YAAYpyB,SAE9CF,EAAE,8CAGPG,cAAA,MAAIE,UAAU,mBAAkBH,SAAEF,EAAE,yBAGxC,GAELE,QAKX,KCuHeJ,qBAAkB4C,aA9QjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACpD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WAEzBkX,EAAiBlX,EAAa,IADjBsZ,EAAYxnB,iBAEzB+mB,EAAUxuB,EAAMmK,OAAOqI,IAEvB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASqtB,GAAyB,CACjEzlB,UAAW,CAAE0K,GAAIgc,GACjB5hB,aAAc,MAKhB,GAAIpO,EAAS,OACX5B,cAACsyB,GAA2B,CAAAvyB,SAC1BC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAAO,OACT7B,cAACsyB,GAA2B,CAAAvyB,SAC1BC,cAAA,KAAAD,SAAIF,EAAE,2CAIV,MAAM0yB,EAAsBzwB,EAAKywB,oBAGjC,OAFA75B,QAAQC,IAAI45B,GAGVjyB,eAACgyB,GAA2B,CAACjqB,OAAQkqB,EAAoBlqB,OAAOtI,SAAA,CAC9DO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,0CAA0CE,SACvDC,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVO,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACTO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,kBAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPwyB,EAAoBrsB,UAGzB5F,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,0DAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC0xB,GAA2B,CAACC,aAAcY,EAAoBhC,iBAGnEjwB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,4CAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAELwyB,EAAoBjB,4BACnBhxB,eAAA,OAAAP,SAAA,CACGwyB,EAAoBjB,4BAA4BprB,KACjDlG,cAAA,OAAAD,SAAKO,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAEwyB,EAAoBtf,KAAK,MAAIsf,EAAoBvf,cAEvFnT,EAAE,yBAIVS,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,4CAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOmnB,EAAoBlB,eAAehmB,OAAO0N,QAGtDzY,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,kDAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAOowB,EAAoBC,mCAOrDxyB,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,4CAA4CE,SACzDO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,mBAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPwyB,EAAoB9O,kBAGzBnjB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,mBAELG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPwyB,EAAoBE,uBAM/BzyB,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,6CAA6CE,SAC1DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAC+F,IAAI,CAACwrB,UAAQ,EAAAxxB,SACbwyB,EAAoBG,QAAQ3pB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC9C1L,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO4kB,GAAgB,IAACjwB,cAAA,SAChDA,cAAA,SAAAD,SAAQmJ,EAAKma,SAAWna,EAAKma,QAAQC,aAC3B,eAOpBiP,EAAoB7K,KACpB1nB,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACbC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,0CAA0CE,SACvDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPwyB,EAAoB7K,aAK/B,GACF1nB,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,2CAA2CE,SACxDC,cAAA,SAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,kBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,qBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,4CAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,4CAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,yBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,qCAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,oBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,0CAITG,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRwyB,EAAoBtwB,MAAM8G,MAAMgD,KAAI,CAAAQ,EAAWqZ,KAAK,IAAf,KAAE1c,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAE6lB,EAAQ,IACpB5lB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKma,SACJrjB,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,aAAa7V,SACxDmJ,EAAKma,QAAQC,aAIpBtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKypB,gBAERryB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK0pB,cAAc,IAAG1pB,EAAK2pB,WAAc7yB,cAAA,OAAAD,SAAMmJ,EAAK2pB,aAAoB,MAE3E7yB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,cAERxI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK4pB,WAER9yB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+gB,gBAERjqB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKgb,eACLlkB,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8G,EAAKgb,eAAetO,KAAK7V,SAC1DmJ,EAAKgb,eAAejB,gBACb,OAEJ,mBAoEhC,KC9RO,MAAM8P,GAAgC7hB,OAAaC,MAAM,CAC5DjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdwxB,cAAengB,OACZG,SAASxR,YAAE,uBACd6nB,KAAMxW,OACNshB,mBAAoBthB,SAGX8hB,GAAgC9hB,OAAaC,MAAM,CAC9DjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdwxB,cAAengB,OACZG,SAASxR,YAAE,uBACdyxB,4BAA6BpgB,OAC5BG,SAASxR,YAAE,uBACZoT,KAAM/B,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPwB,MAAO9B,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPkW,KAAMxW,OACNshB,mBAAoBthB,SAGT+hB,GAA4B/hB,OAAaC,MAAM,CAC1DjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCwGDF,qBAAkB4C,aA1HS3C,IAAA,IACxC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAE1L,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,UAAEhX,EAAS,OAAE+sB,GAAO,EAAK,SAAEC,GAAS,GAAOvzB,EAAA,OAEhIU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGvDgzB,EACAlzB,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwe,cACjBzX,SAAWyX,IACThU,EAAc,gBAAiBgU,GAC/BjU,EAAgB,iBAAiB,EAAK,EAExCvD,OAAQA,IAAMuD,EAAgB,iBAAiB,GAC/CrD,gBAAiBla,EAAE,MAErBG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,OAAOjS,UAAU,0BAGhE,MAGJgzB,GAAUC,EACV7yB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,8BACLhG,UAAYyR,EAAO2f,4BAA+B,0BAA4B,eAC9Erf,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUiW,8BAA8BrqB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC1DhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,0BAGhFF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOsB,KAAQ,0BAA4B,eACvDhB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,QACLhG,UAAYyR,EAAOqB,MAAS,0BAA4B,eACxDf,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,6BAI1D,GAEJF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,WACL8N,UAAU,WACVjM,KAAK,OACLhG,UAAYyR,EAAO+V,KAAQ,0BAA4B,eACvDzV,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAIzDgzB,EACAlzB,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,qBACL0lB,QAAS/Y,EAAO2f,qBAChBxyB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,qDAEjDG,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,eAItD,MAGN7R,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SACTF,EAAE,2BAIR,KCcIF,qBAAkB4C,aAtIjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MAAM2wB,EAAYntB,EAAMmK,OAAOkjB,WACzBtqB,EAAa,2BAA0BoqB,aACvCoB,EAAevuB,EAAMmK,OAAO8lB,cAC5BrkB,EAAYnP,EAAE,mCAGpB,IAaIyzB,EAbAzQ,GAAW,EACXsQ,GAAW,EACf,OAAQxB,GACN,IAAK,WACH9O,GAAW,EACX,MACF,IAAK,WACHsQ,GAAW,EAOf,OAAQ5C,GACN,IAAK,aACH+C,EAAoB,aACpB,MACF,IAAK,UACHA,EAAoB,UAMxB,MAAM,QAAE1xB,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASstB,GAAkB,CAAE1lB,UAAW,CACvEooB,kBAAmBA,MAEdC,GAA0BhhB,YAAYse,IAG7C,GAAIjvB,EAAS,OACX5B,cAACkxB,GAAyB,CAACV,SAAS,EAAMrqB,UAAWA,EAAUpG,SAC7DC,cAAC8G,IAAI,CAACkI,UAAWA,EAAUjP,SACzBC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACkxB,GAAyB,CAACV,SAAS,EAAMrqB,UAAWA,EAAUpG,SAC7DC,cAAC8G,IAAI,CAACkI,UAAWA,EAAUjP,SACzBC,cAAA,KAAAD,SAAIF,EAAE,4DAKZ,MAAMsd,EAAYrb,EAElB,IACI0xB,EADA/gB,EAAgB,CAAEvM,KAAM,GAAIsC,YAAa,GAAI6oB,cAAe,IAAInuB,MAUpE,MARqB,aAAjByuB,GACFlf,EAAcQ,MAAO,IAAI/P,MAAOoC,cAChCmN,EAAcO,OAAQ,IAAI9P,MAAOwP,WAAa,EAC9C8gB,EAAYR,IAEZQ,EAAYT,GAIZ/yB,cAACkxB,GAAyB,CAACnc,UAAU,EAAM5O,UAAWA,EAAUpG,SAC9DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAeA,EACfE,iBAAkB6gB,EAClB5gB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAC9B+G,EAAQ,CACRwd,UAAWA,EAAUlpB,cACrBnB,KAAM2M,EAAO3M,KACbmrB,cAAevV,GAAejJ,EAAOwe,eACrC7oB,YAAaqK,EAAOrK,YACpBkf,KAAM7U,EAAO6U,KACb8K,mBAAoB3f,EAAO2f,oBAGV,aAAjBb,IACF5e,EAAME,KAAO+C,SAASnD,EAAOI,MAC7BF,EAAMC,MAAQgD,SAASnD,EAAOG,OAC9BD,EAAMue,4BAA8Bze,EAAOye,6BAG7CiC,EAAuB,CACrBroB,UAAW,CAAE6H,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAOud,GAA2BxlB,UAAW3D,GAAyBgpB,OAE1End,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAM8T,EAAK9T,EAAK2xB,0BAA0BlB,oBAAoB3c,GAC9DvS,EAAQnB,KAAM,2BAA0BquB,UAAkB3a,KAC1DvC,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,GAAiB3Q,EAAA,OAC9DzM,cAAC0zB,GAAiC,CAChCvW,UAAWA,EACX+V,QAAQ,EACRrQ,SAAUA,EACVsQ,SAAUA,EACVzhB,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACfxK,OAAQA,EACRlB,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KC/CexG,qBAAkB4C,aArFjC,SAA0C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC9D,MAAM2wB,EAAYntB,EAAMmK,OAAOkjB,WACzBmB,EAAUxuB,EAAMmK,OAAOqI,GACvBzP,EAAa,2BAA0BoqB,UAAkBqB,IACzD5iB,EAAYnP,EAAE,qCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASqtB,GAAyB,CACjEzlB,UAAW,CAAE0K,GAAIgc,MAEZE,GAA6Bvf,YAAYue,IAGhD,GAAIlvB,EAAS,OACX5B,cAACkxB,GAAyB,CAACV,SAAS,EAAOrqB,UAAWA,EAAUpG,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAAO,OACT7B,cAACkxB,GAAyB,CAACV,SAAS,EAAMrqB,UAAWA,EAAUpG,SAC7DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAA,KAAAD,SAAIF,EAAE,4DAKZ,MAAM8zB,EAAc7xB,EAAKywB,oBAEzB,OACEvyB,cAACkxB,GAAyB,CAACnc,UAAU,EAAM5O,UAAWA,EAAUpG,SAC9DO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAMytB,EAAYztB,KAAOwhB,KAAMiM,EAAYjM,MAC5D/U,iBAAkBsgB,GAClBrgB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAC9B+G,EAAQ,CACR6C,GAAIgc,EACJ1rB,KAAM2M,EAAO3M,KACbwhB,KAAM7U,EAAO6U,MAGjBoK,EAA0B,CACxB5mB,UAAW,CAAE6H,MAAOA,GACpBG,eAAgB,CACd,CAACC,MAAOud,GAA2BxlB,UAAW3D,GAAyBgpB,OAE1End,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,GAAiB3Q,EAAA,OAC9DzM,cAAC0zB,GAAiC,CAChCR,QAAQ,EACRxhB,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACfxK,OAAQA,EACRlB,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KCpGO,SAASoB,KACd,IAAIqsB,EAAct1B,aAAayE,QAAQvE,EAAKrD,+CACxB,OAAhBy4B,IACFA,EAAc,SAGhB,IAAIhsB,EAAY,CACdqN,SAA2B,SAAhB2e,GAKb,OAFAl7B,QAAQC,IAAIiP,GAELA,CACT,CCkCejI,qBAAkB4C,aAlCjC,SAA0C3C,GAAyD,IAAxD,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEywB,GAAQ,EAAK,SAAEzb,GAAS,GAAMnV,EAC9F,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAW,sBAAsBH,SAAA,CAClCywB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,8BAA6B9J,SAC1DC,cAACgV,GAAS,CAACH,OAAQ,0CAEnB,GAEFE,EACA/U,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,8BAA6B9J,SAC1DC,cAACyG,GAAU,CAACN,UAAU,sCAEtB,QAIRnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC7CO,MAAM8zB,GAAqCn6B,GAAI;;;;;;;;;;;;;;;;;;;;EAsBzCo6B,GAAmCp6B,GAAI;;;;;;;;;EAYvCq6B,GAAiCr6B,GAAI;;;;;;;;;ECqTnCiG,qBAAkB4C,aA/TjC,SAAsC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACjD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,EAAS,QAAEsF,GAAY9R,YAASuwB,GAAoC,CAChG3oB,UAAW3D,QAENysB,GAA+BzhB,YAAYwhB,IAG5Cze,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAAqF,SAA7EvG,aAAayE,QAAQvE,EAAKrD,+CACxC,UAAW,YACLyJ,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAKrD,+CAA+C,GACzEia,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAqF,SAA7EvG,aAAayE,QAAQvE,EAAKrD,+CAA6D,UAAW,YAC1GyJ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KACPjR,aAAaC,QAAQC,EAAKrD,+CAA+C,GACzEia,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,wBAKP,GAAI+B,EAAS,OACX5B,cAACi0B,GAAiC,CAACzD,SAAS,EAAKzwB,SAC/CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CAA0CE,SAClEC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACi0B,GAAiC,CAACzD,SAAS,EAAKzwB,SAC/CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CAA0CE,SAClEC,cAAA,KAAAD,SAAIF,EAAE,wDAKZ,IAAIq0B,EAA2BpyB,EAAKsxB,8BAEpC,OAAKc,EAAyBnrB,MAAM3J,OAelCY,cAACi0B,GAAiC,CAACzD,SAAS,EAAKzwB,SAC/CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CACxBoP,cAAeqG,EACf/G,SAAU2lB,EAAyB3lB,SACnCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8jB,EAAyB3lB,SAAS8B,WAE3CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4iB,8BAA8BrqB,MACzDwF,EAAWiC,EAAgB4iB,8BAA8B7kB,SAE/D,OAAOkC,EAASrR,OACZ,CAGEg0B,8BAA+B,CAC7B1iB,WAAYH,EAAe6iB,8BAA8B1iB,WACzD3H,MAAO,IAAKwH,EAAe6iB,8BAA8BrqB,SAAU0H,GACnElC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0DACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRm0B,EAAyBnrB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC0xB,GAA2B,CAACC,aAAczoB,EAAKoqB,qBADlChnB,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,wCAAuC8G,EAAK0M,KAAK7V,SAC1DC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACT0P,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdoe,EAA4B,CAAE9oB,UAAW,CACvC6H,MAAO,CACP6C,KACAX,UAAW/L,EAAK+L,WAEjB/B,eAAgB,CACf,CAACC,MAAO0gB,GAAoC3oB,UAAW3D,SACvD6L,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACHpK,EAAK+L,SAAYpV,EAAE,sBAAuBA,EAAE,oBAAqB,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GACxD,EACF9B,SACJC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,iBAvCboG,eA0CJ,aA9FtBtM,cAACi0B,GAAiC,CAACzD,SAAS,EAAKzwB,SAC/CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CACZoP,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACKzB,aAAayE,QAA+D,SAAvDvE,EAAKrD,+CACzB0E,EAAE,kDACFA,EAAE,oDA+FhB,KClGeF,qBAAkB4C,aA/DO3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,OAAE+sB,GAAO,GAAOtzB,EAAA,OAC5GU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAIzDgzB,EACAlzB,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wDAAwDE,SAAA,CAC3EO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,oBACLhG,UAAYyR,EAAO2hB,kBAAqB,0BAA4B,eACpErhB,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,aAAYpC,SAAaF,EAAE,uBAATyM,gBAChCtM,cAAA,UAAQmC,MAAM,UAASpC,SAAaF,EAAE,oBAATyM,mBAE/BtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,4BAItE,GAEJF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SACTF,EAAE,2BAIR,KC3EJ,MAAMmzB,GAAgC9hB,OAAaC,MAAM,CAC5DjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,SCYXijB,GAA6Bz6B,GAAI;;;;;;;;EA+DxBiG,qBAAkB4C,aArDjC,SAAuC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACpD,MAAMuG,EAAY,mCACXiuB,GAAkC7hB,YAAY4hB,GAA4B,CAC/ErF,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAACi0B,GAAiC,CAAClf,UAAU,EAAKhV,SAChDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kDAEjBG,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIotB,kBAAmB,aAAc9qB,YAAa,IACzEmK,iBAAkBqgB,GAClBpgB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCooB,EAA+B,CAAElpB,UAAW,CAC1C6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbotB,kBAAmBzgB,EAAOygB,kBAC1B9qB,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAO0gB,GAAoC3oB,UAAW3D,SAE1D6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sDAAwD,CACrE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAACq0B,GAA+B,CAC9BnB,QAAQ,EACRxhB,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KC5DA,MAAMmuB,GAAgC56B,GAAI;;;;;;;;EAoG3BiG,qBAAkB4C,aA1FjC,SAAwC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC5D,MACM20B,EAAyBnxB,EAAMmK,OAAOqI,IAEtC,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASwwB,GAAkC,CAC1E5oB,UAAW,CAAC,GAAMqpB,MAEbC,GAAqCjiB,YAAY+hB,IAGxD,GAAI1yB,EAAS,OACX5B,cAACi0B,GAAiC,CAAClf,UAAU,EAAKhV,SAChDC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,0CAA0CE,SAC3DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,UAMxB,GAAIa,EAAO,OACT7B,cAACi0B,GAAiC,CAAClf,UAAU,EAAKhV,SAChDC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,0CAA0CE,SAC3DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,0DAMd,MAAMqW,EAAcpU,EAAKwvB,4BAEzB,OACEtxB,cAACi0B,GAAiC,CAAClf,UAAU,EAAKhV,SAChDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,mDAEfG,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBotB,kBAAmBpd,EAAYod,kBAC/B9qB,YAAa0N,EAAY1N,aAE3BmK,iBAAkBqgB,GAClBpgB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ2hB,EAAkC,CAAEtpB,UAAW,CAC7C6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbotB,kBAAmBzgB,EAAOygB,kBAC1B9qB,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACjB,CAACC,MAAO0gB,GAAoC3oB,UAAW3D,SAExD6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uDAAyD,CACxE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BzM,cAACq0B,GAA+B,CAC9B3iB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UA/EE,mCAgFF,QAOlB,KCpHO,MAAMsuB,GAA0B/6B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2D9Bg7B,GAAeh7B,GAAI;;;;;;;;ECDjBiG,qBAAkB4C,aA3CJ3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC1EI,cAAC4R,KAAM,CAAA7R,SACLC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,kBAAkBE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAAC0R,KAAK,CAACG,UAAU,SACVjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MAAKlS,SAAA,CACvBC,cAAA,UAAQmC,MAAO,WAAWpC,SAAaF,EAAE,qCAATyM,gBAChCtM,cAAA,UAAQmC,MAAO,mBAAmBpC,SAAaF,EAAE,6CAATyM,gBACxCtM,cAAA,UAAQmC,MAAO,OAAOpC,SAAaF,EAAE,iCAATyM,gBAC5BtM,cAAA,UAAQmC,MAAO,YAAYpC,SAAaF,EAAE,sCAATyM,gBACjCtM,cAAA,UAAQmC,MAAO,YAAYpC,SAAaF,EAAE,sCAATyM,gBACjCtM,cAAA,UAAQmC,MAAO,YAAYpC,SAAaF,EAAE,sCAATyM,mBAGnCtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE,IACrBrG,EAAE,oEAGPG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAChBC,cAAC0E,IAAM,CACDxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,8BAMR,KCnBIF,qBAAkB4C,aAvBjC,SAA6B3C,GAA6C,IAA3C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EAGrE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UARN,wBAWVnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC4LeJ,qBAAkB4C,aAnMjC,SAAyB3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,SAAEoY,EAAQ,QAAEnY,GAAQzD,EACrD,MAAMyyB,EAAc7uB,qBAAWvC,GAGzBgvB,EAFaoC,EAAYtZ,WAEK,IADjBsZ,EAAYxnB,iBAGzB+K,EAAKxS,EAAMmK,OAAOqI,IAGlB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASmxB,GAAyB,CACjEvpB,UAAW,CAAE0K,GAAIA,MAEZ+e,GAAepiB,YAAYmiB,IAIlC,GAAI9yB,EAAS,OACX5B,cAAC40B,GAAoB,CAAA70B,SACnBC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC40B,GAAoB,CAAA70B,SACnBC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAMg1B,EAAQ/yB,EAAKgzB,aAInB,OAFAx2B,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UAG/DrjB,eAACs0B,GAAoB,CAAA70B,SAAA,CAEnBO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,+BAA+BE,SAC5CC,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVO,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACTO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,iBAAiB,QACrCG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAE80B,EAAM7E,iBAEpB1vB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAE80B,EAAMxR,SAAWwR,EAAMxR,QAAQC,cAE7ChjB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,8BACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOypB,EAAMxE,WAAWhlB,OAAO4kB,QAE7C3vB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACN80B,EAAM3Q,gBACNlkB,cAACyE,IAAI,CAACrC,GAAK,0BAAyByyB,EAAM3Q,eAAetO,KAAK7V,SAC3D80B,EAAM3Q,eAAejB,8BAUtC3iB,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACK,cAAjB80B,EAAMxsB,OACJrI,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,kBAAkBE,SACjCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,QAAME,UAAU,aAAYH,SAACC,cAACiG,IAAI,CAACC,KAAK,YAAiB,IAAErG,EAAE,0CAEvD,GACO,mBAAjBg1B,EAAMxsB,OACJrI,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,kBAAkBE,SACjCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACspB,IAAK,CAACjlB,KAAK,SAAShC,KAAK,iBAAgBtC,SACvCF,EAAE,4CAELG,cAAA,KAAAD,SACG80B,EAAME,sBAAwBF,EAAME,4BAGjC,GACO,cAAjBF,EAAMxsB,QAA2C,mBAAjBwsB,EAAMxsB,OACtCrI,cAACwS,KAAM,CACLC,cAAe,CACbpK,OAAQwsB,EAAMxsB,QAGhBuK,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8hB,EAAY,CAAEzpB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBvN,OAAQwK,EAAOxK,SAEhB6K,eAAgB,CACf,CAACC,MAAO0c,OAEXzc,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,qCAAuC,CACpD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACg1B,GAAoB,CACnBtjB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAvHE,mBAwHF,IAGJ,SAMRnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iBAAiBE,SAC9BO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,iBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACP80B,EAAM5yB,MAAM8G,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC/B1nB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKkb,cAERpkB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,cAERlI,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKqb,SAAS,IAACvkB,cAAA,SACfkJ,EAAK+rB,gBAERj1B,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK4T,eAAkB5T,EAAK4T,eAAe5W,KAAO,KAEtDlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKua,iBAfMnX,eAiBJ,eASrBuoB,EAAMK,QACPl1B,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mCAAmCE,SAChDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP80B,EAAMK,gBAID,KAKtB,KCjLev1B,qBAAkB4C,aA7BjC,SAAkC3C,GAA4C,IAA3C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAOnV,EACzE,OACEI,cAAC2K,GAAW,CAAA5K,SACZC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAW,4BAErBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,uBAAsB9J,SACnDC,cAACgV,GAAS,CAACH,OAAQ,sCAK7B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOb,KCtCO,MAAMo1B,GAA4Bz7B,GAAI;;;;;;;;;;;;;;;;;;;;EAsBhC07B,GAA2B17B,GAAI;;;;;;;;;EAW/B27B,GAAqB37B,GAAI;;;;;;;;;;;EAazB47B,GAAwB57B,GAAI;;;;;;;;;;EAY5B67B,GAAyB77B,GAAI;;;;;;;;;ECkH3BiG,qBAAkB4C,aAxJjC,SAA8B3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,GACtCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,kCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS6xB,GAA2B,CACvFjqB,UAAW,CAAE+J,SAAUA,MAGjBugB,GAAyBjjB,YAAYgjB,IAEvCjgB,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACy1B,GAAyB,CAAA11B,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACy1B,GAAyB,CAAA11B,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,+CAKZ,MAAM61B,EAAiB5zB,EAAK8mB,sBAG5B,OAAK8M,EAAe3sB,MAAM3J,OAYxBY,cAACy1B,GAAyB,CAAA11B,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EACf/G,SAAUmnB,EAAennB,SACzBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOslB,EAAennB,SAAS8B,WAEjCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBoY,sBAAsB7f,MACjDwF,EAAWiC,EAAgBoY,sBAAsBra,SAEvD,OAAOkC,EAASrR,OACZ,CAGEwpB,sBAAuB,CACrBlY,WAAYH,EAAeqY,sBAAsBlY,WACjD3H,MAAO,IAAKwH,EAAeqY,sBAAsB7f,SAAU0H,GAC3DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN21B,EAAe3sB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACjCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAACyE,IAAI,CAACrC,GAAK,gCAA+B8G,EAAK0M,KAAK7V,SAClDC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAIPqJ,EAAKysB,aAAgB,GACrB31B,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd4f,EAAqB,CAAEtqB,UAAW,CAChC6H,MAAO,CACL6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOgiB,GAA2BjqB,UAAW,CAAC,SAAY+J,OAC3D7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cArCUoG,kBAPzBA,eAgDJ,aAjGxBtM,cAACy1B,GAAyB,CAAA11B,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SAC2DF,EAAtDoV,EAAwD,wCAA1C,2CAoG3B,KCxKO,MAAM2gB,GAAwB1kB,OAAaC,MAAM,CACpDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBC8CHF,qBAAkB4C,aAtCA3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACvFU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SACTF,EAAE,2BAIR,KCmBIF,qBAAkB4C,aAhDjC,SAAgC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC7C,MAAMuG,EAAY,2BACV0vB,GAAqBtjB,YAAY8iB,IAEzC,OACEr1B,cAACy1B,GAAyB,CAAC1gB,UAAU,EAAKhV,SACxCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,qCAAqCE,SAClDC,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkBijB,GAClBhjB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC6pB,EAAiB,CAAE3qB,UAAW,CAC5B6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbyP,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOgiB,GAA2BjqB,UAAW,CAAC,UAAY,OAE9DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAAC81B,GAAwB,CACvBpkB,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,OAMhB,KCuCexG,qBAAkB4C,aApFjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACrD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,sCACdsG,EAAY,2BAEZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS8xB,GAA0B,CAClElqB,UAAW,CAAE0K,GAAIA,MAEXmgB,GAAwBxjB,YAAY+iB,IAE5C,GAAI1zB,EAAS,OACX5B,cAACy1B,GAAyB,CAAC1gB,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACy1B,GAAyB,CAAC1gB,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAK6mB,qBAIzB,OAHAjwB,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACy1B,GAAyB,CAAC1gB,UAAU,EAAKhV,SACxCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClByP,KAAMO,EAAYP,MAEpBhD,iBAAkBijB,GAClBhjB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZkjB,EAAoB,CAAE7qB,UAAW,CAC/B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbyP,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOgiB,GAA2BjqB,UAAW,CAAC,UAAY,OAE9DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BzM,cAAC81B,GAAwB,CACvBpkB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,OAMhB,KCnGO,SAASoB,KACd,IAAIK,EAAY,CAAC,EAEbS,EAAS/J,aAAayE,QAAQvE,EAAKtD,8BASvC,OAPE0M,EAAUS,OADRA,QAGiBhJ,EAGrB3G,QAAQC,IAAIiP,GAELA,CACT,CCNA,SAASqa,GAAgB9f,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GAGxC,OAFAzJ,QAAQC,IAAIqpB,GAERA,IAGFtpB,QAAQC,IAAI,wBACL,GAEX,CAkCegH,qBAAkB4C,aAxBL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,EAAA,OACxDI,cAAA,OAAKE,UAAU,OAAMH,SAEnBO,eAAA,UACEJ,UAAY,oBACZiC,MAAO8f,GAAgBzjB,EAAKtD,8BAC5B0e,SAAYsB,KAdlB,SAAsCN,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KACV,CAYQoT,CACEnc,EAAKtD,6BACLggB,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,8BAATyM,gBACtBtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,gCAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,+BAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,mCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,mCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,oCAATyM,oBAE7B,KCHO3M,qBAAkB4C,aA9BjC,SAA0B3C,GAAsC,IAApC,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EAC3D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACg2B,GAAmB,CAAC5gB,QAASA,IAC9BpV,cAACsW,GAAY,CAACF,IAAI,yBAAyBlW,UAAU,SACrDF,cAACyE,IAAI,CAACrC,GAAG,yBAAwBrC,SAC/BC,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,SAAQtC,SAEZF,EAAE,2BAKXG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCpCA,MAAMk2B,WAA2BvoB,YAC/BqB,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EAGrB,OAFeP,KAAKkP,MAAMnG,QAGxB,IAAK,MACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,+BACrC,IAAK,QACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,iCACrC,IAAK,OACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,gCACnC,IAAK,WACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,oCACnC,IAAK,WACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,oCAClC,IAAK,YACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,qCACnC,QACE,OAAOA,EAAE,mCAEf,EAIaF,qBAAkB4C,YAAW0zB,KChCrC,MAAMC,GAAmBx8B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmCvBy8B,GAAkBz8B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8GtB08B,GAAe18B,GAAI;;;;;;;;;EAWnB28B,GAAuB38B,GAAI;;;;;;EAS3B48B,GAAoB58B,GAAI;;;;;;;;;;;;;;;;EAmBxB68B,GAAoB78B,GAAI;;;;;;;;;;;;;;;;EAmBxB88B,GAAoB98B,GAAI;;;;;;ECzFtBiG,qBAAkB4C,aA/FjC,SAA0B3C,GAAsD,IAArD,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,OAAEqzB,EAAM,gBAAE3d,GAAgB,GAAMlZ,EAC3E,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAEvB2d,GAAuBnkB,YAAY8jB,IAE3C,OACE/1B,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACRC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,+BAA+B,MAAIA,EAAE,6BACxDiZ,GAAmB9Y,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6BACxCS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,uBAAuB,MAAIA,EAAE,gCACjDG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR02B,EAAO1tB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACzB1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACi2B,GAAkB,CAAC5tB,OAAQa,EAAKb,SAAU,IAACrI,cAAA,SAC1CkJ,EAAK8Z,WAAalK,GAClB9Y,cAACyE,IAAI,CAACrC,GAAI,kBAAoB8G,EAAK8Z,SAASpN,GAAK,QAAQ7V,SACvDO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAK8Z,SAAS9c,YAJjCoG,gBAQhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAI,wBAA0B8G,EAAK0M,GAAG7V,SACzCmJ,EAAKytB,cACD32B,cAAA,SACPA,cAACkjB,IAAKC,MAAK,CAACte,MAAM,OAAM9E,SAAEmJ,EAAKgQ,QAAQkK,MAAM,QAJ/B9W,gBAMfwM,GACCxY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAKma,SACL/iB,eAACmE,IAAI,CAACrC,GAAI,uBAAyB8G,EAAKma,QAAQzN,GAAK,WAAW7V,SAAA,CAC9DC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAKma,QAAQC,SAAS,IAACtjB,cAAA,YAG/CkJ,EAAK8Z,UACLhjB,cAACyE,IAAI,CAACrC,GAAI,kBAAoB8G,EAAK8Z,SAASpN,GAAK,QAAQ7V,SACvDO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAK8Z,SAAS9c,YARjCoG,gBAalBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKqa,UAAUlY,OAAO0N,GAAY,IAAC/Y,cAAA,SAC1CoL,IAAOlC,EAAK0tB,YAAYvrB,OAAO0N,KAFlBzM,gBAIhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKua,cADQnX,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAI,wBAA0B8G,EAAK0M,GAAG7V,SAC1CC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,qCACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKytB,cACzBpf,WAAY1X,EAAE,0BACd+Y,eAAgB8d,EAChBjf,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAO+iB,GAAkBhrB,UAAW3D,SAGzC,EACJxH,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA7BfoG,kBApCzBA,eAoEN,QAKtB,KCfe3M,qBAAkB4C,aAlFjC,SAAsB3C,GAA4B,IAA3B,EAAEC,EAAC,SAAE2b,EAAQ,QAAEnY,GAASzD,EAE7CtB,aAAaC,QAAQC,EAAKvD,2BAA4BugB,EAASmI,UAE/DrlB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAErE,MAAM,QAAE/hB,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS4yB,GAAkB,CAC9EhrB,UAAW3D,KACX+D,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAAC62B,GAAiB,CAACzhB,QAASA,EAAQrV,SAClCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,wBAAwBE,SAChDC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC62B,GAAiB,CAACzhB,QAASA,EAAQrV,SAClCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,wBAAwBE,SAChDC,cAAA,KAAAD,SAAIF,EAAE,sCAKZ,MAAM42B,EAAS30B,EAAKg1B,cAGpB,OAAKL,EAAO1tB,MAAM3J,OAWhBY,cAAC62B,GAAiB,CAACzhB,QAASA,EAAQrV,SAClCC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,wBACbuP,aAAa,EACbb,SAAUkoB,EAAOloB,SACjBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOqmB,EAAOloB,SAAS8B,WAEzBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsmB,cAAc/tB,MACzCwF,EAAWiC,EAAgBsmB,cAAcvoB,SAE/C,OAAOkC,EAASrR,OACZ,CAGE03B,cAAe,CACbpmB,WAAYH,EAAeumB,cAAcpmB,WACzC3H,MAAO,IAAKwH,EAAeumB,cAAc/tB,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC+2B,GAAiB,CAChBN,OAAQA,EACR3d,iBAAiB,QAzCvB9Y,cAAC62B,GAAiB,CAACzhB,QAASA,EAAQrV,SAClCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,wBAAwBE,SAChDC,cAAA,KAAAD,SACGF,EAAE,kCA2Cb,KC9FO,MAAMm3B,GAAuB9lB,OAAaC,MAAM,CACnD9I,OAAQ6I,OACLG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,yBCwEDF,qBAAkB4C,aAhEH3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACpHU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,gBAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,gCAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,+BAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,mCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,mCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,oCAATyM,mBAEjCtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,+BAK/DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACHG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAExBF,EAAE,8CAELG,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KC6CExG,qBAAkB4C,aA/FjC,SAA4B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACvC,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACxBqG,EAAWE,GAAgBnK,mBAAS,IAAIjS,KAAKkI,MAASoP,QAAQ,YAC9D6E,EAASE,GAAcpK,mBAAS,IAAIjS,KAAKkI,MAASqP,MAAM,YACxDpS,EAAQ0Z,GAAa5M,mBAAS,QAC9BqK,EAAUC,GAAetK,oBAAS,IAClCsB,EAAWiJ,GAAgBvK,mBAAS,IAErCnG,EAAYnP,EAAE,+BACdsG,EAAY,mBAEVqQ,GAAmBjE,YAAY5Y,GAEvC,OACEqG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAWA,QAG3BnG,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACPC,cAAe,CACb2M,UAAWA,EACXC,QAASA,EACThX,OAAQA,GAEVsK,iBAAkBqkB,GAClBpkB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZyM,EAAazM,EAAOuM,WACpBG,EAAW1M,EAAOwM,SAClB0C,EAAUlP,EAAOxK,QAEjB,MAAMsX,EAAe7D,GAAejJ,EAAOuM,WACrCQ,EAAa9D,GAAejJ,EAAOwM,SACzCK,EACG,oBAAmBC,KAAgBC,KAAcvX,MAGpDyK,GAAc,GACd2M,GAAY,EAAK,EACnB1f,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAAStT,EAAA,OACzEvM,cAACi3B,GAAuB,CACtBvlB,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,MAKNqZ,EACAlf,eAACwG,IAAI,CAACV,MAAOvG,EAAE,qCAAqCE,SAAA,CAClDO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,2CACHS,eAACyF,IAAI,CAAAhG,SAAA,CACHO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,kBAAoB,KACtBuL,IAAOgU,GAAW/T,OAAO0N,GAAY,IAAG,MACxC3N,IAAOiU,GAAShU,OAAO0N,MAE1BzY,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,kBAAkB,KAAGA,EAAG,yBAAwBwI,cAIzDrI,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVO,eAACoE,IAAM,CACLG,MAAM,UACN0K,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,mBAAmB,IAAErG,EAAE,4BAItC,SAKZ,KCnGeF,qBAAkB4C,aAZjC,SAA6B3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EACzD,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SACzBC,cAACG,IAAS,CAAAJ,SACPA,OAKb,KC6BeJ,qBAAkB4C,aAnCjC,SAA4B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACrC,MAAQs3B,GAAiB3kB,YAAY+jB,IAEnC,OACEh2B,eAAA,UAAQJ,UAAU,yBAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACP2nB,EAAa,CAAEhsB,UAAW,CACxB6H,MAAO,CACLokB,aAAc/zB,EAAMmK,OAAOqI,KAE5B1C,eAAgB,CACf,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAEzDxC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,wCAA0C,CACvD0T,SAAUF,IAAMG,SAASC,cACzB,IAEHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE1D,EACN9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,SAAS,IAAG,IAClCrG,EAAE,4BAGX,KCAeF,qBAAkB4C,aAhCjC,SAA+B3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EAC9C,MAAOw3B,GAAmB7kB,YAAYikB,IAEpC,OACEx2B,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,0CACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKkb,YAAY,IAACpkB,cAAA,SAAM,IAAEkJ,EAAKV,eACnD+O,WAAY1X,EAAE,+BACd+Y,eAAgBwe,EAChB3f,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAO+iB,GAAkBhrB,UAAW3D,MACrC,CAAC4L,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAG1D,EACJ7V,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KC2FevG,qBAAkB4C,aAvHA3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,KAAEzI,EAAI,QAAE2W,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,UAAED,GAAWvd,EAAA,OACpHI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDC,cAAC4R,KAAM,CAAA7R,SACLO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CAEPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOyS,YAAe,0BAA4B,eAC9DnS,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,eAAe,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,MACbE,UAAU,WACVyH,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,eAAe,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEI,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,WACLhG,UAAYyR,EAAO4S,SAAY,0BAA4B,eAC3DtS,aAAa,MACb2H,SAAW0K,IACVD,EAAaC,GACblH,EAAgB,YAAY,GAAM,EAAK,IAG/Cpd,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,SAAS,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,2BAG1DF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAC7CO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,kBAAkB,GAAM,EAAK,EAC7Crd,SAAA,CAELrH,QAAQC,IAAI,wCACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUsH,gBAAgB1b,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC5C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,0BAGnEI,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CC,cAAA,QAAME,UAAU,cAAaH,SAAEmJ,EAAKua,eAAoB,IAACzjB,cAAA,SAAMA,cAAA,YAEjEM,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAA,CAC7CC,cAAA,QAAME,UAAU,cAAaH,SAACC,cAACq3B,GAAsB,CAACnuB,KAAMA,MAAclJ,cAAA,SAAMA,cAAA,SAAM,IAACA,cAAA,SACrD,IAAhC4kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,6BAuBN,KCzDIF,qBAAkB4C,aAhEjC,SAA6B3C,GAA8C,IAA7C,EAACC,EAAC,MAAEuD,EAAK,cAAEqP,EAAa,KAAEvJ,EAAI,UAAEiU,GAAUvd,EACtE,MAAO03B,GAAmB/kB,YAAYgkB,IAEpC,OACEv2B,cAACwS,KAAM,CACLC,cAAe,CACb2R,YAAa3R,EAAc2R,YAC3B5b,YAAaiK,EAAcjK,YAC3Bgc,MAAO/R,EAAc+R,MACrBD,SAAU9R,EAAc8R,SACxBzH,eAAiBrK,EAAcqK,eAAkBrK,EAAcqK,eAAelH,GAAK,MAGrFhD,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZykB,EAAgB,CAAEpsB,UAAW,CAC3B6H,MAAO,CACL6C,GAAInD,EAAcmD,GAClBwO,YAAavR,EAAOuR,YACpB5b,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACdD,SAAU1R,EAAO0R,SACjBzH,eAAgBjK,EAAOiK,iBAExB5J,eAAgB,CACjB,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIxS,EAAMmK,OAAOqI,QAGvDxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,GAAiB3Q,EAAA,OACxEzM,cAACu3B,GAAwB,CACvB7lB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBlU,KAAMA,EACNiU,UAAWA,GAEc,GAIrC,KCpDO,MAAMoZ,GAAoB78B,GAAI;;;;;;;;EA2JtBiG,qBAAkB4C,aAjJjC,SAA8B3C,GAAmD,IAAjD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEo0B,EAAY,UAAEra,GAAWvd,EAC5E,MAAQslB,GAAe3S,YAAYgkB,KAC3BpR,EAAUC,GAAgBjQ,oBAAS,GAyF3C,OACEnV,cAACqlB,KAAe,CAACC,UA7DAtU,IAEjBtY,QAAQC,IAAI,0BACZD,QAAQC,IAAIqY,GACZ,MAAM,YAAEuU,EAAW,YAAEC,EAAW,OAAEC,EAAM,OAAEC,GAAW1U,EACrDtY,QAAQC,IAAI8sB,GACZ/sB,QAAQC,IAAI6sB,GACZ9sB,QAAQC,IAAI+sB,GAGZhtB,QAAQC,IAAI,qBACP6sB,GAA0B,WAAXE,IAKpBhtB,QAAQC,IAAI,4BAEV6sB,EAAYG,cAAgBF,EAAOE,aACnCH,EAAYI,QAAUH,EAAOG,OA9CR5Z,KAA+B,IAA9B,QAAE6Z,EAAO,YAAEC,GAAa9Z,EAChDoZ,GAAY,GACZF,EAAW,CACTha,UAAW,CACT6H,MAAO,CACL6C,GAAIiQ,EACJE,WAAYD,IAGhB5S,eAAgB,CACd,CAAEC,MAAOgjB,GAAiBjrB,UAAW,CAAE0K,GAAIuH,EAAUga,aAAavhB,QAEnExC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACf7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,oCAAsC,CACnD0T,SAAUF,IAAMG,SAASC,eAE7B6N,YAAW,IAAM8D,GAAY,IAAQ,IAAI,IACxC1R,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDyf,YAAW,IAAM8D,GAAY,IAAQ,IAAI,GACzC,EA2BFY,CAAiB,CACfH,QAASN,EACTO,YAAaN,EAAYI,QACzB,EAkCoC7lB,SACpCO,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,mBACfG,cAAC8G,IAAKyO,QAAO,CAAAxV,SACXC,cAACy3B,GAAmB,SAGxBz3B,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACQ,IAAM,CAACC,OAAQokB,EAAUnkB,OAAQmkB,EAASplB,SAAA,CACvCO,eAACF,IAAKC,IAAG,CAACH,UAAU,uBAAsBH,SAAA,CACxCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,qBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,yBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,sCACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAAEF,EAAE,iBACnDG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,qBAAoBH,SAACC,cAAA,QAAME,UAAU,cAAaH,SAAEF,EAAE,qBACjFG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,0BAE7BF,cAACmmB,KAAS,CAACR,YAAY,cAAa5lB,SACjCA,CAACqmB,EAAUC,IACR/lB,eAAA,OACEod,IAAK0I,EAASE,YACVF,EAASG,eAAcxmB,SAAA,CAE1Bod,EAAUga,aAAal1B,MAAM8G,MAAMgD,KAAI,CAAAU,EAAW+Z,KAAG,IAAb,KAAEtd,GAAMuD,EAAA,OAC/CzM,cAACymB,KAAS,CACRlB,YAAarc,EAAK0M,GAClBgQ,MAAOY,EAAIzmB,SAGVA,CAACqmB,EAAUC,IACRrmB,cAAA,OACE0d,IAAK0I,EAASE,SACdV,MAAO1c,EAAK6c,cACRK,EAASM,kBACTN,EAASO,gBAAe5mB,SAE5BC,cAAC03B,GAAoB,CAACjlB,cAAevJ,EAAMiU,UAAWA,EAAWjU,KAAMA,OATxEA,EAAK0M,GAYA,IAEbwQ,EAAS3E,0BAShC,KC/He9hB,qBAAkB4C,aA5BC3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,QAAEkO,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAezd,EAAA,OAC3HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbxG,aAAchO,EAAOyU,MACrBtuB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,QAASiH,EAAElf,OAAOmiB,cAChCnK,EAAgB,SAAS,GAAM,EAAK,IAGxCpd,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KCEIF,qBAAkB4C,aA5BE3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,QAAEkO,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAezd,EAAA,OAC5HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbxG,aAAchO,EAAO2U,OACrBxuB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,SAAUiH,EAAElf,OAAOmiB,cACjCnK,EAAgB,UAAU,GAAM,EAAK,IAGzCpd,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KCIIF,qBAAkB4C,aA5BA3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,aAAE0S,EAAY,WAAEoD,EAAU,gBAAErK,EAAe,cAAEC,GAAezd,EAAA,OAC7HI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,GAAM,EAAK,IAGvCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDF,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KC8HIF,qBAAkB4C,aAvJjC,SAAmC3C,GAAoC,IAAnC,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,YAAE8S,GAAYtW,EAClE,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAChB+hB,GAAgBplB,YAAY6jB,IAEpC,OACE91B,eAACsnB,IAAU,CAACC,WAAYhoB,EAAE,gCAAgCE,SAAA,CACxDC,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,gCAAgCE,SAC5CC,cAACwS,KAAM,CACLC,cAAe,CACb6U,MAAOpR,EAAYihB,aAAa7P,OAGlC1U,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB0R,MAAOzU,EAAOyU,QAEfpU,eAAgB,CACf,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIA,OAE5CxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe5Q,EAAA,OACvFzM,cAAC43B,GAAyB,CACxBlmB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GAEW,MAIlCrd,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,kBAAkBE,SAC9BC,cAACwS,KAAM,CACLC,cAAe,CACb+U,OAAQtR,EAAYihB,aAAa3P,QAGnC5U,SAAUA,CAACC,EAAMmV,KAAyB,IAAvB,cAAElV,GAAekV,EAClCtvB,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB4R,OAAQ3U,EAAO2U,SAEhBtU,eAAgB,CACjB,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIA,OAE1CxC,MAAK6U,IAAe,IAAd,KAAEnmB,GAAMmmB,EACXvvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEHmoB,IAAA,IAAC,aAAExW,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe6K,EAAA,OACvFloB,cAAC63B,GAA0B,CACzBnmB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRwR,aAAcA,EACdxE,QAASA,EACTzC,gBAAiBA,EACjBC,cAAeA,GAEY,MAInCrd,cAAC8nB,IAAG,CAAC1hB,MAAOvG,EAAE,gBAAgBE,SAC5BC,cAACwS,KAAM,CACLC,cAAe,CACbiV,KAAMxR,EAAYihB,aAAazP,MAGjC9U,SAAUA,CAACC,EAAMuV,KAAyB,IAAvB,cAAEtV,GAAesV,EAClC1vB,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB8R,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACjB,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAIA,OAE1CxC,MAAKiV,IAAe,IAAd,KAAEvmB,GAAMumB,EACX3vB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEHuoB,IAAA,IAAC,aAAE5W,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAeiL,EAAA,OACvFtoB,cAAC83B,GAAwB,CACvBpmB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GAEU,QAMvC,KC3He1d,qBAAkB4C,aAlCD3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAE8zB,GAAcv3B,EAAA,OAC3DU,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,sBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBo3B,EAAa3O,qBAEZxoB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,iBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBo3B,EAAa1O,gBAEZzoB,cAAA,SACNM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,iBAAgBH,SAC7BF,EAAE,mBAELG,cAAA,QAAME,UAAU,aAAYH,SACzBo3B,EAAa1T,kBAEZzjB,cAAA,cAEH,KC0CML,qBAAkB4C,aArEG3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEmB,EAAM,OAAElB,EAAM,aAAE0S,EAAY,QAAExE,EAAO,cAAExC,EAAa,gBAAED,EAAe,UAAED,GAAWvd,EAAA,OACxII,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,+BAA+BE,SAAA,CAClDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOglB,YAAe,0BAA4B,eAC9D1kB,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,eAAe,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACob,GAAY,CACXlb,UAAYyR,EAAO4R,SAAY,0BAA4B,eAC3D5J,SAAU9G,EAAO0Q,SACjB3J,SAAWpN,IACT6Q,EAAc,WAAY7Q,GAC1B4Q,EAAgB,YAAY,EAAK,IAGrCpd,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACob,GAAY,CACXlb,UAAYyR,EAAOilB,WAAc,0BAA4B,eAC7Djd,SAAU9G,EAAO+jB,WACjBhd,SAAWpN,IACT6Q,EAAc,aAAc7Q,GAC5B4Q,EAAgB,cAAc,EAAK,IAGvCpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,UAAU,GAAM,EAAK,EACrCrd,SAAA,CAENC,cAAA,UAAQmC,MAAM,QAAOpC,SAAEF,EAAE,iCACzBG,cAAA,UAAQmC,MAAM,OAAMpC,SAAEF,EAAE,gCACxBG,cAAA,UAAQmC,MAAM,WAAUpC,SAAEF,EAAE,oCAC5BG,cAAA,UAAQmC,MAAM,WAAUpC,SAAEF,EAAE,oCAC5BG,cAAA,UAAQmC,MAAM,YAAWpC,SAAEF,EAAE,wCAE/BG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEvB,IAAhC0kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAIF,KCaIF,qBAAkB4C,aA5EjC,SAAgC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,YAAE8S,GAAYtW,EACtD,MAAQ+3B,GAAgBplB,YAAY6jB,IAIpC,IAAI7S,EAAW,KACXrN,EAAYihB,aAAa5T,WAC3BA,EAAW,IAAIrgB,KAAKgT,EAAYihB,aAAa5T,WAE/C,IAAIqT,EAAa,KAKjB,OAJI1gB,EAAYihB,aAAaP,aAC3BA,EAAa,IAAI1zB,KAAKgT,EAAYihB,aAAaP,aAI/C52B,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mBAAoBomB,YAAY,OAAMlmB,SACnDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CACbkkB,YAAazgB,EAAYihB,aAAaR,YACtCpT,SAAUA,EACVqT,WAAYA,EACZvuB,OAAQ6N,EAAYihB,aAAa9uB,QAGnCuK,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB+gB,YAAa9jB,EAAO8jB,YACpBpT,SAAUzH,GAAejJ,EAAO0Q,UAChCqT,WAAY9a,GAAejJ,EAAO+jB,YAClCvuB,OAAQwK,EAAOxK,SAEhB6K,eAAgB,CACf,CAACC,MAAO+iB,GAAkBhrB,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,WAAEoD,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OACnGzM,cAAC+3B,GAA2B,CAC1B5a,UAAWjH,EACXxE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdhH,cAAeA,EACfD,gBAAiBA,GAEW,OAM1C,KCpDezd,qBAAkB4C,aA7BI3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEE,GAAc3D,EAAA,OAChEU,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oBAEjBS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,OAAKE,UAAU,OAAMH,SAClBwD,EAAa2C,OAEd3C,EAAawlB,QACb/oB,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS7I,EAAawlB,YACtE,GAEJ/oB,cAAA,OAAAD,SACGwD,EAAaylB,QAEhBhpB,cAAA,OAAAD,SACGwD,EAAa0lB,QAEhBjpB,cAAA,OAAAD,SACGwD,EAAa2lB,eAEhBlpB,cAAA,OAAAD,SACGwD,EAAa4lB,uBAGb,KCMMxpB,qBAAkB4C,aA9BG3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,QAAEkO,EAAO,gBAAEzC,EAAe,aAAEiH,GAAczkB,EAAA,OACtGI,cAACc,IAAM,CAACE,OAAQ0Q,EAAc3Q,OAAQ2Q,EAAa3R,SACjDO,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTC,cAACgS,KAAK,CACJ3N,KAAK,OACL6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,MACb2H,SAAW0K,IACTD,EAAaC,GACblH,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAExB,IAAhC0kB,OAAOC,KAAKhF,GAASzgB,OAAgB,GACrCY,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAIF,KCqCIF,qBAAkB4C,aA3DjC,SAAgC3C,GAA8C,IAA7C,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAEoY,EAAQ,YAAEtF,GAAYtW,EACzE,MAAQ+3B,GAAgBplB,YAAY6jB,IAEpC,OACE91B,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uBAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CACbyG,QAAShD,EAAYihB,aAAaje,SAGpCtG,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBsD,QAASrG,EAAOqG,UAEjBhG,eAAgB,CACf,CAACC,MAAO+iB,GAAkBhrB,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,GACdiS,EAAW,CAAC,EAAE,IACbrR,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,gBAAEzC,EAAe,aAAEiH,GAAc5X,EAAA,OACxEzM,cAACg4B,GAA2B,CAC1BtmB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,GAEW,QAM1C,KCJezd,qBAAkB4C,aA1DjC,SAA2B3C,GAAuC,IAAtC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAE+zB,GAAcv3B,EAC7D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAExB,OACEtV,eAACwG,IAAI,CAACmf,YAAY,OAAMlmB,SAAA,CACtBO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEF,EAAE,cAAc,OAC7BG,cAAC8G,IAAKyO,QAAO,CAAAxV,SACXC,cAACyE,IAAI,CAACrC,GAAK,wBAAuBwT,OAAQ7V,SACxCC,cAAC0E,IAAM,CAACG,MAAM,YAAYD,KAAK,KAAI7E,SAChCF,EAAE,yBAKXS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,cAAA,OAAKE,UAAU,OAAMH,SAClBo3B,EAAa3N,kBAEhBxpB,cAAA,OAAAD,SACGo3B,EAAa1N,8BAEhBzpB,cAAA,OAAAD,SACGo3B,EAAazN,oCAGhB1pB,cAAA,OAAKE,UAAU,OAAMH,SAClBo3B,EAAaxN,sBAEhB3pB,cAAA,OAAAD,SACGo3B,EAAavN,kBAEhBtpB,eAAA,OAAAP,SAAA,CACGo3B,EAAatN,iBAAiB,IAAEsN,EAAarN,gBAEhD9pB,cAAA,OAAAD,SACGo3B,EAAapN,qBAGpBzpB,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRo3B,EAAanU,UAAahjB,cAAA,QAAME,UAAU,cAAaH,SACvDC,cAACyE,IAAI,CAACrC,GAAK,kBAAiB+0B,EAAanU,SAASpN,UAAU7V,SAC1DC,cAAC0E,IAAM,CAACrC,KAAK,OAAOwC,MAAM,OAAM9E,SAC7Bo3B,EAAanU,SAAS9c,WAI3BixB,EAAa9T,SAAYrjB,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+0B,EAAa9T,QAAQzN,aAAa7V,SAC5FC,cAAC0E,IAAM,CAACrC,KAAK,OAAOwC,MAAM,OAAM9E,SAC7Bo3B,EAAa9T,QAAQC,kBAMlC,KCgDe3jB,qBAAkB4C,aAxFjC,SAAyB3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEmY,GAAS5b,EACrD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAClB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAAS6yB,GAAiB,CAClEjrB,UAAW,CACT0K,GAAIA,MAIDY,GAAkBjE,YAAY5Y,GAMrC,GAHA2E,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAGjE/hB,EAAS,OAAO5B,cAACi4B,GAAoB,CAAAl4B,SAAEF,EAAE,+BAE7C,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACi4B,GAAoB,CAAAl4B,SAAEF,EAAE,8BAIlC,IAAIsG,EAAY7H,aAAayE,QAAQvE,EAAKvD,4BACrCkL,IACHA,EAAY,mBAEd,MAAMqkB,EAAa,uBAAyB5U,EAG5C,OACEtV,eAAC23B,GAAoB,CAAAl4B,SAAA,CACnBC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,uBAAyB,KAAOiC,EAAKq1B,aAAaR,YAAY52B,SAClFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCO,eAACmE,IAAI,CAACrC,GAAI+D,EACJjG,UAAU,yBAAwBH,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,mBAG9CG,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,UACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASmnB,GAC5BzqB,SAEDF,EAAE,sBAKTS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAACk4B,GAAuB,CACtBhiB,YAAapU,IAQfxB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGwkB,GAAI,EAAEnrB,SACrBC,cAACm4B,GAA4B,CAAC50B,aAAczB,EAAKyB,iBAEnDvD,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAGwkB,GAAI,EAAEnrB,SACrBC,cAACo4B,GAAkB,CAACjB,aAAcr1B,EAAKq1B,uBAI7C72B,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAACq4B,GAAuB,CAAClB,aAAcr1B,EAAKq1B,eAC5Cn3B,cAACs4B,GAAuB,CAACpiB,YAAapU,UAG1C9B,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAACu4B,GAAqB,CAACpb,UAAWrb,EAAM01B,aAAcpiB,IACtDpV,cAACw4B,GAA0B,CAACtiB,YAAapU,WAKnD,KCpFenC,qBAAkB4C,aAjBjC,SAA+B3C,GAA8C,IAA7C,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE42B,GAAY/2B,EACxE,MAAM8rB,EAAY7rB,EAAE,+BAAiC,KAAO82B,GAAeA,EAE3E,OACE32B,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SACzBO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOslB,IACpB1rB,cAACI,IAAKC,IAAG,CAACqG,GAAI,GAAG3G,SACdA,UAMf,KCoHeJ,qBAAkB4C,aA/HF3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,EAAe,UAAED,EAAS,UAAEhX,GAAWvG,EAAA,OAChIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0lB,QAAS/Y,EAAOgZ,SAChBjS,SAAYsB,IACVkC,EAAgB,YAAY,GAAM,GAClCC,EAAc,YAAcxK,EAAOgZ,SAAU,IAG/C7rB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yCAEnDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,WAEtCU,EAAOgZ,SAcTvrB,eAAAwrB,WAAA,CAAA/rB,SAAA,CACEO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAO6X,gBAAmB,0BAA4B,eAClEvX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,wBAElEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gDAAgDE,SAAA,CACnEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,8BACLhG,UAAYyR,EAAO8X,4BAA+B,0BAA4B,eAC9ExX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,0BAGhFF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oDAAoDE,SAAA,CACvEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,iCACLhG,UAAYyR,EAAO+X,+BAAkC,0BAA4B,eACjFzX,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,iCAAiCiM,UAAU,OAAOjS,UAAU,6BAIrFI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wCAAwCE,SAAA,CAC3DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,sBACLhG,UAAYyR,EAAOgY,oBAAuB,0BAA4B,eACtE1X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,wBAEtEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOiY,gBAAmB,0BAA4B,eAClE3X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,0BAGpEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oCAAoCE,SAAA,CACvDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,mBACLhG,UAAYyR,EAAOkY,iBAAoB,0BAA4B,eACnE5X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,6BAIvEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOmY,aAAgB,0BAA4B,eAC/D7X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,0BAGjEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOoY,gBAAmB,0BAA4B,eAClE9X,aAAa,QAErBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,gCA5FtEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wCAAwCE,SAAA,CAC3DO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,WACLhG,UAAYyR,EAAOqR,SAAY,0BAA4B,eAC3D/Q,aAAa,MAAKlS,SAAA,CACtBO,eAAA,UAAQ6B,MAAM,GAAEpC,SAAA,CAAaF,EAAE,uCAAuC,KAAGsd,EAAUga,aAAa9T,QAAQC,WAAlFhX,gBACrB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,2BAyFjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KCtBIxG,qBAAkB4C,aApGjC,SAA2B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC/C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAa,wBAAuByP,KACpC,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS6yB,GAAiB,CACzDjrB,UAAW,CACT0K,GAAIA,MAGA+hB,GAAgBplB,YAAY6jB,IAGpC,GAAIx0B,EAAS,OAAO5B,cAACy4B,GAAsB,CAAA14B,SAAEF,EAAE,+BAE/C,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACy4B,GAAsB,CAAA14B,SAAEF,EAAE,8BAGpCnH,QAAQC,IAAImJ,GAEZ,IAAIkqB,EAAkB,GAKtB,OAJIlqB,EAAKq1B,aAAanU,WACpBgJ,EAAkBlqB,EAAKq1B,aAAanU,SAASpN,IAI7C5V,cAACy4B,GAAsB,CAAC9B,YAAa70B,EAAKq1B,aAAaR,YAAY52B,SACjEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,cAAeomB,YAAY,OAAMlmB,SAC9CC,cAACwS,KAAM,CACLC,cAAe,CACboZ,SAAU/pB,EAAKq1B,aAAatL,SAC5BrC,gBAAiB1nB,EAAKq1B,aAAa3N,gBACnCC,4BAA6B3nB,EAAKq1B,aAAa1N,4BAC/CC,+BAAgC5nB,EAAKq1B,aAAazN,+BAClDC,oBAAqB7nB,EAAKq1B,aAAaxN,oBACvCC,gBAAiB9nB,EAAKq1B,aAAavN,gBACnCC,iBAAkB/nB,EAAKq1B,aAAatN,iBACpCC,aAAchoB,EAAKq1B,aAAarN,aAChCC,gBAAiBjoB,EAAKq1B,aAAapN,gBACnC/G,SAAUgJ,GAGZpZ,SAAUA,CAACC,EAAM7G,KAAqC,IAAnC,cAAE8G,EAAa,WAAEiS,GAAY/Y,EAC9CtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ8kB,EAAY,CAAEzsB,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBiW,SAAUhZ,EAAOgZ,SACjBrC,gBAAiB3W,EAAO2W,gBACxBC,4BAA6B5W,EAAO4W,4BACpCC,+BAAgC7W,EAAO6W,+BACvCC,oBAAqB9W,EAAO8W,oBAC5BC,gBAAiB/W,EAAO+W,gBACxBC,iBAAkBhX,EAAOgX,iBACzBC,aAAcjX,EAAOiX,aACrBC,gBAAiBlX,EAAOkX,gBACxB/G,SAAUnQ,EAAOmQ,WAElB9P,eAAgB,CACf,CAACC,MAAOgjB,GAAiBjrB,UAAW,CAAC0K,GAAGA,IACxC,CAACzC,MAAO+iB,GAAkBhrB,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe5Q,EAAA,OACvFzM,cAAC04B,GAAsB,CACrBhnB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,EACfF,UAAWrb,EACXqE,UAAWA,GAEY,OAMrC,KCjHO,MAAMwyB,GAAyBj/B,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6B7Bk/B,GAAwBl/B,GAAI;;;;;;;;;;;;;;;;;EAmB5Bm/B,GAAqBn/B,GAAI;;;;;;;;;;EAYzBo/B,GAAkBp/B,GAAI;;;;;;;;EAUtBq/B,GAAsBr/B,GAAI;;;;;;;;;ECxBxBiG,qBAAkB4C,aAhCjC,SAA+B3C,GAA8C,IAA7C,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,aAAEwsB,GAAa,GAAM3sB,EACxE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCwsB,EAEAvsB,cAACyG,GAAU,CAACN,UAAU,yBAAyBjG,UAAU,SAGzDF,cAACyG,GAAU,CAACN,UAAU,kBAAkBjG,UAAU,SAEpDF,cAACmN,GAAoB,CAACvD,WAAW,MACTC,SAAS,oBAAmB9J,SAClDC,cAACgV,GAAS,CAACH,OAAO,sCAIxB7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCsIeJ,qBAAkB4C,aA5JjC,SAA2B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACjCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,+BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASq1B,GAAwB,CACpFztB,UAAW,CAAE+J,SAAUA,MAEjB+jB,GAAsBzmB,YAAYwmB,IAEpCzjB,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACi5B,GAAsB,CAAAl5B,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACi5B,GAAsB,CAAAl5B,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,4CAKZ,MAAMq5B,EAAcp3B,EAAKq3B,mBAEzB,OACEn5B,cAACi5B,GAAsB,CAAAl5B,SACrBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,8BACboP,cAAeqG,EACf/G,SAAU2qB,EAAY3qB,SACtBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8oB,EAAY3qB,SAAS8B,WAE7BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2oB,mBAAmBpwB,MAC9CwF,EAAWiC,EAAgB2oB,mBAAmB5qB,SAEpD,OAAOkC,EAASrR,OACZ,CAGE+5B,mBAAoB,CAClBzoB,WAAYH,EAAe4oB,mBAAmBzoB,WAC9C3H,MAAO,IAAKwH,EAAe4oB,mBAAmBpwB,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAPFtE,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNm5B,EAAYnwB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK0jB,QADQtgB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKkwB,kBADQ9sB,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK2M,OACJ3M,EAAK4jB,WAAcxsB,eAAA,QAAAP,SAAA,CAAM,IAAEF,EAAE,gBAAgB,IAACG,cAAA,YAAe,GAC7DkJ,EAAK6jB,oBAAuB/sB,cAACkjB,IAAKC,MAAK,CAACte,MAAM,OAAM9E,SACnDF,EAAE,iDACU,KALDyM,gBAOhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,iBADZ3gB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,+BAAiCgH,EAAK0M,IAClE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdojB,EAAkB,CAAE9tB,UAAW,CAC7B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOwlB,GAAwBztB,UAAW,CAAC,SAAY+J,OACxD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAACC,KAAK,cAnCwBoG,kBAvBzBA,eA6DJ,YAO5B,KC9KO,MAAM+sB,GAAqBnoB,OAAaC,MAAM,CACjDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdu5B,iBAAkBloB,OACfic,SAAS,EAAGttB,YAAE,sBACdwR,SAASxR,YAAE,uBACd+sB,OAAQ1b,OACR2E,OAAQ3E,OACR4b,WAAY5b,OACZ6b,oBAAqB7b,OACrBoW,MAAOpW,OACPsW,OAAQtW,SC4IGvR,qBAAkB4C,aA1ID3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAE1L,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,KAAEinB,GAAK,GAAOxtB,EAAA,OAClIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,oCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,eAInD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACLqtB,EACFptB,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOib,OAAU,0BAA4B,eACzD3a,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAE7C,GACdF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2CAA2CE,SAAA,CAC9DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,mBACLhG,UAAYyR,EAAOynB,iBAAoB,0BAA4B,eACnEnnB,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,6BAIvEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOkE,OAAU,0BAA4B,eACzD5D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,aACL0lB,QAAS/Y,EAAOia,aAClB9sB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yCAEjDG,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,aAG9CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,sBACL0lB,QAAS/Y,EAAOka,sBAClB/sB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,oDAEjDG,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,gBAIzD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,QACbxG,aAAchO,EAAOyU,MACrBtuB,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,SAAS,GAAM,GAC/BC,EAAc,QAASiH,EAAElf,OAAOmiB,aAAa,IAGjDvnB,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,SACbxG,aAAchO,EAAO2U,OACrBxuB,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,UAAU,GAAM,GAChCC,EAAc,SAAUiH,EAAElf,OAAOmiB,aAAa,IAGlDvnB,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SACTF,EAAE,2BAIN,KCnEIF,qBAAkB4C,aAnEjC,SAA6B3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC1C,MAAMuG,EAAY,0BACXmzB,GAAiB/mB,YAAYumB,IAEpC,OACE94B,cAACi5B,GAAsB,CAAC1M,cAAc,EAAKxsB,SACzCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,kCAAkCE,SAC/CC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAM,GACN+mB,eAAe,EACfmM,iBAAkB,GAClBvjB,OAAQ,MACRiX,YAAY,EACZC,qBAAqB,EACrBzF,MAAO,GACPE,OAAQ,GACR7R,KAAM,IAERhD,iBAAkB0mB,GAClBzmB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCstB,EAAc,CAAEpuB,UAAW,CACzB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,cACtBmM,iBAAkBvmB,EAAOumB,iBACzBvjB,OAAQhD,EAAOgD,OACfiX,WAAYja,EAAOia,WACnBC,oBAAqBla,EAAOka,oBAC5BzF,MAAOzU,EAAOyU,MACdE,OAAQ3U,EAAO2U,OACf7R,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOwlB,GAAwBztB,UAAW,CAAC,UAAY,OAE3DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,EAAM,OAAElB,EAAM,cAAE0L,EAAa,gBAAED,GAAiB3Q,EAAA,OAChEzM,cAACu5B,GAAqB,CACpB7nB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXiX,gBAAiBA,EACjBC,cAAeA,GACf,OAMd,KCoCe1d,qBAAkB4C,aAnGjC,SAA8B3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAChD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,yBACZ6I,EAAYnP,EAAE,oCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASs1B,GAAuB,CAC/D1tB,UAAW,CAAE0K,GAAIA,MAEX4jB,GAAqBjnB,YAAYsmB,IAEzC,GAAIj3B,EAAS,OACX5B,cAACi5B,GAAsB,CAAC1M,cAAc,EAAKxsB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACi5B,GAAsB,CAAC1M,cAAc,EAAKxsB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,4CAKZ,MAAMqW,EAAcpU,EAAK23B,kBAEzB,OACEz5B,cAACi5B,GAAsB,CAAC1M,cAAc,EAAKxsB,SACzCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB+mB,cAAe/W,EAAY+W,cAC3BmM,iBAAkBljB,EAAYkjB,iBAC9BxM,OAAQ1W,EAAY0W,OACpB/W,OAAQK,EAAYL,OACpBiX,WAAY5W,EAAY4W,WACxBC,oBAAqB7W,EAAY6W,oBACjCzF,MAAOpR,EAAYoR,MACnBE,OAAQtR,EAAYsR,OACpB7R,KAAMO,EAAYP,MAEpBhD,iBAAkB0mB,GAClBzmB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ2mB,EAAiB,CAAEtuB,UAAW,CAC5B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,cACtBL,OAAQ5W,SAASnD,EAAO+Z,QACxBwM,iBAAkBpjB,SAASnD,EAAOumB,kBAClCvjB,OAAQhD,EAAOgD,OACfiX,WAAYja,EAAOia,WACnBC,oBAAqBla,EAAOka,oBAC5BzF,MAAOzU,EAAOyU,MACdE,OAAQ3U,EAAO2U,OACf7R,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOwlB,GAAwBztB,UAAW,CAAC,UAAY,OAE3DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACu5B,GAAqB,CACpB7nB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXiX,gBAAiBA,EACjBC,cAAeA,EACf+P,MAAM,GACN,OAMd,KCzEeztB,qBAAkB4C,aA7BjC,SAA4B3C,GAA2E,IAA1E,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,EAAK,UAAE5O,EAAU,qBAAqBvG,EAClG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAC/BgV,EACD/U,cAACyG,GAAU,CAACN,UAAWA,IAEvBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,iBAAgB9J,SAC7CC,cAACgV,GAAS,CAACH,OAAQ,gCAK3B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCvCO,MAAM25B,GAAqBhgC,GAAI;;;;;;;;;;;;;;;;;;;;;EAuBzBigC,GAAoBjgC,GAAI;;;;;;;;;;;EAaxBkgC,GAAclgC,GAAI;;;;;;;;;;;;;EAelBmgC,GAAiBngC,GAAI;;;;;;;;;;;;;EAerBogC,GAAkBpgC,GAAI;;;;;;;;;EC8GpBiG,qBAAkB4C,aA3JjC,SAAwB3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GAC9BqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,2BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASo2B,GAAoB,CAChFxuB,UAAW,CAAE+J,SAAUA,MAEjB8kB,GAAmBxnB,YAAYunB,IAEjCxkB,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACg6B,GAAmB,CAAAj6B,SAClBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACg6B,GAAmB,CAAAj6B,SAClBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,0CAKZ,MAAMo6B,EAAWn4B,EAAK2iB,gBAGtB,OAAKwV,EAASlxB,MAAM3J,OAYlBY,cAACg6B,GAAmB,CAAAj6B,SAClBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EACf/G,SAAU0rB,EAAS1rB,SACnBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO6pB,EAAS1rB,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBiU,gBAAgB1b,MAC3CwF,EAAWiC,EAAgBiU,gBAAgBlW,SAEjD,OAAOkC,EAASrR,OACZ,CAGEqlB,gBAAiB,CACf/T,WAAYH,EAAekU,gBAAgB/T,WAC3C3H,MAAO,IAAKwH,EAAekU,gBAAgB1b,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,iCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNk6B,EAASlxB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK2T,WAAW,OADHvQ,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKwb,UADQpY,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyM,MADQrJ,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,0BAA4BgH,EAAK0M,IAC7D/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdmkB,EAAe,CAAE7uB,UAAW,CAC1B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOumB,GAAoBxuB,UAAW,CAAC,SAAY+J,OACpD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAbzBA,eAmDJ,aAtGxBtM,cAACg6B,GAAmB,CAAAj6B,SAClBC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACoDF,EAA/CoV,EAAiD,iCAAnC,oCAyG3B,KC7KO,MAAMilB,GAAkBhpB,OAAaC,MAAM,CAC9CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdgd,WAAY3L,OACTM,IAAI,KACJ2oB,UAAUt6B,YAAE,+BACZwR,SAASxR,YAAE,yBCyGHF,qBAAkB4C,aA/FjC,SAA0B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACrC,MAAMuG,EAAY,qBACVi0B,GAAsB7nB,YAAYqnB,IAE1C,OACE55B,cAACg6B,GAAmB,CAACjlB,UAAU,EAAKhV,SAClCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,8BAA8BE,SAC3CC,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAI2W,WAAY,GAAI6H,SAAU,KAAM/O,KAAM,IACjEhD,iBAAkBunB,GAClBtnB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCouB,EAAkB,CAAElvB,UAAW,CAC7B6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACb2W,WAAYhK,EAAOgK,WACnB6H,SAAU7R,EAAO6R,SACjB/O,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOumB,GAAoBxuB,UAAW,CAAC,UAAY,OAEvDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,+BAA+BE,SAAA,CAClDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,aACLhG,UAAYyR,EAAOkL,WAAc,0BAA4B,eAC7D5K,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,wBAE7DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO+S,SAAY,0BAA4B,eAC3DzS,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,KAAIpC,SAAEF,EAAE,gCACtBG,cAAA,UAAQmC,MAAM,KAAIpC,SAAEF,EAAE,mCAExBG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIR,OAMvB,KC8CeF,qBAAkB4C,aAtIjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,oBACZ6I,EAAYnP,EAAE,gCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASq2B,GAAmB,CAC3DzuB,UAAW,CAAE0K,GAAIA,MAEXykB,GAAkB9nB,YAAYsnB,IAEtC,GAAIj4B,EAAS,OACX5B,cAACg6B,GAAmB,CAACjlB,UAAU,EAAKhV,SAClCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACg6B,GAAmB,CAACjlB,UAAU,EAAKhV,SAClCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,wCAKZ,MAAMqW,EAAcpU,EAAKgb,eAIzB,OAHApkB,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACg6B,GAAmB,CAACjlB,UAAU,EAAKhV,SAClCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB2W,WAAY3G,EAAY2G,WACxB6H,SAAUxO,EAAYwO,SACtB/O,KAAMO,EAAYP,MAEpBhD,iBAAkBunB,GAClBtnB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZwnB,EAAc,CAAEnvB,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb2W,WAAYhK,EAAOgK,WACnB6H,SAAU7R,EAAO6R,SACjB/O,KAAM9C,EAAO8C,OAEdzC,eAAgB,CACf,CAACC,MAAOumB,GAAoBxuB,UAAW,CAAC,UAAY,OAEvDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,+BAA+BE,SAAA,CAClDC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,aACLhG,UAAYyR,EAAOkL,WAAc,0BAA4B,eAC7D5K,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,wBAE7DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,WACLhG,UAAYyR,EAAO+S,SAAY,0BAA4B,eAC3DzS,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,KAAIpC,SAAEF,EAAE,gCACtBG,cAAA,UAAQmC,MAAM,KAAIpC,SAAEF,EAAE,mCAExBG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOgE,KAAQ,0BAA4B,eACvD1D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,OAMzB,KCxJO,MAAMy6B,GAAqBppB,OAAaC,MAAM,CACjDiO,UAAWlO,OACRipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdwf,QAASnO,OACNipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,yBCsDHF,qBAAkB4C,aAjDjC,SAAqC3C,GAA0G,IAAzG,EAAEC,EAAC,QAAEwD,EAAO,OAAEwP,EAAM,OAAElB,EAAM,KAAE7P,EAAI,aAAE4P,EAAY,gBAAE0L,EAAgB3N,IAAGA,GAAC,cAAE4N,EAAc5N,IAAGA,GAAC,QAAG2F,GAASxV,EAE1I,OADAlH,QAAQC,IAAIgZ,GAEV3R,cAAC4R,KAAM,CAAA7R,SACLO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,IAItCpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXlb,UAAYyR,EAAO0N,QAAW,0BAA4B,eAC1D1F,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,IAGpCpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DI,eAACF,IAAKoF,IAAG,CAAAzF,SAAA,CACPC,cAAA,SACAA,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,kBACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,+CAMf,KCMeF,qBAAkB4C,aAlDjC,SAAmC3C,GAAsC,IAApC,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EACpE,MAAMwf,EAAYhU,MAASoP,QAAQ,SAC7B6E,EAAYjU,MAASqP,MAAM,SAEjC,OACEza,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,kCAAkCE,SACpFC,cAAA,OAAKE,UAAU,0BAIjBF,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KAAKkc,GACpBC,QAAS,IAAInc,KAAKmc,IAEpB1M,iBAAkB2nB,GAClB1nB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCoJ,EAAQ,CACNgK,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,WAEjCvM,GAAc,EAAM,EACpB/S,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe9Q,EAAA,OACzFvM,cAACu6B,GAA4B,CAC3B7oB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GACf,IAGHtd,aAOf,KC/DO,MAAMy6B,GAAwC9gC,GAAI;;;;;;;;;;;;;;;;;;;EC+F1CiG,qBAAkB4C,aA9EjC,SAA+B3C,GAA4B,IAA3B,EAAEC,EAAC,SAAE2b,EAAQ,QAAEnY,GAASzD,EACtD,MAAMoP,EAAYnP,EAAE,kCACduf,EAAYhU,MAASoP,QAAQ,SAC7B6E,EAAYjU,MAASqP,MAAM,UAK3B,QAAE7Y,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAASk3B,GAAuC,CACxFtvB,UAAW,CACTkU,UAAWtD,GAAesD,GAC1BC,QAASvD,GAAeuD,IAE1B/T,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACy6B,GAA0B,CAACrlB,QAASA,EAAQrV,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACy6B,GAA0B,CAACrlB,QAASA,EAAQrV,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,gDAKZ,MAAM66B,EAAkB54B,EAAK64B,6BAG7B,OAAKD,EAAgB54B,KAAK1C,OAWxBY,cAACy6B,GAA0B,CAACrlB,QAASA,EAAQrV,SAC3CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,kCACd0O,SAAUmsB,EAAgBnsB,SAC1Ba,aAAa,EAAMrP,SAE7BO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,iCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBAJNyM,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR26B,EAAgB54B,KAAKiK,KAAIC,IAAA,IAAC,eAAC8Q,EAAc,WAAE2L,EAAU,gBAAED,GAAiBxc,EAAA,OACvE1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAE+c,EAAe5W,OAC3B5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAAE+c,EAAeD,WAAW,QACtC7c,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEyoB,IACZxoB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAE0oB,MACF,aA/BtBzoB,cAACy6B,GAA0B,CAACrlB,QAASA,EAAQrV,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SACGF,EAAE,4CAmCb,KChFA,MAAM+6B,WAAoBltB,YACxBC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,uBACZD,QAAQC,IAAI6V,EACd,CAEAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwN,EAAYxN,EAAE,0BAEpB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,mCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,qBAAoB9J,SACjDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,kCAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,uBAAsB9J,SACnDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iCACNA,EAAE,qCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,oCAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,qBAAoB9J,SACjDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,qCAMrD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,kCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,iBAAgB9J,SAC7CC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,2BACNA,EAAE,+BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,8BAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,mCAAkC9J,SAC/DC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,+CAMrD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,mCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,0BAAyB9J,SACtDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qCACNA,EAAE,yCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,wCAKnDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,kCAAiC9J,SAC9DC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,8CACNA,EAAE,kDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,oDAMrD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACRC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdC,cAAA,MAAAD,SAAKF,EAAE,mCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,gCAA+B9J,SAC5DC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4CACNA,EAAE,gDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,wDAS5D,EAIUzN,qBAAkB4C,YAAWq4B,KC/G7Bj7B,qBAAkB4C,aApCjC,SAAoC3C,GAQnC,IARoC,EACnCC,EAAC,QACDwD,EAAO,MACPD,EAAK,SACLrD,EAAQ,QACRywB,GAAQ,EAAK,SACbzb,GAAS,EAAK,UACd5O,EAAU,8BAA6BvG,EAEvC,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCywB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,yBAAwB9J,SACrDC,cAACgV,GAAS,CAACH,OAAS,qCAEpB,GAEFE,EAAY/U,cAACyG,GAAU,CAACN,UAAWA,IAAgB,QAGzDnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC9CO,MAAM86B,GAAiCnhC,GAAI;;;;;;;;;;;;;;;;;;;;EAuBrCohC,GAAgCphC,GAAI;;;;;;;;;;;;;;;;;;;;EAsBpCqhC,GAAgCrhC,GAAI;;;;;;;;EAUpCshC,GAAmCthC,GAAI;;;;;;EAQvCuhC,GAA4CvhC,GAAI;;;;;;ECuF9CiG,qBAAkB4C,aApIjC,SAAgC3C,GAAwB,IAAvB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACnD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBlJ,EAAuBwiB,EAAYxiB,qBACnCb,EAAYnP,EAAE,oCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASu3B,KAC9CK,GAAiC3oB,YAAYyoB,IAGpD,GAAIp5B,EAAS,OACX5B,cAACm7B,GAA2B,CAAC3K,SAAS,EAAKzwB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACm7B,GAA2B,CAAC3K,SAAS,EAAKzwB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,iDAKZnH,QAAQC,IAAImJ,GAEZ,MAAMs5B,EAA0Bt5B,EAAKs5B,wBAErC,OAAKA,EAAwBryB,MAAM3J,OASjCY,cAACm7B,GAA2B,CAAC3K,SAAS,EAAKzwB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EACtBT,SAAU6sB,EAAwB7sB,SAClCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOgrB,EAAwB7sB,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4qB,wBAAwBryB,MACnDwF,EAAWiC,EAAgB4qB,wBAAwB7sB,SAEzD,OAAOkC,EAASrR,OACZ,CAGEg8B,wBAAyB,CACvB1qB,WAAYH,EAAe6qB,wBAAwB1qB,WACnD3H,MAAO,IAAKwH,EAAe6qB,wBAAwBryB,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sDACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uDACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+DACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRq7B,EAAwBryB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAOwE,KAEjC7P,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmyB,qBAAqBhwB,OAAO0N,KAE3C/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoyB,wBAERt7B,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKqyB,+BAERj7B,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,mCAAkC8G,EAAK0M,KAAK7V,SACrDC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,4DAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,gDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAIqL,IAAOlC,EAAKsyB,YAAYnwB,OAAOwE,GAAsB,IAAG,MACzEzE,IAAOlC,EAAKmyB,qBAAqBhwB,OAAO0N,MAC3CxB,WAAY1X,EAAE,qCACd+Y,eAAgBsiB,EAChBzjB,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAO0nB,OAEV,EACJ96B,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,qBAxCxCoG,eA2CJ,aA1FtBtM,cAACm7B,GAA2B,CAAC3K,SAAS,EAAKzwB,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,6CA+Fd,KChHeF,qBAAkB4C,aAxBG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,UAAElX,GAAWvG,EAAA,OAC1HU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPrH,QAAQC,IAAIka,GACbvS,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oDAAoDE,SAAA,CACvEC,cAACob,GAAY,CACXlb,UAAYyR,EAAO0pB,oBAAuB,0BAA4B,eACtE1hB,SAAU9G,EAAOwoB,oBACjBzhB,SAAWpN,IACT6Q,EAAc,sBAAuB7Q,GACrC4Q,EAAgB,uBAAuB,EAAK,EAE9CvD,OAAQA,IAAMuD,EAAgB,uBAAuB,KAEvDpd,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,2BAGxEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAE5B,KCmCIxG,qBAAkB4C,aAlDjC,SAAmC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAChD,MAAMuG,EAAY,8BACVs1B,GAA+BlpB,YAAYwoB,IAEnD,OACE/6B,cAACm7B,GAA2B,CAACpmB,UAAU,EAAKhV,SAC1CC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uCAAuCE,SACpDC,cAACwS,KAAM,CACLC,cAAe,CAAE4oB,oBAAqB,IAAIn4B,KAAKkI,MAASswB,SAAS,EAAG,UAEpE9oB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCyvB,EAA2B,CAAEvwB,UAAW,CACtC6H,MAAO,CACLsoB,oBAAqBvf,GAAejJ,EAAOwoB,uBAE5CnoB,eAAgB,CACf,CAACC,MAAO0nB,OAEXznB,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,GAAe5Q,EAAA,OAC9DzM,cAAC27B,GAA2B,CAC1BjqB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,OAMhB,KCtBexG,qBAAkB4C,aAnCjC,SAAqB3C,GAajB,IAbkB,EACpBC,EAAC,MACDuD,EAAK,QACLC,EAAO,WACPgU,EAAU,eACVC,EAAc,WACdC,EAAU,eACVqB,EAAc,wBACdgjB,EAAuB,UACvB17B,EAAU,GAAE,YACZ+X,EAAY,WAAU,WACtBnD,EAAW,GAAE,gBACbqD,EAAgB,YACjBvY,EACC,OACEI,cAAA,UAAQE,UAAY,YAAW+X,YAAsB/X,IACnDkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYrX,cAAA,KAAAD,SAAIsX,IAChBC,eAAgBA,EAChBC,WAAYA,EACZqB,eAAgBA,EAChBnB,kBAAmBmkB,GACnB,EACJ77B,SACAO,eAAA,QAAMJ,UAAWiY,EAAgBpY,SAAA,CAC/BC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,YAAY,IAAE4O,MAI7C,KCPenV,qBAAkB4C,aAvBjC,SAAwC3C,GAAiE,IAAhE,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,SAAEsG,EAAQ,qBAAEw1B,GAAqBj8B,EAGpG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mCAAoCwG,SAAUA,EAAStG,SAC3EO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCO,eAACmE,IAAI,CAACrC,GARD,6BASClC,UAAU,oBAAmBH,SAAA,CACjCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,mBAE3Cg8B,OAGN97B,QAKX,KC+JeJ,qBAAkB4C,aA5KjC,SAAoC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACxD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBlJ,EAAuBwiB,EAAYxiB,qBACnC+F,EAAKxS,EAAMmK,OAAOqI,IAElB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASw3B,GAA+B,CACvE5vB,UAAW,CAAE0K,GAAIA,GACjB5F,aAAc,OAET8rB,GAAkBvpB,YAAY0oB,IAGrC,GAAIr5B,EAAS,OACX5B,cAAC+7B,GAA+B,CAAAh8B,SAC9BC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,wCAAwCE,SACrDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAAO,OACT7B,cAAC+7B,GAA+B,CAAAh8B,SAC9BC,cAAA,KAAAD,SAAIF,EAAE,+CAIV,MAAMm8B,EAAyBl6B,EAAKk6B,uBACpCtjC,QAAQC,IAAIqjC,GACZ,MAAMhtB,EAAYnP,EAAE,wCAA0C,IAAMuL,IAAO4wB,EAAuBX,qBAAqBhwB,OAAO0N,GACxH1S,EAAWxG,EAAE,wBAA0B,IAAMuL,IAAO4wB,EAAuB3L,WAAWhlB,OAAOwE,GAE7FgsB,EAAuB77B,cAACi8B,GAAY,CACxC5kB,WAAYxX,EAAE,yDACdyX,eAAgBtX,cAAA,KAAAD,SAAGO,eAAA,KAAAP,SAAA,CAAIi8B,EAAuBV,sBAAsB,IAAEz7B,EAAE,iEACxE0X,WAAY1X,EAAE,8CACd+Y,eAAgBkjB,EAChBF,wBAAyB,CACvB1wB,UAAW,CAAC6H,MAAO,CAAC6C,GAAIA,KAE1BqC,YAAY,kBACZnD,WAAW,kBACXqD,gBAAgB,eAGlB,OAAK6jB,EAAuBE,SAASnzB,MAAM3J,OAWzCY,cAAC+7B,GAA+B,CAAC11B,SAAUA,EAAUw1B,qBAAsBA,EAAqB97B,SAC9FC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAAC8G,IAAKwiB,MAAK,CAACzkB,MAAM,UAAS9E,SACxBF,EAAE,yDAELG,cAAA,SAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,kBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,mBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,wBAELG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACbF,EAAE,6BAITG,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRi8B,EAAuBE,SAASnzB,MAAMgD,KAAI,CAAAC,EAAW4Z,KAAK,IAAf,KAAE1c,GAAM8C,EAAA,OAClD1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAENC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,aAAa7V,SACxDmJ,EAAKma,QAAQC,aAIpBtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKma,QAAQ4F,QAEhBjpB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKma,QAAQ8Y,WAAW9wB,OAAOwE,KAEzC7P,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKma,QAAQgN,WAAWhlB,OAAOwE,OAE/B,oBAtD5B7P,cAAC+7B,GAA+B,CAAC11B,SAAUA,EAAStG,SAClDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sDAuHb,KC5LO,MAAMu8B,GAAuBlrB,OAAaC,MAAM,CACnD3E,KAAM0E,OACHipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,yBC4CHF,qBAAkB4C,aApCjC,SAA+C3C,GAA0G,IAAzG,EAAEC,EAAC,QAAEwD,EAAO,OAAEwP,EAAM,OAAElB,EAAM,KAAE7P,EAAI,aAAE4P,EAAY,gBAAE0L,EAAgB3N,IAAGA,GAAC,cAAE4N,EAAc5N,IAAGA,GAAC,QAAG2F,GAASxV,EAEpJ,OADAlH,QAAQC,IAAIgZ,GAEV3R,cAAC4R,KAAM,CAAA7R,SACLO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOnF,KAAQ,0BAA4B,eACvDmN,SAAU9G,EAAOrG,KACjBoN,SAAWpN,IACT6Q,EAAc,OAAQ7Q,GACtB4Q,EAAgB,QAAQ,EAAK,IAIjCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDI,eAACF,IAAKoF,IAAG,CAAAzF,SAAA,CACPC,cAAA,SACAA,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,kBACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,uDAMf,KCceF,qBAAkB4C,aA9CjC,SAA6C3C,GAAyD,IAAvD,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,EAAQ3F,IAAGA,GAAC,QAAE4sB,EAAQ5sB,IAAGA,IAAG7P,EACjG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,oCAAoCE,SACtFC,cAAA,OAAKE,UAAU,0BAIjBF,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAACwS,KAAM,CACLC,cAAe,CACbjG,KAAM,IAAItJ,MAEZyP,iBAAkBypB,GAClBxpB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCoJ,EAAQ,CACN5I,KAAMsP,GAAejJ,EAAOrG,QAE9B6vB,EAAQxpB,EAAOrG,MACfsG,GAAc,EAAM,EACpB/S,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,aAAEwE,EAAY,gBAAEjH,EAAe,cAAEC,GAAe9Q,EAAA,OACzFvM,cAACs8B,GAA+B,CAC9B5qB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACTwE,aAAcA,EACdjH,gBAAiBA,EACjBC,cAAeA,GACf,IAGHtd,aAOf,KC1DO,MAAMw8B,GAA0C7iC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;EC6I5CiG,qBAAkB4C,aAvHjC,SAAyC3C,GAA4B,IAA3B,EAAEC,EAAC,SAAE2b,EAAQ,QAAEnY,GAASzD,EAChE,MAAMoP,EAAYnP,EAAE,oCAEdkZ,EADcvV,qBAAWvC,GACA8X,YAExBvM,EAAM6vB,GAAWlnB,mBAAS,IAAIjS,MAGrC5E,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UACjErlB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UACrErlB,aAAaC,QAAQC,EAAKg+B,+BAAgChhB,EAASmI,UAEnE,MAAM,QAAE/hB,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAASi5B,GAAyC,CAC1FrxB,UAAW,CACTsB,KAAMsP,GAAetP,IAEvBlB,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACy8B,GAAoC,CAACrnB,QAASA,EAASinB,QAASA,EAAQt8B,SACvEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACy8B,GAAoC,CAACrnB,QAASA,EAASinB,QAASA,EAAQt8B,SACvEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kDAKZ,MAAM68B,EAAe56B,EAAK66B,2BAK1B,OAHAjkC,QAAQC,IAAI+jC,GAGPA,EAAa7Y,gBAAgBzkB,OAWhCY,cAACy8B,GAAoC,CAACrnB,QAASA,EAASinB,QAASA,EAAQt8B,SACvEC,cAACyN,GAAW,CAACuB,UAAWA,EAEZI,aAAa,EACbH,cACE3O,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACVF,EAAE,iBAAiB,IAAE68B,EAAaE,0BAEtC78B,SAEXO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,6CAA6C,IAAEuL,IAAOoB,GAAMnB,OAAO0N,MACvF/Y,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uBAPNyM,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR28B,EAAa7Y,gBAAgB9X,KAAKmY,GACjC5jB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAC68B,GAAoB,CAACx0B,OAAQ6b,EAAe7b,SAAU,IAACrI,cAAA,WAD1CsM,gBAQhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8hB,EAAetO,KAAK7V,SACrDmkB,EAAejB,kBAGpBjjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAO8Y,EAAeX,UAAUlY,OAAO0N,KACnDzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmkB,EAAeb,SACf/iB,eAACmE,IAAI,CAACrC,GAAI,uBAAyB8hB,EAAeb,QAAQzN,GAAK,WAAW7V,SAAA,CACxEC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEge,EAAeb,QAAQC,SAAS,IAACtjB,cAAA,YAGzDkkB,EAAelB,UACfhjB,cAACyE,IAAI,CAACrC,GAAI,kBAAoB8hB,EAAelB,SAASpN,GAAK,QAAQ7V,SACjEO,eAAA,SAAAP,SAAA,CAAOC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEge,EAAelB,SAAS9c,YAR3CoG,gBAYhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAGmkB,EAAeT,eAC5BzjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAGmkB,EAAewE,cAC5B1oB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAGmkB,EAAeR,mBA7BdpX,2BAlC1BtM,cAACy8B,GAAoC,CAACrnB,QAASA,EAASinB,QAASA,EAAQt8B,SACvEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SACGF,EAAE,8CAuEb,K,sEC1IO,MAAMi9B,GAAgCpjC,GAAI;;;;;;;;;;;ECelCiG,sBATSC,IAAA,IAAC,EAAEC,GAAGD,EAAA,OAC5BI,cAAA,OAAKE,UAAU,sBAAqBH,SAClCO,eAACmE,IAAI,CAACrC,GAAG,WACHlC,UAAU,oBAAmBH,SAAA,CAC/BC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,mBAAmB,IAAEA,EAAE,qBAEjE,ICGHvB,aAAayE,QAAQvE,EAAKpD,4BAC7B1C,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKpD,yBAA0BgQ,MAASC,OAAO,UAqDvD1L,qBAAkB4C,aAlDjC,SAA+B3C,GAA4C,IAA1C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAEkT,EAAI,QAAEmC,GAASxV,EACtE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,uBAAyB,IAAMoT,EAAKlT,SACtFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC+8B,GAAe,IAChBz8B,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,2CAA0CH,SAAA,CAC/DC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIytB,EAAehnB,SAAS1X,aAAayE,QAAQvE,EAAKpD,2BAA6B,EACnFkD,aAAaC,QAAQC,EAAKpD,yBAA0B4hC,GAEpD5nB,EAAQ,CAACnC,KAAM+pB,GAAc,IAEjCh9B,cAAC0E,IAAM,CACLrC,KAAK,SACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI0tB,EAAcjnB,SAAS5K,MAASC,OAAO,SAC3C/M,aAAaC,QAAQC,EAAKpD,yBAA0B6hC,GAEpDvkC,QAAQC,IAAIskC,GAEZ7nB,EAAQ,CAACnC,KAAMgqB,GAAa,IAEhCj9B,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI2tB,EAAWlnB,SAAS1X,aAAayE,QAAQvE,EAAKpD,2BAA6B,EAC/EkD,aAAaC,QAAQC,EAAKpD,yBAA0B8hC,GAEpD9nB,EAAQ,CAACnC,KAAMiqB,GAAU,YAKnCl9B,cAACI,IAAKC,IAAG,CAAAN,SACNA,UAMb,KC2CeJ,qBAAkB4C,aA7FjC,SAA2B3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACzC,MAAMqT,EAAO+C,SAAS1X,aAAayE,QAAQvE,EAAKpD,2BAC1C+hC,EAAoB,wCAA0ClqB,EAC9DmqB,EAAkB,sCAAwCnqB,GACzDuD,GAAkBjE,YAAY5Y,IAE/B,QAAEiI,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAASw5B,GAA+B,CAChF5xB,UAAW,CAAE+H,KAAMA,KAGrB,GAAIrR,EACF,OACE5B,cAACq9B,GAAsB,CAACpqB,KAAMA,EAAMmC,QAASA,EAAQrV,SACnDC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iBAAiBE,SAC9BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAMtC,GAAIa,EACF,OACE7B,cAACq9B,GAAsB,CAACpqB,KAAMA,EAAMmC,QAASA,EAAQrV,SACnDC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iBAAiBE,SAC7BF,EAAE,gCAMX,MAAMy9B,EAAa7gB,GAAmB5c,GAGhC09B,EAAYz7B,EAAK07B,0BAA0BC,OAAO1xB,KAAI,CAAC2xB,EAAM9X,KAAK,IACjE8X,EAAMC,UAAWL,EAAW1X,OAGnC,OACEtlB,eAAC+8B,GAAsB,CAACpqB,KAAMA,EAAMmC,QAASA,EAAQrV,SAAA,CACjDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iBAAiBE,SAC9BC,cAAC49B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI/9B,SAC5CO,eAACy9B,KAAS,CACRF,MAAO,IACPG,OAAQ,IACRl8B,KAAMy7B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRt+B,SAAA,CAEFC,cAACs+B,KAAK,CAACC,QAAQ,cACfv+B,cAACw+B,KAAK,CAACX,MAAO,KACd79B,cAACy+B,KAAO,IACRz+B,cAAC0+B,KAAM,IACP1+B,cAAC2+B,KAAI,CAACt6B,KAAK,WAAWk6B,QAAQ,OAAOK,OAAQC,IAAa,KAAGC,YAAa,GAAKC,KAAMF,IAAa,OAClG7+B,cAAC2+B,KAAI,CAACt6B,KAAK,WAAWk6B,QAAQ,SAASK,OAAQC,IAAc,MAAGC,YAAa,GAAKC,KAAMF,IAAc,iBAK9Gv+B,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CAEdC,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS+5B,GAC5Br9B,SAEDF,EAAE,2CAGLG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS85B,GAC5Bp9B,SAEDF,EAAE,kDAKf,KC7GO,MAAMm/B,GAA+CtlC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC8BjDiG,qBAAkB4C,aArBjC,SAA4C3C,GAA6B,IAA3B,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,GAAUH,EACpE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,4CAA4CE,SAC9FC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC+8B,GAAe,QAGpB/8B,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC+GeJ,qBAAkB4C,aA7HjC,SAAwC3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACtD,MAAMoP,EAAYnP,EAAE,6CAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAC1C07B,GAA8C,CAC5C1zB,YAAa,iBAIjB,GAAI1J,EACF,OACE5B,cAACi/B,GAAmC,CAAAl/B,SAClCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAKpC,GAAIa,EACF,OACE7B,cAACi/B,GAAmC,CAAAl/B,SACjCF,EAAE,8BAKTnH,QAAQC,IAAImJ,GACZ,IAAIo9B,EAAuBp9B,EAAKo9B,qBAGhC,OAAKA,EAAqBn2B,MAAM3J,OAc9BY,cAACi/B,GAAmC,CAAAl/B,SAClCC,cAACyN,GAAW,CAACuB,UAAWA,EAEpBI,aAAa,EACbb,SAAU2wB,EAAqB3wB,SAC/BG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8uB,EAAqB3wB,SAAS8B,WAEvCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0uB,qBAAqBn2B,MAChDwF,EAAWiC,EAAgB0uB,qBAAqB3wB,SAEtD,OAAOkC,EAASrR,OACZ,CAGE8/B,qBAAsB,CACpBxuB,WAAYH,EAAe2uB,qBAAqBxuB,WAChD3H,MAAO,IAAKwH,EAAe2uB,qBAAqBn2B,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BAFNyM,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNm/B,EAAqBn2B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACvCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,cAAc7V,SACzDmJ,EAAKma,QAAQC,aAGlBhjB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKi2B,yBAAyBj5B,KAAK,IAAClG,cAAA,SACrCA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKkW,iBA2BA,aArFtBpf,cAACi/B,GAAmC,CAAAl/B,SAClCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,wDAyFlB,KCzIO,MAAMu/B,GAAoB1lC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECYhC4E,aAAayE,QAAQvE,EAAKnD,wBAC7B3C,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKnD,qBAAsB+P,MAASC,OAAO,UAiDnD1L,qBAAkB4C,aA9CjC,SAA2B3C,GAAiD,IAA/C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAEkT,EAAI,QAAEmC,EAAQ3F,IAAGA,IAAG7P,EACvE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,mBAAqB,IAAMoT,EAAKlT,SAClFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC+8B,GAAe,IAChBz8B,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,2CAA0CH,SAAA,CAC/DC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIytB,EAAehnB,SAAS1X,aAAayE,QAAQvE,EAAKnD,uBAAyB,EAC/EiD,aAAaC,QAAQC,EAAKnD,qBAAsB2hC,GAEhD5nB,EAAQ,CAACnC,KAAM+pB,GAAc,IAEjCh9B,cAAC0E,IAAM,CACLrC,KAAK,SACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI0tB,EAAcjnB,SAAS5K,MAASC,OAAO,SAC3C/M,aAAaC,QAAQC,EAAKnD,qBAAsB4hC,GAEhD7nB,EAAQ,CAACnC,KAAMgqB,GAAa,IAEhCj9B,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI2tB,EAAWlnB,SAAS1X,aAAayE,QAAQvE,EAAKnD,uBAAyB,EAC3EiD,aAAaC,QAAQC,EAAKnD,qBAAsB6hC,GAEhD9nB,EAAQ,CAACnC,KAAMiqB,GAAU,YAKhCn9B,QAKb,K,oBC0EeJ,qBAAkB4C,aA3HjC,SAA8B3C,GAOzB,IAP0B,EAC7BC,EAAC,QACDwD,EAAO,MACPxB,EAAK,QACLD,EAAO,UACPoN,EAAS,KACTlN,GACAlC,EAEA,GAAIgC,EACF,OACEtB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,UAIpCf,cAACI,IAAKoF,IAAG,CAACkB,GAAI,OAMhB7E,IACDzB,IAAKC,IACHD,IAAKoF,IACHsB,IACEA,IAAKC,KACHlH,EAAE,6BASb,MAAMy9B,EAAa7gB,GAAmB5c,GAEhC09B,EAAYz7B,EAAK27B,OAAO1xB,KAAI,CAAC2xB,EAAM9X,KAAK,IACvC8X,EAAMC,UAAWL,EAAW1X,OAGnC,OACEtlB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAAC49B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI/9B,SAC5CO,eAAC++B,KAAQ,CACPxB,MAAO,IACPG,OAAQ,IACRl8B,KAAMy7B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRt+B,SAAA,CAEFC,cAACs+B,KAAK,CAACC,QAAQ,cACfv+B,cAACw+B,KAAK,IACNx+B,cAACy+B,KAAO,IACRz+B,cAAC0+B,KAAM,IACP1+B,cAACs/B,KAAG,CAACf,QAAQ,QAAQQ,KAAMF,IAAa,OACxC7+B,cAACs/B,KAAG,CAACf,QAAQ,WAAWgB,QAAQ,IAAIR,KAAMF,IAAc,QACxD7+B,cAACs/B,KAAG,CAACf,QAAQ,MAAMgB,QAAQ,IAAIR,KAAMF,IAAe,cAGxD7+B,cAAC8G,IAAKwI,OAAM,CAAAvP,SACTF,EAAE,4CAITG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,gBAAgBE,SAC7BC,cAAA,SAAAD,SACAC,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVC,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAK27B,OAAO1xB,KAAI,CAAC2xB,EAAM9X,IACtBtlB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,6BAA4BH,SAC9Cu9B,EAAW1X,KAEd5lB,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,wCAAuCH,SACzD29B,EAAmB,gCAmCxC,KC9Ee/9B,qBAAkB4C,aAhDjC,SAAuB3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACrC,MAAMqT,EAAO+C,SAAS1X,aAAayE,QAAQvE,EAAKnD,wBAE1C,QAAEuG,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAAS87B,GAAmB,CACpEl0B,UAAW,CAAE+H,KAAMA,KAGrB,OACE3S,eAACk/B,GAAkB,CAACvsB,KAAMA,EAAMmC,QAASA,EAAQrV,SAAA,CAE/CC,cAACy/B,GAAqB,CACpB79B,QAASA,EACTC,MAAOA,EACPmN,UAAWnP,EAAE,iBACbiC,KAAMA,GAAQA,EAAK49B,sBAGrB1/B,cAACy/B,GAAqB,CACpB79B,QAASA,EACTC,MAAOA,EACPmN,UAAWnP,EAAE,yBACbiC,KAAMA,GAAQA,EAAK69B,8BAGrB3/B,cAACy/B,GAAqB,CACpB79B,QAASA,EACTC,MAAOA,EACPmN,UAAWnP,EAAE,uBACbiC,KAAMA,GAAQA,EAAK89B,4BAGrB5/B,cAACy/B,GAAqB,CACpB79B,QAASA,EACTC,MAAOA,EACPmN,UAAWnP,EAAE,yBACbiC,KAAMA,GAAQA,EAAK+9B,6BAGrB7/B,cAACy/B,GAAqB,CACpB79B,QAASA,EACTC,MAAOA,EACPmN,UAAWnP,EAAE,iBACbiC,KAAMA,GAAQA,EAAKg+B,wBAI3B,K,UCrDO,MAAMC,GAAoC7uB,OAAaC,MAAM,CAChE8B,KAAM/B,OACHG,SAASxR,YAAE,uBACdmT,MAAO9B,OACJG,SAASxR,YAAE,uBACd0E,WAAY2M,OACTG,SAASxR,YAAE,yBCPLmgC,GAAwBtmC,GAAI;;;;;;;;;;;EAa5BumC,GAAwCvmC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgB1CiG,qBAAkB4C,aAlBjC,SAA0C3C,GAA0B,IAAzB,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,GAASH,EAE/D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAiBE,SACrCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC+8B,GAAe,QAGnBh9B,QAKX,KCoDiBJ,qBAAkB4C,aApEE3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACpII,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,OACLhG,UAAYyR,EAAOsB,KAAQ,0BAA4B,eACvDhB,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,QACLhG,UAAYyR,EAAOqB,MAAS,0BAA4B,eACxDf,aAAa,MAAKlS,SAAA,CAEtBC,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,4BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,6BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,0BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,0BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,wBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,yBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,yBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,2BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,8BAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,4BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,6BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,6BAATyM,mBAE1BtM,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,aACLhG,UAAYyR,EAAOpN,WAAc,0BAA4B,eAC7D0N,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU+iB,YAAYn3B,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACxChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,6BAIjEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC0E,IAAM,CACHG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAExBF,EAAE,2DAKJ,KCkFEF,qBAAkB4C,aAxIjC,SAAsC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACjD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBmE,EAAYnP,EAAE,2CAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS08B,KAClCG,GACNC,OAAQC,EACRz+B,QAAS0+B,EACTz+B,MAAO0+B,EACPz+B,KAAM0+B,IACFC,aAAcR,IAEpB,OAAIr+B,EAEA5B,cAAC0gC,GAAiC,CAAA3gC,SAChCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAOpCa,GAAS0+B,GACX7nC,QAAQmJ,MAAMA,GAEZ7B,cAAC0gC,GAAiC,CAAA3gC,SAChCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,mCAQXS,eAACogC,GAAiC,CAAA3gC,SAAA,CAChCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACPC,cAAe,CACbQ,KAAM7H,MAAS6H,OACfD,MAAO5H,MAAS4H,QAAQ,EACxBzO,WAAY,IAEdoO,iBAAkBotB,GAClBntB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAGZstB,EAA2B,CACzBj1B,UAAW,CACT+H,KAAM+C,SAASnD,EAAOI,MACtBD,MAAOgD,SAASnD,EAAOG,OACvBzO,WAAYsO,EAAOtO,cAIvBuO,GAAc,EAAM,EAEtB/S,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAAStT,EAAA,OACzEvM,cAAC2gC,GAA4B,CAC3BxjB,UAAWrb,EACX4P,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,GACR,MAONwtB,GAAgBC,EAAiBtgC,cAAC8G,IAAI,CAAA/G,SACtCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,IAAQhB,cAAA,SACtCA,cAAA,OAAKE,UAAU,cAAaH,SAAC,oBAIrB,GAEVsgC,GAAgBG,EAEhBlgC,eAACwG,IAAI,CAACV,MAAOvG,EAAE,IAAIE,SAAA,CAChBrH,QAAQC,IAAI6nC,GACblgC,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRygC,EAAWI,8BAA8Bh+B,QAAQmJ,KAAIU,IAAA,IAAC,YACrDjE,EAAW,KACXgE,EAAI,UACJK,EAAS,sBACTpF,EAAqB,yBACrBmF,EAAwB,OACxBvE,GACAoE,EAAA,OACAnM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqI,GAAuBC,GAAQ,IAAE,IACjC+C,IAAOoB,GAAMnB,OAAO0N,GAAY,MAAI3N,IAAQ,GAAEoB,KAAQK,KAAaxB,OAAOT,GAAY,IAAC5K,cAAA,SACxFA,cAAA,SAAOE,UAAU,aAAYH,SAC1ByI,MAJW8D,gBAOhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACP0H,EAAsBvB,OAEzB5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACP6M,EAAyBjF,qBAAqBzB,KAAK,MAAI0G,EAAyB1G,UAZrEoG,eAcJ,YAKlB,KAGR,K,8BC1JO,MAAMu0B,GAAkCnnC,GAAI;;;;;;;;;;;;;;EC0DpCiG,qBAAkB4C,aA9CjC,SAAiC3C,GAAgD,IAA9C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAEkT,EAAI,QAAEmC,EAAQ3F,IAAGA,IAAE7P,EAC5E,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,yBAA2B,IAAMoT,EAAKlT,SACxFO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC+8B,GAAe,IAChBz8B,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,2CAA0CH,SAAA,CAC/DC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIytB,EAAehnB,SAAS1X,aAAayE,QAAQvE,EAAKlD,6BAA+B,EACrFgD,aAAaC,QAAQC,EAAKlD,2BAA4B0hC,GAEtD5nB,EAAQ,CAACnC,KAAM+pB,GAAc,IAEjCh9B,cAAC0E,IAAM,CACLrC,KAAK,SACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI0tB,EAAcjnB,SAAS5K,MAASC,OAAO,SAC3C/M,aAAaC,QAAQC,EAAKlD,2BAA4B2hC,GAEtD7nB,EAAQ,CAACnC,KAAMgqB,GAAa,IAEhCj9B,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUA,KACR,IAAI2tB,EAAWlnB,SAAS1X,aAAayE,QAAQvE,EAAKlD,6BAA+B,EACjFgD,aAAaC,QAAQC,EAAKlD,2BAA4B4hC,GAEtD9nB,EAAQ,CAACnC,KAAMiqB,GAAU,YAKlCn9B,QAKX,KCpCKzB,aAAayE,QAAQvE,EAAKlD,8BAC7B5C,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKlD,2BAA4B8P,MAASC,OAAO,UA0JzD1L,qBAAkB4C,aAtJjC,SAA6B3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC3C,MAAMoP,EAAYnP,EAAE,iBACdoT,EAAO+C,SAAS1X,aAAayE,QAAQvE,EAAKlD,6BAC1C6hC,EAAoB,0CAA4ClqB,EAChEmqB,EAAkB,wCAA0CnqB,EAC5D6tB,EAAqB,2CAA6C7tB,EAClE8tB,EAAoB,0CAA4C9tB,EAChE+tB,EAAqB,2CAA6C/tB,GACjEuD,GAAkBjE,YAAY5Y,GAErCjB,QAAQC,IAAIsa,GAGZ,MAAM,QAAErR,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAASu9B,GAAiC,CAClF31B,UAAW,CAAE+H,KAAMA,KAGrB,GAAIrR,EACF,OACE5B,cAACihC,GAAwB,CAAChuB,KAAMA,EAAMmC,QAASA,EAAQrV,SACrDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAOxC,GAAIa,EACF,OACE7B,cAACihC,GAAwB,CAAChuB,KAAMA,EAAMmC,QAASA,EAAQrV,SACrDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kCAOb,MAAMy9B,EAAa7gB,GAAmB5c,GAGhC09B,EAAYz7B,EAAKo/B,4BAA4BzD,OAAO1xB,KAAI,CAAC2xB,EAAM9X,KAAK,IACnE8X,EAAMC,UAAWL,EAAW1X,OAInC,OACE5lB,cAACihC,GAAwB,CAAChuB,KAAMA,EAAMmC,QAASA,EAAQrV,SACrDO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC49B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI/9B,SAC5CO,eAAC6gC,KAAS,CACRtD,MAAO,IACPG,OAAQ,IACRl8B,KAAMy7B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRt+B,SAAA,CAEFC,cAACohC,KAAa,CAACC,gBAAgB,QAC/BrhC,cAACs+B,KAAK,CAACC,QAAQ,cACfv+B,cAACw+B,KAAK,CAACX,MAAO,KACd79B,cAACy+B,KAAO,IACRz+B,cAAC0+B,KAAM,IAIP1+B,cAACshC,KAAI,CAACj9B,KAAK,WAAWk6B,QAAQ,OAAOK,OAAQC,IAAc,QAC3D7+B,cAACshC,KAAI,CAACj9B,KAAK,WAAWk6B,QAAQ,UAAUK,OAAQC,IAAY,MAC5D7+B,cAACshC,KAAI,CAACj9B,KAAK,WAAWk6B,QAAQ,SAASK,OAAQC,IAAa,OAC5D7+B,cAACshC,KAAI,CAACj9B,KAAK,WAAWk6B,QAAQ,SAASK,OAAQC,IAAe,SAC9D7+B,cAACshC,KAAI,CAACj9B,KAAK,WAAWk6B,QAAQ,UAAUK,OAAQC,IAAe,kBAKvEv+B,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CAEdC,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS+5B,GAC5Br9B,SAEDF,EAAE,6CAGLG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS85B,GAC5Bp9B,SAEDF,EAAE,+CAGLG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASy9B,GAC5B/gC,SAEDF,EAAE,gDAGLG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS09B,GAC5BhhC,SAEDF,EAAE,+CAGLG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,YACNsS,cAAc,IACd9U,KAAK,iBACLkN,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAS29B,GAC5BjhC,SAEDF,EAAE,uDAMf,KC9KO,MAAM0hC,GAAwB7nC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgE1BiG,qBAAkB4C,aAtDjC,SAAiC3C,GAAgD,IAA/C,EAAEC,EAAC,QAAEwD,EAAO,OAAEwP,EAAM,OAAElB,EAAM,aAAED,GAAc9R,EAC5E,OACEI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAAA/G,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,OACLhG,UAAYyR,EAAOsB,KAAQ,0BAA4B,eACvDhB,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,QACLhG,UAAYyR,EAAOqB,MAAS,0BAA4B,eACxDf,aAAa,MAIblS,SAAA,CAEJC,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,4BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,6BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,0BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,0BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,wBAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,yBAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,yBAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,2BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,8BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,4BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,6BAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,6BAATyM,mBAExBtM,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,2BAG5DF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,yCAMf,KC9DO,SAAS2hC,KAUd,MAAO,CACLC,cAVkB3lB,GjM8Bf,SAA0B7I,EAAMD,GACnC,MAAM0uB,EAAgBt2B,IAAQ,GAAE6H,KAAQD,QAAYwH,QAAQ,SAC5D,OAAO,IAAItX,KAAKw+B,EACpB,CiMjCqCC,CACjCrjC,aAAayE,QAAQvE,EAAKjD,0BAC1B+C,aAAayE,QAAQvE,EAAKhD,6BAS1BomC,eAPmB9lB,GjMgChB,SAAyB7I,EAAMD,GAClC,MAAM0uB,EAAgBt2B,IAAQ,GAAE6H,KAAQD,QAAYyH,MAAM,SAC1D,OAAO,IAAIvX,KAAKw+B,EACpB,CiMnCsCG,CAClCvjC,aAAayE,QAAQvE,EAAKjD,0BAC1B+C,aAAayE,QAAQvE,EAAKhD,6BAO9B,CCkFemE,qBAAkB4C,aA5EjC,SAA+B3C,GAAwD,IAAtD,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAEkT,EAAI,MAAED,EAAK,QAAEoC,EAAQ3F,IAAGA,IAAG7P,EAClF,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,iBAAkBwG,SAAUxG,EAAE,6BAA+B,IAAMoT,EAAO,IAAMD,EAAMjT,SAC1GC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC+8B,GAAe,QAgCpBz8B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAChBC,cAACwS,KAAM,CACHC,cAAe,CACbQ,KAAM3U,aAAayE,QAAQvE,EAAKjD,0BAChCyX,MAAO1U,aAAayE,QAAQvE,EAAKhD,4BAEnCoX,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,eACZ2F,aAAaC,QAAQC,EAAKjD,yBAA0BsX,EAAOI,MAC3D3U,aAAaC,QAAQC,EAAKhD,0BAA2BqX,EAAOG,OAE5D,MAAM8uB,EAAgBN,KACtBpsB,EAAQ0sB,GACRhvB,GAAc,EAAM,EAEpB/S,SAEDwM,IAAA,IAAC,aAAEmF,EAAY,OAAEC,EAAM,OAAEkB,GAAQtG,EAAA,OAClCvM,cAAC+hC,GAAwB,CACvBrwB,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,GACR,eASlB,KC5EKvU,aAAayE,QAAQvE,EAAKjD,4BAC7B7C,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKjD,yBAA0B6P,MAASC,OAAO,SACpE/M,aAAaC,QAAQC,EAAKhD,0BAA2B4P,MAASC,OAAO,QAkIxD1L,qBAAkB4C,aA/HjC,SAA2B3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACzC,MAAMqT,EAAO3U,aAAayE,QAAQvE,EAAKjD,0BACjCyX,EAAQ1U,aAAayE,QAAQvE,EAAKhD,2BAClCwT,EAAYnP,EAAE,6BAEdiiC,EAAgBN,MAChB,QAAE5/B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASi+B,GAAuB,CACnFr2B,UAAW42B,IAGb,GAAIlgC,EACF,OACE5B,cAACgiC,GAAsB,CAAC/uB,KAAMA,EAAMD,MAAOA,EAAOoC,QAASA,EAAQrV,SAChEF,EAAE,+BAKT,GAAIgC,EACF,OACE7B,cAACgiC,GAAsB,CAAC/uB,KAAMA,EAAMD,MAAOA,EAAOoC,QAASA,EAAQrV,SAChEF,EAAE,8BAKTnH,QAAQC,IAAImJ,GACZ,IAAImgC,EAAqBngC,EAAKmgC,mBAG9B,OAAKA,EAAmBl5B,MAAM3J,OAc5BY,cAACgiC,GAAsB,CAAC/uB,KAAMA,EAAMD,MAAOA,EAAOoC,QAASA,EAAQrV,SACjEC,cAACyN,GAAW,CAACuB,UAAWA,EAEpBI,aAAa,EACbb,SAAU0zB,EAAmB1zB,SAC7BG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO6xB,EAAmB1zB,SAAS8B,WAErCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgByxB,mBAAmBl5B,MAC9CwF,EAAWiC,EAAgByxB,mBAAmB1zB,SAEpD,OAAOkC,EAASrR,OACZ,CAGE6iC,mBAAoB,CAClBvxB,WAAYH,EAAe0xB,mBAAmBvxB,WAC9C3H,MAAO,IAAKwH,EAAe0xB,mBAAmBl5B,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNkiC,EAAmBl5B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKg5B,sBAAsBh8B,KAAK,IAAClG,cAAA,SAClCA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKkW,eAGVpf,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,cAAc7V,SACzDmJ,EAAKma,QAAQC,aAGlBhjB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAC+F,IAAI,CAACwrB,UAAQ,EAAAxxB,SACXmJ,EAAKma,QAAQ1gB,YAAYoG,OAASG,EAAKma,QAAQ1gB,YAAYoG,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC7EnM,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACRC,cAACiG,IAAI,CAACC,KAAK,gBAAgB,IAAG,IAC7BgD,EAAKg5B,sBAAsBh8B,KAAK,IAAClG,cAAA,SAClCA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKkW,cAEE,MAGhBpf,cAAC+F,IAAI,CAACwrB,UAAQ,EAAAxxB,SACXmJ,EAAKma,QAAQ3gB,cAAcqG,OAASG,EAAKma,QAAQ3gB,cAAcqG,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OACjF1nB,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACRC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAG,IACtBgD,EAAKi2B,yBAAyBj5B,KAAK,IAAClG,cAAA,SACrCA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKkW,cAEE,WAIR,aAtFtBpf,cAACgiC,GAAsB,CAAC/uB,KAAMA,EAAMD,MAAOA,EAAOoC,QAASA,EAAQrV,SACjEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,yCA0FlB,KCzIA,MAAMsiC,WAAyBz0B,YAC7BC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,sBACZD,QAAQC,IAAI6V,EACd,CAGAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwN,EAAYxN,EAAE,kBAEpB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,wBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,wCAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,oCACNA,EAAE,wCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,qCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,uCAIjDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,sBAAqB9J,SAElDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iCACNA,EAAE,qCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,uCAWrD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,0CAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,sCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,mCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,mCACNA,EAAE,uCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,oCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,gCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,gCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iCACNA,EAAE,qCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,qCAKnD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,wCAETG,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,2BAA0B9J,SAEvDC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,yCAKnDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,oCACNA,EAAE,wCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,qCAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,sCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,sCAKnD9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,qCAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qCACNA,EAAE,yCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,2DAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,sCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,gEAIjDpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,8CACNA,EAAE,kDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,6EAQ1D,EAIUzN,qBAAkB4C,YAAW4/B,KCjNrC,MAAMC,GAAsBlxB,OAAaC,MAAM,CAClDjL,KAAMgL,OACHG,SAASxR,YAAE,uBACdkpB,QAAS7X,OACT8X,MAAO9X,OACP+X,MAAO/X,OACJ+X,MAAMppB,YAAE,cACXqpB,aAAchY,OACdiY,gBAAiBjY,SC2FJvR,qBAAkB4C,aAtFV3C,IAAA,IAAC,EACxBC,EAAC,QACDwD,EAAO,aACPqO,EAAY,OACZC,EAAM,OACNkB,EAAM,gBACNuK,EAAe,cACfC,GACDzd,EAAA,OACGU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbxG,aAAchO,EAAOkW,QACrB/vB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,UAAWiH,EAAElf,OAAOmiB,cAClCnK,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOqX,MAAS,0BAA4B,eACxD/W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOsX,MAAS,0BAA4B,eACxDhX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,6BAI5DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOuX,aAAgB,0BAA4B,eAC/DjX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,0BAGjEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8CAA8CE,SAAA,CACjEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOwX,gBAAmB,0BAA4B,eAClElX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,gCAKxEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACPG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGA,KC3DEF,qBAAkB4C,aA1BjC,SAA6B3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EACzD,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,0BAGjBF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACjBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,4CAEhBE,eAQf,KCvBA,MAAML,GAAsBhG,GAAI;;;;;;;;;EA6FjBiG,qBAAkB4C,aAjFjC,SAAyB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC3C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAEjBysB,GAAsB9vB,YAAY7S,KACnC,QAAEkC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS7D,EAAwB,CAChEyL,UAAW,CACT0K,GAAIA,KAGR,GAAIhU,EAAS,OACX5B,cAACsiC,GAAoB,CAAAviC,SAClBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACgiC,GAAoB,CAAAviC,SAAA,CACnBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMhf,EAAcpU,EAAKyB,aAEzB,OAEEvD,cAACsiC,GAAoB,CAAAviC,SACnBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB6iB,QAAS7S,EAAY6S,QACrBC,MAAO9S,EAAY8S,MACnBC,MAAO/S,EAAY+S,MACnBC,aAAchT,EAAYgT,aAC1BC,gBAAiBjT,EAAYiT,iBAE/BxW,iBAAkByvB,GAClBxvB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZwvB,EAAmB,CAAEn3B,UAAW,CAC9B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb6iB,QAASlW,EAAOkW,QAChBC,MAAOnW,EAAOmW,MACdC,MAAOpW,EAAOoW,MACdC,aAAcrW,EAAOqW,aACrBC,gBAAiBtW,EAAOsW,oBAG3B/V,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACuiC,GAAgB,CACf7wB,aAAcA,EACdmB,OAAQA,EACRlB,OAAQA,EACRyL,gBAAiBA,EACjBC,cAAeA,GACf,KAKZ,KCxEe1d,qBAAkB4C,aAnBjC,SAAiC3C,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EAC7D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,wBACtBG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,MAAAD,SAAKF,EAAE,8CACNE,aAOf,KC6CiBJ,qBAAkB4C,aA1DnC,SAA2C3C,GAAmD,IAAlD,EAAEC,EAAC,QAAEwD,EAAO,OAAEsO,EAAM,UAAE6wB,EAAS,aAAE9wB,GAAc9R,EACzF,OACEI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACV,MAAOo8B,EAAUziC,SAAA,CACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACwG,IAAKwiB,MAAK,CAACzkB,MAAM,OAAM9E,SAAA,CACtBC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAErG,EAAE,iDAG5BG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,QACN6B,KAAK,kBACLhG,UAAYyR,EAAO8wB,gBAAmB,0BAA4B,eAClExwB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,0BAGpEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oCAAoCE,SAAA,CACvDC,cAACgS,KAAK,CAAC3N,KAAK,QACN6B,KAAK,YACLhG,UAAYyR,EAAO+wB,UAAa,0BAA4B,eAC5DzwB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDC,cAACgS,KAAK,CAAC3N,KAAK,QACN6B,KAAK,cACLhG,UAAYyR,EAAOgxB,YAAe,0BAA4B,eAC9D1wB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yCAAyCE,SAAA,CAC5DC,cAACgS,KAAK,CAAC3N,KAAK,QACN6B,KAAK,iBACLhG,UAAYyR,EAAOixB,eAAkB,0BAA4B,eACjE3wB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,+BAKvEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC4d,GAAgB,CAACxL,SAAUV,UAKtC,KC8Ge/R,qBAAkB4C,aAhKjC,SAA6B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC/C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,IAClB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS7D,EAAwB,CAChEyL,UAAW,CACT0K,GAAIA,MAEAysB,GAAuB9vB,YAAY7S,GAE3C,GAAIkC,EAAS,OACX5B,cAAC6iC,GAAwB,CAAA9iC,SACtBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACuiC,GAAwB,CAAA9iC,SAAA,CACvBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM3xB,EAAezB,EAAKyB,aAE1B,OAEEjD,eAACuiC,GAAwB,CAAA9iC,SAAA,CACrBO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAA,MAAAD,SAAKF,EAAE,sCACPG,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAKgD,EAAay/B,eAGpBhjC,cAAC8iC,IAAYG,QAAO,CAAAljC,SAClBC,cAACyE,IAAI,CAACrC,GAAK,sBAAqBwT,uBAAwB7V,SACtDO,eAACoE,IAAM,CAAC4I,OAAK,EAACzI,MAAM,YAAW9E,SAAA,CAC5BF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAM9DlG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAA,MAAAD,SAAKF,EAAE,wCACPG,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAKgD,EAAa2/B,iBAGpBljC,cAAC8iC,IAAYG,QAAO,CAAAljC,SAClBC,cAACyE,IAAI,CAACrC,GAAK,sBAAqBwT,yBAA0B7V,SACxDO,eAACoE,IAAM,CAAC4I,OAAK,EAACzI,MAAM,YAAW9E,SAAA,CAC5BF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAM9DlG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAA,MAAAD,SAAKF,EAAE,sCACPG,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAKgD,EAAa4/B,eAGpBnjC,cAAC8iC,IAAYG,QAAO,CAAAljC,SAClBC,cAACyE,IAAI,CAACrC,GAAK,sBAAqBwT,uBAAwB7V,SACtDO,eAACoE,IAAM,CAAC4I,OAAK,EAACzI,MAAM,YAAW9E,SAAA,CAC5BF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAM9DlG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAA,MAAAD,SAAKF,EAAE,4CACPG,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAKgD,EAAaK,oBAGpB5D,cAAC8iC,IAAYG,QAAO,CAAAljC,SAClBC,cAACyE,IAAI,CAACrC,GAAK,sBAAqBwT,4BAA6B7V,SAC3DO,eAACoE,IAAM,CAAC4I,OAAK,EAACzI,MAAM,YAAW9E,SAAA,CAC5BF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAM9DlG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAA,MAAAD,SAAKF,EAAE,6CACPG,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAKgD,EAAa6/B,qBAGpBpjC,cAAC8iC,IAAYG,QAAO,CAAAljC,SAClBC,cAACyE,IAAI,CAACrC,GAAK,sBAAqBwT,6BAA8B7V,SAC5DO,eAACoE,IAAM,CAAC4I,OAAK,EAACzI,MAAM,YAAW9E,SAAA,CAC5BF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,iCAQhElG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,MAAAD,SAAKF,EAAE,wCACPG,cAACwS,KAAM,CACLC,cAAe,CACbgwB,gBAAiBl/B,EAAa8/B,wBAC9BX,UAAWn/B,EAAa+/B,kBACxBX,YAAap/B,EAAaggC,oBAC1BX,eAAgBr/B,EAAaigC,wBAG/B5wB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCq2B,EAAmB,CAAEn3B,UAAW,CAC9B6H,MAAO,CACL6C,GAAIA,EACJytB,wBAAyBxwB,EAAO4vB,gBAChCa,kBAAmBzwB,EAAO6vB,UAC1Ba,oBAAqB1wB,EAAO8vB,YAC5Ba,uBAAwB3wB,EAAO+vB,iBAEhC1vB,eAAgB,CACf,CAACC,MAAO1T,EAAwByL,UAAW,CAAC0K,GAAIA,OAEnDxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBgR,GAAc,GACdO,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACyjC,GAAkC,CACjC/xB,aAAcA,EACdC,OAAQA,GACR,WAOlB,KC1HiBhS,qBAAkB4C,aAxCE3C,IAAA,IAAC,EACpCC,EAAC,QACDwD,EAAO,UACPm/B,EAAS,aACT9wB,EAAY,cACZ4L,EAAa,eACbC,EAAc,sBACdC,EAAsB/N,IAAGA,IAC1B7P,EAAA,OACGI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACV,MAAOo8B,EAAUziC,SAAA,CACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,eAObvd,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACPG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,0BAIF,KCqFEF,qBAAkB4C,aA5HjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB8tB,EAActgC,EAAMmK,OAAOo2B,aAC3Bx9B,EAAa,sBAAqByP,aAExC,IAAI4sB,EAAY,GAChB,GACO,cADCkB,EAEJlB,EAAY3iC,EAAE,oCAOlB,MAAOwiC,GAAsB9vB,YAAY7S,IAGlCqe,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,OAEElG,cAAC6iC,GAAwB,CAAA9iC,SACvBC,cAACwS,KAAM,CACLC,cAAe,CAAC,EAChBG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdvI,GAAIA,GAGFyI,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OAGvC,OAFAtY,QAAQC,IAAI8lB,GAELilB,GACL,IAAK,YACHvlB,EAAUylB,kBAAoB7lB,EAC9BI,EAAU0lB,UAAYplB,EACtB,MACF,IAAK,cACHN,EAAU2lB,oBAAsB/lB,EAChCI,EAAU4lB,YAActlB,EACxB,MACF,IAAK,YACHN,EAAU6lB,kBAAoBjmB,EAC9BI,EAAU8lB,UAAYxlB,EACtB,MACF,IAAK,iBACHN,EAAU+lB,uBAAyBnmB,EACnCI,EAAUgmB,eAAiB1lB,EAC3B,MACF,IAAK,kBACHN,EAAUimB,wBAA0BrmB,EACpCI,EAAUkmB,gBAAkB5lB,EAMhC4jB,EAAmB,CAAEn3B,UAAW,CAC9B6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAO1T,EAAwByL,UAAW,CAAC0K,GAAIA,OAEnDxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBgR,GAAc,GACdzP,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,cAC3B,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,GAAcjF,EAAA,OAChBzM,cAACskC,GAA4B,CAC3B5yB,aAAcA,EACd8wB,UAAWA,EACXllB,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,GACvB,KAKZ,KCzFe7d,qBAAkB4C,aA7BjC,SAAsC3C,GAA8C,IAA7C,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,aAAEwsB,GAAa,GAAM3sB,EAC/E,OACEI,cAAC2K,GAAW,CAAA5K,SACZC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCwsB,EACAvsB,cAACyG,GAAU,CAACN,UAAU,gCAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACrBC,SAAS,oBAAmB9J,SACtCC,cAACgV,GAAS,CAACH,OAAO,0CAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOb,KCvCO,MAAMwkC,GAA0B7qC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA0B9B8qC,GAAyB9qC,GAAI;;;;;;;;;;;;;;EAgB7B+qC,GAAmB/qC,GAAI;;;;;;;;EAUvBgrC,GAAsBhrC,GAAI;;;;;;;;EAU1BirC,GAAsBjrC,GAAI;;;;;;ECuPxBiG,qBAAkB4C,aAhSjC,SAAkC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC/C,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAEzB,QAAEnX,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASihC,KAC7CK,GAAuBryB,YAAYoyB,IAErC31B,EAAYnP,EAAE,oCAGpB,GAAI+B,EAAS,OACX5B,cAAC6kC,GAA6B,CAAA9kC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6kC,GAA6B,CAAA9kC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kDAKZ,MAAM4L,EAA4B3J,EAAK2J,0BAGvC,OAAKA,EAA0B1C,MAAM3J,OASnCY,cAAC6kC,GAA6B,CAAA9kC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EACVT,SAAU9C,EAA0B8C,SACpCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO3E,EAA0B8C,SAAS8B,WAE5CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB/E,0BAA0B1C,MACrDwF,EAAWiC,EAAgB/E,0BAA0B8C,SAE3D,OAAOkC,EAASrR,OACZ,CAGEqM,0BAA2B,CACzBiF,WAAYH,EAAe9E,0BAA0BiF,WACrD3H,MAAO,IAAKwH,EAAe9E,0BAA0B1C,SAAU0H,GAC/DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACNC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MARFtE,kBAWlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN0L,EAA0B1C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK9C,OADQkG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,kBACrCjtB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK47B,gBACrC9kC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK67B,mBACrC/kC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAC1C/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAGmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAa,KACtE/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEmJ,EAAK87B,WACjB1kC,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,oCAAmC8G,EAAK0M,KAAK7V,SACtDC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UACEE,UAAU,2BACVkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAGC,cAAA,SAAOkJ,EAAK9C,SAC/BmR,WAAY1X,EAAE,sCACd+Y,eAAgBgsB,EAChBntB,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOoxB,OAEV,EACJxkC,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA3BfoG,kBAVzBA,eAwCJ,aA1F5BtM,cAAC6kC,GAA6B,CAAA9kC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CA+Fd,KCrJO,MAAMolC,GAAsB/zB,OAAaC,MAAM,CAClD/K,MAAO8K,OACJK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdwM,QAAS6E,OACNK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,uBACdmlC,SAAU9zB,SCmICvR,qBAAkB4C,aAhIjC,SAAqC3C,GAA2F,IAA1F,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,EAAa,UAAElX,GAAWvG,EAC3H,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAChBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,kDAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,aAGjDnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,cACL0lB,QAAS/Y,EAAOiyB,cAChB9kC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,gDAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,aAG/CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,iBACL0lB,QAAS/Y,EAAOkyB,iBAChB/kC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,mDAEnDG,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,gBAIpDnS,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOvL,MAAS,0BAA4B,eACxD6L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,4BAI5DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbxG,aAAchO,EAAOxG,QACrBrT,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,WAAW,GAC3BC,EAAc,UAAWiH,EAAElf,OAAOmiB,aAAa,IAGnDvnB,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,4BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,WACLhG,UAAYyR,EAAOqzB,SAAY,0BAA4B,eAC3D/yB,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,gCAKjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEpBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAMnB,KCtDeF,qBAAkB4C,aAvEjC,SAAoC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC/C,MAAMuG,EAAY,+BACX++B,GAAmB3yB,YAAYkyB,IAEtC,OACEzkC,cAAC6kC,GAA6B,CAACtY,cAAc,EAAKxsB,SAChDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,4CAEjBG,cAACwS,KAAM,CACHC,cAAe,CACbwa,eAAe,EACf6X,aAAa,EACbC,gBAAgB,EAChB3+B,MAAO,GACPiG,QAAS,GACT+S,UAAW,IAAIlc,KACfmc,QAAS,IAAInc,KACb8hC,SAAU,KAEZryB,iBAAkBsyB,GAClBryB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAC9B2nB,EAAc,CAChB1G,cAAepa,EAAOoa,cACtB8X,eAAgBlyB,EAAOkyB,eACvBD,YAAajyB,EAAOiyB,YACpB1+B,MAAOyM,EAAOzM,MACdiG,QAASwG,EAAOxG,QAChB+S,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B2lB,SAAUhvB,SAASnD,EAAOmyB,WAG5BE,EAAgB,CAAEh6B,UAAW,CAC3B6H,MAAO4gB,GACNzgB,eAAgB,CACf,CAACC,MAAOoxB,OAEXnxB,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAC9DzM,cAACmlC,GAA4B,CAC3BzzB,aAAcA,EACdmB,OAAQA,EACRlB,OAAQA,EACRyL,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,QAMlB,KCgCexG,qBAAkB4C,aApGjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACvD,MAAMwlC,EAAiBhiC,EAAMmK,OAAOqI,GAC9B5G,EAAYnP,EAAE,yCACdsG,EAAY,+BAEZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkhC,GAAwB,CAAEt5B,UAAW,CAC7E0K,GAAIwvB,MAECC,GAAsB9yB,YAAYmyB,IAEzC,GAAI9iC,EAAS,OACX5B,cAAC6kC,GAA6B,CAACtY,cAAc,EAAKxsB,SAChDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,mCAMX,GAAIgC,EAAO,OACT7B,cAAC6kC,GAA6B,CAACtY,cAAc,EAAKxsB,SAChDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kCAMX,MAAMylC,EAA2BxjC,EAAKwjC,yBAEtC,OACEtlC,cAAC6kC,GAA6B,CAACtY,cAAc,EAAKxsB,SAChDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEbhP,cAACwS,KAAM,CACHC,cAAe,CACbwa,cAAeqY,EAAyBrY,cACxC6X,YAAaQ,EAAyBR,YACtCC,eAAgBO,EAAyBP,eACzC3+B,MAAOk/B,EAAyBl/B,MAChCiG,QAASi5B,EAAyBj5B,QAClC+S,UAAW,IAAIlc,KAAKoiC,EAAyBlmB,WAC7CC,QAAS,IAAInc,KAAKoiC,EAAyBjmB,SAC3C2lB,SAAUM,EAAyBN,UAErCryB,iBAAkBsyB,GAClBryB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAC9B2nB,EAAc,CAChB/d,GAAIwvB,EACJnY,cAAepa,EAAOoa,cACtB8X,eAAgBlyB,EAAOkyB,eACvBD,YAAajyB,EAAOiyB,YACpB1+B,MAAOyM,EAAOzM,MACdiG,QAASwG,EAAOxG,QAChB+S,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B2lB,SAAUhvB,SAASnD,EAAOmyB,WAG5BK,EAAmB,CAAEn6B,UAAW,CAC9B6H,MAAO4gB,GACNzgB,eAAgB,CACf,CAACC,MAAOoxB,OAEXnxB,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAC9DzM,cAACmlC,GAA4B,CAC3BzzB,aAAcA,EACdmB,OAAQA,EACRlB,OAAQA,EACRyL,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,QAMpB,K,6LC9DexG,qBAAkB4C,aAnCjC,SAAoC3C,GAAiC,IAAhC,EAACC,EAAC,SAAEE,EAAQ,SAAEgV,GAAS,GAAMnV,EAChE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,8BAEtB7F,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbO,eAACmE,IAAI,CAACrC,GAAG,mCACPlC,UAAU,yBAAwBH,SAAA,CAClCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,WAAW,IAAErG,EAAE,qBAExCG,cAACmN,GAAoB,CAACvD,WAAW,MACbC,SAAS,wBAAuB9J,SAClDC,cAACgV,GAAS,CAACH,OAAO,2CAM5B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC/CO,MAAMwlC,GAAwB7rC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4C5B8rC,GAAsB9rC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmF1B4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsD7B+rC,GAAmB/rC,GAAI;;;;;;;;EAUvBgsC,GAAmBhsC,GAAI;;;;;;;;EAUvBisC,GAAoBjsC,GAAI;;;;;;;;;ECFtBiG,qBAAkB4C,aAlLjC,SAAgC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC3C,MAAMoP,EAAYnP,EAAE,kCACpB,IAAKoV,EAAUC,GAAeC,oBAAS,GAEvC,MAAM,QAAEvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASiiC,GAAuB,CACnFr6B,UAAW,CAAE+J,SAAUA,GACvB3J,YAAa,kBAEPs6B,GAAqBrzB,YAAYozB,IAEnCrwB,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAAC6lC,GAA2B,CAAA9lC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6lC,GAA2B,CAAA9lC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,gDAKZ,IAAI8C,EAAcb,EAAKgkC,wBAGvB,OAAKnjC,EAAYoG,MAAM3J,OAYrBY,cAAC6lC,GAA2B,CAAA9lC,SAC1BC,cAACyN,GAAW,CACVuB,UAAWA,EACXC,cAAeqG,EACflG,aAAa,EACbb,SAAU5L,EAAY4L,SACtBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOzN,EAAY4L,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBs1B,wBAAwB/8B,MACnDwF,EAAWiC,EAAgBs1B,wBAAwBv3B,SAEzD,OAAOkC,EAASrR,OACZ,CAGE0mC,wBAAyB,CACvBp1B,WAAYH,EAAeu1B,wBAAwBp1B,WACnD3H,MAAO,IAAKwH,EAAeu1B,wBAAwB/8B,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAElB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MARFtE,kBAWlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN4C,EAAYoG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,iBADZ3gB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK47B,eADZx4B,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK68B,aADZz5B,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK88B,UAAanmC,EAAE,qBAAuBqJ,EAAKtG,SADpC0J,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK+rB,aAAa,IAACj1B,cAAA,SAClBkJ,EAAK4T,eACL9c,cAAA,QAAME,UAAU,aAAYH,SAAEmJ,EAAK4T,eAAe5W,OAChD,KAJUoG,gBAOhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK+8B,SAAS,IAACjmC,cAAA,SAChBA,cAAA,QAAME,UAAU,aAAYH,SACzBmJ,EAAKg9B,wBAHM55B,gBAMhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,kCAAoCgH,EAAK0M,IACrE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdgwB,EAAiB,CAAE16B,UAAW,CAC5B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOoyB,GAAuBr6B,UAAW,CAAC,SAAY+J,OACvD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBA7BzBA,eAmEJ,aA3HxBtM,cAAC6lC,GAA2B,CAAA9lC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SAC4DF,EAAvDoV,EAAyD,yCAA3C,4CA8H3B,KCpMO,MAAMkxB,GAAmBj1B,OAAaC,MAAM,CACjDjL,KAAMgL,OACLK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACZ2kB,MAAOtT,OACJG,SAASxR,YAAE,uBACdid,eAAgB5L,OACbG,SAASxR,YAAE,uBACdomC,SAAU/0B,OACPI,SAASzR,YAAE,iCACXwR,SAASxR,YAAE,uBACdumC,aAAcl1B,OACXG,SAASxR,YAAE,uBACd+C,QAASsO,OACTm1B,iBAAkBn1B,SCCpB,MAAMo1B,WAAkC54B,YACtCC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,sCACZD,QAAQC,IAAI6V,EACd,CAEAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwD,EAAU/D,KAAKkP,MAAMnL,QAErB6S,EAAc5W,KAAKkP,MAAM0H,YACzBxE,EAAepS,KAAKkP,MAAMkD,aAC1B2L,EAAgB/d,KAAKkP,MAAM6O,cAC3BD,EAAkB9d,KAAKkP,MAAM4O,gBAC7BzL,EAASrS,KAAKkP,MAAMmD,OACpBkB,EAASvT,KAAKkP,MAAMqE,OAE1B,OACIvS,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACVO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAChBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,sCAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,aAGjDnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACPO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,cACL0lB,QAAS/Y,EAAOiyB,cAChB9kC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,oCAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,aAGjDnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,YACL0lB,QAAS/Y,EAAOkzB,YAChB/lC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0CAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,gBAIjD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACjCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEzDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CACxCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,eAAe,GAC/BC,EAAc,cAAeiH,EAAElf,OAAOmiB,aAAa,IAGvDvnB,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAEhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CAClCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MAAKlS,SAAA,CACzBrH,QAAQC,IAAI,gCACZD,QAAQC,IAAIud,GACblW,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYuO,gBAAgB1b,MAAMgD,KAAInM,IAAA,IAAC,KAAEsJ,GAAMtJ,EAAA,OAC5CU,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,6BAIrEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,WACLhG,UAAYyR,EAAOs0B,SAAY,0BAA4B,eAC3Dh0B,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,0BAG7DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,eACLhG,UAAYyR,EAAOy0B,aAAgB,0BAA4B,eAC/Dn0B,aAAa,MAAKlS,SAAA,CAC1BC,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,kBAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,mBAATyM,gBAC3BtM,cAAA,UAAQmC,MAAM,SAAQpC,SAAaF,EAAE,oBAATyM,mBAE5BtM,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,6BAInEI,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACPO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,YACL0lB,QAAS/Y,EAAO0zB,WAChBvmC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0BAEnDG,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,WAE1CU,EAAOmzB,UAAa,GACvB1lC,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAO/O,QAAW,0BAA4B,eAC1DqP,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAczD2S,EAAOmzB,UACF1lC,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4BAA4BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,mBACLhG,UAAYyR,EAAO00B,iBAAoB,0BAA4B,eACnEp0B,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,wBAE/D,GAEVI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,mBACLhG,UAAYyR,EAAO2H,iBAAoB,0BAA4B,eACnErH,aAAa,MAAKlS,SAAA,CAC1BC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYuH,kBAAkB1U,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC9C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,oBACLhG,UAAYyR,EAAOwE,kBAAqB,0BAA4B,eACpElE,aAAa,MAAKlS,SAAA,CAC1BC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYR,mBAAmB3M,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CjM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,gCAKxEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAEHG,cAAC0E,IAAM,CACPL,KAAK,SACLQ,MAAM,OACN0K,QAASA,IAAMlM,EAAQnB,KAnNjB,6BAmNiCnC,SAElCF,EAAE,yBAKrB,EAIaF,qBAAkB4C,YAAW+jC,KC9H7B3mC,qBAAkB4C,aAxGjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MAAMoP,EAAYnP,EAAE,uCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KACnCkuB,GAAmBj0B,YAAYkzB,IAEtC,GAAI7jC,EAAS,OACX5B,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAMZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMoU,EAAcpU,EAEpB,OACE9B,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACf6X,aAAa,EACbiB,WAAW,EACX7/B,KAAM,GACNsC,YAAa,GACbgc,MAAO,EACP1H,eAAgB,GAChBmpB,SAAU,EACVG,aAAc,SACdxjC,QAAS,EACTojC,WAAW,EACXK,iBAAkB,EAClB/sB,iBAAkB,GAClBnD,kBAAmB,IAErBxD,iBAAkBwzB,GAClBvzB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ2zB,EAAgB,CAAEt7B,UAAW,CAC3B6H,MAAO,CACLka,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpBiB,UAAWlzB,EAAOkzB,UAClB7/B,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBmpB,SAAUjwB,SAASnD,EAAOozB,UAC1BG,aAAcvzB,EAAOuzB,aACrBxjC,QAASoT,SAASnD,EAAOjQ,SACzBojC,UAAWnzB,EAAOmzB,UAClBK,iBAAkBxzB,EAAOwzB,iBACzB/sB,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,sBAG7B/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAxEN,6BAyEFmR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACsmC,GAAyB,CACxBpwB,YAAeA,EACfxE,aAAgBA,EAChB2L,cAAiBA,EACjBD,gBAAmBA,EACnBzL,OAAUA,EACVkB,OAAUA,GACV,OAMd,KCoBelT,qBAAkB4C,aAzHjC,SAAkC3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACrD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,wCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkiC,GAAqB,CAC7Dt6B,UAAW,CAAE0K,GAAIA,MAEZ6wB,GAAmBl0B,YAAYmzB,IAEtC,GAAI9jC,EAAS,OACX5B,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMoU,EAAcpU,EAEpB,IAAI4kC,EAAiB,GACjBxwB,EAAYgsB,sBAAsBplB,iBACpC4pB,EAAiBxwB,EAAYgsB,sBAAsBplB,eAAelH,IAGpE,IAAIoJ,EAAmB,GACnB9I,EAAYgsB,sBAAsB5oB,mBACpC0F,EAAoB9I,EAAYgsB,sBAAsB5oB,iBAAiB1D,IAGzE,IAAIqJ,EAAoB,GAKxB,OAJI/I,EAAYgsB,sBAAsB/rB,oBACpC8I,EAAqB/I,EAAYgsB,sBAAsB/rB,kBAAkBP,IAIzE5V,cAAC6lC,GAA2B,CAAC9wB,UAAU,EAAKhV,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAe/W,EAAYgsB,sBAAsBjV,cACjD6X,YAAa5uB,EAAYgsB,sBAAsB4C,YAC/CiB,UAAW7vB,EAAYgsB,sBAAsB6D,UAC7C7/B,KAAMgQ,EAAYgsB,sBAAsBh8B,KACxCsC,YAAa0N,EAAYgsB,sBAAsB15B,YAC/Cgc,MAAOtO,EAAYgsB,sBAAsB1d,MACzC1H,eAAgB4pB,EAChBT,SAAU/vB,EAAYgsB,sBAAsB+D,SAC5CG,aAAclwB,EAAYgsB,sBAAsBkE,aAChDxjC,QAASsT,EAAYgsB,sBAAsBt/B,QAC3CojC,UAAW9vB,EAAYgsB,sBAAsB8D,UAC7CK,iBAAkBnwB,EAAYgsB,sBAAsBmE,iBACpD/sB,iBAAmB0F,EACnB7I,kBAAmB8I,GAErBtM,iBAAkBwzB,GAClBvzB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ4zB,EAAgB,CAAEv7B,UAAW,CAC3B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBqX,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpBiB,UAAWlzB,EAAOkzB,UAClB7/B,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBmpB,SAAUjwB,SAASnD,EAAOozB,UAC1BG,aAAcvzB,EAAOuzB,aACrBxjC,QAASoT,SAASnD,EAAOjQ,SACzBojC,UAAWnzB,EAAOmzB,UAClBK,iBAAkBxzB,EAAOwzB,iBACzB/sB,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,sBAG7B/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACsmC,GAAyB,CACxBpwB,YAAeA,EACfxE,aAAgBA,EAChB2L,cAAiBA,EACjBD,gBAAmBA,EACnBzL,OAAUA,EACVkB,OAAUA,GACV,OAMd,KC/FelT,qBAAkB4C,aA5BjC,SAA0C3C,GAAkF,IAAjF,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEywB,GAAQ,EAAK,UAAErqB,EAAU,6BAA6BvG,EACvH,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACyG,GAAU,CAACN,UAAWA,IACrBqqB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,6BAA4B9J,SACzDC,cAACgV,GAAS,CAACH,OAAO,uCAAuC3U,UAAU,WAEnE,QAIRF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCvCO,MAAM4mC,GAA6BjtC,GAAI;;;;;;;;;;;;;;;;;;EAqBjCktC,GAA4BltC,GAAI;;;;;;;;EAWhCmtC,GAAmCntC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCvCotC,GAAsBptC,GAAI;;;;;;;;EAU1BqtC,GAAyBrtC,GAAI;;;;;;;;;EAW7BstC,GAAyBttC,GAAI;;;;;;EAQ7ButC,GAAoBvtC,GAAI;;;;;;;;;;;;;;;;EAkBxBwtC,GAAyBxtC,GAAI;;;;;;ECqL3BiG,qBAAkB4C,aAhRjC,SAAsC3C,GAAiB,IAAhB,EAAEC,EAAC,QAAEwD,GAAQzD,EAClD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASqjC,KAC9CQ,GAAwB50B,YAAYy0B,IAG3C,GAAIplC,EAAS,OACX5B,cAAConC,GAAiC,CAAC5W,SAAS,EAAKzwB,SAC/CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uCAAuCE,SAC/DC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAConC,GAAiC,CAAE5W,SAAS,EAAKzwB,SAChDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uCAAuCE,SAC/DC,cAAA,KAAAD,SAAIF,EAAE,qDAKZ,MAAMwnC,EAAmBvlC,EAAKwlC,4BAG9B,OAAKD,EAAiBt+B,MAAM3J,OAW1BY,cAAConC,GAAiC,CAAE5W,SAAS,EAAKzwB,SAChDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uCACZ0O,SAAU84B,EAAiB94B,SAC3Ba,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOi3B,EAAiB94B,SAAS8B,WAEnCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB82B,4BAA4Bv+B,MACvDwF,EAAWiC,EAAgB82B,4BAA4B/4B,SAE7D,OAAOkC,EAASrR,OACZ,CAGEkoC,4BAA6B,CAC3B52B,WAAYH,EAAe+2B,4BAA4B52B,WACvD3H,MAAO,IAAKwH,EAAe+2B,4BAA4Bv+B,SAAU0H,GACjElC,aAGJgC,CAAc,GAEpB,EACFxQ,SACRO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRsnC,EAAiBt+B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACnCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,YAAY++B,UAAU,EAAG,KADjBj7B,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BC,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,yCAA2CgH,EAAK0M,IAC5E/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAELG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,gDAAkDgH,EAAK0M,IACnF/Q,MAAM,YAAW9E,SACtBF,EAAE,iDAEPG,cAAA,UAAQE,UAAU,uCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,sDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKhD,OACzBqR,WAAY1X,EAAE,2CACd+Y,eAAgBuuB,EAChB1vB,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOwzB,OAEV,EACJ5mC,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA9BfoG,kBAPzBA,eAwCJ,aAvF1BtM,cAAConC,GAAiC,CAAE5W,SAAS,EAAKzwB,SAChDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uCAAuCE,SAC/DC,cAAA,KAAAD,SAAIF,EAAE,iDA6Fd,KC7IO,MAAM2nC,GAAyBt2B,OAAaC,MAAM,CACrDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCgGHF,qBAAkB4C,aAlFjC,SAAsC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACjD,MAAMuG,EAAY,oCACVshC,GAAsBl1B,YAAYu0B,IAE1C,OACE9mC,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,2CAA2CE,SACxDC,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIsC,YAAa,IACxCmK,iBAAkB60B,GAClB50B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCy7B,EAAkB,CAAEv8B,UAAW,CAC7B6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOwzB,OAEXvzB,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,sBAGP6R,EACApR,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACjCC,cAAA,UAAAD,SAASF,EAAE,yBAAgC,IAAEA,EAAE,sEAEjD,QAGD,OAMvB,KCqCeF,qBAAkB4C,aAnHjC,SAAuC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACzD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,4CACdsG,EAAY,oCACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASsjC,GAA2B,CACnE17B,UAAW,CAAC0K,GAAIA,MAEV+xB,GAAyBp1B,YAAYw0B,IAG7C,GAAInlC,EAAS,OACX5B,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAMZ,MAAMqW,EAAcpU,EAAK8lC,2BAIzB,OAHAlvC,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBsC,YAAa0N,EAAY1N,aAE3BmK,iBAAkB60B,GAClB50B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ80B,EAAqB,CAAEz8B,UAAW,CAChC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOwzB,OAEXvzB,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,oDAAsD,CACnE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,OAMvB,KC8BeF,qBAAkB4C,aA9IjC,SAA6C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACjE,MAAMioC,EAAUzkC,EAAMmK,OAAOqI,GACvBzP,EAAY,mCAClB,IAAI6I,EAAYnP,EAAE,uDAClB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASujC,GAAkC,CAC1E37B,UAAW,CAAE0K,GAAIiyB,MAEXC,GAAmBv1B,YAAY00B,KAC/Bc,GAAwBx1B,YAAY20B,IAG5C,GAAItlC,EAAS,OACX5B,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMkmC,EAASlmC,EAAKgkC,wBACdmC,EAAQnmC,EAAK8lC,2BAEnB54B,EAAa,GAAEA,OAAei5B,EAAM/hC,OACpC,IAAIgiC,EAAe,CAAC,EAOpB,OANID,EAAMnC,wBAAwB/8B,OAChCk/B,EAAMnC,wBAAwB/8B,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAK8C,EAAA,OAC9Ck8B,EAAah/B,EAAK0M,KAAM,CAAI,IAK9B5V,cAAConC,GAAiC,CAACjhC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACnBO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,MACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,QAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNioC,EAAOj/B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACzBjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK0M,MAAMsyB,EACXloC,cAACiG,IAAI,CAACC,KAAK,eAAehG,UAAU,eAAkBF,cAACiG,IAAI,CAACC,KAAK,WAAWhG,UAAU,cAF1EoM,gBAKhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGf5T,QAAQC,IAAKuQ,EAAK0M,MAAMsyB,GACrBh/B,EAAK0M,MAAMsyB,EAmCbloC,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,sBAAqBH,SACxCO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,6BACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,kBACZD,QAAQC,IAAIuQ,EAAK0M,IACjB,IAAIuyB,EAAUj/B,EAAK0M,GACnBmyB,EAAoB,CAAE78B,UAAW,CAC/B6H,MAAO,CACLmvB,sBAAuBiG,EACvBP,2BAA4BC,IAEjC30B,eAAgB,CACf,CAACC,MAAO0zB,GAAkC37B,UAAW,CAAC,GAAM28B,OAC5Dz0B,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EAChBtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,8BAA+B,CAC7C0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,iBAAiB,IAAG,IAC1CrG,EAAE,iCA7ByCyM,gBAjChDtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,wBAAuBH,SAC1CO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,wBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,eACZ,IAAIwvC,EAAUj/B,EAAK0M,GACnBkyB,EAAe,CAAE58B,UAAW,CAC1B6H,MAAO,CACLmvB,sBAAuBiG,EACvBP,2BAA4BC,IAEjC30B,eAAgB,CACf,CAACC,MAAO0zB,GAAkC37B,UAAW,CAAC,GAAM28B,OAC5Dz0B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,0BAA2B,CACzC0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAG,IACzCrG,EAAE,4BA5B2CyM,kBAZtCA,eA8EJ,YAO9B,KC/JO,SAAS/E,KACd,IAAI0N,EAAW3W,aAAayE,QAAQvE,EAAK/C,kCACxB,OAAbwZ,IACFA,GAAW,GAGb,IAAIrN,EAAY,CACdqN,SAAwB,SAAbA,GAKb,OAFAvc,QAAQC,IAAIiP,GAELA,CACT,CCbO,MAAMwgC,GAAuB1uC,GAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB3B2uC,GAAsB3uC,GAAI;;;;;;;;;;;;EAc1B4uC,GAAgB5uC,GAAI;;;;;;;;;;;;;;EAgBpB6uC,GAAmB7uC,GAAI;;;;;;;;;;;;;EAevB8uC,GAAyB9uC,GAAI;;;;;;;;;;;;;;EAgB7B+uC,GAAoB/uC,GAAI;;;;;;;;;EC7CtBiG,qBAAkB4C,aA5BjC,SAAmC3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACxE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAM,eAAcrG,SAC/BC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAW,6BAEvBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,wBAAuB9J,SACpDC,cAACgV,GAAS,CAACH,OAAO,uCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC2IeJ,qBAAkB4C,aA7JjC,SAA+B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACrCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAM,QAACvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAaxM,YAAS8kC,GAAsB,CAChFl9B,UAAW3D,QAENmhC,GAAoBn2B,YAAYk2B,IAEvC,GAAI7mC,EAAS,OACX5B,cAAC2oC,GAA0B,CAAA5oC,SACzBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,iCAAiCE,SACzDC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC2oC,GAA0B,CAAA5oC,SACzBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,iCAAiCE,SACzDC,cAAA,KAAAD,SAAIF,EAAE,+CAIZ,MAAMyV,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAKD+oC,EAAa9mC,EAAK+mC,uBAExB,OAAKD,EAAW7/B,MAAM3J,OAYpBY,cAAC2oC,GAA0B,CAAA5oC,SACzBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,iCACboP,cAAeqG,EACflG,aAAa,EACbb,SAAUq6B,EAAWr6B,SACrBG,WAAYA,KACXoB,EAAU,CACR5E,UAAW,CACTkF,MAAOw4B,EAAWr6B,SAAS8B,WAE7BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBq4B,uBAAuB9/B,MAClDwF,EAAWiC,EAAgBq4B,uBAAuBt6B,SAExD,OAAOkC,EAASrR,OACZ,CAGEypC,uBAAwB,CACtBn4B,WAAYH,EAAes4B,uBAAuBn4B,WAClD3H,MAAO,IAAKwH,EAAes4B,uBAAuB9/B,SAAU0H,GAC5DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,MACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN6oC,EAAW7/B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC7BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC8oC,IAAM,CAAClkC,KAAK,KAAKjB,SAAUuF,EAAKmB,0BADnBiC,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK+jB,cACLjtB,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,iBAC1BG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,iBAHbyM,gBAKhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAC9BS,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,uCAAyCgH,EAAK0M,IAC1E/Q,MAAM,YAAW9E,SACvBC,cAACiG,IAAI,CAACC,KAAK,YAEblG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,iCAAmCgH,EAAK0M,IACpE/Q,MAAM,YAAW9E,SACtBF,EAAE,qBAIXG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACT0P,QAASA,KACP7W,QAAQC,IAAI,oBACZ+vC,EAAiB,CAAEx9B,UAAW,CAC5B6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTX,UAAW/L,EAAK+L,WAEvB/B,eAAgB,CACf,CAACC,MAAOi1B,GAAsBl9B,UAAW3D,SACzC6L,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACHpK,EAAK+L,SAAYpV,EAAE,sBAAuBA,EAAE,oBAAqB,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAACC,KAAK,cAxCwBoG,kBAZzBA,eAuDJ,aA1GxBtM,cAAC2oC,GAA0B,CAAA5oC,SACzBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,iCACdoP,cAAeqG,EAAcvV,SACvCC,cAAA,KAAAD,SACyDF,EAAtDoV,EAAwD,wCAA1C,2CA6GzB,KC/KO,MAAM8zB,GAAmB73B,OAAaC,MAAM,CAC/CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,OACb83B,WAAY93B,OACTkF,IAAIvW,YAAE,cC4HEF,qBAAkB4C,aA3GjC,SAAiC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC5C,MAAMuG,EAAY,4BACX8iC,GAAgB12B,YAAY+1B,IAEnC,OACEtoC,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,yCAEjBG,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIsC,YAAa,GAAIykB,eAAe,EAAM+b,WAAY,IAC7Er2B,iBAAkBo2B,GAClBn2B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCi9B,EAAa,CAAE/9B,UAAW,CACxB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBykB,cAAepa,EAAOoa,cACtB+b,WAAYn2B,EAAOm2B,WACnBE,MAAOr2B,EAAOq2B,QAGfh2B,eAAgB,CACf,CAACC,MAAOi1B,GAAsBl9B,UAAW3D,SAE5C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAC9DnM,eAACsR,KAAM,CAAA7R,SAAA,CAGHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,sCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAE/C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,aACLhG,UAAYyR,EAAOq3B,WAAc,0BAA4B,eAC7D/2B,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,2BAGjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SACvDF,EAAE,yBAGN,QAMzB,KC0CeF,qBAAkB4C,aAlJjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,uCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+kC,GAAqB,CAAEn9B,UAAW,CAC1E0K,GAAIA,MAEEuzB,GAAoB52B,YAAYg2B,IAExC,GAAI3mC,EAAS,OACX5B,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAMZ,MAAMqW,EAAcpU,EAAK2F,sBAIzB,OAHA/O,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBsC,YAAa0N,EAAY1N,YACzBykB,cAAe/W,EAAY+W,cAC3B+b,WAAY9yB,EAAY8yB,YAE1Br2B,iBAAkBo2B,GAClBn2B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZs2B,EAAgB,CAAEj+B,UAAW,CAC3B6H,MAAO,CACL6C,GAAIA,EACJ1P,KAAM2M,EAAO3M,KACbsC,YAAcqK,EAAOrK,YAAeqK,EAAOrK,YAAa,GACxDykB,cAAepa,EAAOoa,cACtB+b,WAAan2B,EAAOm2B,WAAcn2B,EAAOm2B,WAAY,KAEtD91B,eAAgB,CACf,CAACC,MAAOi1B,GAAsBl9B,UAAW,CAAC,UAAY,OAEzDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,GAAiB3Q,EAAA,OAC9DnM,eAACsR,KAAM,CAAA7R,SAAA,CACFrH,QAAQC,IAAIka,GACbvS,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,sCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAE/C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,EAAK,IAGxCpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,aACLhG,UAAYyR,EAAOq3B,WAAc,0BAA4B,eAC7D/2B,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,2BAGjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GA9HV,2BA8HwBrC,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,QAMzB,KCJeF,qBAAkB4C,aA5IjC,SAAuC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACzD,MAAMwpC,EAAchmC,EAAMmK,OAAOqI,GAC3BzP,EAAY,2BAClB,IAAI6I,EAAYnP,EAAE,sCAClB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+kC,GAAqB,CAC7Dn9B,UAAW,CAAE0K,GAAIwzB,MAEXC,GAAgB92B,YAAYi2B,KAG7BzqB,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAIzC,OAAItE,EACF5B,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMlBa,EACF7B,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,mCAKZmP,EAAa,GAAEA,OAAelN,EAAK2F,sBAAsBvB,OAGvDlG,cAAC2oC,GAA0B,CAAC5zB,UAAU,EAAKhV,SACzCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACtBC,cAACwS,KAAM,CACJC,cAAe,CAAC,EAEhBG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdvI,GAAIwzB,EACJE,cAAevrB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAElB4qB,EAAY,CAAEn+B,UAAW,CACvB6H,MAAOoL,GACNjL,eAAgB,CACjB,CAACC,MAAOi1B,GAAsBl9B,UAAW,CAAC,UAAY,OAEvDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCnM,eAACsR,KAAM,CAAA7R,SAAA,CACPC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,eAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAIF,QAMnB,KCnKO,MAAM0pC,GAAwB7vC,GAAI;;;;;;;;;;;;;;;;;;EAoB5B8vC,GAAsB9vC,GAAI;;;;;;;;EAU1B+vC,GAAgB/vC,GAAI;;;;;;;;;;EAYpBgwC,GAAmBhwC,GAAI;;;;;;;;;EAWvBiwC,GAAoBjwC,GAAI;;;;;;;;;ECZtBiG,qBAAkB4C,aA5BjC,SAAoC3C,GAA4C,IAA3C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAOnV,EAC3E,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,8BAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,wBAAuB9J,SACpDC,cAACgV,GAAS,CAACH,OAAO,wCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAMd,KC8HcJ,qBAAkB4C,aAhJjC,SAAgC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,GACxCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,mCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASimC,GAAuB,CACnFr+B,UAAW,CAAE+J,SAAUA,MAEjB20B,GAAqBr3B,YAAYo3B,IAEnCr0B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAAC6pC,GAA2B,CAAA9pC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6pC,GAA2B,CAAA9pC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,gDAKZ,MAAMiqC,EAAchoC,EAAKioC,wBAGzB,OAAKD,EAAY/gC,MAAM3J,OAYrBY,cAAC6pC,GAA2B,CAAA9pC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EACflG,aAAa,EACbb,SAAUu7B,EAAYv7B,SACtBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO05B,EAAYv7B,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBu5B,wBAAwBhhC,MACnDwF,EAAWiC,EAAgBu5B,wBAAwBx7B,SAEzD,OAAOkC,EAASrR,OACZ,CAGE2qC,wBAAyB,CACvBr5B,WAAYH,EAAew5B,wBAAwBr5B,WACnD3H,MAAO,IAAKwH,EAAew5B,wBAAwBhhC,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+pC,EAAY/gC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,kCAAoCgH,EAAK0M,IACrE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdg0B,EAAiB,CAAE1+B,UAAW,CAC5B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOo2B,GAAuBr+B,UAAW,CAAC,SAAY+J,OACvD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAACC,KAAK,cAnCwBoG,kBAJzBA,eA0CJ,aA1FxBtM,cAAC6pC,GAA2B,CAAA9pC,SAC1BC,cAACyN,GAAW,CAACuB,UAAWA,EACZC,cAAeqG,EAAcvV,SACvCC,cAAA,KAAAD,SAC4DF,EAAvDoV,EAAyD,yCAA3C,4CA6F3B,KChKO,MAAM+0B,GAAmB94B,OAAaC,MAAM,CAC/CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCsFHF,qBAAkB4C,aApEjC,SAAiC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC5C,MAAMuG,EAAY,6BACV8jC,GAAiB13B,YAAYk3B,IAErC,OACEzpC,cAAC6pC,GAA2B,CAAC90B,UAAU,EAAKhV,SAC1CC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,sCAAsCE,SACnDC,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkBq3B,GAClBp3B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCi+B,EAAa,CAAE/+B,UAAW,CACxB6H,MAAO,CACL7M,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOo2B,GAAuBr+B,UAAW,CAAC,UAAY,OAE1DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBnM,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIR,OAMzB,KCqCeF,qBAAkB4C,aAtGjC,SAAkC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACpD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,4BACZ6I,EAAYnP,EAAE,wCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkmC,GAAqB,CAC7Dt+B,UAAW,CAAC0K,GAAIA,MAEVs0B,GAAoB33B,YAAYm3B,IAExC,GAAI9nC,EAAS,OACX5B,cAAC6pC,GAA2B,CAAC90B,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6pC,GAA2B,CAAC90B,UAAU,EAAKhV,SAC1CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKqoC,sBAEzB,OACEnqC,cAAC6pC,GAA2B,CAAC90B,UAAU,EAAKhV,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,MAEpByM,iBAAkBq3B,GAClBp3B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZq3B,EAAgB,CAAEh/B,UAAW,CAC3B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOo2B,GAAuBr+B,UAAW,CAAC,UAAY,OAE1DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAC9BnM,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIR,OAMzB,KCnCeF,qBAAkB4C,aAlEjC,SAA8B3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EACzC,MAAMwqC,EAAiBhnC,EAAMmK,OAAO88B,gBAC9BC,EAAW,CACf,CAAE,uBAAwBzqC,EAAE,iCAC5B,CAAE,iBAAkBA,EAAE,4BAIxB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,wBActBG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oCAEjBS,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNuqC,EAASv+B,KAAKw+B,GACbjqC,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPwqC,EAAQ,IADKj+B,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC/BC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BgoC,KAAkBG,EAAQ,KAAKxqC,SAClEO,eAACoE,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SAAA,CACtBF,EAAE,kBAAkB,IAACG,cAACiG,IAAI,CAACC,KAAK,wBAJAoG,kBAJzBA,oCAuBxC,KCvEek+B,OATf,SAAyB5qC,GAAkB,IAAjB,WAAE6qC,GAAY7qC,EACpC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAE/B,OACI3N,IAAOq/B,GAAYp/B,OAAO0N,EAElC,ECSepZ,sBAbiBC,IAAqD,IAApD,EAAEC,EAAC,SAAE6qC,EAAQ,UAAExqC,EAAU,GAAE,OAAEkF,EAAO,UAAUxF,EAC7E,OAAOI,cAAC0E,IAAM,CACLG,MAAO,aAAe3E,EACtB0E,KAAK,KACLvC,KAAK,iBACL+C,OAAQA,EACR+R,cAAc,IACdlT,KAAMymC,EAAS3qC,SAEdF,EAAE,qBACK,ICkBJF,qBAAkB4C,aArBjC,SAAkC3C,GAAyC,IAAxC,EAAEC,EAAC,SAAEE,EAAQ,qBAAE87B,GAAsBj8B,EACtE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGL77B,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCjCO,MAAM4qC,GAAsBjxC,GAAI;;;;;;;;;;;;;;;;;;;;;;EAwB1BkxC,GAAqBlxC,GAAI;;;;;;;;;;EAYzBmxC,GAAenxC,GAAI;;;;;;;;;;;EAanBoxC,GAAkBpxC,GAAI;;;;;;;;;;;EAatBqxC,GAAkBrxC,GAAI;;;;;;ECrBpBiG,qBAAkB4C,aA9BjC,SAAmC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EAClD,MAAQorC,GAA+Bz4B,YAAYw4B,IAEnD,OACE/qC,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACP07B,GAAc,CACZprC,EAAGA,EACHwX,WAAYxX,EAAE,6CACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAG,IAAEF,EAAE,mBAAmB,KAAGqJ,EAAKgiC,WAClD3zB,WAAY1X,EAAE,kCACd+Y,eAAgBoyB,EAChBvzB,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CAAE6C,GAAI1M,EAAK0M,KAEpB1C,eAAgB,CACd,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAAEigC,aAAcjiC,EAAKiiC,kBAGjE,EACJprC,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAGxD,KCvCO,SAASklC,GAAYvrC,EAAGsrC,GAC7B,OAAQA,GACN,IAAK,uBACH,OAAOtrC,EAAE,gCACX,IAAK,iBACH,OAAOA,EAAE,0BACX,QACE,MAAO,wBAEb,CCoIeF,qBAAkB4C,aApHjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtD,MAAMwqC,EAAiBhnC,EAAMmK,OAAO88B,gBAC9Bc,EAAe/nC,EAAMmK,OAAO89B,cAC5BhlC,EAAW+kC,GAAYvrC,EAAGsrC,GAC1Bn8B,EAAYnP,EAAE,gCAAkC,MAAQwG,EAExDw1B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACxCC,cAACyG,GAAU,CAACN,UAAY,2BAA0BikC,MAClDpqC,cAACmN,GAAoB,CACnBvD,WAAW,MACXC,SAAS,uBAAsB9J,SAE/BC,cAACgV,GAAS,CAACH,OAAS,2BAA0Bu1B,KAAkBe,QAAoBjrC,UAAU,eAI9F,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASqnC,GAAqB,CACxEz/B,UAAW,CAAEigC,aAAcA,KAG7B,OAAIvpC,EAEA5B,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACnEF,EAAE,+BAKLgC,EAEA7B,cAACsrC,GAAyB,CAAEzP,qBAAsBA,EAAqB97B,SACpEF,EAAE,0CAMJiC,EAAKypC,sBAAsBxiC,MAAM3J,OAYpCY,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACpEC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUzM,EAAKypC,sBAAsBh9B,SACrCa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAKypC,sBAAsBh9B,SAAS8B,WAE7CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB+6B,sBAAsBxiC,MACjDwF,EAAWiC,EAAgB+6B,sBAAsBh9B,SAEvD,OAAOkC,EAASrR,OACZ,CAGEmsC,sBAAuB,CACrB76B,WAAYH,EAAeg7B,sBAAsB76B,WACjD3H,MAAO,IAAKwH,EAAeg7B,sBAAsBxiC,SAAU0H,GAC3DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+B,EAAKypC,sBAAsBxiC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC7CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACwrC,GAAa,CAACf,WAAYvhC,EAAKkW,YAC9BlW,EAAKmW,QAAW/e,eAAA,QAAAP,SAAA,CAAM,MAAGC,cAACwrC,GAAa,CAACf,WAAYvhC,EAAKmW,aAAqB,KAFlE/S,gBAIhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKgiC,SADQ5+B,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyrC,GAAuB,CAACf,SAAUxhC,EAAKwiC,cACxC1rC,cAACyE,IAAI,CAACrC,GAAK,2BAA0BgoC,KAAkBe,UAAqBjiC,EAAK0M,KAAK7V,SACpFC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAC2rC,GAA2B,CAACziC,KAAMA,MAREoD,kBARzBA,eAkBJ,aApExBtM,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACpEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SACEF,EAAE,0CAyEZ,KCjHA,MAAMkd,GAA4B,CAChCC,WAAY,SACZC,QAAS,QACTC,SAAU,UA2JGvd,qBAAkB4C,aAvJjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACpD,MAAMwqC,EAAiBhnC,EAAMmK,OAAO88B,gBAC9Bc,EAAe/nC,EAAMmK,OAAO89B,cAC5BhlC,EAAW+kC,GAAYvrC,EAAGsrC,IAGzBptB,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAKnCC,EAAa,2BAA0BikC,KAAkBe,IACzDtP,EAAuB77B,cAACyG,GAAU,CAACN,UAAWA,KAE7CylC,GAAer5B,YAAYs4B,GAAc,CAC9C/b,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACpEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,8BAAgC,MAAQwG,EAAStG,SAC9DC,cAACwS,KAAM,CACLC,cAAe,CACby4B,QAAS,GACT9rB,UAAW,GACXC,QAAS,GACTvR,SAAU,IAGZ8E,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdgtB,aAAcA,EACdD,QAASr4B,EAAOq4B,QAChB9rB,UAAWtD,GAAejJ,EAAOuM,WACjChB,iBAAkBL,GAGhBlL,EAAOwM,UACTlB,EAAUkB,QAAUvD,GAAejJ,EAAOwM,UAG5C,IAAIhB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAUrQ,SAAW2Q,EAErBmtB,EAAY,CAAE1gC,UAAW,CACvB6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAACigC,aAAcA,OAE1D/3B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACvCG,EAAOO,cAAcF,EAAK,EAC1B3e,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEnM,eAACsR,KAAM,CAAA7R,SAAA,CACPO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,UACLhG,UAAYyR,EAAOu5B,QAAW,0BAA4B,eAC1Dj5B,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,cAMXjd,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,gCAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SACzDF,EAAE,yBAGA,OAMnB,KCAeF,sBA5Jf,SAAiCC,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACrD,MAAMwqC,EAAiBhnC,EAAMmK,OAAO88B,gBAC9Bc,EAAe/nC,EAAMmK,OAAO89B,cAC5Bz1B,EAAKxS,EAAMmK,OAAOqI,GAClBvP,EAAW+kC,GAAYvrC,EAAGsrC,GAE1BhlC,EAAa,2BAA0BikC,KAAkBe,IACzDtP,EAAuB77B,cAACyG,GAAU,CAACN,UAAWA,KAE5C0lC,GAAmBt5B,YAAYu4B,GAAiB,CACtDhc,YAAaA,IAAMzrB,EAAQnB,KAAKiE,MAE5B,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASsnC,GAAoB,CAC5D1/B,UAAW,CAAE,GAAM0K,KAGrB,GAAIhU,EACF,OACE5B,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACnEF,EAAE,+BAKT,GAAIgC,EACF,OACE7B,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACnEF,EAAE,0CAOT,IAAIwf,EAAU,KAKd,OAJIvd,EAAKgqC,qBAAqBzsB,UAC5BA,EAAU,IAAInc,KAAKpB,EAAKgqC,qBAAqBzsB,UAI7Crf,cAACsrC,GAAyB,CAACzP,qBAAsBA,EAAqB97B,SACpEO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,+BAAiC,MAAQwG,MAGhDrG,cAACwS,KAAM,CACLC,cAAe,CACby4B,QAASppC,EAAKgqC,qBAAqBZ,QACnC9rB,UAAW,IAAIlc,KAAKpB,EAAKgqC,qBAAqB1sB,WAC9CC,QAASA,GAGXzM,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ,IAAIsL,EAAY,CACdvI,GAAIA,EACJs1B,QAASr4B,EAAOq4B,QAChB9rB,UAAWtD,GAAejJ,EAAOuM,YAG/BvM,EAAOwM,UACTlB,EAAUkB,QAAUvD,GAAejJ,EAAOwM,UAG5CwsB,EAAe,CAAE3gC,UAAW,CAC1B6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAACigC,aAAcA,OAE1D/3B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEnM,eAACsR,KAAM,CAAA7R,SAAA,CACPO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,UACLhG,UAAYyR,EAAOu5B,QAAW,0BAA4B,eAC1Dj5B,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,4BAc9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,gCAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SACzDF,EAAE,yBAGA,QAMnB,IC1IeF,qBAAkB4C,aA5BjC,SAAiC3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACtE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,2BAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,sBAAqB9J,SAClDC,cAACgV,GAAS,CAACH,OAAO,qCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCvCO,MAAMgsC,GAAqBryC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+BzBsyC,GAAoBtyC,GAAI;;;;;;;;;;;EAaxBuyC,GAAcvyC,GAAI;;;;;;;;EAUlBwyC,GAAiBxyC,GAAI;;;;;;;;;EAWrByyC,GAAiBzyC,GAAI;;;;;;EAQrB0yC,GAA8B1yC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgClC2yC,GAA0B3yC,GAAI;;;;;;;;EAU9B4yC,GAA+B5yC,GAAI;;;;;;ECwDjCiG,qBAAkB4C,aAnJjC,SAA6B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACxC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB/J,EAAYnP,EAAE,gCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASyoC,KAC7CQ,GAAkBh6B,YAAY45B,IAEtC,GAAIvqC,EAAS,OACX5B,cAACwsC,GAAwB,CAAAzsC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwsC,GAAwB,CAAAzsC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,6CAKZ,IAAI4sC,EAAW3qC,EAAK4qC,qBAGpB,OAAKD,EAAS1jC,MAAM3J,OAUlBY,cAACwsC,GAAwB,CAAAzsC,SACvBC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUk+B,EAASl+B,SACnBa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOq8B,EAASl+B,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBk8B,qBAAqB3jC,MAChDwF,EAAWiC,EAAgBk8B,qBAAqBn+B,SAEtD,OAAOkC,EAASrR,OACZ,CAGEstC,qBAAsB,CACpBh8B,WAAYH,EAAem8B,qBAAqBh8B,WAChD3H,MAAO,IAAKwH,EAAem8B,qBAAqB3jC,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kCACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN0sC,EAAS1jC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKhD,KACNlG,cAAA,OAAKE,UAAU,aAAYH,SACzBC,cAAA,SAAOiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,oBAHrD8D,gBAMhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAE/B/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKyjC,sBAAsB5jC,MAAMgD,KAAIU,IAAA,IAAGvD,KAAMsS,GAAU/O,EAAA,OACtDzM,cAAA,OAAAD,SAAKC,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEyb,EAAStV,QAAmB,MAG/E5F,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,+BAA8B8G,EAAK0M,eAAe7V,SAC3DC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,kDAGPG,cAACyE,IAAI,CAACrC,GAAK,+BAA8B8G,EAAK0M,KAAK7V,SACjDC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,oDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKhD,OACzBqR,WAAY1X,EAAE,yCACd+Y,eAAgB2zB,EAChB90B,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAO44B,OAGZ,EACJhsC,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAnCfoG,kBAlBzBA,eAwDJ,aAzGxBtM,cAACwsC,GAAwB,CAAAzsC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,yCA8Gd,KCtKO,MAAM+sC,GAAiB17B,OAAaC,MAAM,CAC7CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCiGDF,qBAAkB4C,aAtFH3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,EAAa,UAAElX,GAAWvG,EAAA,OACpHU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACLC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACTlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACX6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE/Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACP6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,WAAW,GACzCrD,gBAAiBla,EAAE,sBAErBG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAIhEF,cAAA,MAAAD,SAAKF,EAAE,sBACPS,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,UACL0lB,QAAS/Y,EAAOjQ,UAChB5C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,wBAEnDG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,WAE3C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACLjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAGlDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,2BAGhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAChBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIV,KCrBEF,qBAAkB4C,aAzDjC,SAA+B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC1C,MAAMuG,EAAY,0BACV0mC,GAAet6B,YAAY05B,IAEnC,OACCjsC,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACxCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,uCAEjBG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIsC,YAAa,GAAI5F,SAAS,GACrD+P,iBAAkBi6B,GAClBh6B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC6gC,EAAW,CAAE3hC,UAAW,CACtB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbkZ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B7W,YAAaqK,EAAOrK,YACpB5F,QAASiQ,EAAOjQ,UAEjBsQ,eAAgB,CACf,CAACC,MAAO44B,OAEX34B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC8sC,GAAuB,CACtBp7B,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,QAMd,KCkDexG,qBAAkB4C,aAtGjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,oCACdsG,EAAY,0BACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS0oC,GAAmB,CAC3D9gC,UAAW,CAAE0K,GAAIA,MAEXm3B,GAAkBx6B,YAAY25B,IAEtC,GAAItqC,EAAS,OACX5B,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKkrC,oBACzBt0C,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAIZ,IAAIsd,EAAY,KACZlJ,EAAYkJ,YACdA,EAAY,IAAIlc,KAAKgT,EAAYkJ,YAEnC,IAAIC,EAAU,KAMd,OALInJ,EAAYmJ,UACdA,EAAU,IAAInc,KAAKgT,EAAYmJ,UAK/Brf,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBsC,YAAa0N,EAAY1N,YACzB4W,UAAWA,EACXC,QAASA,EACTzc,QAASsT,EAAYtT,SAEvB+P,iBAAkBi6B,GAClBh6B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZk6B,EAAc,CAAE7hC,UAAW,CACzB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpB4W,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,WAEhCnM,eAAgB,CACf,CAACC,MAAO44B,OAEX34B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC8sC,GAAuB,CACtBp7B,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,OAMhB,KCyCexG,qBAAkB4C,aA9IjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC7D,MAAMqtC,EAAY7pC,EAAMmK,OAAOqI,GAC/B,IAAI5G,EAAYnP,EAAE,8CAClB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS8oC,GAA6B,CACrElhC,UAAW,CAAE0K,GAAIq3B,MAEXC,GAAyB36B,YAAY85B,KACrCc,GAA8B56B,YAAY+5B,IAGlD,GAAI1qC,EAAS,OACX5B,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMsrC,EAAYtrC,EAAK6qC,sBACjBlkC,EAAU3G,EAAKkrC,oBAErB,IAAIK,EAAoB,CAAC,EASzB,OARI5kC,EAAQkkC,sBAAsB5jC,OAChCN,EAAQkkC,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAK8C,EAAA,OAC9CqhC,EAAkBnkC,EAAK0M,KAAM,CAAI,IAIrC5G,EAAYA,EAAY,MAAQvG,EAAQvC,KAGtClG,cAACwsC,GAAwB,CAACz3B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,MACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,QAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNqtC,EAAUrkC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK0M,MAAMy3B,EACXrtC,cAACiG,IAAI,CAACC,KAAK,eAAehG,UAAU,eAAkBF,cAACiG,IAAI,CAACC,KAAK,WAAWhG,UAAU,cAF1EoM,gBAKhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGf5T,QAAQC,IAAKuQ,EAAK0M,MAAMy3B,GACrBnkC,EAAK0M,MAAMy3B,EAmCbrtC,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,sBAAqBH,SACxCO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,sDACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,kBACZD,QAAQC,IAAIuQ,EAAK0M,IACjB,IAAI03B,EAAapkC,EAAK0M,GACtBu3B,EAA0B,CAAEjiC,UAAW,CACrC6H,MAAO,CACLi6B,oBAAqBC,EACrBtlC,qBAAsB2lC,IAE3Bp6B,eAAgB,CACf,CAACC,MAAOi5B,GAA6BlhC,UAAW,CAAC,GAAM+hC,OACvD75B,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EAChBtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,uDAAwD,CACtE0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,iBAAiB,IAAG,IAC1CrG,EAAE,0DA7ByCyM,gBAjChDtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,wBAAuBH,SAC1CO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,iDACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,eACZ,IAAI20C,EAAapkC,EAAK0M,GACtBs3B,EAAqB,CAAEhiC,UAAW,CAChC6H,MAAO,CACLi6B,oBAAqBC,EACrBtlC,qBAAsB2lC,IAE3Bp6B,eAAgB,CACf,CAACC,MAAOi5B,GAA6BlhC,UAAW,CAAC,GAAM+hC,OACvD75B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,mDAAoD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAG,IACzCrG,EAAE,qDA5B2CyM,kBAZtCA,eA8EJ,YAO5B,KCrHe3M,qBAAkB4C,aA5BjC,SAAkC3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACvE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,4BAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,uBAAsB9J,SACnDC,cAACgV,GAAS,CAACH,OAAO,sCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCxCO,MAAMwtC,GAAsB7zC,GAAI;;;;;;;;;;;;;;;;;;EAoB1B8zC,GAAqB9zC,GAAI;;;;;;;;EAUzB+zC,GAAe/zC,GAAI;;;;;;;;;;EAYnBg0C,GAAkBh0C,GAAI;;;;;;;;;EAWtBi0C,GAAmBj0C,GAAI;;;;;;;;;ECiHrBiG,qBAAkB4C,aAjJjC,SAA8B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACpCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,iCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASiqC,GAAqB,CACjFriC,UAAW,CAAE+J,SAAUA,MAEjB24B,GAAoBr7B,YAAYo7B,IAElCr4B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAAC6tC,GAAyB,CAAA9tC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6tC,GAAyB,CAAA9tC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CAKZ,IAAIiuC,EAAYhsC,EAAKisC,sBAGrB,OAAKD,EAAU/kC,MAAM3J,OAanBY,cAAC6tC,GAAyB,CAAA9tC,SACxBC,cAACyN,GAAW,CACVuB,UAAWA,EACXC,cAAeqG,EACflG,aAAa,EACbb,SAAUu/B,EAAUv/B,SACpBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO09B,EAAUv/B,SAAS8B,WAE5BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBu9B,sBAAsBhlC,MACjDwF,EAAWiC,EAAgBu9B,sBAAsBx/B,SAEvD,OAAOkC,EAASrR,OACZ,CAGE2uC,sBAAuB,CACrBr9B,WAAYH,EAAew9B,sBAAsBr9B,WACjD3H,MAAO,IAAKwH,EAAew9B,sBAAsBhlC,SAAU0H,GAC3DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+tC,EAAU/kC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,gCAAkCgH,EAAK0M,IACnE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdg4B,EAAgB,CAAE1iC,UAAW,CAC3B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOo6B,GAAqBriC,UAAW,CAAC,SAAY+J,OACrD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAJzBA,eA0CJ,aA5FxBtM,cAAC6tC,GAAyB,CAAA9tC,SACxBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,gCACZoP,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SAC0DF,EAArDoV,EAAuD,uCAAzC,0CA+F3B,KCnKO,MAAM+4B,GAAkB98B,OAAaC,MAAM,CAC9CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCoCDF,qBAAkB4C,aA9BF3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC7EU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAChBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIV,KCkCEF,qBAAkB4C,aAlDjC,SAAgC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC3C,MAAMuG,EAAY,2BACV8nC,GAAgB17B,YAAYk7B,IAEpC,OACCztC,cAAC6tC,GAAyB,CAAC94B,UAAU,EAAKhV,SACzCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,wCAEjBG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkBq7B,GAClBp7B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCiiC,EAAY,CAAE/iC,UAAW,CACvB6H,MAAO,CACL7M,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOo6B,GAAqBriC,UAAW,CAAC,UAAY,OAExDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACkuC,GAAwB,CACvBx8B,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMd,KC8BexG,qBAAkB4C,aAhFjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,qCACdsG,EAAY,2BACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkqC,GAAoB,CAC5DtiC,UAAW,CAAE0K,GAAIA,MAEXu4B,GAAmB57B,YAAYm7B,IAEvC,GAAI9rC,EAAS,OACX5B,cAAC6tC,GAAyB,CAAC94B,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC6tC,GAAyB,CAAC94B,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKssC,qBAIzB,OAHA11C,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAAC6tC,GAAyB,CAAC94B,UAAU,EAAKhV,SACxCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,MAEpByM,iBAAkBq7B,GAClBp7B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZs7B,EAAe,CAAEjjC,UAAW,CAC1B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOo6B,GAAqBriC,UAAW,CAAC,UAAY,OAExDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACkuC,GAAwB,CACvBx8B,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,OAMhB,KC9FO,MAAMkoC,GAAsB30C,GAAI;;;;;;;;;;;;;;;;;;;EAqB1B40C,GAAqB50C,GAAI;;;;;;;;;EAWzB60C,GAAe70C,GAAI;;;;;;;;;;;EAanB80C,GAAkB90C,GAAI;;;;;;;;;;EAYtB+0C,GAAmB/0C,GAAI;;;;;;;;;EChBrBiG,qBAAkB4C,aA5BjC,SAAkC3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACvE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAM,eAAcrG,SAC/BC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,4BAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACjBC,SAAS,uBAAsB9J,SAC7CC,cAACgV,GAAS,CAACH,OAAO,sCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC4IeJ,qBAAkB4C,aA7JjC,SAA8B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACpCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,iCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS+qC,GAAqB,CACjFnjC,UAAW,CAAE+J,SAAUA,MAEjBy5B,GAAoBn8B,YAAYk8B,IAElCn5B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAKP,GAAI+B,EAAS,OACX5B,cAAC2uC,GAAyB,CAAA5uC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC2uC,GAAyB,CAAA5uC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CAKZ,IAAIutC,EAAYtrC,EAAK6qC,sBAGrB,OAAKS,EAAUrkC,MAAM3J,OAYnBY,cAAC2uC,GAAyB,CAAA5uC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EACdC,cAAeqG,EACflG,aAAa,EACbb,SAAU6+B,EAAU7+B,SACpBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOg9B,EAAU7+B,SAAS8B,WAE5BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBm8B,sBAAsB5jC,MACjDwF,EAAWiC,EAAgBm8B,sBAAsBp+B,SAEvD,OAAOkC,EAASrR,OACZ,CAGEutC,sBAAuB,CACrBj8B,WAAYH,EAAeo8B,sBAAsBj8B,WACjD3H,MAAO,IAAKwH,EAAeo8B,sBAAsB5jC,SAAU0H,GAC3DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACRO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNqtC,EAAUrkC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK+jB,cACLjtB,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,iBAC1BG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,iBAHbyM,gBAKhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCS,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,gCAAkCgH,EAAK0M,IACnE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAELG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,iCAAmCgH,EAAK0M,IACpE/Q,MAAM,YAAW9E,SACtBF,EAAE,sBAITG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd84B,EAAgB,CAAExjC,UAAW,CAC3B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOk7B,GAAqBnjC,UAAW,CAAC,SAAY+J,OACrD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cA1CYoG,kBATzBA,eAsDJ,aAvGxBtM,cAAC2uC,GAAyB,CAAA5uC,SACxBC,cAACyN,GAAW,CAACuB,UAAWA,EACZC,cAAeqG,EAAcvV,SACvCC,cAAA,KAAAD,SACwDF,EAArDoV,EAAuD,uCAAzC,0CA0GzB,KChLO,MAAM25B,GAAkB19B,OAAaC,MAAM,CAC9CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCqGHF,qBAAkB4C,aAtFjC,SAAgC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC7C,MAAMuG,EAAY,0BACZ6I,EAAYnP,EAAE,qCACZgvC,GAAgBt8B,YAAYg8B,IAEpC,OACEvuC,cAAC2uC,GAAyB,CAAC55B,UAAU,EAAKhV,SACxCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAI+mB,eAAe,GAC1Cta,iBAAkBi8B,GAClBh8B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC6iC,EAAY,CAAE3jC,UAAW,CACvB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,gBAEvB/Z,eAAgB,CACf,CAACC,MAAOk7B,GAAqBnjC,UAAW,CAAC,UAAY,OAExDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,qCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAG/C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIR,QAMrB,KC2CeF,qBAAkB4C,aA3HjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,qCACdsG,EAAY,2BACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgrC,GAAoB,CAC5DpjC,UAAW,CAAE0K,GAAIA,MAEXk5B,GAAmBv8B,YAAYi8B,IAGvC,GAAI5sC,EAAS,OACX5B,cAAC2uC,GAAyB,CAAC55B,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC2uC,GAAyB,CAAC55B,UAAU,EAAKhV,SACxCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,8CAKZ,MAAMqW,EAAcpU,EAAK6F,qBAIzB,OAHAjP,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAAC2uC,GAAyB,CAAC55B,UAAU,EAAKhV,SACxCO,eAACwG,IAAI,CAAA/G,SAAA,CACHO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,IACZtW,QAAQC,IAAIyK,EAAMmK,OAAOqI,OAE5B5V,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB+mB,cAAe/W,EAAY+W,eAE7Bta,iBAAkBi8B,GAClBh8B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZi8B,EAAe,CAAE5jC,UAAW,CAC1B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,gBAEvB/Z,eAAgB,CACf,CAACC,MAAOk7B,GAAqBnjC,UAAW,CAAC,UAAY,OAExDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCnM,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,qCAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAE/C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIN,QAMzB,KC9IO,MAAMkvC,GAA2Br1C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6B/Bs1C,GAA0Bt1C,GAAI;;;;;;;;;;;;;EAe9Bu1C,GAAoBv1C,GAAI;;;;;;;;;;;;;;;EAiBxBw1C,GAAuBx1C,GAAI;;;;;;;;;;;;;;EAgB3By1C,GAAwBz1C,GAAI;;;;;;;;;ECnC1BiG,qBAAkB4C,aA7BjC,SAAsC3C,GAAqF,IAApF,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,QAAEywB,GAAQ,EAAK,UAAErqB,EAAU,2BAA0BvG,EACtH,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACyG,GAAU,CAACN,UAAWA,IACrBqqB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,2BAA0B9J,SACvDC,cAACgV,GAAS,CAACH,OAAS,qCAAoCzR,EAAMmK,OAAO6hC,cACnElvC,UAAU,WAEZ,QAIRF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAMd,KC4IcJ,qBAAkB4C,aA/JjC,SAAmC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACvD,MAAMyvC,EAAyBjsC,EAAMmK,OAAO6hC,YAC5C,IAAIpgC,EAAYnP,EAAE,sCACboV,EAAUC,GAAeC,oBAAS,GACvC,MAAM,QAAEvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASyrC,GAA0B,CACtF7jC,UAAW,CAAE+J,SAAUA,EAAUtN,qBAAsB0nC,MAEjDC,GAAwB/8B,YAAY48B,IAEtC75B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAKP,GAAI+B,EAAS,OACX5B,cAACuvC,GAA6B,CAAC/e,SAAS,EAAKzwB,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACuvC,GAA6B,CAAC/e,SAAS,EAAKzwB,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,mDAKZ,IAAI2vC,EAAgB1tC,EAAK2tC,0BAMzB,OAHAzgC,EAAa,GAAEA,OAFAlN,EAAK6F,qBAEmBzB,OAGlCspC,EAAczmC,MAAM3J,OAYvBY,cAACuvC,GAA6B,CAAC/e,SAAS,EAAKzwB,SAC3CC,cAACyN,GAAW,CACVuB,UAAWA,EACCC,cAAeqG,EACflG,aAAa,EACbb,SAAUihC,EAAcjhC,SACxBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOo/B,EAAcjhC,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBk/B,2BAA2B3mC,MACtDwF,EAAWiC,EAAgBk/B,2BAA2BnhC,SAE5D,OAAOkC,EAASrR,OACZ,CAGEswC,2BAA4B,CAC1Bh/B,WAAYH,EAAem/B,2BAA2Bh/B,WACtD3H,MAAO,IAAKwH,EAAem/B,2BAA2B3mC,SAAU0H,GAChElC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNyvC,EAAczmC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK+jB,cACLjtB,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,iBAC1BG,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,iBAHbyM,gBAKhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,sCAAwCkB,EAAMmK,OAAO6hC,YAAc,IAAMlmC,EAAK0M,IAC1G/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGLG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd05B,EAAoB,CAAEpkC,UAAW,CAC/B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CACEC,MAAO47B,GACP7jC,UAAW,CAAC+J,SAAUA,EAAUtN,qBAAsB0nC,OAExDj8B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAtCUoG,kBATzBA,eAkDJ,aArGxBtM,cAACuvC,GAA6B,CAAC/e,SAAS,EAAKzwB,SAC3CC,cAACyN,GAAW,CAACuB,UAAWA,EACZC,cAAeqG,EAAcvV,SACvCC,cAAA,KAAAD,SAC+DF,EAA1DoV,EAA4D,4CAA9C,+CAwG3B,KChLO,MAAM06B,GAAuBz+B,OAAaC,MAAM,CACnDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCmDHF,qBAAkB4C,aA1CI3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAClGU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0CAEjDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAG/C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAG3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIR,KCcIF,qBAAkB4C,aAnDjC,SAAoC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACxD,MAAM0tC,EAAalqC,EAAMmK,OAAO6hC,YAC1BjpC,EAAa,iCAAgCmnC,KAC3CsC,GAAoBr9B,YAAY08B,IAExC,OACEjvC,cAACuvC,GAA6B,CAACx6B,UAAU,EAAM5O,UAAWA,EAAUpG,SAClEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,yCAAyCE,SACtDC,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAI+mB,eAAe,GAC1Cta,iBAAkBg9B,GAClB/8B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC4jC,EAAgB,CAAE1kC,UAAW,CAC3B6H,MAAO,CACLpL,qBAAsB2lC,EACtBpnC,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,gBAEvB/Z,eAAgB,CACf,CAACC,MAAO47B,GACN7jC,UAAW,CAAC,UAAY,EAAO,qBAAwBoiC,OAE5Dl6B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC6vC,GAA4B,CAC3Bn+B,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACT,OAMhB,KCwCexG,qBAAkB4C,aAtFjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACvD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAElBzP,EAAa,iCADA/C,EAAMmK,OAAO6hC,cAE1BpgC,EAAYnP,EAAE,2CACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS0rC,GAAyB,CACjE9jC,UAAW,CAAE0K,GAAIA,MAEXk6B,GAAuBv9B,YAAY28B,IAG3C,GAAIttC,EAAS,OACX5B,cAACuvC,GAA6B,CAACx6B,UAAU,EAAM5O,UAAWA,EAAUpG,SAClEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACuvC,GAA6B,CAACx6B,UAAU,EAAM5O,UAAWA,EAAUpG,SAClEC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAK8K,yBAIzB,OAHAlU,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACuvC,GAA6B,CAACx6B,UAAU,EAAM5O,UAAWA,EAAUpG,SAClEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClB+mB,cAAe/W,EAAY+W,eAE7Bta,iBAAkBg9B,GAClB/8B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZi9B,EAAmB,CAAE5kC,UAAW,CAC9B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACb+mB,cAAepa,EAAOoa,gBAEvB/Z,eAAgB,CACjB,CAACC,MAAO47B,GACN7jC,UAAW,CAAC,UAAY,EAAO,qBAAwB9H,EAAMmK,OAAO6hC,iBAEvEh8B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC6vC,GAA4B,CAC7Bn+B,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACT,OAMd,KC5DexG,qBAAkB4C,aA5BjC,SAA+B3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACpE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,yBAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,oBAAmB9J,SAChDC,cAACgV,GAAS,CAACH,OAAO,mCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCvCO,MAAMgwC,GAAmBr2C,GAAI;;;;;;;;;;;;;;;;;;EAoBvBs2C,GAAkBt2C,GAAI;;;;;;;;EAUtBu2C,GAAYv2C,GAAI;;;;;;;;;;EAYhBw2C,GAAex2C,GAAI;;;;;;;;;EAWnBy2C,GAAgBz2C,GAAI;;;;;;;;;ECqHlBiG,qBAAkB4C,aAnJjC,SAA2B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACjCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,8BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASysC,GAAkB,CAC9E7kC,UAAW,CAAE+J,SAAUA,MAEjBm7B,GAAiB79B,YAAY49B,IAE/B76B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACqwC,GAAsB,CAAAtwC,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACqwC,GAAsB,CAAAtwC,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,2CAKZ,IAAIywC,EAASxuC,EAAKyuC,mBAGlB,OAAKD,EAAOvnC,MAAM3J,OAahBY,cAACqwC,GAAsB,CAAAtwC,SACrBC,cAACyN,GAAW,CACVuB,UAAWA,EACXC,cAAeqG,EACflG,aAAa,EACbb,SAAU+hC,EAAO/hC,SACjBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOkgC,EAAO/hC,SAAS8B,WAEzBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB+/B,mBAAmBxnC,MAC9CwF,EAAWiC,EAAgB+/B,mBAAmBhiC,SAEpD,OAAOkC,EAASrR,OACZ,CAGEmxC,mBAAoB,CAClB7/B,WAAYH,EAAeggC,mBAAmB7/B,WAC9C3H,MAAO,IAAKwH,EAAeggC,mBAAmBxnC,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNuwC,EAAOvnC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACzBjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,6BAA+BgH,EAAK0M,IAChE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACdw6B,EAAa,CAAEllC,UAAW,CACxB6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAO48B,GAAkB7kC,UAAW,CAAC,SAAY+J,OAClD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAJzBA,eA0CJ,aA5FxBtM,cAACqwC,GAAsB,CAAAtwC,SACrBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,6BACZoP,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACuDF,EAAlDoV,EAAoD,oCAAtC,uCA+F3B,KCrKO,MAAMu7B,GAAet/B,OAAaC,MAAM,CAC3CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCoCDF,qBAAkB4C,aA9BL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC1EU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAChBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIV,KCgCEF,qBAAkB4C,aAlDjC,SAA6B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACxC,MAAMuG,EAAY,wBACVsqC,GAAal+B,YAAY09B,IAEjC,OACCjwC,cAACqwC,GAAsB,CAACt7B,UAAU,EAAKhV,SACtCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,qCAEjBG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkB69B,GAClB59B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCykC,EAAS,CAAEvlC,UAAW,CACpB6H,MAAO,CACL7M,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAO48B,GAAkB7kC,UAAW,CAAC,UAAY,OAErDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAAC0wC,GAAqB,CACpBh/B,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMd,KCmCexG,qBAAkB4C,aAhFjC,SAA8B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAChD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,kCACdsG,EAAY,wBACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS0sC,GAAiB,CACzD9kC,UAAW,CAAE0K,GAAIA,MAEX+6B,GAAgBp+B,YAAY29B,IAEpC,GAAItuC,EAAS,OACX5B,cAACqwC,GAAsB,CAACt7B,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACqwC,GAAsB,CAACt7B,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAK4F,kBAIzB,OAHAhP,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACqwC,GAAsB,CAACt7B,UAAU,EAAKhV,SACrCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,MAEpByM,iBAAkB69B,GAClB59B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ89B,EAAY,CAAEzlC,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAO48B,GAAkB7kC,UAAW,CAAC,UAAY,OAErDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAAC0wC,GAAqB,CACpBh/B,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,OAMhB,KChFexG,sBAXIC,IAAA,IAAC,EAAEC,EAAC,QAAE+wC,EAAO,UAAE1wC,EAAU,IAAIN,EAAA,OAC9CI,cAACyE,IAAI,CAACrC,GAAIwuC,EAAQ7wC,SAChBC,cAAC0E,IAAM,CACLxE,UAAY,UAASA,IACrB2E,MAAM,YAAW9E,SAEdF,EAAE,mBAEF,ICbF,MAAMgxC,GAAkCn3C,GAAI;;;;;;;;;;;;;;;;;;;;;;EAyBtCo3C,GAAiCp3C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwErCq3C,GAA2Br3C,GAAI;;;;;;;;EAU/Bs3C,GAA8Bt3C,GAAI;;;;;;;;EAWlCu3C,GAAiCv3C,GAAI;;;;;;;;;EAYrC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECzF3Bw3C,OApCStxC,IAAsF,IAArF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,gBAAE45B,EAAe,kBAAE15B,GAAkB7X,EACpG8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,cAAA,MAAAD,SAAKF,EAAE,6BACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,gCACjES,eAAA,UACEJ,UAAU,kBACVqP,QAASA,KACP4hC,EAAgB15B,GACbrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAErG,EAAE,oCAEvB,GAGV,ECXSF,qBAAkB4C,aAnBjC,SAAsB3C,GAA0G,IAAzG,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,WAAEgU,EAAU,eAAEC,EAAc,WAAEC,EAAU,gBAAE45B,EAAe,yBAAEC,GAAyBxxC,EAC3H,OACEI,cAAA,UAAQE,UAAU,uCACdkG,MAAOvG,EAAE,mBACT0P,QAASA,KACP2hC,GAAgB,CACZrxC,EAAGA,EACHwX,WAAYrX,cAAA,KAAAD,SAAIsX,IAChBC,eAAgBA,EAChBC,WAAYA,EACZ45B,gBAAiBA,EACjB15B,kBAAmB25B,GACrB,EACJrxC,SACFC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,WAG7B,KCgBemrC,OApCWzxC,IAAwF,IAAvF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,kBAAE+5B,EAAiB,kBAAE75B,GAAkB7X,EACxG8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,cAAA,MAAAD,SAAKF,EAAE,+BACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,kCACjES,eAAA,UACEJ,UAAU,kBACVqP,QAASA,KACP+hC,EAAkB75B,GACfrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,mBAAmB,IAAErG,EAAE,sCAEhC,GAGV,ECXSF,qBAAkB4C,aAnBjC,SAAwB3C,GAA8G,IAA7G,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,WAAEgU,EAAU,eAAEC,EAAc,WAAEC,EAAU,kBAAE+5B,EAAiB,2BAAEC,GAA2B3xC,EACjI,OACEI,cAAA,UAAQE,UAAU,uCACdkG,MAAOvG,EAAE,qBACT0P,QAASA,KACP8hC,GAAkB,CACdxxC,EAAGA,EACHwX,WAAYrX,cAAA,KAAAD,SAAIsX,IAChBC,eAAgBA,EAChBC,WAAYA,EACZ+5B,kBAAmBA,EACnB75B,kBAAmB85B,GACrB,EACJxxC,SACFC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,WAG7B,KC6BevG,qBAAkB4C,aA9CjC,SAAmC3C,GAA6B,IAA5B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,KAAE6F,GAAKtJ,EAC3D,MAAO4xC,GAAkBj/B,YAAY0+B,IAC/B/9B,EAAiB,CACrB,CAAEC,MAAO09B,GAAiC3lC,UAAW,CAAE+J,SAAU/L,EAAK+L,YAGxE,OAAK/L,EAAK+L,SAqBNjV,cAACyxC,GAAe,CACdp6B,WAAYxX,EAAE,+CACd0X,WAAY1X,EAAE,sBACdyxC,kBAAmBE,EACnBD,2BAA4B,CACxBrmC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTX,UAAU,IAGd/B,eAAgBA,KA9BtBlT,cAAC0xC,GAAa,CACZr6B,WAAYxX,EAAE,6CACd0X,WAAY1X,EAAE,oBACdsxC,gBAAiBK,EACjBJ,yBAA0B,CACtBlmC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTX,UAAU,IAGd/B,eAAgBA,IAyB5B,KCXevT,qBAAkB4C,aA7BjC,SAAiC3C,GAAiC,IAAhC,EAACC,EAAC,SAAEE,EAAQ,SAAEgV,GAAS,GAAMnV,EAC7D,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,2BAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACbC,SAAS,sBAAqB9J,SAChDC,cAACgV,GAAS,CAACH,OAAO,qCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCoGeJ,qBAAkB4C,aAxHjC,SAA6B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACxC,MAAMoP,EAAYnP,EAAE,+BACpB,IAAKoV,EAAUC,GAAeC,oBAAS,GACvC,MAAM,QAACvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAaxM,YAASutC,GAAiC,CAC3F3lC,UAAW,CAAC+J,SAAUA,KAGxB,GAAIrT,EAAS,OACX5B,cAAC2xC,GAAwB,CAAA5xC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC2xC,GAAwB,CAAA5xC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,6CAIZ,MAAMyV,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAKD+xC,EAAW9vC,EAAK+vC,qBAEtB,OAAKD,EAAS7oC,MAAM3J,OAYlBY,cAAC2xC,GAAwB,CAAA5xC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EACXC,cAAeqG,EACflG,aAAa,EACbb,SAAUqjC,EAASrjC,SACnBG,WAAYA,KACXoB,EAAU,CACR5E,UAAW,CACTkF,MAAOwhC,EAASrjC,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqhC,qBAAqB9oC,MAChDwF,EAAWiC,EAAgBqhC,qBAAqBtjC,SAEtD,OAAOkC,EAASrR,OACZ,CAGEyyC,qBAAsB,CACpBnhC,WAAYH,EAAeshC,qBAAqBnhC,WAChD3H,MAAO,IAAKwH,EAAeshC,qBAAqB9oC,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,MACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN6xC,EAAS7oC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC8oC,IAAM,CAAClkC,KAAK,KAAKjB,SAAUuF,EAAKmB,0BADnBiC,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKhD,KAAK,IAAClG,cAAA,SACZA,cAAA,SAAOE,UAAU,aAAYH,SAAEmJ,EAAKV,YAAY4a,MAAM,QAFxC9W,gBAIhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+rB,cADQ3oB,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAC9BG,cAAC8xC,GAAU,CAAClB,QAAU,+BAA8B1nC,EAAK0M,OAE7D5V,cAAC+xC,GAA0B,CAAC7oC,KAAMA,MALGoD,kBAXzBA,eAkBJ,aArExBtM,cAAC2xC,GAAwB,CAAA5xC,SACvBC,cAACyN,GAAW,CAACuB,UAAWA,EACZC,cAAeqG,EAAcvV,SACvCC,cAAA,KAAAD,SACyDF,EAApDoV,EAAsD,sCAAxC,yCAwE3B,KCxIO,MAAM+8B,GAAiB9gC,OAAaC,MAAM,CAC7CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,OACbsT,MAAOtT,SCuIIvR,qBAAkB4C,aA/HjC,SAAgC3C,GAY/B,IAZiC,EAChCC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,UACNxL,EAAS,YACT+P,EAAW,cACXoH,EAAa,eACbC,EAAc,sBACdC,EAAsB/N,IAAGA,IAC1B7P,EAEC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIlEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CAClCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MAAKlS,SAAA,CACzBrH,QAAQC,IAAI,gCACZD,QAAQC,IAAIud,GACblW,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYuO,gBAAgB1b,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC5C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,6BAIrEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,mBACLhG,UAAYyR,EAAO2H,iBAAoB,0BAA4B,eACnErH,aAAa,MAAKlS,SAAA,CAC1BC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYuH,kBAAkB1U,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CjM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,oBACLhG,UAAYyR,EAAOwE,kBAAqB,0BAA4B,eACpElE,aAAa,MAAKlS,SAAA,CAC1BC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB4J,EAAYR,mBAAmB3M,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC/CnM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,6BAIxEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,gBAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAOmD,KAAK,SAAQjI,SAC7BF,EAAE,2BAMnB,KCKeF,qBAAkB4C,aA/HjC,SAA+B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACnD,MAAMuG,EAAa,0BACb6I,EAAYnP,EAAE,8BAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KACnC25B,GAA0B1/B,YAAYw+B,KAGtChzB,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,OAAItE,EACF5B,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMlCa,GACFnJ,QAAQC,IAAIkJ,GAEV7B,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAQdG,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAM,GACNsC,YAAa,IAEfmK,iBAAmBq/B,GACnBp/B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdjY,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvB3G,kBAAmBtD,EAAOsD,kBAC1BmD,iBAAkBzG,EAAOyG,iBACzBgwB,cAAevrB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAElBwzB,EAAuB,CAAE/mC,UAAW,CAClC6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAO09B,GAAiC3lC,UAAW,CAAC+J,UAAU,OAElE7B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACkyC,GAAuB,CACtBxgC,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRqD,YAAapU,EACbwb,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,GACX,OAMd,KCgCexG,qBAAkB4C,aA5JjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACpD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAGlB5G,EAAYnP,EAAE,+BAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASwtC,GAAgC,CACxE5lC,UAAW,CAAE0K,GAAIA,MAEXu8B,GAA8B5/B,YAAYy+B,KAG3CjzB,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,GAAItE,EAAS,OACX5B,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAOhB,MAAMuyC,EAAsBtwC,EAAKswC,oBAGjC,IAAI1L,EAAiB,GAChB0L,EAAoBt1B,iBACvB4pB,EAAiB0L,EAAoBt1B,eAAelH,IAGtD,IAAIoJ,EAAmB,GAClBozB,EAAoB94B,mBACvB0F,EAAmBozB,EAAoB94B,iBAAiB1D,IAG1D,IAAIqJ,EAAoB,GAMxB,OALKmzB,EAAoBj8B,oBACvB8I,EAAoBmzB,EAAoBj8B,kBAAkBP,IAK1D5V,cAAC2xC,GAAwB,CAAC58B,UAAU,EAAKhV,SACvCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMksC,EAAoBlsC,KAC1BsC,YAAa4pC,EAAoB5pC,YACjCgc,MAAO4tB,EAAoB5tB,MAC3B1H,eAAgB4pB,EAChBptB,iBAAkB0F,EAClB7I,kBAAmB8I,GAErBtM,iBAAmBq/B,GACnBp/B,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdvI,GAAIA,EACJ1P,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvB3G,kBAAmBtD,EAAOsD,kBAC1BmD,iBAAkBzG,EAAOyG,kBAG3B,SAAS+4B,IACPF,EAA0B,CAAEjnC,UAAW,CACrC6H,MAAOoL,GACNjL,eAAgB,CACjB,CAACC,MAAO09B,GAAiC3lC,UAAW,CAAE+J,UAAU,OAEjE7B,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,CAEA,IAAIuL,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAClBN,EAAUmrB,cAAgBvrB,EAE1Bs0B,GACF,EAEA,IAAI3zB,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAGdu/B,GACF,EACAtyC,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACkyC,GAAuB,CACtBxgC,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRqD,YAAapU,EACbwb,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAjJO,2BAkJP,OAMd,KCnIexG,qBAAkB4C,aA5BjC,SAA+B3C,GAA0C,IAAzC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAMnV,EACpE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,yBAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,oBAAmB9J,SAChDC,cAACgV,GAAS,CAACH,OAAO,mCAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCvCO,MAAMuyC,GAAmB54C,GAAI;;;;;;;;;;;;;;;;;;EAoBvB64C,GAAkB74C,GAAI;;;;;;;;EAUtB84C,GAAY94C,GAAI;;;;;;;;;;EAYhB+4C,GAAe/4C,GAAI;;;;;;;;;EAWnBg5C,GAAgBh5C,GAAI;;;;;;;;;ECqHlBiG,qBAAkB4C,aAnJjC,SAA2B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,GACjCqV,EAAUC,GAAeC,oBAAS,GACvC,MAAMnG,EAAYnP,EAAE,8BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAASgvC,GAAkB,CAC9EpnC,UAAW,CAAE+J,SAAUA,MAEjB09B,GAAiBpgC,YAAYmgC,IAE/Bp9B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAAC4yC,GAAsB,CAAA7yC,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC4yC,GAAsB,CAAA7yC,SACrBC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,2CAKZ,IAAIgzC,EAAS/wC,EAAKgxC,mBAGlB,OAAKD,EAAO9pC,MAAM3J,OAahBY,cAAC4yC,GAAsB,CAAA7yC,SACrBC,cAACyN,GAAW,CACVuB,UAAWA,EACXC,cAAeqG,EACflG,aAAa,EACbb,SAAUskC,EAAOtkC,SACjBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyiC,EAAOtkC,SAAS8B,WAEzBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsiC,mBAAmB/pC,MAC9CwF,EAAWiC,EAAgBsiC,mBAAmBvkC,SAEpD,OAAOkC,EAASrR,OACZ,CAGE0zC,mBAAoB,CAClBpiC,WAAYH,EAAeuiC,mBAAmBpiC,WAC9C3H,MAAO,IAAKwH,EAAeuiC,mBAAmB/pC,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACAO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN8yC,EAAO9pC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACzBjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,6BAA+BgH,EAAK0M,IAChE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd+8B,EAAa,CAAEznC,UAAW,CACxB6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOm/B,GAAkBpnC,UAAW,CAAC,SAAY+J,OAClD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,cAnCYoG,kBAJzBA,eA0CJ,aA5FxBtM,cAAC4yC,GAAsB,CAAA7yC,SACrBC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,6BACZoP,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACuDF,EAAlDoV,EAAoD,oCAAtC,uCA+F3B,KCrKO,MAAM89B,GAAe7hC,OAAaC,MAAM,CAC3CjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCoCDF,qBAAkB4C,aA9BL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC1EU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAChBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIV,KCkCEF,qBAAkB4C,aAlDjC,SAA6B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACxC,MAAMuG,EAAY,wBACV6sC,GAAazgC,YAAYigC,IAEjC,OACCxyC,cAAC4yC,GAAsB,CAAC79B,UAAU,EAAKhV,SACtCO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,qCAEjBG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,IACvByM,iBAAkBogC,GAClBngC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCgnC,EAAS,CAAE9nC,UAAW,CACpB6H,MAAO,CACL7M,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOm/B,GAAkBpnC,UAAW,CAAC,UAAY,OAErDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACizC,GAAqB,CACpBvhC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMd,KCiCexG,qBAAkB4C,aAhFjC,SAA8B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAChD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB5G,EAAYnP,EAAE,kCACdsG,EAAY,wBACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASivC,GAAiB,CACzDrnC,UAAW,CAAE0K,GAAIA,MAEXs9B,GAAgB3gC,YAAYkgC,IAEpC,GAAI7wC,EAAS,OACX5B,cAAC4yC,GAAsB,CAAC79B,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC4yC,GAAsB,CAAC79B,UAAU,EAAKhV,SACrCC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKqxC,kBAIzB,OAHAz6C,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAAC4yC,GAAsB,CAAC79B,UAAU,EAAKhV,SACrCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,MAEpByM,iBAAkBogC,GAClBngC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZqgC,EAAY,CAAEhoC,UAAW,CACvB6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,OAEdgN,eAAgB,CACf,CAACC,MAAOm/B,GAAkBpnC,UAAW,CAAC,UAAY,OAErDkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,0CAA4C,CACzD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACizC,GAAqB,CACpBvhC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,OAMhB,KC/CexG,qBAAkB4C,aAnCjC,SAAsC3C,GAAiC,IAAhC,EAACC,EAAC,SAAEE,EAAQ,SAAEgV,GAAS,GAAMnV,EAClE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,gCAEtB7F,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbO,eAACmE,IAAI,CAACrC,GAAG,qCACHlC,UAAU,8BAA6BH,SAAA,CACzCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,WAAW,IAAErG,EAAE,qBAE1CG,cAACmN,GAAoB,CAACvD,WAAW,MACbC,SAAS,2BAA0B9J,SACrDC,cAACgV,GAAS,CAACH,OAAO,6CAM5B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC/CO,MAAMqzC,GAA0B15C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2C9B25C,GAAyB35C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgE7B4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsC7B45C,GAAsB55C,GAAI;;;;;;;;EAW1B65C,GAAsB75C,GAAI;;;;;;;;EAW1B85C,GAAuB95C,GAAI;;;;;;;;;ECyBzBiG,qBAAkB4C,aA1KjC,SAAkC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAC7C,MAAMoP,EAAYnP,EAAE,oCACpB,IAAKoV,EAAUC,GAAeC,oBAAS,GACvC,MAAM,QAACvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAaxM,YAAS8vC,GAAyB,CACnFloC,UAAW,CAAC+J,SAAUA,GACtB3J,YAAa,kBAERmoC,GAAuBlhC,YAAYihC,IACpCl+B,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAASoQ,EAAuB,YAAX,UACrBrQ,KAAK,KACL2K,QAASA,KAAO2F,GAAY,GAAQE,EAAQ,CAACH,UAAU,GAAO,EAAGlV,SACtEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAQoQ,EAAY,UAAW,YAC/BrQ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KAAO2F,GAAY,GAAOE,EAAQ,CAACH,UAAU,GAAM,EAAGlV,SACpEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAAC0zC,GAA6B,CAAA3zC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC0zC,GAA6B,CAAA3zC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kDAKZ,IAAI6C,EAAgBZ,EAAK6xC,0BAGzB,OAAKjxC,EAAcqG,MAAM3J,OAYvBY,cAAC0zC,GAA6B,CAAA3zC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,oCACdoP,cAAeqG,EACflG,aAAa,EACbb,SAAU7L,EAAc6L,SACxBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO1N,EAAc6L,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBmjC,0BAA0B5qC,MACrDwF,EAAWiC,EAAgBmjC,0BAA0BplC,SAE3D,OAAOkC,EAASrR,OACZ,CAGEu0C,0BAA2B,CACzBjjC,WAAYH,EAAeojC,0BAA0BjjC,WACrD3H,MAAO,IAAKwH,EAAeojC,0BAA0B5qC,SAAU0H,GAC/DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAACC,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,qBACjDG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR2C,EAAcqG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,iBADZ3gB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK47B,eADZx4B,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAELmJ,EAAK88B,UAAanmC,EAAE,qBACrBS,eAAA,OAAAP,SAAA,CACGmJ,EAAKtG,QAAQ,IAAC5C,cAAA,SACfM,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,IAAEF,EAAE,aAAa,IAAEqJ,EAAK0qC,+BAL3CtnC,gBAShBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC9BmJ,EAAK2qC,kBAAkB,IAAC7zC,cAAA,SACzBA,cAACyE,IAAI,CAACrC,GAAI,sCAAwC8G,EAAK0M,GACjD1V,UAAU,sBAAqBH,SAEhCF,EAAE,0BAL8ByM,gBAQvChM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,oCAAsCgH,EAAK0M,IACvE/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,oBACZ,IAAIid,EAAK1M,EAAK0M,GACd69B,EAAoB,CAAEvoC,UAAW,CAC/B6H,MAAO,CACP6C,KACAX,UAAWA,IAEhB/B,eAAgB,CACf,CAACC,MAAOigC,GAAyBloC,UAAW,CAAC,SAAY+J,OACzD7B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZoV,EAAc,qBAAyB,oBAAqB,CAC3D1B,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SACAC,cAACiG,IAAI,CAACC,KAAK,cAnCwBoG,kBA3BzBA,eAiEJ,aArHtBtM,cAAC0zC,GAA6B,CAAA3zC,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EACVC,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SAC8DF,EAAzDoV,EAA2D,2CAA7C,8CAuH1B,KC5LM,MAAM6+B,GAAsB5iC,OAAaC,MAAM,CAClDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,OACb6iC,UAAW7iC,OACRK,IAAI,GACPyiC,YAAa9iC,OACVK,IAAI,GACP3O,QAASsO,OACNK,IAAI,GACP0iC,iBAAkB/iC,OAClBgjC,eAAgBhjC,OACbK,IAAI,GACP4iC,sBAAuBjjC,OACpBK,IAAI,GACP80B,iBAAkBn1B,OACfK,IAAI,GACP6iC,mBAAoBljC,SCsNTvR,qBAAkB4C,aAtNI3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACtIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yCAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAE/C7R,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,cACL0lB,QAAS/Y,EAAOiyB,cAClB9kC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uCAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,WAE7C7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6CAA6CE,SAAA,CAChEC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,cACLhG,UAAYyR,EAAOqiC,YAAe,0BAA4B,eAC9D/hC,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,YACLhG,UAAYyR,EAAOoiC,UAAa,0BAA4B,eAC5D9hC,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,6BAIhEI,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,YACL0lB,QAAS/Y,EAAO0zB,WAClBvmC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0BAEnDG,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,WAGxCU,EAAOmzB,UAAa,GAGrB1lC,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,UACLhG,UAAYyR,EAAO/O,QAAW,0BAA4B,eAC1DqP,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,mBACLhG,UAAYyR,EAAOsiC,iBAAoB,0BAA4B,eACnEhiC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,2BAATyM,gBAC1BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,4BAATyM,mBAE7BtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,6BAIvEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8CAA8CE,SAAA,CACjEC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,iBACLhG,UAAYyR,EAAOuiC,eAAkB,0BAA4B,eACjEjiC,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,0BAGnEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qDAAqDE,SAAA,CACxEC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,wBACLhG,UAAYyR,EAAOwiC,sBAAyB,0BAA4B,eACxEliC,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,wBAAwBiM,UAAU,OAAOjS,UAAU,gCAMhFI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,qBACbxG,aAAchO,EAAOuhC,mBACrBp7C,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,qBAAsBiH,EAAElf,OAAOmiB,cAC7CnK,EAAgB,sBAAsB,EAAK,IAGjDpd,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,OAAOjS,UAAU,wBAcrEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4BAA4BE,SAAA,CAC/CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,mBACLhG,UAAYyR,EAAO00B,iBAAoB,0BAA4B,eACnEp0B,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,wBAEnEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,mBACLhG,UAAYyR,EAAO2H,iBAAoB,0BAA4B,eACnErH,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUM,kBAAkB1U,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC9C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOwE,kBAAqB,0BAA4B,eACpElE,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUzH,mBAAmB3M,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CjM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,gCAK1EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIN,KC/DIF,qBAAkB4C,aArJjC,SAAoC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACjD,MAAMoP,EAAYnP,EAAE,wCACdsG,EAAa,+BACb,QAACvE,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASgV,KACjC+7B,GAAsB9hC,YAAY+gC,IAEzC,GAAI1xC,EAAS,OACX5B,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAElB,OACE9B,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACHC,cAAe,CACbwa,eAAe,EACf6X,aAAa,EACb5+B,KAAM,GACNsC,YAAa,GACburC,UAAW,EACXC,YAAa,EACbpxC,QAAS,EACTqxC,iBAAkB,OAClBE,sBAAuB,EACvBD,eAAgB,GAChBlO,WAAW,EACXoO,mBAAoB,GACpBE,uBAAwB,GACxBjO,iBAAkB,EAClB/sB,iBAAkB,GAClBnD,kBAAmB,IAErBxD,iBAAkBmhC,GAClBlhC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZwhC,EAAmB,CAAEnpC,UAAW,CAC9B6H,MAAO,CACLka,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpB5+B,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBurC,UAAW/9B,SAASnD,EAAOkhC,WAC3BC,YAAah+B,SAASnD,EAAOmhC,aAC7BpxC,QAASoT,SAASnD,EAAOjQ,SACzBqxC,iBAAkBphC,EAAOohC,iBACzBE,sBAAuBn+B,SAASnD,EAAOshC,uBACvCD,eAAgBl+B,SAASnD,EAAOqhC,gBAChClO,UAAWnzB,EAAOmzB,UAClBoO,mBAAoBvhC,EAAOuhC,mBAC3B/N,iBAAkBxzB,EAAOwzB,iBACzB/sB,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,sBAG7B/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACu0C,GAA4B,CAC3Bp3B,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,QAMhB,KCoBexG,qBAAkB4C,aA9HjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACvD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAElB5G,EAAYnP,EAAE,0CAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+vC,GAAwB,CAChEnoC,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,kBAEPkpC,GAAuBjiC,YAAYghC,IAE3C,GAAI3xC,EAAS,OACX5B,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAEpB,IAAI2yC,EAAoB,GACpBv+B,EAAYipB,yBAAyBmV,yBACvCG,EAAqBv+B,EAAYipB,yBAAyBmV,uBAAuB1+B,IAGnF,IAAIoJ,EAAmB,GACnB9I,EAAYipB,yBAAyB7lB,mBACvC0F,EAAoB9I,EAAYipB,yBAAyB7lB,iBAAiB1D,IAG5E,IAAIqJ,EAAoB,GAKxB,OAJI/I,EAAYipB,yBAAyBhpB,oBACvC8I,EAAqB/I,EAAYipB,yBAAyBhpB,kBAAkBP,IAI5E5V,cAAC0zC,GAA6B,CAAC3+B,UAAU,EAAKhV,SAC5CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAe/W,EAAYipB,yBAAyBlS,cACpD6X,YAAa5uB,EAAYipB,yBAAyB2F,YAClD5+B,KAAMgQ,EAAYipB,yBAAyBj5B,KAC3CsC,YAAa0N,EAAYipB,yBAAyB32B,YAClDurC,UAAW79B,EAAYipB,yBAAyB4U,UAChDC,YAAa99B,EAAYipB,yBAAyB6U,YAClDpxC,QAASsT,EAAYipB,yBAAyBv8B,QAC9CqxC,iBAAkB/9B,EAAYipB,yBAAyB8U,iBACvDE,sBAAuBj+B,EAAYipB,yBAAyBgV,sBAC5DD,eAAgBh+B,EAAYipB,yBAAyB+U,eACrDlO,UAAW9vB,EAAYipB,yBAAyB6G,UAChDoO,mBAAoBl+B,EAAYipB,yBAAyBiV,mBACzDE,uBAAwBG,EACxBpO,iBAAkBnwB,EAAYipB,yBAAyBkH,iBACvD/sB,iBAAmB0F,EACnB7I,kBAAmB8I,GAErBtM,iBAAkBmhC,GAClBlhC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ2hC,EAAmB,CAAEtpC,UAAW,CAC9B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBqX,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpB5+B,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBurC,UAAW/9B,SAASnD,EAAOkhC,WAC3BC,YAAah+B,SAASnD,EAAOmhC,aAC7BpxC,QAASoT,SAASnD,EAAOjQ,SACzBqxC,iBAAkBphC,EAAOohC,iBACzBE,sBAAuBn+B,SAASnD,EAAOshC,uBACvCD,eAAgBl+B,SAASnD,EAAOqhC,gBAChClO,UAAWnzB,EAAOmzB,UAClBoO,mBAAoBvhC,EAAOuhC,mBAC3B/N,iBAAkBxzB,EAAOwzB,iBACzB/sB,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,sBAG7B/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACu0C,GAA4B,CAC3Bp3B,UAAWjH,EACXxE,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAlHM,+BAmHN,OAMd,KClGexG,qBAAkB4C,aA/BjC,SAA4C3C,GAExC,IAFyC,EAC3CC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEywB,GAAQ,EAAK,UAAErqB,EAAU,+BAChDvG,EACC,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACyG,GAAU,CAACN,UAAWA,IACrBqqB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,gCAA+B9J,SAC5DC,cAACgV,GAAS,CAACH,OAAO,yCAAyC3U,UAAU,WAErE,QAIRF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCxCO,MAAM20C,GAAgCh7C,GAAI;;;;;;;;;;;;;;;;;;EAqBpCi7C,GAA+Bj7C,GAAI;;;;;;;;EAWnCk7C,GAA6Cl7C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgCjDm7C,GAAyBn7C,GAAI;;;;;;;;EAU7Bo7C,GAA4Bp7C,GAAI;;;;;;;;EAUhCq7C,GAA4Br7C,GAAI;;;;;;EAQhCutC,GAAoBvtC,GAAI;;;;;;;;;;;;;;;;EAmBxBwtC,GAAyBxtC,GAAI;;;;;;EC+B3BiG,qBAAkB4C,aA1HjC,SAAwC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACrD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASoxC,KAC9CM,GAA2BziC,YAAYwiC,IAE9C,GAAInzC,EAAS,OACX5B,cAACi1C,GAAmC,CAACzkB,SAAS,EAAKzwB,SACjDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CAA0CE,SAClEC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACi1C,GAAmC,CAACzkB,SAAS,EAAKzwB,SACjDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CAA0CE,SAClEC,cAAA,KAAAD,SAAIF,EAAE,wDAKZ,MAAMq1C,EAAsBpzC,EAAKqzC,+BAGjC,OAAKD,EAAoBnsC,MAAM3J,OAS7BY,cAACi1C,GAAmC,CAACzkB,SAAS,EAAKzwB,SACjDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CACpBuP,aAAa,EACbb,SAAU2mC,EAAoB3mC,SAC9BG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8kC,EAAoB3mC,SAAS8B,WAEtCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2kC,+BAA+BpsC,MAC1DwF,EAAWiC,EAAgB2kC,+BAA+B5mC,SAEhE,OAAOkC,EAASrR,OACZ,CAGE+1C,+BAAgC,CAC9BzkC,WAAYH,EAAe4kC,+BAA+BzkC,WAC1D3H,MAAO,IAAKwH,EAAe4kC,+BAA+BpsC,SAAU0H,GACpElC,aAGJgC,CAAc,GAEpB,EACFxQ,SACJO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACbO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMhBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRm1C,EAAoBnsC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACtCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,YAAY++B,UAAU,EAAG,KADjBj7B,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BO,eAAA,QAAAP,SAAA,CACEC,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,2CAA6CgH,EAAK0M,IAC9E/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAELG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,yDAA2DgH,EAAK0M,IAC5F/Q,MAAM,YAAW9E,SACtBF,EAAE,6DAGPG,cAAA,UAAQE,UAAU,uCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,wDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKhD,OACzBqR,WAAY1X,EAAE,6CACd+Y,eAAgBo8B,EAChBv9B,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOuhC,OAEV,EACJ30C,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAhCfoG,kBAPzBA,eA0CJ,aAvFtBtM,cAACi1C,GAAmC,CAACzkB,SAAS,EAAKzwB,SACjDC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0CAA0CE,SAClEC,cAAA,KAAAD,SAAIF,EAAE,oDA4Fd,KC3IO,MAAMu1C,GAA4BlkC,OAAaC,MAAM,CACxDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBC+DHF,qBAAkB4C,aAtDS3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OACxFU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAEvDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,2BAGlEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACR2R,EACF1R,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACLzC,SAAO,EACPwQ,SAAUV,EAAa3R,SAEtBF,EAAE,oBAGHG,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAGPG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,sBAGP6R,EACApR,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACjCC,cAAA,UAAAD,SAASF,EAAE,yBAAgC,IAAEA,EAAE,yEAEjD,QAGC,KCCIF,qBAAkB4C,aAlDjC,SAAyC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACpD,MAAMuG,EAAY,sCACXkvC,GAAwB9iC,YAAYsiC,IAE3C,OACE70C,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kDAEjBG,cAACwS,KAAM,CACLC,cAAe,CAAEvM,KAAM,GAAIsC,YAAa,IACxCmK,iBAAkByiC,GAClBxiC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCqpC,EAAqB,CAAEnqC,UAAW,CAChC6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOuhC,OAEXthC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,sDAAwD,CACrE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAACu1C,GAAiC,CAChC7jC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,QAMhB,KCgJexG,qBAAkB4C,aA5LjC,SAA0C3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,qCACZ6I,EAAYnP,EAAE,gDACd,QAAC+B,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASqxC,GAA8B,CACpEzpC,UAAW,CAAE0K,GAAIA,MAEX4/B,GAA4BjjC,YAAYuiC,IAEhD,GAAIlzC,EAAS,OACX5B,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,wDAKZ,MAAMqW,EAAcpU,EAAK2zC,8BAEzB,OACEz1C,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBsC,YAAa0N,EAAY1N,aAE3BmK,iBAAkByiC,GAClBxiC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ2iC,EAAwB,CAAEtqC,UAAW,CACnC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOuhC,OAEXthC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,uDAAyD,CACtE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACu1C,GAAiC,CAChC7jC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,GACX,OAMd,KCuEexG,qBAAkB4C,aApJjC,SAAuD3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACzE,MAAMioC,EAAUzkC,EAAMmK,OAAOqI,GACvBzP,EAAY,qCAClB,IAAI6I,EAAYnP,EAAE,4DAClB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASsxC,GAA4C,CACpF1pC,UAAW,CAAE0K,GAAIiyB,MAEXC,GAAmBv1B,YAAY00B,KAC/Bc,GAAwBx1B,YAAY20B,IAE5C,GAAItlC,EAAS,OACX5B,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMY,EAAgBZ,EAAK6xC,0BACrB1L,EAAQnmC,EAAK2zC,8BAEnB,IAAIC,EAAsB,CAAC,EAa3B,OAZIzN,EAAM0L,0BAA0B5qC,OAClCk/B,EAAM0L,0BAA0B5qC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjD0pC,EAAoBxsC,EAAK0M,KAAM,CAAI,IAIvCld,QAAQC,IAAI,uBACZD,QAAQC,IAAI+8C,GAEZ1mC,EAAa,GAAEA,OAAei5B,EAAM/hC,OAIlClG,cAACs1C,GAAmC,CAACnvC,UAAWA,EAAUpG,SACxDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpB2C,EAAcqG,MACfzI,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,MACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,QAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN2C,EAAcqG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK0M,MAAM8/B,EACX11C,cAACiG,IAAI,CAACC,KAAK,eAAehG,UAAU,eAAkBF,cAACiG,IAAI,CAACC,KAAK,WAAWhG,UAAU,cAF1EoM,gBAKhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGf5T,QAAQC,IAAKuQ,EAAK0M,MAAM8/B,GACrBxsC,EAAK0M,MAAM8/B,EAmCb11C,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,sBAAqBH,SACxCO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,6BACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,kBACZD,QAAQC,IAAIuQ,EAAK0M,IACjB,IAAIuyB,EAAUj/B,EAAK0M,GACnBmyB,EAAoB,CAAE78B,UAAW,CAC/B6H,MAAO,CACLosB,yBAA0BgJ,EAC1BsN,8BAA+B5N,IAEpC30B,eAAgB,CACf,CAACC,MAAOyhC,GAA4C1pC,UAAW,CAAC,GAAM28B,EAAS,UAAY,OAC3Fz0B,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EAChBtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,8BAA+B,CAC7C0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,iBAAiB,IAAG,IAC1CrG,EAAE,iCA7ByCyM,gBAjChDtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,wBAAuBH,SAC1CO,eAACoE,IAAM,CAACG,MAAM,OACZD,KAAK,KACLwB,MAAOvG,EAAE,wBACToE,KAAK,GACLsL,QAASA,KACP7W,QAAQC,IAAI,eACZ,IAAIwvC,EAAUj/B,EAAK0M,GACnBkyB,EAAe,CAAE58B,UAAW,CAC1B6H,MAAO,CACLosB,yBAA0BgJ,EAC1BsN,8BAA+B5N,IAEpC30B,eAAgB,CACf,CAACC,MAAOyhC,GAA4C1pC,UAAW,CAAC,GAAM28B,EAAS,UAAY,OAC3Fz0B,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAAQzT,EAAE,0BAA2B,CACzC0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAAA,CACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAG,IACzCrG,EAAE,4BA5B2CyM,kBAZtCA,eA8EJ,SAzFI,MAiGhC,KC3He3M,qBAAkB4C,aA7BjC,SAA4C3C,GAA4F,IAA1F,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,QAAEywB,GAAQ,EAAK,UAAErqB,EAAU,+BAA+BvG,EACnI,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,gBAEpC,OACE51C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAsBE,SAC1CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACyG,GAAU,CAACN,UAAWA,IACrBqqB,EACAxwB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,gCAA+B9J,SAC5DC,cAACgV,GAAS,CAACH,OAAS,0CAAyC8gC,IAAkBz1C,UAAU,WAE3F,QAGNF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCxCO,MAAM81C,GAAgCn8C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCpCo8C,GAA+Bp8C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsCnC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;EAsB7Bq8C,GAAyBr8C,GAAI;;;;;;;;;;;;;;;;;;;EAqB7Bs8C,GAA4Bt8C,GAAI;;;;;;;;;;;;;;;;;;;EAqBhCu8C,GAA4Bv8C,GAAI;;;;;;ECsB9BiG,qBAAkB4C,aAxIjC,SAAwC3C,GAA0B,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB48B,EAAiBvyC,EAAMmK,OAAOqoC,gBACpC,IAAI5mC,EAAYnP,EAAE,0CAElB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASuyC,GAA+B,CAClF3qC,UAAW,CACTi0B,yBAA0BwW,MAGvBO,GAA2B3jC,YAAY0jC,IAE9C,GAAIr0C,EAAS,OACX5B,cAACm2C,GAAmC,CAAC3lB,SAAS,EAAKzwB,SAC/CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMxC,GAAIa,EAAO,OACT7B,cAACm2C,GAAmC,CAAC3lB,SAAS,EAAKzwB,SAC/CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,0DAMhB,MAAMu2C,EAAqBt0C,EAAKu0C,+BAIhC,OAHArnC,EAAa,GAAEA,OAAelN,EAAKq9B,yBAAyBj5B,OAGvDkwC,EAAmBrtC,MAAM3J,OAW5BY,cAACm2C,GAAmC,CAAC3lB,SAAS,EAAKzwB,SACjDC,cAACyN,GAAW,CAACuB,UAAWA,EACtBT,SAAU6nC,EAAmB7nC,SAC7Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOgmC,EAAmB7nC,SAAS8B,WAErCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB8lC,gCAAgCvtC,MAC3DwF,EAAWiC,EAAgB8lC,gCAAgC/nC,SAEjE,OAAOkC,EAASrR,OACZ,CAGEk3C,gCAAiC,CAC/B5lC,WAAYH,EAAe+lC,gCAAgC5lC,WAC3D3H,MAAO,IAAKwH,EAAe+lC,gCAAgCvtC,SAAU0H,GACrElC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNq2C,EAAmBrtC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAc,IAD9CzM,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK+rB,aAAa,IAACj1B,cAAA,SACpBA,cAAA,QAAME,UAAU,aAAYH,SAAEmJ,EAAK4T,eAAe5W,SAFpCoG,gBAIhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,2CAA6CyzC,EAAiB,IAAMzsC,EAAK0M,IACrG/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAGPG,cAACi8B,GAAY,CACX5kB,WAAYxX,EAAE,uDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CACbmJ,EAAK+rB,aAAa,IAAE/rB,EAAK4T,gBAAkB5T,EAAK4T,eAAe5W,KAAK,IAAClG,cAAA,SACtEM,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBmJ,EAAKkW,UAAU,IAAGlW,EAAKmW,QAAW,MAAQnW,EAAKmW,QAAU,SAG9D9H,WAAY1X,EAAE,4CACd+Y,eAAgBs9B,EAChBta,wBAAyB,CAAE1wB,UAAW,CACpC6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACf,CAACC,MAAO0iC,GAA+B3qC,UAAW,CAAEi0B,yBAA0BwW,IAC9E,CAACxiC,MAAOigC,GAAyBloC,UAAW,CAAC+J,UAAU,UAzBxB3I,kBAXzBA,eAwCJ,aAzFxBtM,cAACm2C,GAAmC,CAAC3lB,SAAS,EAAKzwB,SACjDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,oDA6Fb,KC3JO,MAAM02C,GAA4BrlC,OAAaC,MAAM,CACxDqT,MAAOtT,OACJipB,UAAUt6B,YAAE,0BACZwR,SAASxR,YAAE,uBACX2R,IAAI,KAAsB3R,YAAE,2BAC/Bid,eAAgB5L,OACbG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,yBCuEHF,qBAAkB4C,aA9DS3C,IAAA,IACxC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,UAAElX,GAAWvG,EAAA,OAElGU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,yCACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUsH,gBAAgB1b,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC5C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,6BAIrEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,gCAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC4d,GAAgB,IACjB5d,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KC4BIxG,qBAAkB4C,aAxFjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9B5mC,EAAYnP,EAAE,8CACdsG,EAAa,sCAAqCwvC,KAElD,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KAClCk+B,GAAyBjkC,YAAYwjC,IAE7C,OAAIn0C,EACF5B,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMpCa,EACF7B,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,0DAOdG,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACxDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CAAE+R,MAAO,GAAIpF,UAAW,IAAIlc,MAC3CyP,iBAAkB4jC,GAClB3jC,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBm3B,EAAqB,CAAEtrC,UAAW,CAChC6H,MAAO,CACLosB,yBAA0B/7B,EAAMmK,OAAOqoC,gBACvCpxB,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBsC,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAO0iC,GAA+B3qC,UAAW,CAAC,yBAA4B9H,EAAMmK,OAAOqoC,kBAC5F,CAACziC,MAAOigC,GAAyBloC,UAAW,CAAC,UAAY,OAE5DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,sDAAwD,CACrE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACy2C,GAAiC,CAChCt5B,UAAWrb,EACX4P,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,OAMd,KCyCexG,qBAAkB4C,aA7HjC,SAA0C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC9D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB+/B,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9B5mC,EAAYnP,EAAE,+CACdsG,EAAa,sCAAqCwvC,KAElD,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASwyC,GAA8B,CACtE5qC,UAAW,CAAE0K,GAAIA,MAEX8gC,GAA4BnkC,YAAYyjC,IAEhD,GAAIp0C,EAAS,OACX5B,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMxC,GAAIa,EAAO,OACT7B,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACtDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,0DAMhB,MAAMqW,EAAcpU,EAAK60C,8BAIzB,IAAIv3B,EAAY,KACZlJ,EAAYkJ,YACdA,EAAY,IAAIlc,KAAKgT,EAAYkJ,YAEnC,IAAIC,EAAU,KAKd,OAJInJ,EAAYmJ,UACdA,EAAU,IAAInc,KAAKgT,EAAYmJ,UAI/Brf,cAACm2C,GAAmC,CAAChwC,UAAWA,EAAUpG,SACxDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACb+R,MAAOtO,EAAYsO,MACnB1H,eAAgB5G,EAAY4G,eAAelH,GAC3CwJ,UAAWA,EACXC,QAASA,GAEX1M,iBAAkB4jC,GAClB3jC,SAAUA,CAACC,EAAM7G,KAAyB,IAIlCqT,EAWAD,GAfW,cAAEtM,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAKRwM,EAFAxM,EAAOwM,SACLxM,EAAOwM,mBAAmBnc,KAClB4Y,GAAejJ,EAAOwM,SAKxBxM,EAAOwM,QAKjBD,EADEvM,EAAOuM,qBAAqBlc,KAClB4Y,GAAejJ,EAAOuM,WAGtBvM,EAAOuM,UAGrBs3B,EAAwB,CAAExrC,UAAW,CACnC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB4O,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBsC,UAAWA,EACXC,QAASA,IAEVnM,eAAgB,CACjB,CAACC,MAAO0iC,GAA+B3qC,UAAW,CAAEi0B,yBAA0BwW,IAC9E,CAACxiC,MAAOigC,GAAyBloC,UAAW,CAAE,UAAY,OAE3DkI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,uDAAyD,CACtE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACy2C,GAAiC,CAChCt5B,UAAWrb,EACX4P,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACqB,OAMhD,KC/HA,MAAMilC,WAAsBlpC,YAC1BC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,sBACZD,QAAQC,IAAI6V,EACd,CAGAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwN,EAAYxN,EAAE,kBAEpB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,qBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,8BACNA,EAAE,kCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,+BAYjDpN,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,WAAU9J,SACvCC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAG4N,GAAI,EAAEvU,SACrBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,yBACNA,EAAE,6BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,qCAS5D,EAIUzN,qBAAkB4C,YAAWq0C,KCtErC,SAASrvC,KACd,IAAIsvC,EAAWv4C,aAAayE,QAAQvE,EAAK5C,8BACxB,OAAbi7C,IACFA,GAAW,GAGb,IAAIjvC,EAAY,CACdivC,SAAwB,SAAbA,EACXC,cAAUz3C,EACVkF,gBAAYlF,EACZmF,cAAUnF,EACVmI,QAAS,cAGPqa,EAASvjB,aAAayE,QAAQvE,EAAK7C,2BAQvC,OAPAiM,EAAUmvC,WAAal1B,EAEnBA,IACFja,EAAUJ,QAAU,YAGJlJ,aAAayE,QAAQvE,EAAK9C,iCAE1C,IAAK,WACHkM,EAAUkvC,UAAW,EACrB,MACF,IAAK,aACHlvC,EAAUrD,YAAa,EACvB,MACF,IAAK,WACHqD,EAAUpD,UAAW,EAMzB,OAAOoD,CACT,CCgDejI,qBAAkB4C,aA9DjC,SAA8B3C,GAAmC,IAAlC,EAACC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,QAAEqV,GAAQxV,EAC5D,MACO4W,GAAkBjE,YAAY5Y,GAGrC,OACEqG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBAAmBE,SACvCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC0gB,GAAW,CACVI,gBAAiBtiB,EAAK7C,0BACtB8lB,YAAY,YACZ7H,SAAWzX,IACT7D,aAAaC,QAAQC,EAAK7C,0BAA2BwG,GACrDiT,EAAQ7N,KAA2B,IAGvCjH,eAACuR,IAAKmlC,OAAM,CACV92C,UAAU,cACV0Z,SAAWsB,IACT5c,aAAaC,QAAQC,EAAK9C,+BAAgCwf,EAAM9V,OAAOjD,OACvEzJ,QAAQC,IAAIyc,EAAQ7N,MAA4B,EAChDxH,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAEF,EAAE,0BACpBG,cAAA,UAAQmC,MAAM,WAAUpC,SAAEF,EAAE,uBAC5BG,cAAA,UAAQmC,MAAM,aAAYpC,SAAEF,EAAE,yBAC9BG,cAAA,UAAQmC,MAAM,WAAUpC,SAAEF,EAAE,0BAG9BG,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,iBACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EApChB,uCAqCHtD,SAEDF,EAAE,0CAELG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,UAAS9J,SACtCO,eAACoE,IAAM,CAACG,MAAM,eACN0K,QAASA,IAAMlM,EAAQnB,KAAK,2BAA2BnC,SAAA,CAC7DC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAErG,EAAE,yBAKnDG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCnFO,MAAMk3C,GAAqBv9C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoEzBw9C,GAAoBx9C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4DxBy9C,GAAcz9C,GAAI;;;;;;;;;;;EAalB09C,GAAiB19C,GAAI;;;;;;;;EAUrB29C,GAAwB39C,GAAI;;;;;;;;;EAW5B49C,GAAiB59C,GAAI;;;;;;EClI7B4E,aAAayE,QAAQvE,EAAK5C,+BAC7B0C,aAAaC,QAAQC,EAAK5C,8BAA8B,GAoV3C+D,qBAAkB4C,aA5SjC,SAA0BkK,GAAiB,IAAhB,EAAC5M,EAAC,SAAE2b,GAAS/O,EACtC,MAAOyC,EAAeqoC,GAAoBpiC,oBAAS,GAE7C4D,EADcvV,qBAAWvC,GACA8X,YACzB,QAACnX,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,EAAS,QAAEsF,GAAY9R,YAAS2zC,GAAoB,CAC/E/rC,UAAW3D,KACXiwC,QAAS9+C,QAAQC,OAKZ8+C,GAAuBllC,YAAY8kC,KACnCK,GAAiBnlC,YAAY+kC,IAIpC,GAFAh5C,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAEjE/hB,GAAYE,IAASA,EAAKo6B,SAAW,OACvCl8B,cAAC23C,GAAqB,CAACviC,QAASA,EAAQrV,SACtCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,4BAA4BE,SACpDC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC23C,GAAqB,CAACviC,QAASA,EAAQrV,SACtCC,cAACG,IAAS,CAAAJ,SACRC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,4BAA4BE,SACpDC,cAAA,KAAAD,SAAIF,EAAE,4CAMd,MAAMyV,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAAoE,SAA5DvG,aAAayE,QAAQvE,EAAK5C,8BAA4C,UAAW,YACzFgJ,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAK5C,8BAA8B,GACxDwZ,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAoE,UAA5DvG,aAAayE,QAAQvE,EAAK5C,8BAA6C,UAAW,YAC1FgJ,KAAK,KACL1E,UAAU,OACVqP,QAASA,KACPjR,aAAaC,QAAQC,EAAK5C,8BAA8B,GACxDwZ,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,wBAIP,IAAIq8B,EAAWp6B,EAAKo6B,SAChB3tB,EAAW2tB,EAAS3tB,SAGxB,OAAK2tB,EAASnzB,MAAM3J,OAalBY,cAAC23C,GAAqB,CAACviC,QAASA,EAAQrV,SACtCC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,4BACboP,cAAeqG,EACflG,aAAa,EACbb,SAAUzM,EAAKo6B,SAAS3tB,SACxBW,cAAeA,EACfR,WAAYkpC,UACVL,GAAiB,GACbhpC,EAASE,mBACLqB,EAAU,CACd5E,UAAW,CACTkF,MAAO7B,EAAS8B,aAItBknC,GAAiB,EAAM,EACvBx3C,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNm8B,EAASnzB,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC3B1nB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAK0M,aAAa7V,SAC/CmJ,EAAKmB,uBACLrK,cAAC8oC,IAAM,CAAClkC,KAAM,KAAMjB,SAAUuF,EAAKmB,yBACnCrK,cAAC8oC,IAAM,CAAClkC,KAAM,KAAMvC,KAAK,aAI/B/B,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAA,QAAME,UAAU,OAAMH,SAAEmJ,EAAKoa,WAC7BtjB,cAAA,OAAKE,UAAU,aAAYH,SACzBC,cAAA,KAAGiE,KAAO,UAASiF,EAAK+f,QAAQlpB,SAAEmJ,EAAK+f,UAEvC/f,EAAK4tC,SAAY92C,cAAA,QAAAD,SACfC,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,wBACnC,KACVqJ,EAAK3E,WAAcvE,cAAA,QAAAD,SACjBC,cAACkI,IAAK,CAACrD,MAAM,OAAO3E,UAAU,OAAMH,SAAEF,EAAE,0BAChC,KACVqJ,EAAK1E,SAAYxE,cAAA,QAAAD,SACfC,cAACkI,IAAK,CAACrD,MAAM,YAAW9E,SAAEF,EAAE,wBACpB,OAbEyM,gBAehBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAK2uC,oBACL3uC,EAAK2uC,oBAAoB9rC,KAAK+rC,GAC5B93C,cAAA,OAAAD,SACEO,eAAA,SAAAP,SAAA,CACAC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE,IACpB4xC,EAAa3Y,yBAAyBj5B,KAAM,IAAClG,cAAA,SAC/CA,cAAA,OAAKE,UAAU,cAAaH,SAC1BO,eAAA,SAAAP,SAAA,CACIqL,IAAO0sC,EAAa14B,WAAW/T,OAAO0N,GACtC++B,EAAaz4B,QACb/e,eAAA,QAAAP,SAAA,CAAM,MAAIqL,IAAO0sC,EAAaz4B,SAAShU,OAAO0N,MAC5C,YATAzM,kBAgBV,GAEFpD,EAAK6uC,kBACL7uC,EAAK6uC,kBAAkBhsC,KAAKisC,GAC1Bh4C,cAAA,OAAAD,SACEO,eAAA,SAAAP,SAAA,CACAC,cAACiG,IAAI,CAACC,KAAK,gBAAgB,IAAE,IAC3B8xC,EAAU9V,sBAAsBh8B,KAAM,IAAClG,cAAA,SACzCA,cAAA,OAAKE,UAAU,cAAaH,SAC1BO,eAAA,SAAAP,SAAA,CACIqL,IAAO4sC,EAAU54B,WAAW/T,OAAO0N,GAAa,IAAE,MAClD3N,IAAO4sC,EAAU34B,SAAShU,OAAO0N,GAAY,IAAG,MAChDlZ,EAAE,6BAA8B,KAAIm4C,EAAUC,iCAR5C3rC,kBAcV,KArCUA,gBAwChBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRO,eAAC43C,IAAkB,CAACh4C,UAAU,YAAWH,SAAA,CAEpCmJ,EAAK8f,MACJhpB,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAASnD,EAAK8f,MAAOovB,UAAU,MAAKr4C,SAC3CC,cAAA,QAAAD,SACEC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAK7B,GAGDgD,EAAKmvC,OACJr4C,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAASnD,EAAKmvC,OAAQD,UAAU,MAAKr4C,SAC5CC,cAAA,QAAAD,SACEC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,qBAK3B,GAGNlG,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAASnD,EAAK+f,MAAOmvB,UAAU,MAAKr4C,SAC3CC,cAAA,KAAGiE,KAAM,UAAYiF,EAAK+f,MAAMlpB,SAC9BC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,oBAiBjC5F,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC5BmJ,EAAK2tC,SAEN72C,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAK0M,aAAa7V,SACjDC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAJPG,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAQlCG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,sBACToE,KAAK,GACLsL,QAASA,KACP,IACIsnC,EADAjhC,EAAK1M,EAAK0M,GAGZihC,EAD8D,SAA5Dv4C,aAAayE,QAAQvE,EAAK5C,8BAM9B67C,EAAoB,CAAEvsC,UAAW,CAC/B6H,MAAO,CACL6C,KACAihC,UAAWA,IAEhB3jC,eAAgB,CACf,CAACC,MAAO8jC,GAAoB/rC,UAAW3D,SACvC6L,MAAK6U,IAAe,IAAd,KAAEnmB,GAAMmmB,EAChBvvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACSzT,EAAZg3C,EAAc,iCAAqC,+BAAgC,CAClFtjC,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAEGmJ,EAAK2tC,SACJ72C,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,YACvBrG,EAAE,qBAIPqJ,EAAK2tC,SAAY,GACd72C,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KAnTZ3P,KAAqF,IAApF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,eAAEqB,EAAc,kBAAEnB,GAAkB7X,EACpG8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAKJ,UAAU,YAAWH,SAAA,CACxBC,cAAA,MAAAD,SAAKF,EAAE,4BACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,+BACjES,eAAA,UACEJ,UAAU,iBACVqP,QAASA,KACPqJ,EAAenB,GACZrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,YAAY,IAAErG,EAAE,mCAEzB,GAGV,EAmRwB8Y,CAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,yCACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKovC,WAAW,IAAEpvC,EAAKqvC,aAC3ChhC,WAAY1X,EAAE,8BACd+Y,eAAgB8+B,EAChBjgC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAO8jC,GAAoB/rC,UAAW3D,SAEzC,EACJxH,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBArEnBoG,kBA/GzBA,eAwLJ,aAnOxBtM,cAAC23C,GAAqB,CAACviC,QAASA,EAAQrV,SACtCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,4BACZoP,cAAeqG,EAAcvV,SACzCC,cAAA,KAAAD,SACgE,SAA5DzB,aAAayE,QAAQvE,EAAK5C,8BAA4CiE,EAAE,iCAAmCA,EAAE,yCAsOzH,KCjXO,MAAM24C,GAAiBtnC,OAAaC,MAAM,CAC7C5G,UAAW2G,OACRK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2K,SAAU0G,OACPK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdopB,MAAO/X,OACJ+X,MAAMppB,YAAE,cACRwR,SAASxR,YAAE,yBCmDHF,qBAAkB4C,aA/CJ3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC3EU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAOpH,UAAa,0BAA4B,eAC5D0H,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,WACLhG,UAAYyR,EAAOnH,SAAY,0BAA4B,eAC3DyH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOsX,MAAS,0BAA4B,eACxDhX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,2BAG5DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SAAEF,EAAE,2BAGzB,KCtCX,MAAMsG,GAAY,sBAmEHxG,qBAAkB4C,aAhEjC,SAA4B3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACvC,MAAO64C,GAAclmC,YAAY4kC,IAEjC,OACEn3C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBAAmBE,SACvCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAWA,SAG3BnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACjBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oCAEfG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIyP,KAAM,IACjChD,iBAAkB6lC,GAClB5lC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCysC,EAAW,CAAEvtC,UAAW,CACtB6H,MAAO,CACLxI,UAAWsI,EAAOtI,UAClBC,SAAUqI,EAAOrI,SACjBye,MAAOpW,EAAOoW,QAEf/V,eAAgB,CACf,CAACC,MAAO8jC,GAAoB/rC,UAAW3D,SAE1C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAMqJ,EAAYrJ,EAAK42C,cAAcr1B,QAAQzN,GAC7CvS,EAAQnB,KAAM,uBAAsBiJ,aACpCkI,IAAMC,QAASzT,EAAE,wCAA0C,CACvD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAAC24C,GAAoB,CACnBjnC,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,IACX,iBAU1B,KCnFeyyC,OAFW,CAAC,CAAC,KAAO/4C,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4CAA4C,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,qCAAqC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mDAAmD,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,yCAAyC,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,2CAA2C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oDAAoD,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wDAAwD,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,6CAA6C,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,8BAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,gCAAgC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAA8B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,wCAAwC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,8CAA8C,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,mCAAmC,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,6BAA6B,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,0DAA0D,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,uBAAuB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,uCAAuC,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,0CAA0C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,yBAAyB,KAAO,MAAM,CAAC,KAAOA,YAAE,kBAAkB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,iCAAiC,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,0BAA0B,KAAO,MAAM,CAAC,KAAOA,YAAE,sCAAsC,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,kCAAkC,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,2BAA2B,KAAO,MAAM,CAAC,KAAOA,YAAE,kDAAkD,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,wBAAwB,KAAO,MAAM,CAAC,KAAOA,YAAE,qBAAqB,KAAO,MAAM,CAAC,KAAOA,YAAE,+CAA+C,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,MAAM,CAAC,KAAOA,YAAE,oCAAoC,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,+BAA+B,KAAO,MAAM,CAAC,KAAOA,YAAE,4BAA4B,KAAO,MAAM,CAAC,KAAOA,YAAE,mBAAmB,KAAO,MAAM,CAAC,KAAOA,YAAE,oBAAoB,KAAO,MAAM,CAAC,KAAOA,YAAE,sBAAsB,KAAO,OCsQ1wXF,qBAAkB4C,aAxPG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,gBAAEC,EAAe,cAAEC,GAAezd,EAAA,OAC1HU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0lB,QAAS/Y,EAAOikC,WAEhB92C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yBAEnDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,aAG5CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,aACL0lB,QAAS/Y,EAAOtO,aAChBvE,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,2BAEnDG,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,aAG9CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0lB,QAAS/Y,EAAOrO,WAChBxE,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yBAEnDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,gBAI9C7R,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAOpH,UAAa,0BAA4B,eAC5D0H,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,WACLhG,UAAYyR,EAAOnH,SAAY,0BAA4B,eAC3DyH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACRC,cAACI,IAAKoF,IAAG,CAAAzF,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CC,cAACob,GAAY,CACXzB,SAAU9G,EAAOgmC,YACjBj/B,SAAWpN,GAAS6Q,EAAc,cAAe7Q,GACjDqN,OAAQA,IAAMuD,EAAgB,eAAe,KAE/Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAO2iC,uBAA0B,0BAA4B,eACzEriC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,KACdnC,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,oBACrBG,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,kBACrBG,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,sBAEvBG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOsX,MAAS,0BAA4B,eACxDhX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,YACLhG,UAAYyR,EAAOmnC,UAAa,0BAA4B,eAC5D7mC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,6BAIhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOqX,MAAS,0BAA4B,eACxD/W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,SACLhG,UAAYyR,EAAO0mC,OAAU,0BAA4B,eACzDpmC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOoX,QAAW,0BAA4B,eAC1D9W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,WACLhG,UAAYyR,EAAOonC,SAAY,0BAA4B,eAC3D9mC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOqnC,KAAQ,0BAA4B,eACvD/mC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACVjM,KAAK,UACLhG,UAAYyR,EAAOsnC,QAAW,0BAA4B,eAC1DhnC,aAAa,MAAKlS,SAAA,CACvBC,cAAA,UAAQmC,MAAM,KACZy2C,GAAkB7sC,KAChBktC,GAAWj5C,cAAA,UAAQmC,MAAO82C,EAAQC,KAAKn5C,SAAak5C,EAAQE,MAAf7sC,qBAGnDtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,wBACLhG,UAAYyR,EAAOw4B,sBAAyB,0BAA4B,eACxEl4B,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU4sB,wBAAwBhhC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACpDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,wBAAwBiM,UAAU,OAAOjS,UAAU,0BAG1EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,uBACLhG,UAAYyR,EAAOy8B,qBAAwB,0BAA4B,eACvEn8B,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU4wB,sBAAsBhlC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClDvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,uBAAuBiM,UAAU,OAAOjS,UAAU,6BAI3EI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOynC,kBAAqB,0BAA4B,eACpEnnC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0CAATyM,gBACrB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACvCzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,0BAGtEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAO0nC,UAAa,0BAA4B,eAC5DpnC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,gCAKlEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGJ,KCzJIF,sBA5Ff,SAAyBC,GAAuC,IAAtC,EAAEC,EAAC,MAAEsC,EAAK,KAAEmC,EAAI,WAAEg1C,EAAW,MAAM15C,EAC3D,IAAK0E,EACH,MAAO,GAGT,MAAM6G,EAAY7G,EAAKsR,GAEvB,OACE5V,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACi5C,IAAK,CAAAx5C,SAAA,CACJC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,kBAA0BpL,SACvDuE,EAAK+F,uBACLrK,cAAC8oC,IAAM,CAAClkC,KAAM00C,EAAa,QAAS31C,SAAUW,EAAK+F,yBACnDrK,cAAC8oC,IAAM,CAAClkC,KAAM00C,EAAa,QAASj3C,KAAK,WAG7C/B,eAACi5C,IAAMxyC,KAAI,CAAAhH,SAAA,CACTC,cAAA,MAAIE,UAAU,OAAMH,SAAEuE,EAAKiG,UAAY,IAAMjG,EAAKkG,WAClDxK,cAAA,OAAKE,UAAU,kBAAiBH,SAC9BO,eAAC43C,IAAkB,CAACh4C,UAAU,YAAWH,SAAA,CAEpCuE,EAAK0kB,MACJhpB,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAAS/H,EAAK0kB,MAAOovB,UAAU,MAAKr4C,SAC3CC,cAAA,QAAAD,SACEC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAK7B,GAGD5B,EAAK+zC,OACJr4C,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAAS/H,EAAK+zC,OAAQD,UAAU,MAAKr4C,SAC5CC,cAAA,QAAAD,SACEC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,qBAK3B,GAGNlG,cAAC+F,IAAK3B,KAAI,CAAC+zC,QAAM,EAAAp4C,SACfC,cAACy+B,IAAO,CAACpyB,QAAS/H,EAAK2kB,MAAOmvB,UAAU,MAAKr4C,SAC3CC,cAAA,KAAGiE,KAAM,UAAYK,EAAK2kB,MAAMlpB,SAC9BC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,6BAyC7C,IC9FA,IAAIszC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAiRWz6C,sBA9Qf,SAAoBC,GAA8B,IAA7B,EAACC,EAAC,UAAEsL,EAAS,WAAEkvC,GAAWz6C,EAC3C,MAAM,QAACgC,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS4zC,GAAmB,CACvDhsC,UAAW,CAAC0K,GAAIzK,KAGpB,GAAIvJ,EAAS,OAAO5B,cAAA,KAAAD,SAAIF,EAAE,+BAE1B,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAA,KAAAD,SAAIF,EAAE,8BAEf,MAAMwjB,EAAUvhB,EAAKuhB,QAIrB,OAHA3qB,QAAQC,IAAI,2BACZD,QAAQC,IAAI0qB,GAGV/iB,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CACEy5C,GAAb,YAAfa,EACkCZ,GAAnB,kBAAfY,EACgCX,GAAjB,gBAAfW,EAC4BV,GAAb,YAAfU,EAC8BT,GAAf,cAAfS,EAC4BR,GAAb,YAAfQ,EACuCP,GAAxB,uBAAfO,EAC2BN,GAAZ,WAAfM,EAC6BL,GAAd,aAAfK,EACiCJ,GAAlB,iBAAfI,EAC0BH,GAAX,UAAfG,EAEEF,GADa,wCAAfE,EAGuCD,GAAxB,uBAAfC,EAGFr6C,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,WAC1C9I,KAAK,OACLtB,OAAQy4C,GAAez5C,SAEtBF,EAAE,+BANEyM,gBAqBTtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,sBAAqB9J,SAC9BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,iBAC1C9I,KAAK,OACLtB,OAAQ04C,GAAqB15C,SAEhCF,EAAE,0CANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,mBAAkB9J,SAC3BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,eAC1C9I,KAAK,cACLtB,OAAQ24C,GAAmB35C,SAE9BF,EAAE,wCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,yBAAwB9J,SACjCC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,WAC1C9I,KAAK,OACLtB,OAAQ44C,GAAe55C,SAE1BF,EAAE,oCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,yBAAwB9J,SACjCC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,eAC1C9I,KAAK,aACLtB,OAAuB,gBAAfs5C,EAA6Bt6C,SAExCF,EAAE,wCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,6BAA4B9J,SACrCC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,iBAC1C9I,KAAK,YACLtB,OAAQ84C,GAAe95C,SAE1BF,EAAE,0CANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,iBAAgB9J,SACzBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,YAC1C9I,KAAK,UACLtB,OAAwB,aAAfs5C,EAA2Bt6C,SAEvCF,EAAE,qCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,eAAc9J,SACvBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,UAC1C9I,KAAK,YACLtB,OAAQg5C,GAAch6C,SAEzBF,EAAE,mCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,eAAc9J,SACvBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,UAC1C9I,KAAK,OACLtB,OAAwB,WAAfs5C,EAAyBt6C,SAErCF,EAAE,mCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,iBAAgB9J,SACzBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,YAC1C9I,KAAK,YACLtB,OAAQi5C,GAAgBj6C,SAE3BF,EAAE,qCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,qBAAoB9J,SAC7BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,iBAC1C9I,KAAK,YACLtB,OAAQk5C,GAAoBl6C,SAE/BF,EAAE,0CANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,yCAAwC9J,SACjDC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,wCAC1C9I,KAAK,OACLtB,OAAQo5C,GAA2Cp6C,SAEtDF,EAAE,iEANMyM,kBASV+W,EAAQ9e,WACPvE,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,2BAA0B9J,SACnCC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,sBAC1C9I,KAAK,YACLtB,OAAQ+4C,GAA0B/5C,SAErCF,EAAE,+CANMyM,kBASf,GACFtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,0BAAyB9J,SAClCC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,sBAC1C9I,KAAK,eACLtB,OAAQq5C,GAA0Br6C,SAErCF,EAAE,+CANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,kBAAiB9J,SAC1BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,aAC1C9I,KAAK,OACLtB,OAAQ64C,GAAiB75C,SAE5BF,EAAE,sCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,cAAa9J,SACtBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,SAC1C9I,KAAK,iBACLtB,OAAQm5C,GAAan6C,SAExBF,EAAE,kCANMyM,kBASbtM,cAACmN,GAAoB,CACjBvD,WAAW,SACXC,SAAS,UAAS9J,SAClBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wBAA0B+I,EAAY,SAC1C9I,KAAK,WACLtB,OAAwB,UAAfs5C,EAAwBt6C,SAEpCF,EAAE,kCANMyM,oBAWrB,IC7Oe3M,qBAAkB4C,aAxCjC,SAAoC3C,GAAgH,IAA/G,EAACC,EAAC,MAAEuD,EAAK,SAAErD,EAAQ,KAAEy6C,EAAI,UAAEr0C,EAAU,sBAAqB,qBAAE01B,EAAqB,GAAE,WAAEwe,EAAW,GAAE,KAAE/1C,EAAK,CAAC,GAAE1E,EAC/I,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAC/B,IAAIC,EAAc,GAUlB,OATIp2C,IACFo2C,EAAe,GAAEp2C,EAAKiG,aAAajG,EAAKkG,YAG1CrE,EAAY7H,aAAayE,QAAQvE,EAAK1C,kCACjCqK,IACHA,EAAY,uBAIZnG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOs0C,EAAY36C,SAC9BO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCy6C,GAAex6C,cAACyG,GAAU,CAACN,UAAWA,IACvC01B,OAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAMA,IACxBtE,cAAC46C,GAAW,CACVP,WAAYA,EACZlvC,UAAWA,gBAQ3B,KC4HexL,qBAAkB4C,aAhKjC,SAAgC3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACzC,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,WAEb,QAACz4C,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS4zC,GAAmB,CACzDhsC,UAAW,CAAC0K,GAAIzK,GAChBG,YAAa,kBAERuvC,GAAiBtoC,YAAY6kC,IAEpC,GAAIx1C,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAWt6C,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAWt6C,SAAA,CACjDrH,QAAQC,IAAIkJ,GACbvB,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,MAAMwjB,EAAUvhB,EAAKuhB,QACrB3qB,QAAQC,IAAI0qB,GAIZ,IAAIw1B,EAAc,KACdx1B,EAAQw1B,cACVA,EAAc,IAAI31C,KAAKmgB,EAAQw1B,cAGjC,IAAIpmC,EAAgB,CAClBqkC,SAAUzzB,EAAQyzB,SAClBvyC,WAAY8e,EAAQ9e,WACpBC,SAAU6e,EAAQ7e,SAClB+F,UAAW8Y,EAAQ9Y,UACnBC,SAAU6Y,EAAQ7Y,SAClBye,MAAO5F,EAAQ4F,MACf4vB,YAAaA,EACbkC,OAAQ13B,EAAQ03B,OAChBjC,UAAWz1B,EAAQy1B,UACnB9vB,MAAO3F,EAAQ2F,MACfqvB,OAAQh1B,EAAQg1B,OAChBtvB,QAAS1F,EAAQ0F,QACjBgwB,SAAU11B,EAAQ01B,SAClBC,KAAM31B,EAAQ21B,KACdC,QAAS51B,EAAQ41B,QACjBI,UAAWh2B,EAAQg2B,WAerB,OAZIh2B,EAAQ8mB,wBACV13B,EAAc03B,sBAAwB9mB,EAAQ8mB,sBAAsBv0B,IAGlEyN,EAAQ+qB,uBACV37B,EAAc27B,qBAAuB/qB,EAAQ+qB,qBAAqBx4B,IAGhEyN,EAAQ+1B,oBACV3mC,EAAc2mC,kBAAoB/1B,EAAQ+1B,kBAAkBxjC,IAI5D5V,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EAAWt6C,SAEvBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAGjBG,cAACwS,KAAM,CACHC,cAAeA,EACfE,iBAAkB6lC,GAClB5lC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAIzK,EACJ2rC,SAAUjkC,EAAOikC,SACjBvyC,WAAYsO,EAAOtO,WACnBC,SAAUqO,EAAOrO,SACjB+F,UAAWsI,EAAOtI,UAClBC,SAAUqI,EAAOrI,SACjBye,MAAOpW,EAAOoW,MACd8xB,OAAQloC,EAAOkoC,OACfjC,UAAWjmC,EAAOimC,UAClB9vB,MAAOnW,EAAOmW,MACdqvB,OAAQxlC,EAAOwlC,OACftvB,QAASlW,EAAOkW,QAChBgwB,SAAUlmC,EAAOkmC,SACjBC,KAAMnmC,EAAOmmC,KACbC,QAASpmC,EAAOomC,QAChBI,UAAWxmC,EAAOwmC,UAClBlP,sBAAuBt3B,EAAOs3B,sBAC9BiE,qBAAsBv7B,EAAOu7B,qBAC7BgL,kBAAmBvmC,EAAOumC,mBAGxBvmC,EAAOgmC,cACTmC,EAAwB,YAAIl/B,GAAejJ,EAAOgmC,cAGpDgC,EAAc,CAAE3vC,UAAW,CACzB6H,MAAOioC,GACN9nC,eAAgB,CAEf,CAACC,MAAO8jC,GAAoB/rC,UAAW3D,MAEvC,CAAC4L,MAAO+jC,GAAmBhsC,UAAW,CAAC0K,GAAIzK,OAE9CiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACi7C,GAA2B,CAC1BvpC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWrb,GACX,QAMhB,KC/HenC,qBAAkB4C,aAnCQ3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,UAAEvL,EAAS,cAAEmX,EAAa,eAAEC,EAAc,sBAAEC,EAAsB/N,IAAGA,IAAG7P,EAAA,OAC1IU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,eAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAO3E,UAAU,aAAYH,SACxCF,EAAE,sBAGPG,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,yBAIJ,KC2GIF,qBAAkB4C,aA3IjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACvD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,UACbrrC,EAAYnP,EAAE,oCACdsG,EAAa,uBAAsBgF,aAEnC,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS4zC,GAAmB,CACzDhsC,UAAW,CAAC0K,GAAIzK,MAEX0vC,GAAiBtoC,YAAY6kC,KAG7Br5B,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAIzC,GAAItE,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAWt6C,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAWt6C,SAAA,CACjDrH,QAAQC,IAAIkJ,GACbvB,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,MAAMwjB,EAAUvhB,EAAKuhB,QAGrB,OAFA3qB,QAAQC,IAAI0qB,GAGVrjB,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EAAWt6C,SAEvBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACHC,cAAe,CAAC,EAEhBG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAIsL,EAAY,CACdvI,GAAIzK,GAGN,SAAS+vC,IACPL,EAAc,CAAE3vC,UAAW,CACzB6H,MAAOoL,GACNjL,eAAgB,CAEf,CAACC,MAAO8jC,GAAoB/rC,UAAW3D,MAEvC,CAAC4L,MAAO+jC,GAAmBhsC,UAAW,CAAC0K,GAAIzK,OAE9CiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAM,uBAAsBiJ,aACpCkI,IAAMC,QAASzT,EAAE,yCAA2C,CACxD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAExB,CAEA,IAAIuL,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAClBN,EAAUmrB,cAAgBvrB,EAE1Bm9B,GACF,EAEA,IAAIx8B,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAEdooC,GACF,EACFn7C,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEmB,GAAQpG,EAAA,OACxBzM,cAACm7C,GAAgC,CAC/BzpC,aAAcA,EACdmB,OAAQA,EACRsK,UAAWrb,EACXwb,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,GACX,QAMhB,KChJexG,sBAJeC,IAAA,IAAC,EAAEC,GAAGD,EAAA,OAChCI,cAACyG,GAAU,CAACN,UAAU,uBAAwB,ICOnCxG,sBAXMC,IAA0B,IAAzB,EAAEC,EAAC,aAAEsrC,GAAcvrC,EACvC,OAAQurC,GACN,IAAK,uBACH,OAAOtrC,EAAE,gCACX,IAAK,iBACH,OAAOA,EAAE,0BACX,QACE,OAAOA,EAAE,iCACb,ICRK,MAAMu7C,GAAuC1hD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECoJzCiG,qBAAkB4C,aAzHjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACrD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB/J,EAAYnP,EAAE,8CAEdsL,EAAY/H,EAAMmK,OAAOktC,YACzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS83C,GAAsC,CACzFlwC,UAAW,CACTmY,QAASlY,GAEXG,YAAa,iBAIf,GAAI1J,EAAS,OAAO5B,cAAA,KAAAD,SAAIF,EAAE,+BAE1B,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAA,KAAAD,SAAIF,EAAE,8BAGfnH,QAAQC,IAAImJ,GAEZ,MAAMuhB,EAAUvhB,EAAKuhB,QACfg4B,EAAoBv5C,EAAKw5C,yBAE/B,OACEt7C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAASzK,SAC7DC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACu7C,GAAqB,QAG1Bj7C,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAGVs7C,EAAkBtyC,MAAM3J,OAO1BY,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAU8sC,EAAkB9sC,SAC5Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAKw5C,yBAAyB/sC,SAAS8B,WAEhDC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB8qC,yBAAyBvyC,MACpDwF,EAAWiC,EAAgB8qC,yBAAyB/sC,SAE1D,OAAOkC,EAASrR,OACZ,CAGEk8C,yBAA0B,CACxB5qC,WAAYH,EAAe+qC,yBAAyB5qC,WACpD3H,MAAO,IAAKwH,EAAe+qC,yBAAyBvyC,SAAU0H,GAC9DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,2BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,2BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,gEACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAACC,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,0BAJnCyM,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNs7C,EAAkBtyC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACpCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACw7C,GAAY,CAACrQ,aAAcjiC,EAAK4E,SAASq9B,gBAD5B7+B,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKuyC,cAAcpwC,OAAO0N,IADpBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKwyC,WAER17C,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyrC,GAAuB,CAACf,SAAUxhC,EAAK4E,SAAS49B,YAAaxrC,UAAU,gBAD1DoM,kBAVFA,eAaJ,WA1DpBtM,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,2DA+DhBS,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,qBACXlvC,UAAW/H,EAAMmK,OAAOktC,yBAQxC,KC/IO,MAAMkB,GAAkCjiD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkEtCkiD,GAA8BliD,GAAI;;;;;;;;;;;EClElCmiD,GAAyCniD,GAAI;;;;;;;;;EAY7CoiD,GAAsCpiD,GAAI;;;;;;;;EAW1CqiD,GAAsCriD,GAAI;;;;;;;;EAW1CsiD,GAAsCtiD,GAAI;;;;;;EC0CxCiG,qBAAkB4C,aA3DjC,SAAwC3C,GAA+F,IAA9F,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,cAAEk8C,EAAc,GAAE,qBAAEpgB,EAAoB,aAAEtP,GAAa,GAAO3sB,EAClI,MAAMuL,EAAY/H,EAAMmK,OAAOktC,YAEzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4zC,GAAmB,CAC3DhsC,UAAW,CAAE0K,GAAIzK,KAGnB,GAAIvJ,EAAS,OAAO5B,cAAA,KAAAD,SAAIF,EAAE,+BAE1B,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAA,KAAAD,SAAIF,EAAE,8BAGf,MAAMwjB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAASzK,SAC7DO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCwsB,EACAvsB,cAACyG,GAAU,CAACN,UAAY,uBAAsBgF,qBAC9CnL,cAACu7C,GAAqB,IAEvB1f,EACEogB,IAAoB1vB,EACrBvsB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,4BAA2B9J,SACxDC,cAACgV,GAAS,CACRH,OAAS,uBAAsBzR,EAAMmK,OAAOktC,4BAA4BwB,iBACxEnnC,WAAYjV,EAAE,gDACdK,UAAU,WAGZ,QAIRI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,eACXlvC,UAAWA,gBAQ3B,KCRexL,qBAAkB4C,aApDO3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,GAASjT,EAAA,OACpFU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOuqC,OAAU,0BAA4B,eACzDjqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,4BAI1DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOwqC,OAAU,0BAA4B,eACzDlqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uCAAuCE,SAAA,CAC1DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,MACLhG,UAAYyR,EAAOyqC,IAAO,0BAA4B,eACtDnqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,gCAK5DF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAOJ,KCkGIF,qBAAkB4C,aA1IjC,SAAoC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACxD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB5N,EAAY/H,EAAMmK,OAAOktC,YAEzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASq4C,GAAiC,CACzEzwC,UAAW,CAAEmY,QAASlY,GACtBG,YAAa,kBAGP+wC,GAA6B9pC,YAAYqpC,KACzCU,GAAoC/pC,YAAYypC,IAExD,GAAIp6C,EAAS,OACX5B,cAACu8C,GAA+B,CAAAx8C,SAC9BC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEVvB,eAACi8C,GAA+B,CAAAx8C,SAAA,CAC9BC,cAAA,KAAAD,SAAIF,EAAE,+BAAiCG,cAAA,KAAAD,SAAIF,EAAE,iCAKnD,MACM28C,EADsB16C,EAAK26C,oBACc1zC,MAAM,GAAGG,KAClDwzC,EAAWF,EAAmBE,SAGpC,OAFAhkD,QAAQC,IAAI6jD,GAGVl8C,eAACi8C,GAA+B,CAACN,cAAeO,EAAmB5mC,GAAG7V,SAAA,CACpEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,yCAAyCE,SACtDC,cAACwS,KAAM,CACLC,cAAe,CACb0pC,OAAQK,EAAmBL,OAC3BD,OAAQM,EAAmBN,OAC3BE,IAAKI,EAAmBJ,KAG1BxpC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAI4mC,EAAmB5mC,GACvBumC,OAAQtpC,EAAOspC,OACfD,OAAQrpC,EAAOqpC,OACfE,IAAKvpC,EAAOupC,KAGdC,EAAyB,CAAEnxC,UAAW,CACpC6H,MAAOioC,GACN9nC,eAAgB,CAEf,CAACC,MAAOwoC,GAAiCzwC,UAAW,CAAEmY,QAASlY,OAElEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sDAAwD,CACrE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC28C,GAA+B,CAC9BjrC,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,GACR,MAIN6pC,EAAS3zC,MAAM3J,OAAUY,cAAA,MAAAD,SAAKF,EAAE,oDAA0D,GAC5FG,cAACI,IAAKC,IAAG,CAAAN,SACR28C,EAAS3zC,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC3BhoB,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwG,IAAI,CAACV,MAAO8C,EAAK0zC,UAAU78C,SAAA,CAC1BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,2DAA2D,IAAEuL,IAAOlC,EAAK2zC,eAAexxC,OAAO0N,GAClG/Y,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASlD,EAAKmD,eAElE/L,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,SACNR,KAAK,SACLkL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,+DACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAK0zC,YACzBrlC,WAAY1X,EAAE,oDACd+Y,eAAgB0jC,EAChB7kC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOwoC,GAAiCzwC,UAAW,CAAEmY,QAASlY,OAGnE,EACFpL,SAEFC,cAACiG,IAAI,CAACC,KAAK,cAEblG,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,mBAA2BqxC,EAAmB5mC,oBAAoB1M,EAAK0M,KAAK7V,SAC3GC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,YAAW9E,SAEdF,EAAE,2BAKJ,QAKnB,KC7EeF,qBAAkB4C,aAjEc3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAChJU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sDAAsDE,SAAA,CACzEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAOirC,UAAa,0BAA4B,eAC5Dn7B,YAAa5hB,EAAE,kEACfoS,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2DAA2DE,SAAA,CAC9EC,cAACob,GAAY,CACXzB,SAAU9G,EAAOgqC,cACjBjjC,SAAWpN,GAAS6Q,EAAc,gBAAiB7Q,GACnDqN,OAAQA,IAAMuD,EAAgB,iBAAiB,KAEjDpd,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,OAAOjS,UAAU,6BAIpEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oDAAoDE,SAAA,CACvEC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbxG,aAAchO,EAAOxG,QACrBrT,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,UAAWiH,EAAElf,OAAOmiB,cAClCnK,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,+BAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIN,KCOIF,qBAAkB4C,aArEjC,SAA8C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAClE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBwB,EAAgB74C,EAAMmK,OAAOuvC,gBAC7B32C,EAAa,uBAAsBgF,mBAElC4xC,GAAmCxqC,YAAYupC,IAEtD,OACE97C,cAACu8C,GAA+B,CAAChwB,cAAc,EAAKxsB,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,0DAEjBG,cAACwS,KAAM,CACLC,cAAe,CACbmqC,UAAW,GACXvwC,QAAS,GACTwwC,cAAe,IAAI35C,MAGrB0P,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZkqC,EAAgC,CAAE7xC,UAAW,CAC3C6H,MAAO,CACLypC,mBAAoBP,EACpBW,UAAW/pC,EAAOmqC,SAClB3wC,QAASwG,EAAOxG,QAChBwwC,cAAe/gC,GAAejJ,EAAOgqC,iBAEtC3pC,eAAgB,CACjB,CAACC,MAAOwoC,GAAiCzwC,UAAW,CAAEmY,QAASlY,OAEhEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8DAAgE,CAC7E0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,WAAE4U,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OAC5EzM,cAACi9C,GAAsC,CACrCvrC,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EACZrK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GAE4B,QAMrD,KC+BexG,qBAAkB4C,aAhGjC,SAA+C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACnE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzByC,EAAY95C,EAAMmK,OAAOqI,GACzBzP,EAAa,uBAAsBgF,mBAEnC,QAAEvJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu4C,GAAwC,CAChF3wC,UAAW,CAAC,GAAMgyC,MAEbC,GAAmC5qC,YAAYwpC,IAEtD,GAAIn6C,EAAS,OACX5B,cAACu8C,GAA+B,CAAAx8C,SAC9BC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEVvB,eAACi8C,GAA+B,CAAAx8C,SAAA,CAC9BC,cAAA,KAAAD,SAAIF,EAAE,+BAAiCG,cAAA,KAAAD,SAAIF,EAAE,iCAKnD,MAAMu9C,EAAUt7C,EAAKu7C,0BAIrB,IAAIC,EAAW,KAKf,OAJIF,EAAQP,gBACVS,EAAW,IAAIp6C,KAAKk6C,EAAQP,gBAI5B78C,cAACu8C,GAA+B,CAAChwB,cAAc,EAAKxsB,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,2DAEjBG,cAACwS,KAAM,CACLC,cAAe,CACbmqC,UAAWQ,EAAQR,UACnBvwC,QAAS+wC,EAAQ/wC,QACjBwwC,cAAeS,GAGjB1qC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZsqC,EAAgC,CAAEjyC,UAAW,CAC3C6H,MAAO,CACL6C,GAAIsnC,EACJN,UAAW/pC,EAAOmqC,SAClB3wC,QAASwG,EAAOxG,QAChBwwC,cAAe/gC,GAAejJ,EAAOgqC,iBAEtC3pC,eAAgB,CACjB,CAACC,MAAOwoC,GAAiCzwC,UAAW,CAAEmY,QAASlY,OAEhEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,+DAAiE,CAC9E0T,SAAUF,IAAMG,SAASC,eAE7BpQ,EAAQnB,KAAKiE,GACb2M,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,WAAE4U,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OAC5EzM,cAACi9C,GAAsC,CACrCvrC,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EACZrK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GAE4B,QAMrD,KC1FexG,sBAbf,SAA2BC,GAAiB,IAAhB,EAAEC,EAAC,OAAEwI,GAAQzI,EACvC,OAAQyI,GACN,IAAK,YACH,OAAOrI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,gEACnC,IAAK,SACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,6DACnC,IAAK,YACH,OAAOG,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,gEACnC,QACE,OAAOA,EAAE,iEAEf,IC0BeF,qBAAkB4C,aA9BjC,SAA2B3C,GAAqE,IAApE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEsjB,EAAQ,CAAC,EAAC,qBAAEwY,GAAsBj8B,EAC3F,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAE/B,OACEz6C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQC,SAASvjB,SACnCC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,UACXlvC,UAAWA,gBAQ3B,KCzCO,MAAMoyC,GAA4B7jD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECChC8jD,GAAsC9jD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsF1C+jD,GAA2B/jD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+B/BgkD,GAAmChkD,GAAI;;;;;;EASvCikD,GAAkCjkD,GAAI;;;;;;;;EAUtCkkD,GAA4ClkD,GAAI;;;;;;ECvE9CiG,qBAAkB4C,aAjDjC,SAA2B3C,GAA6B,IAA5B,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,EAAI,QAAEma,GAAQzjB,EACnD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,kBACxBgzC,GAAgCtrC,YAAYmrC,IAEnD,OACE19C,cAAA,UAAQE,UAAU,sCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,wDACdyX,eAAgBtX,cAAA,KAAAD,SACdO,eAACyF,IAAI,CAAAhG,SAAA,CACHO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,gBAAgB,KAAIuL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAa,IAAG,IAC/D3N,IAAOlC,EAAKsD,KAAO,IAAMtD,EAAK40C,aAAajxC,WAAWxB,OAAOT,MAEhEtK,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,iBAAiB,KAAGqJ,EAAK40C,aAAar2C,sBAAsBvB,QAEjE5F,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CACPF,EAAE,oBAAoB,KAAGqJ,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,aAIhGqR,WAAY1X,EAAE,oDACd+Y,eAAgBilC,EAChBpmC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAOoqC,GACPryC,UAAW,CAAEmY,QAASA,EAAQzN,QAGpC,EACJ7V,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAGxD,KCjEO,SAAS63C,GAA6BhH,GAC3C,IAAInvC,EAAY,CACdrD,gBAAYlF,EACZmF,cAAUnF,EACV03C,gBAAY13C,GAOd,OAJI03C,IACFnvC,EAAUmvC,WAAaA,GAGlBnvC,CACT,CAEO,SAASo2C,GAAoCC,EAAkBzxC,GACpE,MAAO,CACLsxC,aAAcG,EACdzxC,KAAMA,EAEV,CCIA,SAAS0xC,GAAmBt+C,GASxB,IATyB,EAC3BC,EAAC,MACDuD,EAAK,iBACL+6C,EAAgB,KAChBj1C,EAAI,OACJb,EAAM,wBACN+1C,EAAwB3uC,IAAGA,GAAC,yBAC5B4uC,GAAyB,EAAK,8BAC9BC,GAA8B,GAC/B1+C,EACC,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAC1BiuC,EAAar3C,EAAMmK,OAAOktC,WAChC,IAAIvnC,EAAiB,GAErBkrC,GAAwB,GAGpBC,GACFnrC,EAAehR,KAAK,CAClBiR,MAAOoqC,GACPryC,UAAW,CAACmY,QAASo3B,KAKrB6D,GACFprC,EAAehR,KAAK,CAClBiR,MAAOqqC,GACPtyC,UAAW8yC,GAAoCC,EAAkBO,KAKrEL,EAAiB,CACfjzC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6oC,cAAep2C,IAGnB6K,eAAgBA,EAMhBwrC,qBAAqB,IACpBtrC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACftT,QAAQC,IAAI,WAAYmJ,GAExBs8C,GAAwB,GACxB/qC,IAAMC,QACJzT,EAAE,kDAAmD,CACnD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRu8C,GAAwB,GACxB/qC,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE9D,CA6FelC,qBAAkB4C,aA1FjC,SAAoDgK,GAQ/C,IARgD,EACnD1M,EAAC,MACDuD,EAAK,SACLoY,EAAQ,yBACR6iC,GAAyB,EAAK,8BAC9BC,GAA8B,EAAK,2BACnCK,EAA0B,wBAC1BP,EAAwB3uC,IAAGA,IAC3BlD,EACA,MAAQ4xC,GAAqB5rC,YAAYorC,IAEzC,OACEr9C,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAEbC,cAAC6qB,IAAQ,CAEP3qB,UAAU,cACVmE,KAAK,SACLymB,QAAM,EACNjmB,MAAM,mBACNkmB,eAAgBlrB,EAAE,kBAClBoC,MAAO,CACLjC,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,WACLkN,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHuD,MAAOA,EACP+6C,iBAAkBA,EAClBj1C,KAAMy1C,EACNt2C,OAAQ,SACR+1C,wBAAyBA,EACzBC,yBAA0BA,EAC1BC,8BAA+BA,GAC/B,EACFv+C,SACCF,EAAE,4DAdAyM,iBAFkBA,gBAmB3BtM,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,IACLkN,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHuD,MAAOA,EACP+6C,iBAAkBA,EAClBj1C,KAAMy1C,EACNt2C,OAAQ,YACR+1C,wBAAyBA,EACzBC,yBAA0BA,EAC1BC,8BAA+BA,GAC/B,EACFv+C,SACCF,EAAE,+DAdAyM,iBAFkBA,kBA1BxBA,gBAgDwC,WAA7CqyC,EAA2BF,cAC3Bz+C,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC0E,IAAM,CAELxE,UAAU,cACV2E,MAAM,UACND,KAAK,KACL2K,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHuD,MAAOA,EACP+6C,iBAAkBA,EAClBj1C,KAAMy1C,EACNt2C,OAAQ,YACR+1C,wBAAyBA,EACzBC,yBAA0BA,EAC1BC,8BAA+BA,GAC/B,EACFv+C,SACCF,EAAE,oBAhBAyM,iBAFkBA,gBAoBA,KAGnC,KCNe3M,qBAAkB4C,aAjJjC,SAAuB3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEmY,GAAU5b,EACrD,MAAOg/C,EAAsBR,GAA2BjpC,oBAAS,GAC3Dkd,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBACzBM,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,oCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASi6C,GAA2B,CAC9EryC,UAAW,CAAC,QAAWC,GACvBG,YAAa,iBAGTuwB,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACu7C,GAAqB,IACtBv7C,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,uBAAgCjL,UAAU,YAKtF,GAAI0B,EAAS,OACX5B,cAAC6+C,GAAkB,CAAChjB,qBAAsBA,EAAqB97B,SAC7DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC6+C,GAAkB,CAAChjB,qBAAsBA,EAAqB97B,SAC7DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAOhB,MAAMwjB,EAAUvhB,EAAKuhB,QACfy7B,EAA0Bh9C,EAAKg9C,wBAGrC,OAAKA,EAAwB/1C,MAAM3J,OAcjCY,cAAC6+C,GAAkB,CAACx7B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAC/EC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUuwC,EAAwBvwC,SAClCa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO0uC,EAAwBvwC,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsuC,wBAAwB/1C,MACnDwF,EAAWiC,EAAgBsuC,wBAAwBvwC,SAEzD,OAAOkC,EAASrR,OACZ,CAGE0/C,wBAAyB,CACvBpuC,WAAYH,EAAeuuC,wBAAwBpuC,WACnD3H,MAAO,IAAKwH,EAAeuuC,wBAAwB/1C,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAACc,IAAM,CAACC,OAAQ69C,EAAsB59C,QAAQ,EAAKjB,SACjDO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR++C,EAAwB/1C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACNrH,QAAQC,IAAIuQ,GACZxQ,QAAQC,IAAI0qB,GACd/iB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAa,IAAC/Y,cAAA,SACzCA,cAAA,QAAME,UAAU,aAAYH,SACzBqL,IAAOlC,EAAKsD,KAAO,IAAMtD,EAAK40C,aAAajxC,WAAWxB,OAAOT,QAGlE5K,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK40C,aAAar2C,sBAAsBvB,OAE5C5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,KAAM,IAAClG,cAAA,SACzEA,cAAA,QAAME,UAAU,aAAYH,SACxBmJ,EAAK40C,aAAalxC,yBAAyB1G,UAGjDlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,kBAEnCz+C,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACg/C,GAA2C,CAC1CZ,wBAAyBA,EACzBO,2BAA4Bz1C,EAC5Bm1C,0BAA0B,MAG9Br+C,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACi/C,GAAkB,CAAC57B,QAASA,EAASna,KAAMA,QA7BhCoD,eA+BJ,eAtFtBtM,cAAC6+C,GAAkB,CAACx7B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAC/EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,+CA2FlB,KCrKO,MAAMq/C,GAAcxlD,GAAI;;;;;;;;;;;;;;ECazBylD,GAAgCzlD,GAAI;;;;;;;;;;;;;;;;EA4D3BiG,qBAAkB4C,aAzCjC,SAA4C3C,GAMvC,IANwC,EAC3CC,EAAC,MACDuD,EAAK,UACL+H,EAAS,gBACTi0C,EAAe,UACfC,GACAz/C,EACA,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAU67C,GAA+B,CACxEj0C,UAAW,CACTmY,QAASlY,EACT2yC,aAAcsB,EACdC,UAAWA,GAEb/zC,YAAa,iBAGf,OAAI1J,EACF5B,cAACkB,IAAMiH,SAAQ,CAAApI,SACXC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIhCa,EACF7B,cAACkB,IAAMiH,SAAQ,CAAApI,SACbC,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SAAEF,EAAE,gCAIxBiC,EAAKg9C,wBAAwB/1C,MAAM3J,OACnCY,cAAA,UAAAD,SAASF,EAAE,uBAIbG,cAACyE,IAAI,CAACrC,GAAK,gCAA+Bg9C,KAAmBC,KAAal0C,IAAYpL,SACpFO,eAACoE,IAAM,CAACG,MAAM,UAAUF,SAAO,EAACC,KAAK,KAAI7E,SAAA,CACvCC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAErG,EAAE,mBAIhC,KC3DeF,sBANKC,IAAA,IAAC,EAAEC,EAAC,UAAEK,EAAS,SAAEo/C,GAAU1/C,EAAA,OAC1C0/C,EACGt/C,cAACkI,IAAK,CAAChI,UAAWA,EAAW2E,MAAM,UAAS9E,SAAEF,EAAE,oBAChDG,cAACkI,IAAK,CAAChI,UAAWA,EAAW2E,MAAM,SAAQ9E,SAAEF,EAAE,uBAA8B,ICT9E,MAAM0/C,GAAoB7lD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4HxB8lD,GAAkB9lD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoGtB4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqE7B+lD,GAAe/lD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECpQhC,SAASgmD,GAA4BlzC,GACnC,IAAI5E,EAAY,CAAC,EAEjB,GAAI4E,EAAM,CACR,MAAMmzC,EAAa7jC,GAAetP,GAElC5E,EAAUC,SAAW83C,EACrB/3C,EAAUE,UAAY63C,CACxB,CAEA,OAAO/3C,CACT,CAmSejI,qBAAkB4C,aAhSjC,SAA4B3C,GAQvB,IARwB,EAC3BC,EAAC,MACDuD,EAAK,2BACLw8C,EAA2B,GAAE,qBAC7BC,EAAqB,GAAE,mBACvBC,EAAmB,GAAE,UACrBT,EAAU,GAAE,UACZU,GACAngD,EACA,MACMgL,EADcpH,qBAAWvC,GACA4J,iBACzBM,EAAY/H,EAAMmK,OAAOktC,YAExBuF,EAAcC,GAAmB9qC,mBAAS,IAAIjS,OAG/C,QAAEtB,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAAUi8C,GAAmB,CACrEr0C,UAAWw0C,GAA4BM,KAGzC,SAASE,EAAmBd,GAC1B,OAAOW,GACL,IAAK,uBAKH,OAAO//C,cAACmgD,GAAmC,CACzCh1C,UAAWA,EACXi0C,gBAAiBA,EACjBC,UAAWvjC,GAAekkC,KAQ9B,IAAK,uBACH,OAAOhgD,cAACyE,IAAI,CAACrC,GAAK,qCAAoCg9C,aAA2Bj0C,IAAYpL,SAC3FO,eAACoE,IAAM,CAACG,MAAM,UAAUF,SAAO,EAACC,KAAK,KAAI7E,SAAA,CACvCC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAErG,EAAE,uBAG9B,QACE,MAAO,6BAEb,CAEA,SAASugD,IACP,OAAOpgD,cAACob,GACN,CACAlb,UAAW,eACXyZ,SAAUqmC,EACVpmC,SAAWpN,IACLA,IAEFyzC,EAAgBzzC,GAChB4I,EAAQsqC,GAA4BlzC,IAEpC,GAyBR,CAMA,OAAI5K,EACFtB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAAA,OAAAD,SACEC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCa,EACFvB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SAAEF,EAAE,iCAIvBiC,EAAK8J,gBAAgBxM,OAUxBkB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACLt+C,EACF9B,cAAA,OAAKE,UAAU,OAAMH,SAClB+B,EAAK8J,gBAAgBG,KAAIC,IAAA,IAAC,KAAEQ,EAAI,QAAE5J,GAASoJ,EAAA,OAC1C1L,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbO,eAAA,MAAAP,SAAA,CACGiH,GAAWoE,IAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3CrL,cAAA,SAAOE,UAAU,aAAYH,SACtBqL,IAAOoB,GAAMnB,OAAO,WAG1BzI,EAAQxD,OAMXwD,EAAQmJ,KAAIQ,IAAA,IACV,eAAEG,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,QACNI,EAAO,YACPC,EAAW,YACXF,EAAW,QACX6a,EAAO,KACPrb,EAAI,SACJq4C,EAAQ,MACRC,EAAK,yBACL1zC,EAAwB,sBACxBnF,EAAqB,kBACrBC,EAAiB,UACjBmF,EAAS,QACTC,EAAO,OACPC,EAAM,wBACNC,EAAuB,cACvBigB,GAAe1gB,EAAA,OACbvM,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAAA,CAC7BC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SACfO,eAAA,MAAAP,SAAA,CACGqI,GAAuBC,GACxB/H,eAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB0H,EAAsBvB,KAAK,IAAG,IAE9BkF,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAG,OAEnDlD,GAAqB1H,cAAA,SAAOE,UAAU,aAAYH,SAChD2H,EAAkBxB,cAK3B5F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAAA,CAEZsjB,EACCtb,GAAqBsb,EAAQC,SAAUtb,GACvChI,cAAA,QAAME,UAAU,WAAUH,SAAEF,EAAE,oCACjC,IAACG,cAAA,SACFA,cAAA,SAAOE,UAAU,aAAYH,SACzBsgD,EAAYt4C,GAAqBs4C,EAAS/8B,SAAUg9B,GAAS,QAGnEhgD,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAAA,CAEfC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE0G,EAAyBjF,qBAAqBzB,KACpE5F,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAI6M,EAAyB1G,iBAIjElG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAC5BC,cAAA,QAAME,UAAU,cAAaH,SAAEmgD,EAAmBxzC,UAGtDpM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAC7BO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,cAACugD,GAAW,CAACrgD,UAAU,OAAOo/C,SAAUryB,IACpB,aAAlBtgB,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,kBAC3C,KACkB,0BAAlB8M,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,qBAC3C,KACW,cAAXwI,EACArI,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,uBAC3C,KACAS,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,cAAA,SAAOuI,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,WAG/F1I,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAE5BO,eAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAE8G,EAAwB,IAAED,cA7DlFT,eAiEJ,IA3FQtM,cAAC8G,IAAI,CAAA/G,SACtBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAAA,MAAAP,SAAA,CAAKF,EAAE,+BAA+B,IAACG,cAAA,KAAGE,UAAU,yBATvCoM,eAsGJ,MA2DnB,MA/KJhM,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACspB,IAAK,CAACjlB,KAAK,UAAStE,SACnBC,cAAA,UAAAD,SAASF,EAAE,yCA+KnB,KCrUeF,qBAAkB4C,aAJN3C,IAAA,IAAC,EAAEC,EAAC,UAAEsL,GAAWvL,EAAA,OAC1CI,cAACyG,GAAU,CAACN,UAAa,uBAAsBgF,aAAwB,KCyC1DxL,qBAAkB4C,aAnCjC,SAAgC3C,GAA0B,IAAzB,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,GAAU5b,EACrD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB5e,EAAuB77B,cAACwgD,GAAkB,CAACr1C,UAAWA,KACtD,QAAEvJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS47C,GAAa,CAAEh0C,UAAW,CAAEC,UAAWA,KAKjF,GAFA7M,aAAaC,QAAQC,EAAKjC,6BAA8Bif,EAASmI,UAE7D/hB,EACF,OACE5B,cAAC6+C,GAAkB,CAAChjB,qBAAsBA,EAAqB97B,SAC7DC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAKpC,GAAIa,EACF,OACE7B,cAAC6+C,GAAkB,CAAChjB,qBAAsBA,EAAqB97B,SAC7DC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAMwjB,EAAUvhB,EAAKuhB,QAErB,OACE/iB,eAACu+C,GAAkB,CAACx7B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAAA,CAC/EC,cAAA,MAAAD,SAAKF,EAAE,sDACPG,cAACygD,GAAmB,CAACV,UAAU,2BAGrC,KCAepgD,qBAAkB4C,aA9BjC,SAA+B3C,GAAqE,IAApE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEsjB,EAAQ,CAAC,EAAC,qBAAEwY,GAAsBj8B,EAC/F,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAE/B,OACEz6C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQC,SAASvjB,SACnCC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,cACXlvC,UAAWA,gBAQ3B,KCxCO,MAAMu1C,GAAsChnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+D1CinD,GAAqCjnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuDzCknD,GAA6ClnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA0BjDmnD,GAAiCnnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA2BrConD,GAAkCpnD,GAAI;;;;;;;;EAUtCqnD,GAAkCrnD,GAAI;;;;;;;;EAUtCsnD,GAAkCtnD,GAAI;;;;;;EChMtCunD,GAAgCvnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECF1C,SAASwnD,GAA0BnK,GACxC,IAAInvC,EAAY,CACdrD,gBAAYlF,EACZmF,cAAUnF,EACV03C,gBAAY13C,GAOd,OAJI03C,IACFnvC,EAAUmvC,WAAaA,GAGlBnvC,CACT,CAEO,SAASu5C,GAAiCz0C,GAAkC,IAC7E9E,EAAY,CACdk2C,aAAcpxC,EACd00C,gBAAgB,GAOlB,OAVwEjiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,KAOtEyI,EAAUw5C,gBAAiB,GAGtBx5C,CACT,CCcejI,qBAAkB4C,aA7BjC,SAAsC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EACrD,MAAM8M,EAAiBxD,EAAK40C,aAAaloC,IAClCyrC,GAAgC9uC,YAAYyuC,IAEjD,OACEhhD,cAACi8B,GAAY,CACX/7B,UAAU,cACVmX,WAAYxX,EAAE,yDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKo4C,oBAAoBj+B,QAAQC,WACrD/L,WAAY1X,EAAE,qDACd+Y,eAAgByoC,EAChBzlB,wBAAyB,CACrB1wB,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAOutC,GACPx1C,UAAWi2C,GAAiCz0C,IAC9C,CAAEyG,MAAO8tC,GACP/1C,UAAW,CAAEmY,QAASna,EAAKo4C,oBAAoBj+B,QAAQzN,QAKvE,KCmIejW,qBAAkB4C,aA3IjC,SAA2B3C,GAA0B,IAAzB,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,GAAU5b,EAChD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBACzB02C,EAAe/kC,GAAgB3c,GAE/BsL,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,uCAEdg8B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACu7C,GAAqB,IACtBv7C,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,0BAAmCjL,UAAU,aAGnF,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS29C,GAA+B,CAClF/1C,UAAW,CAAC,QAAWC,GACvBG,YAAa,iBAOf,GAHAhN,aAAaC,QAAQC,EAAKxB,mCAAoCwe,EAASmI,UAGnE/hB,EAAS,OACX5B,cAACwhD,GAAsB,CAAC3lB,qBAAsBA,EAAqB97B,SACjEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAMtC,GAAIa,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAACwhD,GAAsB,CAAC3lB,qBAAsBA,EAAqB97B,SACjEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAOhB,MAAMwjB,EAAUvhB,EAAKuhB,QACfo+B,EAA0B3/C,EAAK2/C,wBAGrC,OAAKA,EAAwB14C,MAAM3J,OAcjCY,cAACwhD,GAAsB,CAACn+B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SACnFC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUkzC,EAAwBlzC,SAClCa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOqxC,EAAwBlzC,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBixC,wBAAwB14C,MACnDwF,EAAWiC,EAAgBixC,wBAAwBlzC,SAEzD,OAAOkC,EAASrR,OACZ,CAGEqiD,wBAAyB,CACvB/wC,WAAYH,EAAekxC,wBAAwB/wC,WACnD3H,MAAO,IAAKwH,EAAekxC,wBAAwB14C,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,2CACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0BACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR0hD,EAAwB14C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAElC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACLmJ,EAAKmW,SAAYjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAElDzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAK40C,aAAar2C,sBAAsBvB,KAAM,IAAClG,cAAA,SACjDM,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAG,IACpBq7C,EAAar4C,EAAK40C,aAAa4D,kBAAoB,GAAI,IAAG,IAC1Dt2C,IAAQ,GAAElC,EAAK40C,aAAa1+B,aAAalW,EAAK40C,aAAajxC,aAAaxB,OAAOT,GAAa,IAAC5K,cAAA,SACjGA,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAGgD,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,KAAM,IAAE,MAC7FgD,EAAK40C,aAAalxC,yBAAyB1G,WAGjD5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAKo4C,oBAAoBniB,yBAAyBj5B,KAAM,KAAIkF,IAAOlC,EAAKo4C,oBAAoBliC,WAAW/T,OAAO0N,GAAa,OAE/HzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAC2hD,GAA6B,CAACz4C,KAAMA,IACrClJ,cAAC8xC,GAAU,CAAC5xC,UAAU,cAAc0wC,QAAU,uBAAsBzlC,sBAA8BjC,EAAK0M,YAtB3FtJ,eAwBJ,aA7EpBtM,cAACwhD,GAAsB,CAACn+B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SACnFC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mDAiFlB,KCjKO,MAAM+hD,GAAmC1wC,OAAaC,MAAM,CACjEiO,UAAWlO,OACRG,SAASxR,YAAE,yBC2DDF,qBAAkB4C,aA/CG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OACjIU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXrB,gBAAiBla,EAAE,qDACnB8Z,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,+BAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC6d,GAAgB,CAAC1X,UAAWA,IAC3BuL,EACApR,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACjCC,cAAA,UAAAD,SAASF,EAAE,yBAAgC,IAAEA,EAAE,qEAEnD,QAGC,KCnDIF,qBAAkB4C,aAJH3C,IAAA,IAAC,EAAEC,EAAC,UAAEsL,GAAWvL,EAAA,OAC7CI,cAACyG,GAAU,CAACN,UAAa,uBAAsBgF,iBAA4B,KCkK9DxL,qBAAkB4C,aApJjC,SAA8B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAClD,MAEMgL,EAFcpH,qBAAWvC,GAEA4J,iBACzB02C,EAAe/kC,GAAgB3c,GAE/B+V,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzBt0C,EAAa,uBAAsBgF,gBACzC,IAAI6D,EAAYnP,EAAE,4CAClB,MAAMgiD,EAAiB,cACjBhmB,EAAuB77B,cAAC8hD,GAAqB,CAAC32C,UAAWA,KAEzD,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASq9C,GAAoC,CAC1Ez1C,UAAW,CAAE0K,GAAIA,MAEZmsC,GAAiCxvC,YAAYwuC,IAEpD,GAAIn/C,EAAS,OACX5B,cAACwhD,GAAsB,CACrBxyC,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAACwhD,GAAsB,CACrBxyC,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAUZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMkgD,EAAyBlgD,EAAKkgD,uBAC9B3+B,EAAUvhB,EAAKkgD,uBAAuBV,oBAAoBj+B,QAC1Dy6B,EAAeh8C,EAAKkgD,uBAAuBlE,aAIjD,IAAI1+B,EAAY,KACZ4iC,EAAuB5iC,YACzBA,EAAY,IAAIlc,KAAK8+C,EAAuB5iC,YAG9C,IAAIC,EAAU,KAOd,OANI2iC,EAAuB3iC,UACzBA,EAAU,IAAInc,KAAK8+C,EAAuB3iC,UAG5C3mB,QAAQC,IAAImlD,GAGV99C,cAACwhD,GAAsB,CACrBxyC,UAAWA,EACX6yC,eAAe,cACfhmB,qBAAsBA,EACtBxY,QAASA,EAAQtjB,SAEjBO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACVO,eAACwG,IAAKwiB,MAAK,CAACzkB,MAAM,UAAS9E,SAAA,CACzBC,cAAA,KAAAD,SAAI+9C,EAAar2C,sBAAsBvB,OAASlG,cAAA,SAChDA,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAE,IACjBq7C,EAAazD,EAAa4D,kBAAoB,GAAK,IAAE,IACrDt2C,IAAQ,GAAE0yC,EAAa1+B,aAAa0+B,EAAajxC,aAAaxB,OAAOT,GAAa,IAAC5K,cAAA,SACvFA,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE,IACpB43C,EAAalxC,yBAAyBjF,qBAAqBzB,KAAM,IAAE,MACnE43C,EAAalxC,yBAAyB1G,UAG1ClG,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWA,EACXC,QAASA,GAEX1M,iBAAkBivC,GAClBhvC,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnB0iC,EAA8B,CAAE72C,UAAW,CACzC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBwJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAAEC,MAAO8tC,GACP/1C,UAAW,CAAEmY,QAASlY,IAExB,CAACgI,MAAOutC,GACNx1C,UAAWi2C,GAAiCrD,EAAaloC,QAE9DxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACiiD,GAA2B,CAC1BvwC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACe,QAM5C,KC1HehS,qBAAkB4C,aAhCjC,SAAmC3C,GAA0B,IAAzB,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,GAAU5b,EACxD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB5e,EAAuB77B,cAAC8hD,GAAqB,CAAC32C,UAAWA,KACzD,QAAEvJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS47C,GAAa,CAAEh0C,UAAW,CAAEC,UAAWA,KAEjF,GAAIvJ,EACF,OACE5B,cAACwhD,GAAsB,CAAC3lB,qBAAsBA,EAAqB97B,SACjEC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAKpC,GAAIa,EACF,OACE7B,cAACwhD,GAAsB,CAAC3lB,qBAAsBA,EAAqB97B,SACjEC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAMwjB,EAAUvhB,EAAKuhB,QAErB,OACE/iB,eAACkhD,GAAsB,CAACn+B,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAAA,CACnFC,cAAA,MAAAD,SAAKF,EAAE,0DACPG,cAACygD,GAAmB,CAACV,UAAU,2BAGrC,KCvCO,MAAMjmD,GAA0BJ,GAAI;;;;;;ECsC5BiG,qBAAkB4C,aA5BU3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,gBAAEC,EAAe,cAAEC,GAAezd,EAAA,OACjIU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yCAAyCE,SAAA,CAC5DC,cAACgS,KAAK,CAAC3N,KAAK,mBACJ6B,KAAK,mBACLhG,UAAYyR,EAAOuwC,iBAAoB,0BAA4B,eACnEjwC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,8BAKzEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGF,KCGIF,qBAAkB4C,aA5BI3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,gBAAEC,EAAe,cAAEC,GAAezd,EAAA,OAC3HU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,WACJ6B,KAAK,cACLhG,UAAYyR,EAAOwwC,YAAe,0BAA4B,eAC9DlwC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,8BAKpEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAGF,KC6HIF,qBAAkB4C,aA7IjC,SAA8B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACvC,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,iCACdw6C,EAAa,SAEb,QAACz4C,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS4zC,GAAmB,CACzDhsC,UAAW,CAAC0K,GAAIzK,GAChBG,YAAa,kBAERuvC,GAAiBtoC,YAAY6kC,KAC7BgL,GAAyB7vC,YAAYzY,IAE5C,GAAI8H,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAWt6C,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,WAMtC,GAAIc,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAWt6C,SAAA,CACjDrH,QAAQC,IAAIkJ,GACbvB,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,MAAMwjB,EAAUvhB,EAAKuhB,QAGrB,OAFA3qB,QAAQC,IAAI0qB,GAGV/iB,eAACw6C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EAAWt6C,SAAA,CAEvBC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mCAAmCE,SAEhDC,cAACwS,KAAM,CACLC,cAAe,CAAC,EAEhBG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAIzK,EACJg3C,YAAatvC,EAAOsvC,aAGtBC,EAAsB,CAAEl3C,UAAW,CACjC6H,MAAOioC,KAER5nC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAEvB,EACD/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACqiD,GAA4B,CAC3B3wC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWrb,GACX,MAIR9B,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,6CAA6CE,SAE1DC,cAACwS,KAAM,CACHC,cAAe,CAAEyvC,iBAAkBpgD,EAAKuhB,QAAQ6+B,kBAEhDtvC,SAAUA,CAACC,EAAMmV,KAAyB,IAAvB,cAAElV,GAAekV,EAChCtvB,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAIzK,EACJ+2C,iBAAkBrvC,EAAOqvC,kBAG3BrH,EAAc,CAAE3vC,UAAW,CACzB6H,MAAOioC,KAER5nC,MAAK6U,IAAe,IAAd,KAAEnmB,GAAMmmB,EACbvvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4DAA8D,CAC3E0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAEvB,EACD/S,SAEDmoB,IAAA,IAAC,aAAExW,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe6K,EAAA,OAChEloB,cAACsiD,GAAkC,CACjC5wC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWrb,GACX,QAMhB,KC9JO,MAAMygD,GAAgC7oD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCpC8oD,GAA8B9oD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyClC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8B7B+oD,GAA2B/oD,GAAI;;;;;;;;;;;;;;;;;;;;;EAuB/BgpD,GAA2BhpD,GAAI;;;;;;;;;;;;;;;;;;;;;EAuB/BipD,GAA2BjpD,GAAI;;;;;;EC0B7BiG,qBAAkB4C,aA5JjC,SAA2B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACpC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,cACbrrC,EAAYnP,EAAE,uCACdg8B,EAAuB77B,cAACmN,GAAoB,CAChDvD,WAAW,MACXC,SAAS,mBAAkB9J,SACzBC,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,oBAA6BjL,UAAU,YAG/E,QAAC0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAaxM,YAASi/C,GAA+B,CAChFr3C,UAAW,CAAEC,UAAWA,GACxBG,YAAa,kBAERs3C,GAA0BrwC,YAAYowC,IAE7C,GAAI/gD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAC9FC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAAA,CAC7FrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMwjB,EAAUvhB,EAAKuhB,QACf4e,EAAqBngC,EAAKmgC,mBAG9B,OAAKA,EAAmBl5B,MAAM3J,OAiB9BY,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EACZxe,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,uCACb0O,SAAU0zB,EAAmB1zB,SAC7Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO6xB,EAAmB1zB,SAAS8B,WAErCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgByxB,mBAAmBl5B,MAC9CwF,EAAWiC,EAAgByxB,mBAAmB1zB,SAEpD,OAAOkC,EAASrR,OACZ,CAGE6iC,mBAAoB,CAClBvxB,WAAYH,EAAe0xB,mBAAmBvxB,WAC9C3H,MAAO,IAAKwH,EAAe0xB,mBAAmBl5B,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+BACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNkiC,EAAmBl5B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKg5B,sBAAsBh8B,MADdoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,IADfzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,yBAAiCjC,EAAK0M,KAAK7V,SACzEmJ,EAAK+uC,2BAFM3rC,gBAKhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAI,uBAAyBgB,EAAMmK,OAAOktC,WAAa,qBAAuBvxC,EAAK0M,GAAG7V,SAC1FC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,oDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKg5B,sBAAsBh8B,KAAK,IAAEgD,EAAKkW,aAC3D7H,WAAY1X,EAAE,yCACd+Y,eAAgBgqC,EAChBnrC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOovC,GAA+Br3C,UAAW,CAAEC,UAAWA,OAEjE,EACJpL,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA1BfoG,kBAfzBA,eA4CJ,aAxGpBtM,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EACZxe,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mDAwGpB,KC/KO,MAAMsmC,GAAmBj1B,OAAaC,MAAM,CACjD+wB,sBAAuBhxB,OACpBG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACN2xC,WACHn7B,KAAMxW,SCiGOvR,qBAAkB4C,aAtFJ3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,OAAE6vB,EAAM,UAAE/V,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACtIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,wBACLhG,UAAYyR,EAAOuwB,sBAAyB,0BAA4B,eACxEjwB,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU2oB,wBAAwB/8B,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACpDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,wBAAwBiM,UAAU,OAAOjS,UAAU,4BAI5EI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG3DgzB,EAeD,GAdAlzB,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,GACzCrD,gBAAiBla,EAAE,0CAErBG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAKhEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,GAAM,EAAK,IAGvCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OACN0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SAEtCF,EAAE,yBAGF,KCiBIF,qBAAkB4C,aApGjC,SAA4B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC9C,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,cACbrrC,EAAYnP,EAAE,2CACdsG,EAAa,uBAAsBgF,iBAEnC,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASgV,GAAwB,CAC9DpN,UAAW,CAAEC,UAAWA,MAEnB23C,GAA0BvwC,YAAYkwC,IAE7C,GAAI7gD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EACZuhB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEbhP,cAACwS,KAAM,CACLC,cAAe,CACbyvB,sBAAuB,GACvB9iB,UAAW,IAAIlc,KACfwkB,KAAM,IAER/U,iBAAkBwzB,GAClBvzB,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAGZmxC,EAAuB,CAAE53C,UAAW,CAClC6H,MAAO,CACLsQ,QAASlY,EACT+2B,sBAAuBrvB,EAAOqvB,sBAC9B9iB,UAAWtD,GAAejJ,EAAOuM,WACjCsI,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOovC,GAA+Br3C,UAAW,CAAEC,UAAWA,OAElEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAMihD,EAAcjhD,EAAKghD,uBAAuBE,iBAAiBptC,GACjEvS,EAAQnB,KAAM,uBAAsBiJ,sBAA8B43C,KAClE1vC,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACijD,GAAoB,CACnB/vB,QAAQ,EACR/V,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACQ,QAMrC,KCsBehS,qBAAkB4C,aAzHjC,SAA6B3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAC/C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,cACbrrC,EAAYnP,EAAE,4CACdsG,EAAa,uBAAsBgF,iBAEnC,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASk/C,GAA6B,CACnEt3C,UAAW,CAAE0K,GAAIA,EAAIzK,UAAWA,MAE3Bs7B,GAAmBl0B,YAAYmwC,IAGtC,GAAI9gD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EACZuhB,EAAUvhB,EAAKuhB,QACf6/B,EAAcphD,EAAKkhD,iBAIzB,IAAI5jC,EAAY,KACZC,EAAU,KAQd,OAPI6jC,EAAY9jC,YACdA,EAAY,IAAIlc,KAAKggD,EAAY9jC,YAE/B8jC,EAAY7jC,UACdA,EAAU,IAAInc,KAAKggD,EAAY7jC,UAI/Brf,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEbhP,cAACwS,KAAM,CACLC,cAAe,CACbyvB,sBAAuBghB,EAAYhhB,sBAAsBtsB,GACzDwJ,UAAWA,EACXC,QAASA,EACTqI,KAAMw7B,EAAYx7B,MAEpB/U,iBAAkBwzB,GAClBvzB,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAM1C0N,GANW,cAAEvM,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAKV0N,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBonB,EAAgB,CAAEv7B,UAAW,CAC3B6H,MAAO,CACL6C,GAAIA,EACJssB,sBAAuBrvB,EAAOqvB,sBAC9B9iB,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTqI,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOovC,GAA+Br3C,UAAW,CAAEC,UAAWA,OAElEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,oDAAsD,CACnE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACijD,GAAoB,CACnB9lC,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACQ,QAMrC,KCvIO,MAAMwxC,GAAsCzpD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC4IxCiG,qBAAkB4C,aA1HjC,SAAgC3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACzC,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBlJ,EAAuBwiB,EAAYxiB,qBAEnC+F,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,cACbrrC,EAAYnP,EAAE,+CACd26C,EAAOx6C,cAAA,OAAKE,UAAU,sBAAqBH,SAC/CC,cAACyG,GAAU,CAACN,UAAY,uBAAsBgF,qBAG1C,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAaxM,YAAS6/C,GAAqC,CACtFj4C,UAAW,CACTC,UAAWA,EACXyK,GAAIA,GAENtK,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYG,KAAMA,EAAKz6C,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYG,KAAMA,EAAKz6C,SAAA,CAC7DrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMwjB,EAAUvhB,EAAKuhB,QACf2/B,EAAmBlhD,EAAKkhD,iBACxBpgD,EAAUogD,EAAiBpgD,QACjClK,QAAQC,IAAIiK,GAEZ,MAAMwgD,EAAyB,GAAEp0C,KAAag0C,EAAiB9gB,sBAAsBh8B,SAASkF,IAAO43C,EAAiB5jC,WAAW/T,OAAO0N,MAExI,OAAKnW,EAAQmG,MAAM3J,OAcjBY,cAAC86C,GAA2B,CAACx2C,KAAM+e,EAASg3B,WAAYA,EAAYG,KAAMA,EAAKz6C,SAC7EC,cAACyN,GAAW,CACVuB,UAAWo0C,EACX70C,SAAU3L,EAAQ2L,SAClBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOxN,EAAQ2L,SAAS8B,WAE1BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB5N,QAAQmG,MACnCwF,EAAWiC,EAAgB5N,QAAQ2L,SAEzC,OAAOkC,EAASrR,OACZ,CAGEwD,QAAS,CACP8N,WAAYH,EAAe3N,QAAQ8N,WACnC3H,MAAO,IAAKwH,EAAe3N,QAAQmG,SAAU0H,GAC7ClC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,8BAJNyM,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN6C,EAAQmG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAO,IAAIlI,KAAKgG,EAAKsD,KAAO,IAAMtD,EAAK40C,aAAajxC,YAAYxB,OAAOwE,IAD1DvD,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,MADnDoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK40C,aAAar2C,sBAAsBvB,MAD3BoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,oBAXrBnyC,eAaJ,aAlExBhM,eAACw6C,GAA2B,CAACx2C,KAAM+e,EAASg3B,WAAYA,EAAYG,KAAMA,EAAKz6C,SAAA,CAC5ErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAOg9C,EAAsBrjD,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,4DAqEb,KC1IO,MAAM8qC,GAAsBjxC,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+B1BkxC,GAAqBlxC,GAAI;;;;;;;;;;;;;;;;;EAmBzBmxC,GAAenxC,GAAI;;;;;;;;EAUnBoxC,GAAkBpxC,GAAI;;;;;;;;EAUtBqxC,GAAkBrxC,GAAI;;;;;;ECoGpBiG,qBAAkB4C,aAnJjC,SAAyB3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EAClC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,YACbrrC,EAAYnP,EAAE,qCACdg8B,EAAuB77B,cAACmN,GAAoB,CAChDvD,WAAW,MACXC,SAAS,kBAAiB9J,SACxBC,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,kBAA2BjL,UAAU,YAG7E,QAAC0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAaxM,YAASqnC,GAAqB,CACtEz/B,UAAW,CAAEmY,QAASlY,GACtBG,YAAa,kBAER+3C,GAAyB9wC,YAAYw4B,IAE5C,GAAInpC,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAC9FC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAAA,CAC7FrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMwjB,EAAUvhB,EAAKuhB,QACfigC,EAAmBxhD,EAAKwhD,iBAI9B,OAHA5qD,QAAQC,IAAI2qD,GAGPA,EAAiBv6C,MAAM3J,OAa1BY,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EACZxe,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,qCACb0O,SAAU+0C,EAAiB/0C,SAC3Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOkzC,EAAiB/0C,SAAS8B,WAEnCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB8yC,iBAAiBv6C,MAC5CwF,EAAWiC,EAAgB8yC,iBAAiB/0C,SAElD,OAAOkC,EAASrR,OACZ,CAGEkkD,iBAAkB,CAChB5yC,WAAYH,EAAe+yC,iBAAiB5yC,WAC5C3H,MAAO,IAAKwH,EAAe+yC,iBAAiBv6C,SAAU0H,GACtDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNujD,EAAiBv6C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACnCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,aADQ8D,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACuZ,GAAgC,CAACtC,kBAAmB/N,EAAKsQ,wBAD5ClN,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAI,uBAAyB+I,EAAY,mBAAqBjC,EAAK0M,GAAG7V,SAC1EC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,kDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKV,cACzB+O,WAAY1X,EAAE,uCACd+Y,eAAgByqC,EAChB5rC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAAEmY,QAASlY,OAErD,EACJpL,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA1BfoG,kBAVzBA,eAuCJ,aA9FtBtM,cAAC86C,GAA2B,CAACT,WAAYA,EAAY/1C,KAAM+e,EAASwY,qBAAsBA,EAAqB97B,SAC7GC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,iDAkGlB,KCzGeF,qBAAkB4C,aAjDjC,SAA4B3C,GAAuH,IAAtH,EAAEC,EAAC,QAAEwD,EAAO,OAAEsO,EAAM,OAAEkB,EAAM,aAAEnB,EAAY,UAAEvL,EAAS,cAAEmX,EAAa,eAAEC,EAAc,sBAAEC,EAAsB/N,IAAGA,IAAI7P,EAC9I,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIlEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,gBAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OACN0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SAEtCF,EAAE,yBAKf,KCyFeF,qBAAkB4C,aApIjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,cACbrrC,EAAYnP,EAAE,yCACdsG,EAAa,uBAAsBgF,eAEnC,QAAEvJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4zC,GAAmB,CAC3DhsC,UAAW,CAAE0K,GAAIzK,MAEZo4C,GAAsBhxC,YAAYs4B,KAGlC9sB,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,GAAItE,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EACZuhB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CACbjK,YAAa,IAGfoK,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdkF,QAASlY,EACT3C,YAAaqK,EAAOrK,YACpB4V,iBAAkBL,GAGhBM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAUrQ,SAAW2Q,EAErB8kC,EAAmB,CAAEr4C,UAAW,CAC9B6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAACmY,QAASlY,OAErDiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACwjD,GAAmB,CAClBrmC,UAAWA,EACXzL,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRyK,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACO,QAMlC,KClJO,MAAM8xC,GAAkBvyC,OAAaC,MAAM,CAC9C3I,YAAa0I,OACVK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCgDHF,qBAAkB4C,aAtCjC,SAAgC3C,GAA2D,IAA1D,EAAEC,EAAC,QAAEwD,EAAO,OAAEsO,EAAM,OAAEkB,EAAM,aAAEnB,EAAY,UAAEvL,GAAWvG,EACtF,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,8BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAEXF,EAAE,2BAMjB,KC4DeF,qBAAkB4C,aA/FjC,SAA4B3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EAC9C,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,YACbrrC,EAAYnP,EAAE,0CACdsG,EAAa,uBAAsBgF,eAEnC,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASsnC,GAAoB,CAC1D1/B,UAAW,CAAE0K,GAAIA,EAAIyN,QAASlY,MAEzB0gC,GAAkBt5B,YAAYu4B,IAGrC,GAAIlpC,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EACZuhB,EAAUvhB,EAAKuhB,QACf6/B,EAAcphD,EAAK4hD,gBAEzB,OACE1jD,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEfhP,cAACwS,KAAM,CACLC,cAAe,CACbjK,YAAa06C,EAAY16C,aAE3BmK,iBAAkB8wC,GAClB7wC,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZk6B,EAAe,CAAE3gC,UAAW,CAC1B6H,MAAO,CACL6C,GAAIA,EACJpN,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACjB,CAACC,MAAOw3B,GAAqBz/B,UAAW,CAAEmY,QAASlY,OAEpDiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAAC2jD,GAAuB,CACtBxmC,UAAWA,EACXzL,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACW,QAMtC,KC3BehS,qBAAkB4C,aA5DjC,SAAoD3C,GAAuD,IAAtD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,aAAEwsB,GAAa,GAAO3sB,EACtG,MAAMuL,EAAY/H,EAAMmK,OAAOktC,YAEzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4zC,GAAmB,CAC3DhsC,UAAW,CAAE0K,GAAIzK,KAGnB,GAAIvJ,EAAS,OAAO5B,cAAA,KAAAD,SAAIF,EAAE,+BAE1B,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAA,KAAAD,SAAIF,EAAE,8BAGf,MAAMwjB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAASzK,SAC7DO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCwsB,EACAvsB,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,yCAAwC9J,SACrEC,cAACyG,GAAU,CAACN,UAAY,uBAAsBgF,8CAGhDnL,cAACu7C,GAAqB,IAErBhvB,EAQC,GAPFvsB,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,yCAAwC9J,SACrEC,cAACgV,GAAS,CACRH,OAAS,uBAAsB1J,6CAC/BjL,UAAU,gBAOpBI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,sCACXlvC,UAAWA,gBAQ3B,KC/EO,MAAMy4C,GAAyDlqD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA0B7DmqD,GAAwDnqD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+B5D4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;EAoB7BoqD,GAAqDpqD,GAAI;;;;;;;;EAUzDqqD,GAAqDrqD,GAAI;;;;;;;;EAUzDsqD,GAAqDtqD,GAAI;;;;;;ECsEvDiG,qBAAkB4C,aAjJjC,SAAgD3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACpE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,iEAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASsgD,GAAwD,CAC3G14C,UAAW,CAAEmY,QAASlY,GACtBG,YAAa,kBAER24C,GAAgD1xC,YAAYyxC,IAEnE,GAAIpiD,EAAS,OACX5B,cAACkkD,GAA2C,CAAAnkD,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAACC,cAAA,KAAAD,SAAIF,EAAE,qCAKvB,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAACkkD,GAA2C,CAAAnkD,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAACC,cAAA,KAAAD,SAAIF,EAAE,oCAMzB,IAAIskD,EAAqBriD,EAAKsiD,wCAG9B,OAAKD,EAAmBp7C,MAAM3J,OAa5BY,cAACkkD,GAA2C,CAAAnkD,SAC1CC,cAACyN,GAAW,CACVuB,UAAWA,EACXI,aAAa,EACbb,SAAU41C,EAAmB51C,SAC7BG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+zC,EAAmB51C,SAAS8B,WAErCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4zC,wCAAwCr7C,MACnEwF,EAAWiC,EAAgB4zC,wCAAwC71C,SAEzE,OAAOkC,EAASrR,OACZ,CAGE+kD,mBAAoB,CAClBzzC,WAAYH,EAAe6zC,wCAAwC1zC,WACnE3H,MAAO,IAAKwH,EAAe6zC,wCAAwCr7C,SAAU0H,GAC7ElC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNokD,EAAmBp7C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+J,MADQ3G,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK8J,OADQ1G,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+gB,eADQ3d,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKooB,6BAA+BpoB,EAAKooB,4BAA4BprB,MADzDoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,YAAY67C,QAAQ,aAAc,UAD1B/3C,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,uBAAsBgB,EAAMmK,OAAOktC,wDAAwDvxC,EAAK0M,KAAK7V,SAC9GC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UACEE,UAAU,2BACVkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,6EACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAGC,cAAA,SAAOkJ,EAAKooB,4BAA4BprB,KAAK,IAAEgD,EAAK+gB,cAAc,IAACjqB,cAAA,SAAMkJ,EAAKV,eACjG+O,WAAY1X,EAAE,kEACd+Y,eAAgBqrC,EAChBxsC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOywC,GAAwD14C,UAAW,CACzEmY,QAASlY,OAGb,EACJpL,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA7BfoG,kBAhBzBA,eAgDJ,aArGtBtM,cAACkkD,GAA2C,CAAAnkD,SAC1CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,4EAyGlB,KCnKO,MAAMykD,GAAqDpzC,OAAaC,MAAM,CACnFmgB,4BAA6BpgB,OAC1BG,SAASxR,YAAE,uBACdoT,KAAM/B,OACHG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPwB,MAAO9B,OACJG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPmL,OAAQzL,OACLG,SAASxR,YAAE,uBACd2I,YAAa0I,SC+EAvR,qBAAkB4C,aAlFmB3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC7GU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,OACLhG,UAAYyR,EAAOsB,KAAQ,0BAA4B,eACvDhB,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,QACLhG,UAAYyR,EAAOqB,MAAS,0BAA4B,eACxDf,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,6BAI5DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,SACLhG,UAAYyR,EAAOgL,OAAU,0BAA4B,eACzD1K,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,8BACLhG,UAAYyR,EAAO2f,4BAA+B,0BAA4B,eAC9Erf,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUiW,8BAA8BrqB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC1DhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,6BAIlFF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAEXF,EAAE,2BAIJ,KCsBIF,qBAAkB4C,aA/FjC,SAAkD3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBt0C,EAAa,uBAAsBgF,0CAEnC,QAAEvJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KACnCisC,GAA6ChyC,YAClDuxC,IAGF,GAAIliD,EACF,OACE5B,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,oEAAoEE,SACjFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,mCAOb,GAAIgC,EACF,OACE7B,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,oEAAoEE,SACjFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,8EAOb,MAAMsd,EAAYrb,EAElB,OACE9B,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,oEAAoEE,SACjFC,cAACwS,KAAM,CACLC,cAAe,CACb6e,4BAA6B,GAC7Bre,MAAM,IAAI/P,MAAOoC,cACjB0N,OAAO,IAAI9P,MAAOwP,WAAa,EAC/BiK,OAAQ,GACRnU,YAAa,IAEfmK,iBAAkB2xC,GAClB1xC,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ4yC,EAA0C,CAAEr5C,UAAW,CACrD6H,MAAO,CACLsQ,QAASlY,EACTwR,OAAQ9J,EAAO8J,OACf1J,KAAM+C,SAASnD,EAAOI,MACtBD,MAAOgD,SAASnD,EAAOG,OACvBse,4BAA6Bze,EAAOye,4BACpC9oB,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOywC,GAAwD14C,UAAW,CAACmY,QAASlY,OAExFiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,4EAA8E,CAC3F0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACwkD,GAA2C,CAC1CrnC,UAAWA,EACXzL,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IAC+B,OAM1D,KCOehS,qBAAkB4C,aApGjC,SAAmD3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACvE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBgK,EAA2CrhD,EAAMmK,OAAOqI,GACxDzP,EAAa,uBAAsBgF,yCACnC6D,EAAYnP,EAAE,sEAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASugD,GAAuD,CAAE34C,UAAW,CAC5G0K,GAAI6uC,MAECC,GAAgDnyC,YACrDwxC,IAGF,GAAIniD,EACF,OACE5B,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,mCAOb,GAAIgC,EACF,OACE7B,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,8EAOb,MAAMsd,EAAYrb,EACZ2Q,EAAgB3Q,EAAK6iD,uCAE3B,OACE3kD,cAACkkD,GAA2C,CAAC33B,cAAc,EAAKxsB,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACb6e,4BAA6B7e,EAAc6e,4BAA4B1b,GACvE3C,KAAMR,EAAcQ,KACpBD,MAAOP,EAAcO,MACrB2J,OAAQlK,EAAckK,OACtBnU,YAAaiK,EAAcjK,aAE7BmK,iBAAkB2xC,GAClB1xC,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ+yC,EAA6C,CAAEx5C,UAAW,CACxD6H,MAAO,CACL6C,GAAI6uC,EACJ9nC,OAAQ9J,EAAO8J,OACf1J,KAAM+C,SAASnD,EAAOI,MACtBD,MAAOgD,SAASnD,EAAOG,OACvBse,4BAA6Bze,EAAOye,4BACpC9oB,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOywC,GAAwD14C,UAAW,CAACmY,QAASlY,OAExFiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6EAA+E,CAC5F0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACwkD,GAA2C,CAC1CrnC,UAAWA,EACXzL,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IAC+B,OAM1D,KCpHO,MAAMizC,GAA6BlrD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6GjC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+C7BmrD,GAAyBnrD,GAAI;;;;;;;;EC5G3BiG,qBAAkB4C,aApCjC,SAA4B3C,GAAwE,IAAvE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEsjB,EAAQ,CAAC,EAAC,qBAAEwY,EAAqB,IAAIj8B,EAC/F,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAC/B,IAAIqK,EAKJ,OAJIzhC,IACFyhC,EAAazhC,EAAQC,UAIrBtjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAO0+C,EAAW/kD,SAC7BC,cAAA,OAAKE,UAAU,sBAAqBH,SAChC87B,MAGNv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IAExBrjB,cAAC46C,GAAW,CACVP,WAAW,WACXlvC,UAAWA,gBAQ3B,KCgEexL,qBAAkB4C,aA5FjC,SAAwB3C,GAAmC,IAAlC,EAAEC,EAAC,SAAE2b,EAAQ,MAAEpY,EAAK,QAAEC,GAASzD,EACtD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,oCACdg8B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACu7C,GAAqB,IACtBv7C,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,iBAA0BjL,UAAU,aAG1E,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASshD,GAA4B,CAC/E15C,UAAW,CAACC,UAAWA,GACvBG,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAAC+kD,GAAmB,CAAClpB,qBAAsBA,EAAqB97B,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC+kD,GAAmB,CAAClpB,qBAAsBA,EAAqB97B,SAC9DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAQhBvB,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UACjE,IAAIE,EAAkB/hB,EAAK+hB,gBAC3B,MAAMR,EAAUvhB,EAAKuhB,QAGrB,OAAKQ,EAAgB9a,MAAM3J,OAazBY,cAAC+kD,GAAmB,CAAC1hC,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAChFC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUsV,EAAgBtV,SAC1Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyT,EAAgBtV,SAAS8B,WAElCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqT,gBAAgB9a,MAC3CwF,EAAWiC,EAAgBqT,gBAAgBtV,SAEjD,OAAOkC,EAASrR,OACZ,CAGEykB,gBAAiB,CACfnT,WAAYH,EAAesT,gBAAgBnT,WAC3C3H,MAAO,IAAKwH,EAAesT,gBAAgB9a,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC8jB,GAAmB,CAACjB,SAAUgB,QAxCjC7jB,cAAC+kD,GAAmB,CAAC1hC,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAChFC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gDAyClB,KCrCeF,qBAAkB4C,aAzDH3C,IAAA,IAAC,EAAEC,EAAC,UAAEsd,EAAS,aAAEzL,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC9EU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,WACLhG,UAAYyR,EAAOqR,SAAY,0BAA4B,eAC3D/Q,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0CAATyM,gBACrB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iCAAiCE,SAAA,CACpDC,cAACgS,KAAK,CAACG,UAAU,SACXjM,KAAK,sBACLhG,UAAYyR,EAAO6b,oBAAuB,0BAA4B,eACtEvb,aAAa,MAAKlS,SAErBod,EAAUwP,qBAAqB5jB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACjDvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,MAG3DtM,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,wBAEtEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,2BAG5DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIN,KC6EIF,qBAAkB4C,aAjIjC,SAA0B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC9C,MAAM66C,EAAar3C,EAAMmK,OAAOktC,WAC1BJ,EAAa,WACbrrC,EAAYnP,EAAE,wCACdsG,EAAa,uBAAsBs0C,cAEnC,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,GAAwB,CAC9DpN,UAAW,CACTC,UAAWsvC,MAIVuK,GAAiBzyC,YAAYsyC,GAAwB,CAC1D,GAKF,GAAIjjD,EACF,OAAO5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAC7EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMhB,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAC7EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAMhB,MAAMwjB,EAAUvhB,EAAKuhB,QACf2I,EAAkB3I,EAAQ+1B,kBAAoB/1B,EAAQ+1B,kBAAkBxjC,GAAK,KAC7E+W,EAAuB7qB,EAAK6qB,qBAC5Bs4B,EAAoBt4B,GAAwBA,EAAqB5jB,OAAS4jB,EAAqB5jB,MAAM,GAAGG,KAAK0M,GAGnH,OACE5V,cAAC86C,GAA2B,CAACT,WAAYA,EAAY/1C,KAAM+e,EAASld,UAAWA,EAAUpG,SACvFC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SAOrBC,cAACwS,KAAM,CACLC,cAAe,CACb+a,oBAAqBy3B,EACrBjiC,SAAUgJ,EACV9S,QAAS,IAGXtG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZmyC,EAAc,CAAE95C,UAAW,CACzB6H,MAAO,CACLsQ,QAASo3B,EACTjtB,oBAAqB3a,EAAO2a,oBAC5BxK,SAAWnQ,EAAOmQ,SAAYnQ,EAAOmQ,SAAW,KAChD9J,QAASrG,EAAOqG,UAEjBhG,eAAgB,KAElBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BpQ,EAAQnB,KAAK,0BAA4BJ,EAAKojD,qBAAqBhhC,eAAetO,IAClF9C,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,WAAE4U,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OAC5EzM,cAACmlD,GAAqB,CACpBhoC,UAAWrb,EACX4P,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EACZrK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GAEW,OAyBpC,K,+DCnIA,MAAMi/C,WAA+B13C,YAAUC,cAAA,SAAAxO,WAAA,KAS3CyO,eAAiB,KAEf,IAAIC,EACDC,SAASC,iBAAmBD,SAASC,gBAAgBF,WACtDC,SAASE,KAAKH,UACZI,EACDH,SAASC,iBAAmBD,SAASC,gBAAgBE,cACtDH,SAASE,KAAKC,aACZC,EACFJ,SAASC,gBAAgBG,cAAgBC,OAAOC,YAElD,GADuBC,KAAKC,KAAKT,EAAYK,IAAiBD,EACxC,CACpB,MAAMM,EAAWjP,KAAKkP,MAAMD,SACxBA,GACEA,EAASE,aACXnP,KAAKkP,MAAME,YAGjB,EACD,CA3BDC,oBACER,OAAOS,iBAAiB,SAAUtP,KAAKsO,eACzC,CAEAiB,uBACEV,OAAOW,oBAAoB,SAAUxP,KAAKsO,eAC5C,CAuBAmB,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACf6O,EAAapP,KAAKkP,MAAME,WACxBH,EAAWjP,KAAKkP,MAAMD,SACtBxO,EAAWT,KAAKkP,MAAMzO,SAG5B,OACEO,eAAA,OAAAP,SAAA,CACEC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,MAGLC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACXwO,EACDA,EAASE,YACRzO,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAC0E,IAAM,CACLG,MAAM,YACNF,SAAO,EACP4K,QAASb,EAAW3O,SAEnBF,EAAE,2BAITG,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,wBAbpB,SAmB1B,EAGJulD,GAAuB51C,aAAe,CACpCd,WAAYe,GAAGA,GAGF9P,qBAAkBylD,ICVlBzlD,qBAAkB4C,aAlDjC,SAAyB3C,GAAuD,IAAtD,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,aAAEwsB,GAAa,GAAO3sB,EAC3E,MAAMuL,EAAY/H,EAAMmK,OAAOktC,YAEzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4zC,GAAmB,CAC3DhsC,UAAW,CAAE0K,GAAIzK,KAGnB,GAAIvJ,EAAS,OAAO5B,cAAA,KAAAD,SAAIF,EAAE,+BAE1B,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAA,KAAAD,SAAIF,EAAE,8BAGf,MAAMwjB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAASzK,SAC7DC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCwsB,EACAvsB,cAACyG,GAAU,CAACN,UAAY,uBAAsBgF,aAE9C7K,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACu7C,GAAqB,IACtBv7C,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,cAAuBjL,UAAU,gBAKnFI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,QACXlvC,UAAWA,gBAQ3B,KCpEO,MAAMk6C,GAA0B3rD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA0B9B4rD,GAAyB5rD,GAAI;;;;;;;;EAW7B6rD,GAAsB7rD,GAAI;;;;;;;;EAU1B8rD,GAAsB9rD,GAAI;;;;;;;;EAU1B+rD,GAAsB/rD,GAAI;;;;;;ECzDhC,SAAS6N,GAAyB4D,GACvC,IAAIvD,EAAY,CACZyb,QAASlY,GAITu6C,EAAWpnD,aAAayE,QAAQvE,EAAK3C,mCAMzC,OAJA+L,EAAU89C,SAAWA,EAErBhtD,QAAQC,IAAIiP,GAELA,CACT,CCmKejI,qBAAkB4C,aAnJjC,SAAqB3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,GACpC8lD,EAAUC,GAAexwC,mBAAS7W,aAAayE,QAAQvE,EAAK3C,oCAAsC,cAElGyC,aAAayE,QAAQvE,EAAK3C,oCAC7ByC,aAAaC,QAAQC,EAAK3C,kCAAmC,cAG/D,MACMgU,EADcrM,qBAAWvC,GACU4O,qBAEnC1E,EAAY/H,EAAMmK,OAAOktC,YAEzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,EAAS,QAAEsF,GAAY9R,YAAS+hD,GAAyB,CACrFn6C,UAAW3D,GAAyB4D,GACpCG,YAAa,kBAERs6C,GAAqBrzC,YAAYkzC,IAExC,GAAI7jD,EAAS,OACX5B,cAAC6lD,GAAgB,CAAA9lD,SACfC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC6lD,GAAgB,CAAA9lD,SACfC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,IAAIimD,EAAQhkD,EAAKikD,aAEjB,OACEzlD,eAACulD,GAAgB,CAAA9lD,SAAA,CACfC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAA,OAAKE,UAAU,mBAAkBH,SAC/BO,eAACoE,IAAOqB,KAAI,CAAAhG,SAAA,CACVC,cAAC0E,IAAM,CAACG,MAAqB,eAAb6gD,EAA6B,UAAW,YAChD9gD,KAAK,GACL2K,QAASA,KACPo2C,EAAY,cACZrnD,aAAaC,QAAQC,EAAK3C,kCAAmC,cAC7DuZ,EAAQ7N,GAAyB4D,GAAW,EAErDpL,SACEF,EAAE,wCAELG,cAAC0E,IAAM,CAACG,MAAqB,gBAAb6gD,EAA8B,UAAW,YACjD9gD,KAAK,GACL1E,UAAU,OACVqP,QAASA,KACPo2C,EAAY,eACZrnD,aAAaC,QAAQC,EAAK3C,kCAAmC,eAC7DuZ,EAAQ7N,GAAyB4D,GAAW,EAErDpL,SACEF,EAAE,kDAMbG,cAAColD,GAAsB,CACrB72C,SAAUu3C,EAAMv3C,SAChBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO01C,EAAMv3C,SAAS8B,WAExBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBu1C,aAAah9C,MACxCwF,EAAWiC,EAAgBu1C,aAAax3C,SAE9C,OAAOkC,EAASrR,OACZ,CAGE2mD,aAAc,CACZr1C,WAAYH,EAAew1C,aAAar1C,WACxC3H,MAAO,IAAKwH,EAAew1C,aAAah9C,SAAU0H,GAClDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAED+lD,EAAM/8C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACxBjM,eAACwG,IAAI,CAAA/G,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNmJ,EAAK88C,OAAUhmD,cAACkI,IAAK,CAACrD,MAAM,SAAS3E,UAAU,cAAaH,SAAEF,EAAE,oBAA6B,GAC/FG,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKwe,YAEjEpnB,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,SACND,KAAK,KACL1E,UAAU,cACVyE,SAAO,EACP4K,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,8CACdyX,eAAgBtX,cAAA,KAAAD,SAAGC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQhD,EAAKwe,UAC/DnQ,WAAY1X,EAAE,mCACd+Y,eAAgBgtC,EAChBnuC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAACC,MAAOkyC,GAAyBn6C,UAAW3D,GAAyB4D,OAGzE,EACFpL,SAEFC,cAACiG,IAAI,CAACC,KAAK,cAEblG,cAACyE,IAAI,CAACrC,GAAK,uBAAsBgB,EAAMmK,OAAOktC,yBAAyBvxC,EAAK0M,KAAK7V,SAC/EC,cAAC0E,IAAM,CACLG,MAAM,YACND,KAAK,KACL1E,UAAU,mBACVyE,SAAO,EAAA5E,SAENF,EAAE,oBAGPG,cAAA,SAAOE,UAAU,8BAA6BH,SAAEqL,IAAOlC,EAAKmnB,WAAWhlB,OAAOwE,KAC7E3G,EAAK+8C,OAAO3iC,SAAS,IAACtjB,cAAA,cAEpB,QAKjB,KChGeL,qBAAkB4C,aA3DT3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEmB,EAAM,OAAElB,EAAM,gBAAEyL,EAAe,cAAEC,EAAa,UAAElX,GAAWvG,EAAA,OAC9GU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACrCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,QAAQ,GACxBC,EAAc,OAAQiH,EAAElf,OAAOmiB,aAAa,IAGhDvnB,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAIzDF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACL0lB,QAAS/Y,EAAOmzC,SAChBhmD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uBAEnDG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,kBAK9C7R,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAEXF,EAAE,2BAIJ,KCsBIF,qBAAkB4C,aAxEjC,SAAuB3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAEvC8lD,EAAWpnD,aAAayE,QAAQvE,EAAK3C,mCACpC6pD,GACHpnD,aAAaC,QAAQC,EAAK3C,kCAAmC,cAG/D,MAAMsP,EAAY/H,EAAMmK,OAAOktC,WACzBt0C,EAAa,uBAAsBgF,UACnC6D,EAAYnP,EAAE,sCAEbqmD,GAAW3zC,YAChBgzC,IAGF,OACEvlD,cAAC6lD,GAAgB,CAACt5B,cAAc,EAAKxsB,SACnCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbuzC,QAAQ,EACRt+B,KAAM,IAGR9U,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZu0C,EAAQ,CAAEh7C,UAAW,CACnB6H,MAAO,CACLsQ,QAASlY,EACTu6C,SAAUA,EACVM,OAAQnzC,EAAOmzC,OACft+B,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOkyC,GAAyBn6C,UAAW3D,GAAyB4D,OAExEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACmmD,GAAe,CACdz0C,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACG,OAM9B,KCkBehS,qBAAkB4C,aAxFjC,SAAwB3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAG5C,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB2L,EAAShjD,EAAMmK,OAAOqI,GACtBzP,EAAa,uBAAsBgF,UACnC6D,EAAYnP,EAAE,uCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgiD,GAAwB,CAChEp6C,UAAW,CAAE0K,GAAIwwC,MAEZC,GAAc9zC,YACnBizC,IAGF,GAAI5jD,EAAS,OACX5B,cAAC6lD,GAAgB,CAAA9lD,SACfC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC6lD,GAAgB,CAAA9lD,SACfC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAM6nB,EAAO5lB,EAAKwkD,YAElB,OACEtmD,cAAC6lD,GAAgB,CAACt5B,cAAc,EAAKxsB,SACnCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbuzC,OAAQt+B,EAAKs+B,OACbt+B,KAAMA,EAAKA,MAGb9U,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ00C,EAAW,CAAEn7C,UAAW,CACtB6H,MAAO,CACL6C,GAAIwwC,EACJJ,OAAQnzC,EAAOmzC,OACft+B,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOkyC,GAAyBn6C,UAAW3D,GAAyB4D,OAExEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACmmD,GAAe,CACdz0C,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACG,OAM9B,KC/DehS,qBAAkB4C,aA9BjC,SAA0B3C,GAA+C,IAA9C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEsjB,EAAQ,CAAC,GAAGzjB,EACpE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAE/B,OACEz6C,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQC,SAASvjB,SACnCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACu7C,GAAqB,QAG1Bj7C,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,SACXlvC,UAAWA,gBAQ3B,KC5CO,MAAMo7C,GAA2B7sD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC8C7BiG,qBAAkB4C,aAnCjC,SAA2B3C,GAA6B,IAA5B,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,EAAI,QAAEma,GAAQzjB,EACnD,MAAOmwB,GAAexd,YAAYud,IAElC,OACE9vB,cAAA,UAAQE,UAAU,sCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,+CACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CACbF,EAAE,iBAAiB,KAAGqJ,EAAK8mB,eAE9BzY,WAAY1X,EAAE,2CACd+Y,eAAgBmX,EAChBtY,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAOozC,GACPr7C,UAAW,CAAEmY,QAASA,EAAQzN,QAGpC,EACJ7V,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAGxD,KC0GevG,qBAAkB4C,aA/HjC,SAAsB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1C,MACMqwB,EADczsB,qBAAWvC,GACI4O,qBAC7Bb,EAAYnP,EAAE,kCACd46C,EAAar3C,EAAMmK,OAAOktC,YAC1B,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASijD,GAA0B,CAC7Er7C,UAAW,CAAC,QAAWuvC,GACvBnvC,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAACwmD,GAAiB,CAAAzmD,SAChBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAACwmD,GAAiB,CAAAzmD,SAChBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAOhBnH,QAAQC,IAAI,wBACZD,QAAQC,IAAImJ,GACZ,MAAMuhB,EAAUvhB,EAAKuhB,QACf+M,EAAgBtuB,EAAKsuB,cAG3B,OAAKA,EAAcrnB,MAAM3J,OAcvBY,cAACwmD,GAAiB,CAACnjC,QAASA,EAAQtjB,SAClCC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,kCACb0O,SAAU6hB,EAAc7hB,SACxBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOggB,EAAc7hB,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4f,cAAcrnB,MACzCwF,EAAWiC,EAAgB4f,cAAc7hB,SAE/C,OAAOkC,EAASrR,OACZ,CAGEgxB,cAAe,CACb1f,WAAYH,EAAe6f,cAAc1f,WACzC3H,MAAO,IAAKwH,EAAe6f,cAAcrnB,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACVC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBAClBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,iCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNqwB,EAAcrnB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC4vB,GAAkB,CAACvnB,OAAQa,EAAKb,UADnBiE,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAAY,KACjBmJ,EAAK8mB,cADM1jB,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO4kB,KAEjCjwB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKua,cADQnX,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACVC,cAACymD,GAAkB,CAACv9C,KAAMA,EAAMma,QAASA,IACvCrjB,cAACyE,IAAI,CAACrC,GAAI,wBAA0B8G,EAAK0M,GAAG7V,SAC1CC,cAAC0E,IAAM,CAACxE,UAAU,qBACV2E,MAAM,YAAW9E,SACtBF,EAAE,sBALOyM,kBAbFA,eAsBJ,aA3EtBtM,cAACwmD,GAAiB,CAACnjC,QAASA,EAAQtjB,SAClCC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,8CA+ElB,KClJO,MAAM6mD,GAA6BhtD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqFjC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgC7BitD,GAAyBjtD,GAAI;;;;;;;;EAU7BktD,GAAyBltD,GAAI;;;;;;ECwD3BiG,qBAAkB4C,aA9JjC,SAAwB3C,GAAwB,IAAvB,EAACC,EAAC,MAAEuD,EAAK,SAAEoY,GAAS5b,EAC3C,MACMiQ,EADcrM,qBAAWvC,GACU4O,qBAEnC1E,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,WACbrrC,EAAYnP,EAAE,oCACdg8B,EAAuB77B,cAACmN,GAAoB,CAChDvD,WAAW,MACXC,SAAS,iBAAgB9J,SACvBC,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,iBAA0BjL,UAAU,WAGlF5B,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UAEjE,MAAM,QAAC/hB,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAaxM,YAASojD,GAA4B,CAC7Ex7C,UAAW,CAAEC,UAAWA,GACxBG,YAAa,kBAERu7C,GAAwBt0C,YAAYq0C,IAE3C,GAAIhlD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAC9FC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAAA,CAC7FrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMwjB,EAAUvhB,EAAKuhB,QACfyjC,EAAkBhlD,EAAKglD,gBAG3B,OAAKA,EAAgB/9C,MAAM3J,OAiB3BY,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EACZxe,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,oCACb0O,SAAUu4C,EAAgBv4C,SAC1Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO02C,EAAgBv4C,SAAS8B,WAElCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBs2C,gBAAgB/9C,MAC3CwF,EAAWiC,EAAgBs2C,gBAAgBv4C,SAEjD,OAAOkC,EAASrR,OACZ,CAGE6iC,mBAAoB,CAClBvxB,WAAYH,EAAeu2C,gBAAgBp2C,WAC3C3H,MAAO,IAAKwH,EAAeu2C,gBAAgB/9C,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+mD,EAAgB/9C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC8oC,IAAM,CAAClkC,KAAK,KAAKjB,SAAUuF,EAAKkpC,oBAAoB/nC,0BADvCiC,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKkpC,oBAAoBlsC,MADZoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKqb,UADQjY,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAOwE,IADjBvD,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK69C,aAAah+C,MAAM3J,QACvBY,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8G,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAetO,KAAK7V,SACrFmJ,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAejB,iBAHtC3W,gBAOhBtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC/BC,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKkpC,oBAAoBlsC,KAAK,IAAEkF,IAAOlC,EAAKmnB,WAAWhlB,OAAOwE,MAClF0H,WAAY1X,EAAE,sCACd+Y,eAAgBiuC,EAChBpvC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOuzC,GAA4Bx7C,UAAW,CAAEC,UAAWA,OAE9D,EACJpL,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,iBApBfoG,kBApBzBA,eA2CJ,aAxGpBtM,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EACZxe,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gDAwGpB,KC/IeF,sBA5Bf,SAAoBC,GAA+F,IAA9F,EAAEC,EAAC,MAAEuG,EAAK,SAAE4gD,EAAQ,MAAExiC,EAAK,OAAEyiC,EAAM,OAAEC,EAAM,WAAEpyC,EAAW,cAAa,cAAEqyC,EAAc13C,IAAGA,IAAG7P,EAC9G,OACII,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,OAAKE,UAAU,mBAAkBH,SAC/BC,cAAA,OAAKO,IAAK0mD,EAAQzmD,IAAK0mD,MAEzBlnD,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEqG,IACbpG,cAACkjB,IAAI,CAAChjB,UAAU,gBAAeH,SAAEinD,IAEjChnD,cAAA,OAAKonD,UAAU,iCAAgCrnD,SAC7CO,eAAA,OAAKJ,UAAU,iCAAgCH,SAAA,CAC7CC,cAAA,OAAKE,UAAU,gBAAeH,SAC5BC,cAAA,UAAAD,SAASykB,MAEXxkB,cAAA,OAAKE,UAAU,UAASH,SACtBO,eAACoE,IAAM,CAACG,MAAM,UAAU0K,QAAS43C,EAAcpnD,SAAA,CAC7CC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,SACtB4O,gBAQnB,IC8JenV,qBAAkB4C,aA9KjC,SAA0B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,WACbrrC,EAAYnP,EAAE,wCACdsG,EAAa,uBAAsBgF,aAEnCk8C,EAAgBxnD,EAAE,gBAGlB,QAAC+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAaxM,YAASgV,GAAwB,CACzEpN,UAAW,CAAEC,UAAWA,MAEnBm8C,GAAwB/0C,YAAYo0C,IAE3C,GAAI/kD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKpC,GAAIc,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMgyC,EAAuB/vC,EAAK+vC,qBAC5BxuB,EAAUvhB,EAAKuhB,QAErB,OACE/iB,eAACw6C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAAA,CAErBC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,8CAITG,cAAColD,GAAsB,CACrB72C,SAAUsjC,EAAqBtjC,SAC/BG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyhC,EAAqBtjC,SAAS8B,WAEvCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqhC,qBAAqB9oC,MAChDwF,EAAWiC,EAAgBqhC,qBAAqBtjC,SAEtD,OAAOkC,EAASrR,OACZ,CAGEyyC,qBAAsB,CACpBnhC,WAAYH,EAAeshC,qBAAqBnhC,WAChD3H,MAAO,IAAKwH,EAAeshC,qBAAqB9oC,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAACI,IAAKC,IAAG,CAAAN,SACN8xC,EAAqB9oC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACvCjM,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACbrH,QAAQC,IAAIuQ,GACblJ,cAACunD,GAAW,CACVnhD,MAAO8C,EAAKhD,KACZ8gD,SAAU99C,EAAKV,YACfgc,MAAOtb,EAAK+rB,aACZgyB,OAAQ/9C,EAAKs+C,uBACbN,OAAQh+C,EAAKhD,KACb4O,WAAYuyC,EACZF,cAAeA,KACbG,EAAqB,CAAEp8C,UAAW,CAChC6H,MAAO,CACLsQ,QAASlY,EACTinC,oBAAqBlpC,EAAK0M,GAC1B2O,SAAU,IAEXrR,eAAgB,CACf,CAACC,MAAOuzC,GAA4Bx7C,UAAW,CAAEC,UAAWA,OAE/DiI,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EACX/T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAM,uBAAsBiJ,cACpCkI,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,MAGC,UAiEzB,KC/LO,MAAM4lD,GAA2B/tD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2G/B4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+C7BguD,GAAuBhuD,GAAI;;;;;;;;EC3GzBiG,qBAAkB4C,aAnCjC,SAA0B3C,GAAwE,IAAvE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEsjB,EAAQ,CAAC,EAAC,qBAAEwY,EAAqB,IAAIj8B,EAC7F,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WAC/B,IAAIqK,EAKJ,OAJIzhC,IACFyhC,EAAazhC,EAAQC,UAIrBtjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAO0+C,EAAW/kD,SAC7BC,cAAA,OAAKE,UAAU,sBAAqBH,SAChC87B,MAGNv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,SACXlvC,UAAWA,gBAQ3B,KCgEexL,qBAAkB4C,aA3FjC,SAAsB3C,GAAmC,IAAlC,EAAEC,EAAC,SAAE2b,EAAQ,MAAEpY,EAAK,QAAEC,GAASzD,EACpD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,kCACdg8B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACu7C,GAAqB,IACtBv7C,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,eAAwBjL,UAAU,aAGxE,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASmkD,GAA0B,CAC7Ev8C,UAAW,CAACC,UAAWA,GACvBG,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAAC2nD,GAAiB,CAAC9rB,qBAAsBA,EAAqB97B,SAC5DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GAEV7B,cAAC2nD,GAAiB,CAAC9rB,qBAAsBA,EAAqB97B,SAC5DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAQhBvB,aAAaC,QAAQC,EAAKvD,2BAA4BugB,EAASmI,UAC/D,IAAImT,EAAgBh1B,EAAKg1B,cACzB,MAAMzT,EAAUvhB,EAAKuhB,QAGrB,OAAKyT,EAAc/tB,MAAM3J,OAavBY,cAAC2nD,GAAiB,CAACtkC,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAC9EC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUuoB,EAAcvoB,SACxBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO0mB,EAAcvoB,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsmB,cAAc/tB,MACzCwF,EAAWiC,EAAgBsmB,cAAcvoB,SAE/C,OAAOkC,EAASrR,OACZ,CAGE03B,cAAe,CACbpmB,WAAYH,EAAeumB,cAAcpmB,WACzC3H,MAAO,IAAKwH,EAAeumB,cAAc/tB,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC+2B,GAAiB,CAACN,OAAQK,QAxC7B92B,cAAC2nD,GAAiB,CAACtkC,QAASA,EAASwY,qBAAsBA,EAAqB97B,SAC9EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,8CAyClB,KCrCeF,qBAAkB4C,aAzDL3C,IAAA,IAAC,EAAEC,EAAC,UAAEsd,EAAS,aAAEzL,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC5EU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wCAAwCE,SAAA,CAC3DO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,WACLhG,UAAYyR,EAAOqR,SAAY,0BAA4B,eAC3D/Q,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,wCAATyM,gBACrB6Q,EAAUhC,WAAWpS,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,+BAA+BE,SAAA,CAClDC,cAACgS,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAO8nB,kBAAqB,0BAA4B,eACpExnB,aAAa,MAAKlS,SAErBod,EAAUgc,mBAAmBpwB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,MAG3DtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,wBAEpEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,2BAG5DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAIN,KCuEIF,qBAAkB4C,aA3HjC,SAAwB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC5C,MAAM66C,EAAar3C,EAAMmK,OAAOktC,WAC1BJ,EAAa,SACbrrC,EAAYnP,EAAE,sCACdsG,EAAa,uBAAsBs0C,YAEnC,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,GAAwB,CAC9DpN,UAAW,CACTC,UAAWsvC,MAIVmN,GAAer1C,YAAYm1C,GAAsB,CACtD,GAKF,GAAI9lD,EACF,OAAO5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAC7EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMhB,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAC7EC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAMhB,MAAMwjB,EAAUvhB,EAAKuhB,QACf2I,EAAkB3I,EAAQwkC,gBAAkBxkC,EAAQwkC,gBAAgBjyC,GAAK,KACzEujB,EAAqBr3B,EAAKq3B,mBAC1B2uB,EAAkB3uB,GAAsBA,EAAmBpwB,OAASowB,EAAmBpwB,MAAM,GAAGG,KAAK0M,GAG3G,OACE5V,cAAC86C,GAA2B,CAACT,WAAYA,EAAY/1C,KAAM+e,EAASld,UAAWA,EAAUpG,SACvFC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbgnB,kBAAmBquB,EACnB9kC,SAAUgJ,EACV9S,QAAS,IAGXtG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ+0C,EAAY,CAAE18C,UAAW,CACvB6H,MAAO,CACLsQ,QAASo3B,EACThhB,kBAAmB5mB,EAAO4mB,kBAC1BzW,SAAWnQ,EAAOmQ,SAAYnQ,EAAOmQ,SAAW,KAChD9J,QAASrG,EAAOqG,UAEjBhG,eAAgB,KAElBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,eAE7BpQ,EAAQnB,KAAK,wBAA0BJ,EAAKimD,mBAAmB5wB,aAAavhB,IAC5E9C,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,WAAE4U,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OAC5EzM,cAACgoD,GAAmB,CAClB7qC,UAAWrb,EACX4P,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EACZrK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GAES,OAyBlC,KC1DexG,qBAAkB4C,aAzDjC,SAAwC3C,GAAiC,IAAhC,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EACpE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,YACzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS47C,GAAa,CAAEh0C,UAAW,CAClEC,UAAWA,KAGb,GAAIvJ,EAAS,OACX5B,cAAA,KAAAD,SACGF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAAA,KAAAD,SACGF,EAAE,qCAIPnH,QAAQC,IAAImJ,GACZ,MAAMuhB,EAAUvhB,EAAKuhB,QAGrB,OAFA3qB,QAAQC,IAAI0qB,GAGVrjB,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOid,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAASzK,SAC7DC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACu7C,GAAqB,QAG1Bj7C,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IASxBrjB,cAAC46C,GAAW,CACVP,WAAW,UACXlvC,UAAWA,gBAQ3B,KCxEO,MAAM88C,GAA2CvuD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqC/Cu9C,GAAqBv9C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2IzBwuD,IA3EiDxuD,GAAI;;;;;;EA2EjBA,GAAI;;;;;;;;GAWxCyuD,GAAuCzuD,GAAI;;;;;;;;EC3L3CuuD,GAA2CvuD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECmX7CiG,qBAAkB4C,aAzVjC,SAAoC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACtD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB/J,EAAYnP,EAAE,yCAEdsL,EAAY/H,EAAMmK,OAAOktC,YACzB,QAAE74C,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS2kD,GAA0C,CAC7F/8C,UAAW,CACTmY,QAASlY,GAEXG,YAAa,kBAER88C,GAAoC71C,YAAY41C,IAGvD,GAAIvmD,EAAS,OACX5B,cAACqoD,GAA+B,CAAAtoD,SAC7BF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAACqoD,GAA+B,CAAAtoD,SAC7BF,EAAE,oCAIP,MAAMyoD,EAA8BxmD,EAAKwmD,4BAGzC,OAAKA,EAA4Bv/C,MAAM3J,OAarCY,cAACqoD,GAA+B,CAAAtoD,SAC9BC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAU+5C,EAA4B/5C,SACtCa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOk4C,EAA4B/5C,SAAS8B,WAE9CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB83C,4BAA4Bv/C,MACvDwF,EAAWiC,EAAgB83C,4BAA4B/5C,SAE7D,OAAOkC,EAASrR,OACZ,CAGEkpD,4BAA6B,CAC3B53C,WAAYH,EAAe+3C,4BAA4B53C,WACvD3H,MAAO,IAAKwH,EAAe+3C,4BAA4Bv/C,SAAU0H,GACjElC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4CACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNuoD,EAA4Bv/C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKq/C,oBAAoBC,cAActiD,KAAK,IAAClG,cAAA,SAC9CA,cAACkI,IAAK,CAAAnI,SAAEmJ,EAAKq/C,oBAAoBriD,OAAa,IAAE,IAC9CgD,EAAKu/C,UAAazoD,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uBAAgC,MAEhFG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKq/C,oBAAoBC,cAAcppC,WAAW/T,OAAO0N,KAEnE/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAK69C,aAAah+C,MAAM3J,OACxBkB,eAAA,QAAAP,SAAA,CACEC,cAACyE,IAAI,CAACrC,GAAK,0BAAyB8G,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAetO,KAAK7V,SACrFmJ,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAejB,gBAC3C,IAACjjB,cAAA,SACRA,cAACmiB,GAAqB,CAAC9Z,OAAQa,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAe7b,YAG9E,KAqBNrI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAKw/C,iBAE5B1oD,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKu/C,UACLzoD,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACN0K,QAASA,IACP64C,EAAiC,CAAEl9C,UAAW,CAC5C6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6yC,WAAW,IAEZv1C,eAAgB,CACjB,CACEC,MAAO80C,GACP/8C,UAAW,CAAEmY,QAASlY,OAGzBiI,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EACX/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAG/D9B,SAEAF,EAAE,sBAGLG,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACN0K,QAASA,IACP64C,EAAiC,CAAEl9C,UAAW,CAC5C6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6yC,WAAW,IAEZv1C,eAAgB,CACf,CACEC,MAAO80C,GACP/8C,UAAW,CAAEmY,QAASlY,OAG3BiI,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EACXtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE7D9B,SAEAF,EAAE,wBAxGGyM,eA4GJ,aAhKtBtM,cAACqoD,GAA+B,CAAAtoD,SAC9BC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qDAoKlB,KChOO,MAAM8oD,GAAkCjvD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA0CtCmnD,GAAiCnnD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgErC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8D7BkvD,IAfoBlvD,GAAI;;;;;;;;;;;;;EAeMA,GAAI;;;;;;;;GAUlCmvD,GAA8BnvD,GAAI;;;;;;;;EAUlCovD,GAA8BpvD,GAAI;;;;;;ECLhCiG,qBAAkB4C,aA/JjC,SAA6B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACtC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzBzrC,EAAYnP,EAAE,yCACdw6C,EAAa,iBACb,QAAEz4C,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASqlD,GAAiC,CACpFz9C,UAAW,CAACC,UAAWA,GACvBG,YAAa,kBAERy9C,GAA6Bx2C,YAAYu2C,IAEhD,GAAIlnD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAWt6C,SAClDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAWt6C,SAAA,CACjDrH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMwjB,EAAUvhB,EAAKuhB,QACf6b,EAAuBp9B,EAAKo9B,qBAC5BrD,EAAuB77B,cAACmN,GAAoB,CAChDvD,WAAW,MACXC,SAAS,sBAAqB9J,SAC5BC,cAACgV,GAAS,CAACH,OAAS,uBAAsB1J,sBAA+BjL,UAAU,WAIvF,OAAKg/B,EAAqBn2B,MAAM3J,QAgBhC1G,QAAQswD,MAAM9pB,EAAqBn2B,OAGjC/I,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNwY,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,yCACb0O,SAAU2wB,EAAqB3wB,SAC/Ba,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8uB,EAAqB3wB,SAAS8B,WAEvCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0uB,qBAAqBn2B,MAChDwF,EAAWiC,EAAgB0uB,qBAAqB3wB,SAEtD,OAAOkC,EAASrR,OACZ,CAGE8/B,qBAAsB,CACpBxuB,WAAYH,EAAe2uB,qBAAqBxuB,WAChD3H,MAAO,IAAKwH,EAAe2uB,qBAAqBn2B,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNm/B,EAAqBn2B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACvCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKi2B,yBAAyBj5B,MADjBoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKmW,SAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,IAD/BzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKyf,qBAAwBzf,EAAKyf,qBAAqBziB,KAAO,IADlDoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACLmJ,EAAKi2B,yBAAyB6G,UAAanmC,EAAE,qBAAuBqJ,EAAK+/C,aAD9D38C,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAI,uBAAyBgB,EAAMmK,OAAOktC,WAAa,uBAAyBvxC,EAAK0M,GAAG7V,SAC5FC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,sDACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKi2B,yBAAyBj5B,KAAK,IAAEgD,EAAKkW,aAC9D7H,WAAY1X,EAAE,2CACd+Y,eAAgBmwC,EAChBtxC,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOw1C,GAAiCz9C,UAAW,CAAEC,UAAWA,OAEnE,EACJpL,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA1BfoG,kBAhBzBA,eA6CJ,cA5GtBtM,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNwY,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qDA4GlB,KCnLO,MAAMi0C,GAAsB5iC,OAAaC,MAAM,CACpDguB,yBAA0BjuB,OACvBG,SAASxR,YAAE,uBACd8oB,qBAAsBzX,OACtBkO,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACN2xC,WACHqG,oBAAqBh4C,OACrBwW,KAAMxW,SCoHOvR,qBAAkB4C,aA5GD3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,OAAE6vB,EAAM,UAAE/V,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACzIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,wBAAwBE,SAAA,CAC3CO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAOwtB,yBAA4B,0BAA4B,eAC3EltB,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUw2B,0BAA0B5qC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACtDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0BAA0BE,SAAA,CAC7CO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,uBACLhG,UAAYyR,EAAOgX,qBAAwB,0BAA4B,eACvE1W,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUyL,sBAAsB7f,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClDvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,uBAAuBiM,UAAU,OAAOjS,UAAU,6BAI3EI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACLC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAGlC,aAAzB2S,EAAOlG,cAAgC,GACxC3M,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,GACzCrD,gBAAiBla,EAAE,0CAErBG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAKlEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,GAAM,EAAK,IAGzCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,wBAErDgzB,EAAU,GACV5yB,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,sBACL0lB,QAAS/Y,EAAOq2C,sBAClBlpD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,8DAEnDG,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,cAIzD7R,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAAC6d,GAAgB,CAAC1X,UAAWA,SAE1B,KC4IIxG,qBAAkB4C,aArPjC,SAA+B3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACjD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,gBACbrrC,EAAYnP,EAAE,6CACdsG,EAAa,uBAAsBgF,mBACnC,QAACvJ,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASgV,GAAwB,CAC9DpN,UAAW,CAAE+J,UAAU,EAAO9J,UAAWA,MAEpCg+C,GAA6B52C,YAAYq2C,IAEhD,GAAIhnD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAYl0C,UAAWA,EAAUpG,SAAA,CACvErH,QAAQC,IAAIkJ,GACb7B,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBF,EAAE,iCAKT,MAAMsd,EAAYrb,EACZuhB,EAAUvhB,EAAKuhB,QAErB,OACErjB,cAAC86C,GAA2B,CAC1BT,WAAYA,EACZ/1C,KAAM+e,EACNld,UAAWA,EAAUpG,SAErBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEbhP,cAACwS,KAAM,CACLC,cAAe,CACb0sB,yBAA0B,GAC1BxW,qBAAsB,GACtBvJ,UAAW,IAAIlc,KACfwkB,KAAM,GACNwhC,qBAAqB,GAEvBv2C,iBAAkBmhC,GAClBlhC,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAM1C0N,GANW,cAAEvM,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAKV0N,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnB8pC,EAA0B,CAAEj+C,UAAW,CACrC6H,MAAO,CACLsQ,QAASlY,EACTg0B,yBAA0BtsB,EAAOssB,yBACjCxW,qBAAsB9V,EAAO8V,qBAC7BvJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTqI,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAOw1C,GAAiCz9C,UAAW,CAACC,UAAWA,OAEnEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAM6zC,EAAiB7zC,EAAKqnD,0BAA0B7H,oBAAoB1rC,GAC1EvS,EAAQnB,KAAM,uBAAsBiJ,wBAAgCwqC,KACpEtiC,IAAMC,QAASzT,EAAE,qDAAuD,CACpE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACopD,GAAuB,CACtBl2B,QAAQ,EACR/V,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACW,QAMxC,KC3FehS,sBAzBf,SAAiBC,GAAsC,IAArC,EAAEC,EAAC,SAAE0T,EAAS,MAAK,KAAE81C,EAAI,OAAEtoD,GAAOnB,EAC9C0pD,EAAsB,gBAC1B,OAAO/1C,GACL,IAAK,MAKL,QACE,MAJF,IAAK,SACH+1C,EAAsB,gBAM1B,OACEtpD,cAAA,OAAKE,UAAY,aAAYopD,IAAsBvpD,SAE/CspD,EAAKt9C,KAAIC,IAAA,IAAC,KAAC9F,EAAI,MAAEE,EAAK,KAAEgH,GAAKpB,EAAA,OAC3BhM,cAACyE,IAAI,CAAYrC,GAAIgL,EAAMlN,UAAY,mBAAkBgG,IAASnF,EAAU,SAAU,IAAKhB,SACzFO,eAAA,MAAIJ,UAAU,aAAYH,SAAA,CAAC,IAAEqG,EAAM,QAD1BkG,eAEJ,KAKjB,ICae3M,sBA1Cf,SAAoCC,GAA6C,IAA5C,EAAEC,EAAC,OAAEkB,EAAM,WAAE05C,EAAU,gBAAE7E,GAAgBh2C,EAE5E,OACEI,cAACupD,GAAQ,CACPh2C,SAAS,MACT81C,KAAM,CACF,CACEnjD,KAAM,UACNE,MAAOvG,EAAE,gDACTuN,KAAO,uBAAsBqtC,wBAAiC7E,KAEhE,CACE1vC,KAAM,SACNE,MAAOvG,EAAE,+CACTuN,KAAO,uBAAsBqtC,wBAAiC7E,YAEhE,CACE1vC,KAAM,SACNE,MAAOvG,EAAE,+CACTuN,KAAO,uBAAsBqtC,wBAAiC7E,YAEhE,CACE1vC,KAAM,aACNE,MAAOvG,EAAE,mDACTuN,KAAO,uBAAsBqtC,wBAAiC7E,gBAEhE,CACE1vC,KAAM,WACNE,MAAOvG,EAAE,iDACTuN,KAAO,uBAAsBqtC,wBAAiC7E,cAEhE,CACE1vC,KAAM,UACNE,MAAOvG,EAAE,gDACTuN,KAAO,uBAAsBqtC,wBAAiC7E,cAGpE70C,OAAQA,GAGd,IC0CepB,qBAAkB4C,aAlEjC,SAAwC3C,GAAwF,IAAvF,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,UAAEoG,EAAS,QAAEkd,EAAQ,KAAI,aAAEy0B,EAAa,KAAI,UAAE0R,GAAU5pD,EAC3H,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAEpC,IAAI6T,EAAU,GACV3R,IAEA2R,EADE3R,EAAa3Y,yBAAyB6G,UAC9BnmC,EAAE,qBAEFi4C,EAAamR,aAI3B,MAAMj6C,EAAa8oC,EACjBx3C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB+3C,EAAa3Y,yBAAyBj5B,KAAO,IAAMkF,IAAO0sC,EAAa14B,WAAW/T,OAAO0N,GAAY,MAAI0wC,EAAQ,IAAE5pD,EAAE,sBAChH,GAEZ,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAQid,EAAWA,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAAW,GAAGzK,SAC9EC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCoG,EAAanG,cAACyG,GAAU,CAACN,UAAWA,IAAgB,OAG1D7F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEF,EAAE,8CAA8C,IAAEmP,OAEjEhP,cAAC0pD,GAA2B,CAC1BjP,WAAYtvC,EACZyqC,gBAAiBD,EACjB50C,OAAQyoD,IAETzpD,OAGLO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IASxBrjB,cAAC46C,GAAW,CACVP,WAAW,gBACXlvC,UAAWA,gBAQ3B,KCrCexL,qBAAkB4C,aAvCjC,SAAoC3C,GAAuD,IAAtD,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,UAAEypD,EAAS,UAAErjD,GAAUvG,EACtF,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,iBAC9B,QAAEh0C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu9C,GAAgC,CACxE31C,UAAW,CACTC,UAAWA,EACXyK,GAAI+/B,KAIR,GAAI/zC,EAAS,OACX5B,cAAC2pD,GAA+B,CAACH,UAAWA,EAAWrjD,UAAWA,EAAUpG,SACzEF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACqpD,GAA+B,CAACH,UAAWA,EAAWrjD,UAAWA,EAAUpG,SAAA,CAC1EC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAImJ,GACZ,MAAMuhB,EAAUvhB,EAAKuhB,QACfy0B,EAAeh2C,EAAKw/C,oBAE1B,OACEthD,cAAC2pD,GAA+B,CAC9BH,UAAWA,EACXnmC,QAASA,EACTy0B,aAAcA,EACd3xC,UAAWA,EAAUpG,SAEpBA,GAGP,KCwFeJ,qBAAkB4C,aAtHjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MAAMgW,EAAKxS,EAAMmK,OAAOqoC,gBAClBzqC,EAAY/H,EAAMmK,OAAOktC,WACzBt0C,EAAa,uBAAsBgF,kBACnCq+C,EAAY,WAEZ,QAAE5nD,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu9C,GAAgC,CACxE31C,UAAW,CACT+J,UAAU,EACV9J,UAAWA,EACXyK,GAAIA,MAIA4+B,GAAuBjiC,YAAYs2C,IAE3C,GAAIjnD,EAAS,OACX5B,cAAC4pD,GAA2B,CAACJ,UAAWA,EAAWrjD,UAAWA,EAAUpG,SACrEF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACspD,GAA2B,CAACJ,UAAWA,EAAWrjD,UAAWA,EAAUpG,SAAA,CACtEC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM/X,EAAYrb,EACZohD,EAAcphD,EAAKw/C,oBAEzB,IAAIz4B,EAAuB,GACvBq6B,EAAYv6B,uBACdE,EAAuBq6B,EAAYv6B,qBAAqB/S,IAK1D,IAAIwJ,EAAY,KACZC,EAAU,KAQd,OAPI6jC,EAAY9jC,YACdA,EAAY,IAAIlc,KAAKggD,EAAY9jC,YAE/B8jC,EAAY7jC,UACdA,EAAU,IAAInc,KAAKggD,EAAY7jC,UAI/Brf,cAAC4pD,GAA2B,CAACJ,UAAWA,EAAWrjD,UAAWA,EAAUpG,SACtEC,cAACwS,KAAM,CACLC,cAAe,CACb0sB,yBAA0B+jB,EAAY/jB,yBAAyBvpB,GAC/D+S,qBAAsBE,EACtBzJ,UAAWA,EACXC,QAASA,EACTqI,KAAMw7B,EAAYx7B,KAClBwhC,oBAAqBhG,EAAYgG,qBAEnCv2C,iBAAkBmhC,GAClBlhC,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAM1C0N,GANW,cAAEvM,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAKV0N,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBm1B,EAAmB,CAAEtpC,UAAW,CAC9B6H,MAAO,CACL6C,GAAIA,EACJupB,yBAA0BtsB,EAAOssB,yBACjCxW,qBAAsB9V,EAAO8V,qBAC7BvJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTqI,KAAM7U,EAAO6U,KACbwhC,oBAAqBr2C,EAAOq2C,sBAE7Bh2C,eAAgB,CACf,CAACC,MAAOw1C,GAAiCz9C,UAAW,CAACC,UAAWA,OAEnEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sDAAwD,CACrE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACopD,GAAuB,CACtBjsC,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACW,KAKpC,KCjIO,MAAMk4C,GAA4CnwD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EA6BhDowD,GAA2CpwD,GAAI;;;;;;;;;;;;;;EAiB/CqwD,GAAwCrwD,GAAI;;;;;;EC6C1CiG,qBAAkB4C,aAzEjC,SAAwC3C,GAYtC,IAZuC,EACvCC,EAAC,QACDwD,EAAO,MACPD,EAAK,SACLrD,EAAQ,QACRsjB,EAAQ,KAAI,aACZy0B,EAAa,KAAI,SACjBvpC,EAAQ,WACRG,EAAU,UACV86C,EAAS,UACTrjD,EAAS,qBACT01B,EAAqB,IAAGj8B,EAGxB,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAEpC,IAAI6T,EAAU,GACV3R,IAEA2R,EADE3R,EAAa3Y,yBAAyB6G,UAC9BnmC,EAAE,qBAEFi4C,EAAamR,aAI3B,MAAMj6C,EAAa8oC,EACjBx3C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB+3C,EAAa3Y,yBAAyBj5B,KAAO,IAAMkF,IAAO0sC,EAAa14B,WAAW/T,OAAO0N,GAAY,MAAI0wC,EAAQ,IAAE5pD,EAAE,sBAChH,GAEZ,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAQid,EAAWA,EAAQ9Y,UAAY,IAAM8Y,EAAQ7Y,SAAW,GAAGzK,SAC9EO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAChCoG,EAAanG,cAACyG,GAAU,CAACN,UAAWA,IAAgB,GACrD01B,OAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAACyN,GAAW,CACVuB,UAAW1O,eAAA,QAAAP,SAAA,CAAOF,EAAE,8CAA8C,IAAEmP,KACpET,SAAUA,EACVG,WAAYA,EACZU,aAAa,EACbD,SAAUnP,cAAC0pD,GAA2B,CACpCjP,WAAYtvC,EACZyqC,gBAAiBD,EACjB50C,OAAQyoD,IAAezpD,SAExBA,MAGLO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC26C,GAAgB,CAACr2C,KAAM+e,IACxBrjB,cAAC46C,GAAW,CACVP,WAAW,gBACXlvC,UAAWA,gBAQ3B,KCxCexL,qBAAkB4C,aA1CjC,SAAwC3C,GAAsG,IAArG,EAACC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,EAAQ,SAAEwO,EAAQ,WAAEG,EAAU,UAAE86C,EAAS,UAAErjD,EAAS,qBAAE01B,EAAqB,IAAGj8B,EACzI,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,iBAC9B,QAAEh0C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu9C,GAAgC,CACxE31C,UAAW,CACTC,UAAWA,EACXyK,GAAI+/B,KAIR,GAAI/zC,EAAS,OACX5B,cAACgqD,GAAmC,CAACR,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACzHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC0pD,GAAmC,CAACR,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CAC1HC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAImJ,GACZ,MAAMuhB,EAAUvhB,EAAKuhB,QACfy0B,EAAeh2C,EAAKw/C,oBAE1B,OACEthD,cAACgqD,GAAmC,CAClCR,UAAWA,EACXnmC,QAASA,EACTy0B,aAAcA,EACdvpC,SAAUA,EACVG,WAAYA,EACZvI,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAE1CA,GAGP,KCAeJ,qBAAkB4C,aAnCjC,SAA8C3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACpE,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,iBAC7BqU,GAAqC13C,YAAYw3C,IAClDG,EAAa,CACjB5I,oBAAqB3L,GAGvB,OACE31C,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iEACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,6DACd+Y,eAAgBqxC,EAChBxyC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO02C,GAA2C3+C,UAAWg/C,MAGnE,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCwFevG,qBAAkB4C,aAlHjC,SAAyC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC3D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,kBACnCq+C,EAAY,aAEZ3tB,EAAuB77B,cAACgV,GAAS,CACrCH,OAAS,uBAAsB1J,wBAAgCwqC,mBAC/Dz1C,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASumD,GAA2C,CAC9F3+C,UAAW,CACTo2C,oBAAqB3L,KAIzB,GAAI/zC,EAAS,OACX5B,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACrHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC6pD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CACtHC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMk1B,EAA+BtoD,EAAKsoD,6BACpC77C,EAAWzM,EAAKsoD,6BAA6B77C,SAGjD,OAAK67C,EAA6BrhD,MAAM3J,OA+BxCkB,eAAC6pD,GAA+B,CAC9BX,UAAWA,EACXj7C,SAAUA,EACVG,WA5BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAOg6C,EAA6B77C,SAAS8B,WAE/CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB45C,6BAA6BrhD,MACxDwF,EAAWiC,EAAgB45C,6BAA6B77C,SAE9D,OAAOkC,EAASrR,OACZ,CAGEgrD,6BAA8B,CAC5B15C,WAAYH,EAAe65C,6BAA6B15C,WACxD3H,MAAO,IAAKwH,EAAe65C,6BAA6BrhD,SAAU0H,GAClElC,aAGJgC,CAAc,GAEpB,EAQApK,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAAA,CAE3CC,cAAA,SACAM,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,+BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,gCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNqqD,EAA6BrhD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKkI,mBAERpR,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKuI,oBAERzR,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+gB,gBAERjqB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACVC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,kBAE/DlI,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,wBAAgCwqC,qBAAkCzsC,EAAK0M,KAAK7V,SAC3GC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACqqD,GAAqC,CAACz0C,GAAI1M,EAAK0M,UApBpCtJ,eAsBJ,YAxEpBtM,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,4DA6EtB,KCjIO,MAAMyqD,GAAwCp5C,OAAaC,MAAM,CACtEC,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,IACPmL,OAAQzL,OACLG,aCOU1R,qBAAkB4C,aAdjC,SAA4C3C,GAAkC,IAAjC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EACzE,MAGMuG,EAAa,uBAFD/C,EAAMmK,OAAOktC,iCACRr3C,EAAMmK,OAAOqoC,8BAGpC,OACE51C,cAAC4pD,GAA2B,CAACJ,UANb,aAMmCrjD,UAAWA,EAAUpG,SACrEA,GAGP,KCkGeJ,qBAAkB4C,aApGjC,SAA4C3C,GAY3C,IAEKwG,GAdwC,EAC5CvG,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAUpB,OALEwG,EAAQvG,EADS,WAAd2iC,EACO,iDAEA,mDAIVliC,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKqG,IACL9F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,mBACLhG,UAAYyR,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,oBACLhG,UAAYyR,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,0BAGtEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,SACLhG,UAAYyR,EAAOgL,OAAU,0BAA4B,eACzD1K,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI/DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIhEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,OACbxG,aAAchO,EAAO6U,KACrB1uB,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,OAAQiH,EAAElf,OAAOmiB,cAC/BnK,EAAgB,QAAQ,GAAM,EAAK,IAGzCpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,+BAK3DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KCnGA,MAAM0qD,GAAqC7wD,GAAI;;;;;;;;EAiFhCiG,qBAAkB4C,aAtEjC,SAA2C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC/D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,iBAGlE6U,GAA2Bj4C,YAAYg4C,GAAoC,CAChFz7B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAACyqD,GAAmC,CAAA1qD,SAClCC,cAACwS,KAAM,CACLC,cAAe,CACbrB,kBAAkB,IAAIlO,MAAOoC,cAC7BmM,mBAAmB,IAAIvO,MAAOwP,WAAa,EAC3CiK,OAAQ,EACRnU,YAAa,GACbkf,KAAM,IAER/U,iBAAkB23C,GAClB13C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ23C,EAAwB,CAAEt/C,UAAW,CACnC6H,MAAO,CACLuuC,oBAAqB3L,EACrBvkC,iBAAkByB,EAAOzB,iBACzBK,kBAAmBoB,EAAOpB,kBAC1BkL,OAAQ9J,EAAO8J,OACfnU,YAAaqK,EAAOrK,YACpBkf,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAO02C,GAA2C3+C,UAAW,CAC5Do2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,gEAAkE,CAC/E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC0qD,GAAmC,CAClCh5C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KC9EA,MAAMmoB,GAAwCjxD,GAAI;;;;;;;;EAyGnCiG,qBAAkB4C,aA9FjC,SAA4C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAChE,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,iBAEnE,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASwmD,GAA0C,CACnF5+C,UAAW,CACT0K,GAAIA,MAIDg1C,GAA8Br4C,YAAYo4C,GAAuC,CACtF77B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIvE,EAAS,OACX5B,cAACyqD,GAAmC,CAAA1qD,SAChCC,cAAA,KAAAD,SAAIF,EAAE,iCAIZ,GAAIgC,EACF,OACEvB,eAACmqD,GAAmC,CAAA1qD,SAAA,CAC9BrH,QAAQC,IAAIkJ,GACd7B,cAAA,KAAAD,SAAIF,EAAE,iCAKd,MAAMgrD,EAA8B/oD,EAAK+oD,4BAGzC,OACE7qD,cAACyqD,GAAmC,CAAA1qD,SAClCC,cAACwS,KAAM,CACLC,cAAe,CACbrB,iBAAkBy5C,EAA4Bz5C,iBAC9CK,kBAAmBo5C,EAA4Bp5C,kBAC/CkL,OAAQkuC,EAA4BluC,OACpCnU,YAAaqiD,EAA4BriD,YACzCkf,KAAMmjC,EAA4BnjC,MAEpC/U,iBAAkB23C,GAClB13C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ+3C,EAA2B,CAAE1/C,UAAW,CACtC6H,MAAO,CACL6C,GAAIA,EACJxE,iBAAkByB,EAAOzB,iBACzBK,kBAAmBoB,EAAOpB,kBAC1BkL,OAAQ9J,EAAO8J,OACfnU,YAAaqK,EAAOrK,YACpBkf,KAAM7U,EAAO6U,OAEdxU,eAAgB,CACf,CAACC,MAAO02C,GAA2C3+C,UAAW,CAC5Do2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iEAAmE,CAChF0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC0qD,GAAmC,CAClCh5C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KCnHO,MAAMsoB,GAAwCpxD,GAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB5CqxD,GAAuCrxD,GAAI;;;;;;;;;;;;EAe3CsxD,GAAoCtxD,GAAI;;;;;;ECMtCiG,qBAAkB4C,aAnCjC,SAA2C3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACjE,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,iBAC7BqV,GAAkC14C,YAAYy4C,IAC/Cd,EAAa,CACjB5I,oBAAqB3L,GAGvB,OACE31C,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,6DACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,yDACd+Y,eAAgBqyC,EAChBxzC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO23C,GAAuC5/C,UAAWg/C,MAG/D,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCyFevG,qBAAkB4C,aAjHjC,SAAsC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACxD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzB5N,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,kBACnCq+C,EAAY,SAEZ3tB,EAAuB77B,cAACgV,GAAS,CACrCH,OAAS,uBAAsB1J,wBAAgCwqC,eAC/Dz1C,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASwnD,GAAuC,CAC1F5/C,UAAW,CACTo2C,oBAAqB3L,KAIzB,GAAI/zC,EAAS,OACX5B,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACrHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC6pD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CACtHC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMg2B,EAA4BppD,EAAKopD,0BACjC38C,EAAWzM,EAAKopD,0BAA0B38C,SAGhD,OAAK28C,EAA0BniD,MAAM3J,OA+BnCkB,eAAC6pD,GAA+B,CAC9BX,UAAWA,EACXj7C,SAAUA,EACVG,WA5BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO86C,EAA0B38C,SAAS8B,WAE5CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB06C,0BAA0BniD,MACrDwF,EAAWiC,EAAgB06C,0BAA0B38C,SAE3D,OAAOkC,EAASrR,OACZ,CAGE8rD,0BAA2B,CACzBx6C,WAAYH,EAAe26C,0BAA0Bx6C,WACrD3H,MAAO,IAAKwH,EAAe26C,0BAA0BniD,SAAU0H,GAC/DlC,aAGJgC,CAAc,GAEpB,EAQApK,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAAA,CAE3CC,cAAA,SACAM,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNmrD,EAA0BniD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAE/B/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,kBAEjElI,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,wBAAgCwqC,iBAA8BzsC,EAAK0M,KAAK7V,SACvGC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACmrD,GAAkC,CAACv1C,GAAI1M,EAAK0M,UAjBjCtJ,eAmBJ,YApEtBtM,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,wDAyEpB,KCjIO,MAAMurD,GAAoCl6C,OAAaC,MAAM,CAClEiO,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,yBCgBDF,qBAAkB4C,aAdjC,SAAyC3C,GAAkC,IAAjC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EACtE,MAGMuG,EAAa,uBAFD/C,EAAMmK,OAAOktC,iCACRr3C,EAAMmK,OAAOqoC,0BAGpC,OACE51C,cAAC4pD,GAA2B,CAACJ,UANb,SAMmCrjD,UAAWA,EAAUpG,SACrEA,GAGP,KCkFeJ,qBAAkB4C,aApFjC,SAAyC3C,GAYxC,IAEKwG,GAdqC,EACzCvG,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAUpB,OALEwG,EAAQvG,EADS,WAAd2iC,EACO,6CAEA,+CAIVliC,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKqG,IACL9F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXlb,UAAYyR,EAAO0N,QAAW,0BAA4B,eAC1D1F,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAGhDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKlEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KCpFA,MAAMwrD,GAAiC3xD,GAAI;;;;;;;;EA4E5BiG,qBAAkB4C,aAjEjC,SAAwC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC5D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,aAGlE2V,GAAwB/4C,YAAY84C,GAAgC,CACzEv8B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAACurD,GAAgC,CAAAxrD,SAC/BC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfsF,YAAa,IAEfmK,iBAAkBy4C,GAClBx4C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZy4C,EAAqB,CAAEpgD,UAAW,CAChC6H,MAAO,CACLuuC,oBAAqB3L,EACrBv2B,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B7W,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAO23C,GAAuC5/C,UAAW,CACxDo2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4DAA8D,CAC3E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwrD,GAAgC,CAC/B95C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KCzEA,MAAMipB,GAAoC/xD,GAAI;;;;;;;;EAoG/BiG,qBAAkB4C,aAzFjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,aAEnE,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASynD,GAAsC,CAC/E7/C,UAAW,CACT0K,GAAIA,MAID81C,GAA2Bn5C,YAAYk5C,GAAmC,CAC/E38B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIvE,EAAS,OACX5B,cAACurD,GAAgC,CAAAxrD,SAC7BC,cAAA,KAAAD,SAAIF,EAAE,iCAIZ,GAAIgC,EACF,OACEvB,eAACirD,GAAgC,CAAAxrD,SAAA,CAC3BrH,QAAQC,IAAIkJ,GACd7B,cAAA,KAAAD,SAAIF,EAAE,iCAKd,MAAM8rD,EAA2B7pD,EAAK6pD,yBAEtC,OACE3rD,cAACurD,GAAgC,CAAAxrD,SAC/BC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KAAKyoD,EAAyBvsC,WAC7CC,QAAS,IAAInc,KAAKyoD,EAAyBtsC,SAC3C7W,YAAamjD,EAAyBnjD,aAExCmK,iBAAkBy4C,GAClBx4C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ64C,EAAwB,CAAExgD,UAAW,CACnC6H,MAAO,CACL6C,GAAIA,EACJwJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B7W,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAO23C,GAAuC5/C,UAAW,CACxDo2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6DAA+D,CAC5E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwrD,GAAgC,CAC/B95C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KC/GO,MAAMopB,GAAyClyD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyD7CmyD,GAAwCnyD,GAAI;;;;;;;;;;;;EAc5CoyD,GAAkCpyD,GAAI;;;;;;;;EAWtCqyD,GAAqCryD,GAAI;;;;;;;;EAWzCsyD,GAAqCtyD,GAAI;;;;;;ECzCvCiG,qBAAkB4C,aAxCjC,SAA4C3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EAClE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,iBAC7BqW,GAAmC15C,YAAYy5C,IAChD9B,EAAa,CACjB5I,oBAAqB3L,GAGvB,OACE31C,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,8DACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,0DACd+Y,eAAgBqzC,EAChBx0C,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAOy4C,GAAwC1gD,UAAWg/C,GAC5D,CAAE/2C,MAAO0tC,GAAgC31C,UAAW,CAClDC,UAAWA,EACXyK,GAAI+/B,OAIV,EACJ51C,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCqHevG,qBAAkB4C,aA/IjC,SAAuC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACzD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBM,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,kBACnCq+C,EAAY,UAEZ3tB,EAAuB77B,cAACgV,GAAS,CACrCH,OAAS,uBAAsB1J,wBAAgCwqC,gBAC/Dz1C,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASsoD,GAAwC,CAC3F1gD,UAAW,CACTo2C,oBAAqB3L,KAIzB,GAAI/zC,EAAS,OACX5B,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACrHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC6pD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CACtHC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMg3B,EAA6BpqD,EAAKoqD,2BAClC5K,EAAsBx/C,EAAKw/C,oBAC3B/yC,EAAWzM,EAAKoqD,2BAA2B39C,SAGjD,OAAI+yC,EAAoBniB,yBAAyB6G,UAC/ChmC,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACwG,IAAKwiB,MAAK,CAACzkB,MAAM,UAAS9E,SAAA,CACzBC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAErG,EAAE,4DAO5BqsD,EAA2BnjD,MAAM3J,QAMtC1G,QAAQswD,MAAMlnD,GA2BZxB,eAAC6pD,GAA+B,CAC9BX,UAAWA,EACXj7C,SAAUA,EACVG,WA5BJ,WACEoB,EAAU,CACR5E,UAAW,CACTkF,MAAO87C,EAA2B39C,SAAS8B,WAE7CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB07C,2BAA2BnjD,MACtDwF,EAAWiC,EAAgB07C,2BAA2B39C,SAE5D,OAAOkC,EAASrR,OACZ,CAGE8sD,2BAA4B,CAC1Bx7C,WAAYH,EAAe27C,2BAA2Bx7C,WACtD3H,MAAO,IAAKwH,EAAe27C,2BAA2BnjD,SAAU0H,GAChElC,aAGJgC,CAAc,GAGxB,EAOIpK,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAAA,CAE3CC,cAAA,SACAM,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNmsD,EAA2BnjD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC7CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO0N,GAAY,IAAC/Y,cAAA,SAC5CA,cAAA,SAAOE,UAAU,aAAYH,SAC3BC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,kBAE/DU,EAAKijD,YAAe7rD,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,iBAAeqL,IAAOlC,EAAKijD,YAAY9gD,OAAO0N,SAEpGzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKkjD,YAAY/gD,OAAO0N,GAAY,IAAC/Y,cAAA,SAC3CkJ,EAAKmjD,UAAYnjD,EAAKojD,uBAA0BtsD,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,qBAA8B,MAE3GG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAENmJ,EAAKojD,wBAA0BhsD,eAAA,QAAAP,SAAA,CAC9BqL,IAAOlC,EAAKojD,uBAAuB9/C,MAAMnB,OAAO0N,GAAY,IAAE,IAC9D3N,IAAQ,GAAElC,EAAKojD,uBAAuB9/C,QAAQtD,EAAKojD,uBAAuBxO,aAAajxC,aACrFxB,OAAOT,GAAY,IAAE,IACvB,MACA1B,EAAKojD,uBAAuBxO,aAAar2C,sBAAsBvB,KAAK,IAAClG,cAAA,SACtEA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKojD,uBAAuBxO,aAAalxC,yBAAyBjF,qBAAqBzB,YAI9F5F,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,wBAAgCwqC,kBAA+BzsC,EAAK0M,KAAK7V,SACxGC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACusD,GAAmC,CAAC32C,GAAI1M,EAAK0M,UAhClCtJ,eAkCJ,aArFtBtM,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,yDA0FpB,KCnKO,MAAM2sD,GAAyCt7C,OAAaC,MAAM,CACvEwL,OAAQzL,OACLG,SAASxR,YAAE,uBACX0R,IAAI,GACJC,IAAI,OAGIi7C,GAA0Cv7C,OAAaC,MAAM,CACxEi7C,WAAYl7C,OACTG,SAASxR,YAAE,yBCSDF,qBAAkB4C,aAdjC,SAA0C3C,GAAkC,IAAjC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EACvE,MAGMuG,EAAa,uBAFD/C,EAAMmK,OAAOktC,iCACRr3C,EAAMmK,OAAOqoC,2BAGpC,OACE51C,cAAC4pD,GAA2B,CAACJ,UANb,UAMmCrjD,UAAWA,EAAUpG,SACrEA,GAGP,KCiDeJ,qBAAkB4C,aAtDjC,SAA6C3C,GAQ5C,IAR8C,EAC7CC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,UACNxL,GACDvG,EAGC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iDACPG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,SACLhG,UAAYyR,EAAOgL,OAAU,0BAA4B,eACzD1K,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,4BAI7DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKf,KCceF,qBAAkB4C,aAhEjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,cAElE+W,GAAyBn6C,YAAYu5C,GAAiC,CAC3Eh9B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAAC2sD,GAAiC,CAAA5sD,SAChCC,cAACwS,KAAM,CACLC,cAAe,CACbkK,OAAQ,EACRnU,YAAa,IAEfmK,iBAAkB65C,GAClB55C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ65C,EAAsB,CAAExhD,UAAW,CACjC6H,MAAO,CACLuuC,oBAAqB3L,EACrBh5B,OAAQ3G,SAASnD,EAAO8J,QACxBnU,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOy4C,GAAwC1gD,UAAW,CACzDo2C,oBAAqB3L,IAEvB,CAACxiC,MAAO0tC,GAAgC31C,UAAW,CACjDC,UAAWA,EACXyK,GAAI+/B,OAGTviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6DAA+D,CAC5E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC4sD,GAAoC,CACnCl7C,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KCWexG,qBAAkB4C,aAxEjC,SAA0C3C,GAYzC,IAEKwG,GAdsC,EAC1CvG,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAWpB,OANEwG,EAAQvG,EADS,WAAd2iC,EACO,8CAEA,gDAKVliC,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKqG,IACLpG,cAACI,IAAKC,IAAG,CAAAN,SAEPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOy6C,WAAc,0BAA4B,eAC7DzyC,SAAU9G,EAAOu5C,WACjBxyC,SAAWpN,IACT6Q,EAAc,aAAc7Q,GAC5B4Q,EAAgB,cAAc,EAAK,EAErCvD,OAAQA,IAAMuD,EAAgB,cAAc,KAE9Cpd,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,4BAIjEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKpEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KC4BeF,qBAAkB4C,aA9FjC,SAA0C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC9D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,cAEnE,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASuoD,GAAuC,CAChF3gD,UAAW,CACT0K,GAAIA,MAIDi3C,GAA4Bt6C,YAAYw5C,GAAoC,CACjFj9B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIvE,EAAS,OACX5B,cAAC2sD,GAAiC,CAAA5sD,SAC9BC,cAAA,KAAAD,SAAIF,EAAE,iCAIZ,GAAIgC,EACF,OACEvB,eAACqsD,GAAiC,CAAA5sD,SAAA,CAC5BrH,QAAQC,IAAIkJ,GACd7B,cAAA,KAAAD,SAAIF,EAAE,iCAKdnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMgrD,EAA4BhrD,EAAKgrD,0BAGvC,OACE9sD,cAAC2sD,GAAiC,CAAA5sD,SAChCC,cAACwS,KAAM,CACLC,cAAe,CACb25C,WAAY,IAAIlpD,KAAK4pD,EAA0BV,YAC/C5jD,YAAaskD,EAA0BtkD,aAEzCmK,iBAAkB85C,GAClB75C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZg6C,EAAyB,CAAE3hD,UAAW,CACpC6H,MAAO,CACL6C,GAAIA,EACJw2C,WAAYtwC,GAAejJ,EAAOu5C,YAClC5jD,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOy4C,GAAwC1gD,UAAW,CACzDo2C,oBAAqB3L,IAEvB,CAACxiC,MAAO0tC,GAAgC31C,UAAW,CACjDC,UAAWA,EACXyK,GAAI+/B,OAGTviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8DAAgE,CAC7E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC+sD,GAAqC,CACpCr7C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KC5GO,MAAMwqB,GAAiCtzD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BrC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;ECqB3BiG,qBAAkB4C,aAvCjC,SAA6C3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACnE,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,iBAC7BqX,GAAoC16C,YAAYiQ,IACjD0nC,EAAa,CACjB5I,oBAAqB3L,GAGvB,OACE31C,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,uCACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,4BACd+Y,eAAgBq0C,EAChBx1C,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO65C,GAAgC9hD,UAAWg/C,MAOxD,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KC6GevG,qBAAkB4C,aAxIjC,SAAwC3C,GAAiC,IAAhC,EAACC,EAAC,SAAE2b,EAAQ,MAAEpY,EAAK,QAAEC,GAAQzD,EACpE,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,kBACnCq+C,EAAY,WAEZ3tB,EAAuB77B,cAACgV,GAAS,CACrCH,OAAS,uBAAsB1J,wBAAgCwqC,iBAC/Dz1C,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS0pD,GAAgC,CACnF9hD,UAAW,CACTo2C,oBAAqB3L,KAIzB,GAAI/zC,EAAS,OACX5B,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACrHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC6pD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CACtHC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAEZxD,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UAEjE,MAAMupC,EAAsBprD,EAAKorD,oBAC3B3+C,EAAWzM,EAAKorD,oBAAoB3+C,SAI1C,OAAK2+C,EAAoBnkD,MAAM3J,OAwC7BkB,eAAC6pD,GAA+B,CAC9BX,UAAWA,EACXj7C,SAAUA,EACVG,WA5BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO88C,EAAoB3+C,SAAS8B,WAEtCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB08C,oBAAoBnkD,MAC/CwF,EAAWiC,EAAgB08C,oBAAoB3+C,SAErD,OAAOkC,EAASrR,OACZ,CAGE8tD,oBAAqB,CACnBx8C,WAAYH,EAAe28C,oBAAoBx8C,WAC/C3H,MAAO,IAAKwH,EAAe28C,oBAAoBnkD,SAAU0H,GACzDlC,aAGJgC,CAAc,GAEpB,EAQApK,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAAA,CAE3CC,cAAA,SACAM,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,mCAAmC,MAAIA,EAAE,+BAC7DS,eAACqQ,IAAMC,UAAS,CAAA7Q,SAAA,CAAEF,EAAE,yBAAyB,MAAIA,EAAE,2BAEnDG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,MAPFtE,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNmtD,EAAoBnkD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACtCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACmiB,GAAqB,CAAC9Z,OAAQa,EAAKgb,eAAe7b,UADrCiE,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKgb,eAAejB,cAAc,IAACjjB,cAAA,SACpCA,cAACkjB,IAAKC,MAAK,CAACte,MAAM,OAAM9E,SAAEmJ,EAAKgb,eAAehL,QAAQkK,MAAM,QAF9C9W,gBAKhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKgb,eAAeX,UAAUlY,OAAO,MAAM,IAACrL,cAAA,SACnDoL,IAAOlC,EAAKgb,eAAeV,SAASnY,OAAO,QAF9BiB,gBAIhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKgb,eAAeT,cADPnX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKgb,eAAeR,gBADPpX,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAAC0E,IAAM,CAACxE,UAAU,SACVqP,QAASA,IAAMlM,EAAQnB,KAAK,0BAA4BgH,EAAKgb,eAAetO,IAC5E/Q,MAAM,YAAW9E,SACtBF,EAAE,kBAELG,cAACmtD,GAAoC,CAACv3C,GAAI1M,EAAKgb,eAAetO,OANzBtJ,kBAnBzBA,eA2BJ,YAxFtBtM,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAEtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,0DA4FpB,KC1JO,MAAMutD,GAAsCl8C,OAAaC,MAAM,CACpEqc,oBAAqBtc,OAClBG,SAASxR,YAAE,uBACduR,iBAAkBF,OACfG,WACAC,WACAC,IAAI,KACJC,IAAI,MACPC,kBAAmBP,OAChBG,WACAC,WACAC,IAAI,GACJC,IAAI,MCGM7R,qBAAkB4C,aAXjC,SAA8C3C,GAAkC,IAAjC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EAG3E,OACEI,cAAC4pD,GAA2B,CAACJ,UAHb,WAGkCzpD,SAC/CA,GAGP,KCkFeJ,qBAAkB4C,aAlFjC,SAA8C3C,GAY7C,IAZ+C,EAC9CC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAGpB,MAAMwG,EAAQvG,EAAE,gDAEhB,OACES,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKqG,IACL9F,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iCAAiCE,SAAA,CACpDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,sBACLhG,UAAYyR,EAAO6b,oBAAuB,0BAA4B,eACtEvb,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUwP,qBAAqB5jB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,wBAEtEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,mBACLhG,UAAYyR,EAAOP,iBAAoB,0BAA4B,eACnEa,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACgS,KAAK,CAAC3N,KAAK,SACJ6B,KAAK,oBACLhG,UAAYyR,EAAOF,kBAAqB,0BAA4B,eACpEQ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,gCAK1EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAETF,EAAE,2BAMnB,KCqBeF,qBAAkB4C,aAlGjC,SAA0C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC9D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,eAEjE/zC,QAAS4sB,EAAc3sB,MAAO4sB,EAAY3sB,KAAMurD,GAAc/pD,YAASgV,KAEvEg1C,GAAsB/6C,YAAYsyC,GAAwB,CAChE/1B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAIhC,OAAIqoB,EACFxuB,cAACutD,GAAqC,CAAAxtD,SACpCC,cAAA,KAAAD,SAAIF,EAAE,iCAIN4uB,GACF/1B,QAAQC,IAAI81B,GAEVzuB,cAACutD,GAAqC,CAAAxtD,SACpCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI00D,GAGZrtD,cAACutD,GAAqC,CAAAxtD,SACpCC,cAACwS,KAAM,CACLC,cAAe,CACb+a,oBAAqB,GACrBtU,QAAS,GACT9H,kBAAkB,IAAIlO,MAAOoC,cAC7BmM,mBAAmB,IAAIvO,MAAOwP,WAAa,GAE7CC,iBAAkBy6C,GAClBx6C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZy6C,EAAkB,CAAEpiD,UAAW,CAC7B6H,MAAO,CACLsQ,QAASlY,EACTm2C,oBAAqB3L,EACrBnoB,oBAAqB3a,EAAO2a,oBAC5Bpc,iBAAkByB,EAAOzB,iBACzBK,kBAAmBoB,EAAOpB,kBAC1ByH,QAASrG,EAAOqG,UAEjBhG,eAAgB,CACf,CAACC,MAAO65C,GAAgC9hD,UAAW,CACjDo2C,oBAAqB3L,OAO1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAM0rD,EAAmB1rD,EAAKojD,qBAAqBhhC,eAAetO,GAClEvS,EAAQnB,KAAM,0BAAyBsrD,KACvCn6C,IAAMC,QAASzT,EAAE,8DAAgE,CAC/E0T,SAAUF,IAAMG,SAASC,eAE3BJ,IAAMC,QAASzT,EAAE,sEAAwE,CACvF0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACytD,GAAqC,CACpCtwC,UAAWkwC,EACX37C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,MAKZ,KC/GO,MAAMkrB,GAAwCh0D,GAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB5Ci0D,GAAuCj0D,GAAI;;;;;;;;;;;;EAe3Ck0D,GAAoCl0D,GAAI;;;;;;ECMtCiG,qBAAkB4C,aAnCjC,SAA2C3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACjE,MAAM+1C,EAAiBvyC,EAAMmK,OAAOqoC,iBAC7BiY,GAAkCt7C,YAAYq7C,IAC/C1D,EAAa,CACjB5I,oBAAqB3L,GAGvB,OACE31C,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,6DACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,yDACd+Y,eAAgBi1C,EAChBp2C,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAOu6C,GAAuCxiD,UAAWg/C,MAG/D,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCsGevG,qBAAkB4C,aA7HjC,SAAsC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACxD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WAC/BrgB,QAAQC,IAAI05B,GAEZ,MAAMlnB,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,kBACnCq+C,EAAY,SAEZ3tB,EAAuB77B,cAACgV,GAAS,CACrCH,OAAS,uBAAsB1J,wBAAgCwqC,eAC/Dz1C,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASoqD,GAAuC,CAC1FxiD,UAAW,CACTo2C,oBAAqB3L,KAIzB,GAAI/zC,EAAS,OACX5B,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SACrHF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC6pD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAAA,CACtHC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM44B,EAA4BhsD,EAAKgsD,0BACjCv/C,EAAWzM,EAAKgsD,0BAA0Bv/C,SAGhD,OAAKu/C,EAA0B/kD,MAAM3J,OAyCnCkB,eAAC6pD,GAA+B,CAC9BX,UAAWA,EACXj7C,SAAUA,EACVG,WA5BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO09C,EAA0Bv/C,SAAS8B,WAE5CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBs9C,0BAA0B/kD,MACrDwF,EAAWiC,EAAgBs9C,0BAA0Bv/C,SAE3D,OAAOkC,EAASrR,OACZ,CAGE0uD,0BAA2B,CACzBp9C,WAAYH,EAAeu9C,0BAA0Bp9C,WACrD3H,MAAO,IAAKwH,EAAeu9C,0BAA0B/kD,SAAU0H,GAC/DlC,aAGJgC,CAAc,GAEpB,EAQApK,UAAWA,EACX01B,qBAAsBA,EAAqB97B,SAAA,CAE3CC,cAAA,SACAM,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CAERC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+tD,EAA0B/kD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAE/B/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACVC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,kBAE/DlI,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB+I,wBAAgCwqC,iBAA8BzsC,EAAK0M,KAAK7V,SACvGC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAAC+tD,GAAkC,CAACn4C,GAAI1M,EAAK0M,UAjBjCtJ,eAmBJ,YA/EtBtM,cAACmqD,GAA+B,CAACX,UAAWA,EAAWrjD,UAAWA,EAAW01B,qBAAsBA,EAAqB97B,SAGtHC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,wDAkFpB,KC9IO,MAAMmuD,GAAoC98C,OAAaC,MAAM,CAClEiO,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,yBCcDF,qBAAkB4C,aAdjC,SAAyC3C,GAAkC,IAAjC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAErD,GAASH,EACtE,MAGMuG,EAAa,uBAFD/C,EAAMmK,OAAOktC,iCACRr3C,EAAMmK,OAAOqoC,0BAGpC,OACE51C,cAAC4pD,GAA2B,CAACJ,UANb,SAMmCrjD,UAAWA,EAAUpG,SACrEA,GAGP,KCkFeJ,qBAAkB4C,aApFjC,SAAyC3C,GAYxC,IAEKwG,GAdqC,EACzCvG,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAUpB,OALEwG,EAAQvG,EADS,WAAd2iC,EACO,6CAEA,+CAIVliC,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKqG,IACL9F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXlb,UAAYyR,EAAO0N,QAAW,0BAA4B,eAC1D1F,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAGhDpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,+BAKlEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KClFA,MAAMouD,GAAiCv0D,GAAI;;;;;;;;EA2E5BiG,qBAAkB4C,aAhEjC,SAAwC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC5D,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,aAElEuY,GAAwB37C,YAAY07C,GAAgC,CACzEn/B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,OACEnG,cAACmuD,GAAgC,CAAApuD,SAC/BC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfsF,YAAa,IAEfmK,iBAAkBq7C,GAClBp7C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZq7C,EAAqB,CAAEhjD,UAAW,CAChC6H,MAAO,CACLuuC,oBAAqB3L,EACrBv2B,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B7W,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOu6C,GAAuCxiD,UAAW,CACxDo2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4DAA8D,CAC3E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACouD,GAAgC,CAC/B18C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KCxEA,MAAM6rB,GAAoC30D,GAAI;;;;;;;;EAoG/BiG,qBAAkB4C,aAzFjC,SAAyC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC7D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzK,EAAY/H,EAAMmK,OAAOktC,WACzB9E,EAAiBvyC,EAAMmK,OAAOqoC,gBAC9BzvC,EAAa,uBAAsBgF,wBAAgCwqC,aAEnE,QAAE/zC,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASqqD,GAAsC,CAC/EziD,UAAW,CACT0K,GAAIA,MAID04C,GAA2B/7C,YAAY87C,GAAmC,CAC/Ev/B,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIvE,EAAS,OACX5B,cAACmuD,GAAgC,CAAApuD,SAC7BC,cAAA,KAAAD,SAAIF,EAAE,iCAIZ,GAAIgC,EACF,OACEvB,eAAC6tD,GAAgC,CAAApuD,SAAA,CAC3BrH,QAAQC,IAAIkJ,GACd7B,cAAA,KAAAD,SAAIF,EAAE,iCAKd,MAAM0uD,EAA2BzsD,EAAKysD,yBAEtC,OACEvuD,cAACmuD,GAAgC,CAAApuD,SAC/BC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KAAKqrD,EAAyBnvC,WAC7CC,QAAS,IAAInc,KAAKqrD,EAAyBlvC,SAC3C7W,YAAa+lD,EAAyB/lD,aAExCmK,iBAAkBq7C,GAClBp7C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZy7C,EAAwB,CAAEpjD,UAAW,CACnC6H,MAAO,CACL6C,GAAIA,EACJwJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B7W,YAAaqK,EAAOrK,cAErB0K,eAAgB,CACf,CAACC,MAAOu6C,GAAuCxiD,UAAW,CACxDo2C,oBAAqB3L,OAG1BviC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6DAA+D,CAC5E0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACouD,GAAgC,CAC/B18C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KC9GO,MAAMgsB,GAAuC90D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwC3C+0D,GAAoC/0D,GAAI;;;;;;;;ECxCxCg1D,GAAoCx9C,OAAaC,MAAM,CAClEvO,QAASsO,OACTy9C,aAAcz9C,OACdrO,OAAQqO,OACRlJ,KAAMkJ,OACN09C,UAAW19C,OACX29C,IAAK39C,OACL49C,OAAQ59C,OACLkF,IAAIvW,YAAE,YACTmpC,WAAY93B,OACTkF,IAAIvW,YAAE,cC6HIF,qBAAkB4C,aA1Ha3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OACpIU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,UACL0lB,QAAS/Y,EAAOjQ,UAChB5C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,qDAEnDG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,aAG3CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACL0lB,QAAS/Y,EAAOhQ,SAChB7C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,oDAEnDG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,aAG1CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,eACL0lB,QAAS/Y,EAAO87C,eAChB3uD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0DAEnDG,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,gBAIlDnS,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAO3J,KAAQ,0BAA4B,eACvDiK,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,YACbxG,aAAchO,EAAO+7C,UACrB51D,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,aAAa,GAC7BC,EAAc,YAAaiH,EAAElf,OAAOmiB,aAAa,IAGvDvnB,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,wBAE5DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,eAAeE,SAAA,CAClCC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,MACbxG,aAAchO,EAAOg8C,IACrB71D,KAAM6tB,GACNhN,OAASyK,IACPlH,EAAgB,OAAO,GACvBC,EAAc,MAAOiH,EAAElf,OAAOmiB,aAAa,IAGjDvnB,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,wBAEtDI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gDAAgDE,SAAA,CACnEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOm9C,OAAU,0BAA4B,eACzD78C,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oDAAoDE,SAAA,CACvEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,aACLhG,UAAYyR,EAAOq3B,WAAc,0BAA4B,eAC7D/2B,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,gCAKnEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAOJ,KC4HIF,qBAAkB4C,aA/OjC,SAA0C3C,GAAe,IAAd,EAAEC,EAAC,MAAEuD,GAAMxD,EACpD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBJ,EAAa,sBACb,QAAEz4C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkrD,GAAsC,CAC9EtjD,UAAW,CAAE0K,GAAIzK,GACjBG,YAAa,kBAERyjD,GAAkCx8C,YAAYk8C,IAErD,GAAI7sD,EAAS,OACX5B,cAAC86C,GAA2B,CAACT,WAAYA,EAAWt6C,SAClDO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,GAAIgC,EAAO,OACTvB,eAACw6C,GAA2B,CAACT,WAAYA,EAAWt6C,SAAA,CACjDrH,QAAQC,IAAIkJ,GACbvB,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sCAMd,MAAMwjB,EAAUvhB,EAAKuhB,QACfnN,EAAcpU,EAAKktD,0BAA0BjmD,MAAM,GAAGG,KAE5D,OACElJ,cAAC86C,GAA2B,CAC1Bx2C,KAAM+e,EACNg3B,WAAYA,EAAWt6C,SAEvBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,kCAEjBG,cAACwS,KAAM,CACLC,cAAe,CACb7P,QAASsT,EAAYtT,QACrB+rD,aAAcz4C,EAAYy4C,aAC1B9rD,OAAQqT,EAAYrT,OACpBmF,KAAMkO,EAAYlO,KAClB4mD,UAAW14C,EAAY04C,UACvBC,IAAK34C,EAAY24C,IACjBC,OAAQ54C,EAAY44C,OACpB9lB,WAAY9yB,EAAY8yB,YAE1Br2B,iBAAkB+7C,GAClB97C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZk8C,EAA+B,CAAE7jD,UAAW,CAC1C6H,MAAO,CACLsQ,QAASnN,EAAYmN,QAAQzN,GAC7BhT,QAASiQ,EAAOjQ,QAChB+rD,aAAc97C,EAAO87C,aACrB9rD,OAAQgQ,EAAOhQ,OACfmF,KAAM6K,EAAO7K,KACb4mD,UAAW/7C,EAAO+7C,UAClBC,IAAKh8C,EAAOg8C,IACZC,OAAQj8C,EAAOi8C,OACf9lB,WAAYn2B,EAAOm2B,aAEpB91B,eAAgB,CAEf,CAACC,MAAOq7C,GAAsCtjD,UAAW,CAAC0K,GAAIzK,OAEjEiI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,2DAA6D,CAC1E0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACi7C,GAA2B,CAC1BvpC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,GACR,QAMd,KC9HO,SAAStL,KACd,IAAIK,EAAY,CAAC,EAEbia,EAASvjB,aAAayE,QAAQvE,EAAKvC,6BACnCgzD,EAAe3wD,aAAayE,QAAQvE,EAAKxC,mCAc7C,OAZI6lB,IACFja,EAAU1B,KAAO2b,GAGjBja,EAAUqN,SADS,SAAjBg6C,EAOJv2D,QAAQC,IAAIiP,GAELA,CACT,CCyBiBjI,qBAAkB4C,aA7BV3C,IAAA,IAAC,EAACC,EAAC,QAAEwD,EAAO,QAAE+R,EAAO,SAAErV,GAAUH,EAAA,OACxDI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBAAmBE,SACvCO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC0gB,GAAW,CACVI,gBAAiBtiB,EAAKvC,4BACtBwlB,YAAY,YACZ7H,SAAWzX,IACTzJ,QAAQC,IAAIwJ,GACZ7D,aAAaC,QAAQC,EAAKvC,4BAA6BkG,GACvDiT,EAAQ7N,KAA2B,IAGvCvH,cAACgV,GAAS,CAACH,OAAO,qBAAqB3U,UAAU,eAGrDF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAKG,KCxCT,MAAMmvD,GAAuBx1D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkC3By1D,GAAqBz1D,GAAI;;;;;;;;;;;;;;;;;;;;;EAuBzB01D,GAAkB11D,GAAI;;;;;;;;;EClC7B21D,GAAkB31D,GAAI;;;;;;EAsNbiG,qBAAkB4C,aA7MjC,SAAqB3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAE7BtB,aAAayE,QAAQvE,EAAKxC,oCAC7BsC,aAAaC,QAAQC,EAAKxC,mCAAmC,GAI/DsC,aAAaO,WAAWL,EAAKg+B,gCAG7B,MAAM,QAAE56B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,EAAS,QAAEsF,GAAY9R,YAAS4rD,GAAsB,CAClFhkD,UAAW3D,QAEN+nD,GAAkB/8C,YAAY68C,KAC9BG,GAAkBh9C,YAAY88C,IAE/B/5C,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCC,cAAC0E,IAAM,CAACG,MAAyE,UAAjEvG,aAAayE,QAAQvE,EAAKxC,mCAAkD,UAAW,YAC/F4I,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAKxC,mCAAmC,GAC7DoZ,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAyE,SAAjEvG,aAAayE,QAAQvE,EAAKxC,mCAAiD,UAAW,YAC9F4I,KAAK,KACL1E,UAAU,OACVqP,QAASA,KACPjR,aAAaC,QAAQC,EAAKxC,mCAAmC,GAC7DoZ,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,wBAIP,GAAI+B,EAAS,OACX5B,cAACwvD,GAAgB,CAACp6C,QAASA,EAAQrV,SACjCC,cAACyN,GAAW,CAAA1N,SACTF,EAAE,iCAIT,GAAIgC,EAAO,OACT7B,cAACwvD,GAAgB,CAACp6C,QAASA,EAAQrV,SACjCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uBAAuBE,SAC/CC,cAAA,KAAAD,SAAIF,EAAE,qCAKZ,IAAIsb,EAAarZ,EAAKqZ,WAGtB,OAAKA,EAAWpS,MAAM3J,OAcpBY,cAACwvD,GAAgB,CAACp6C,QAASA,EAAQrV,SACjCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uBACZoP,cAAeqG,EACflG,aAAa,EACbb,SAAU4M,EAAW5M,SACrBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+K,EAAW5M,SAAS8B,WAE7BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2K,WAAWpS,MACtCwF,EAAWiC,EAAgB2K,WAAW5M,SAE5C,OAAOkC,EAASrR,OACZ,CAGE+b,WAAY,CACVzK,WAAYH,EAAe4K,WAAWzK,WACtC3H,MAAO,IAAKwH,EAAe4K,WAAWpS,SAAU0H,GAChDlC,aAGNgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN+B,EAAKqZ,WAAWpS,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAKumD,IAAOzvD,cAAA,QAAAD,SACZO,eAAC4H,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,SAAQ,IAAErG,EAAE,oBACvD,KACRqJ,EAAK+P,SAAYjZ,cAAA,QAAAD,SACjBC,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,wBACnC,OANIyM,gBAQhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC7BmJ,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAChCG,cAACyE,IAAI,CAACrC,GAAK,kBAAiB8G,EAAK0M,UAAU7V,SACzCC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAKTG,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,mBACToE,KAAK,GACLsL,QAASA,KACP,IACImgD,EADA95C,EAAK1M,EAAK0M,GAGZ85C,EADmE,SAAjEpxD,aAAayE,QAAQvE,EAAKxC,mCAM9BszD,EAAe,CAAEpkD,UAAW,CAC1B6H,MAAO,CACL6C,KACAX,UAAW/L,EAAK+L,WAElB/B,eAAgB,CAClB,CAACC,MAAO+7C,GAAsBhkD,UAAW3D,SACrC6L,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EAChB4G,IAAMC,QAC2CzT,EAA7C6vD,EAA+C,yBAA7B,0BAAwD,CAC1En8C,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAC1D,EACA9B,SAEAmJ,EAAK+L,SAELpV,EAAE,mBADFG,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,YAOzBgD,EAAK+L,SACLjV,cAAA,UAAQE,UAAU,2BAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,oCACdyX,eAAgBhX,eAAA,QAAAP,SAAA,CAAMC,cAAA,SAAMA,cAAA,SAAMA,cAAA,MAAAD,SAAIC,cAAA,MAAAD,SAAKmJ,EAAKhD,YAChDqR,WAAY1X,EAAE,yBACd+Y,eAAgB22C,EAChB93C,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAO+7C,GAAsBhkD,UAAW3D,SAE3C,EACFxH,SAEFC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBArBnC,KAnDgBoG,kBAZzBA,eAwFJ,aA3IxBtM,cAACwvD,GAAgB,CAACp6C,QAASA,EAAQrV,SACjCC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,uBACboP,cAAeqG,EAAcvV,SACxCC,cAAA,KAAAD,SACqE,SAAjEzB,aAAayE,QAAQvE,EAAKxC,mCAC1B6D,EAAE,+BACFA,EAAE,iCA4Id,KC9LeF,qBAAkB4C,aA/BL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC1EU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,8BAK/DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SACvDF,EAAE,yBAGN,KCrBX,MAAM8vD,GAAej2D,GAAI;;;;;;;;EAUnByM,GAAY,iBAkEHxG,qBAAkB4C,aAhEjC,SAAwB3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACrC,MAAOgwD,GAAer9C,YAAYo9C,IAElC,OACE3vD,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,mBAAmBE,SACvCC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAWA,SAG3BnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACjBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,+BAEfG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,IAEvB0M,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChC4jD,EAAY,CAAE1kD,UAAW,CACvB6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACb2pD,KAAK,IAEN38C,eAAgB,CACf,CAACC,MAAO+7C,GAAsBhkD,UAAW3D,SAE5C6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAMguD,EAAahuD,EAAKiuD,eAAe/sC,SAASpN,GAChDvS,EAAQnB,KAAM,kBAAiB4tD,UAC/Bz8C,IAAMC,QAASzT,EAAE,mCAAqC,CAClD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACtBzM,cAACgwD,GAAmB,CAClBt+C,aAAcA,EACdC,OAAQA,EACRxL,UAAWA,IACX,iBAU1B,KCxDexG,sBA7Bf,SAA6BC,GAA+B,IAA9B,EAACC,EAAC,WAAEiwD,EAAU,WAAEzV,GAAWz6C,EACrD,OACEU,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CAC5BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,mBAAqB0tD,EAAa,QACtCztD,KAAK,OACLtB,OAAwB,SAAfs5C,EAAuBt6C,SAE/BF,EAAE,iBANEyM,gBAQTtM,cAACmN,GAAoB,CACjBvD,WAAW,OACXC,SAAS,iBAAgB9J,SACzBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,mBAAqB0tD,EAAa,YACtCztD,KAAK,YACLtB,OAAwB,aAAfs5C,EAA2Bt6C,SAEvCF,EAAE,qBANMyM,oBAWrB,ICae3M,qBAAkB4C,aAnCjC,SAA6B3C,GAEzB,IAF0B,EAC5BC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,UAAE2rB,EAAU,GAAE,WAAE2uB,EAAW,GAAE,UAAEl0C,EAAU,iBAAgB,qBAAE01B,EAAqB,IAC5Gj8B,EACC,MAAMkwD,EAAa1sD,EAAMmK,OAAO0iD,YAC1BC,EAAWrwD,EAAE,uBAOnB,OALAsG,EAAY7H,aAAayE,QAAQvE,EAAKg+B,gCACjCr2B,IACHA,EAAY,kBAIZnG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAQ,GAAE8pD,OAAcxkC,IAAY3rB,SAC/CO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAACyG,GAAU,CAACN,UAAWA,IACrB01B,OAGNv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAACmwD,GAAoB,CAACL,WAAYA,EAAYzV,WAAYA,eAOxE,KC0Ie16C,qBAAkB4C,aA3KjC,SAA6B3C,GAA2F,IAA1F,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EACnH,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,MACL0lB,QAAS/Y,EAAO48C,MAEhBzvD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,oBAEnDG,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,aAGvCnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0lB,QAAS/Y,EAAOoG,WAEhBjZ,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yBAEnDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,gBAI9CnS,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOy+C,aAAgB,0BAA4B,eAC/Dn+C,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,0BAGjEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAO0+C,aAAgB,0BAA4B,eAC/Dp+C,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,6BAInEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOqX,MAAS,0BAA4B,eACxD/W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAO2+C,OAAU,0BAA4B,eACzDr+C,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOoX,QAAW,0BAA4B,eAC1D9W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,WACLhG,UAAYyR,EAAOonC,SAAY,0BAA4B,eAC3D9mC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOqnC,KAAQ,0BAA4B,eACvD/mC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,UACLhG,UAAYyR,EAAOsnC,QAAW,0BAA4B,eAC1DhnC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,KACZy2C,GAAkB7sC,KAChBktC,GAAWj5C,cAAA,UAAQmC,MAAO82C,EAAQC,KAAKn5C,SAAak5C,EAAQE,MAAf7sC,qBAGnDtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kDAAkDE,SAAA,CACrEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,eACLhG,UAAYyR,EAAOuX,aAAgB,0BAA4B,eAC/DjX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,0BAGjEF,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sDAAsDE,SAAA,CACvEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOwX,gBAAmB,0BAA4B,eAClElX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,gCAKxEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UAENR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBASf,KCvDeF,qBAAkB4C,aA7GjC,SAAyB3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAMkwD,EAAa1sD,EAAMmK,OAAO0iD,YAC1B5V,EAAa,OACbrrC,EAAYnP,EAAE,6BACbyvD,GAAkB/8C,YAAY68C,KAC/B,QAAExtD,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS6rD,GAAoB,CAC5DjkD,UAAW,CACT0K,GAAIk6C,KAKR,GAAIluD,EAAS,OAAO5B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAWt6C,SAC7DC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAACC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAI/C,GAAIa,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAWt6C,SAClDC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,kCAKpB,MAAMqW,EAAcpU,EAAKkhB,SAEzB,OACEhjB,cAACuwD,GAAoB,CAAClW,WAAYA,EAAY3uB,UAAWxV,EAAYhQ,KAAKnG,SACxEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbg9C,IAAKv5C,EAAYu5C,IACjBx2C,SAAU/C,EAAY+C,SACtB/S,KAAMgQ,EAAYhQ,KAClB8iB,MAAO9S,EAAY8S,MACnBsnC,OAAQp6C,EAAYo6C,OACpBvnC,QAAS7S,EAAY6S,QACrBgwB,SAAU7iC,EAAY6iC,SACtBC,KAAM9iC,EAAY8iC,KAClBC,QAAS/iC,EAAY+iC,QACrBoX,aAAcn6C,EAAYm6C,aAC1BD,aAAcl6C,EAAYk6C,aAC1BlnC,aAAchT,EAAYgT,aAC1BC,gBAAiBjT,EAAYiT,iBAG/BvW,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAIk6C,EACJL,IAAK58C,EAAO48C,IACZx2C,SAAUpG,EAAOoG,SACjB/S,KAAM2M,EAAO3M,KACb8iB,MAAOnW,EAAOmW,MACdsnC,OAAQz9C,EAAOy9C,OACfvnC,QAASlW,EAAOkW,QAChBgwB,SAAUlmC,EAAOkmC,SACjBC,KAAMnmC,EAAOmmC,KACbC,QAASpmC,EAAOomC,QAChBoX,aAAcx9C,EAAOw9C,aACrBD,aAAcv9C,EAAOu9C,aACrBlnC,aAAcrW,EAAOqW,aACrBC,gBAAiBtW,EAAOsW,iBAG1BmmC,EAAe,CAAEpkD,UAAW,CAC1B6H,MAAOioC,GACN9nC,eAAgB,CAEf,CAACC,MAAO+7C,GAAsBhkD,UAAW3D,MAEzC,CAAC4L,MAAOg8C,GAAoBjkD,UAAW,CAAC,GAAM4kD,OAEjD18C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,oCAAsC,CACnD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwwD,GAAoB,CACnB9+C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,GACR,OAMd,KC7HO,MAAMuP,GAAqB1oB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyCzB4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;EAuB7B+2D,GAAqB/2D,GAAI;;;;;;;;ECwCvBiG,qBAAkB4C,aA1FjC,SAA6B3C,GAAkC,IAAjC,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,EAAQ,QAAEnY,GAAQzD,EAC1D,MAAMkwD,EAAa1sD,EAAMmK,OAAO0iD,YAC1B5V,EAAa,WACbrrC,EAAYnP,EAAE,2BACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS8e,GAAoB,CACvElX,UAAW,CACT8X,SAAU8sC,GAEZxkD,YAAa,iBAETuwB,EAAuB77B,cAACgV,GAAS,CACrC9U,UAAU,OACV2U,OAAS,kBAAiBi7C,mBAO5B,GAJAxxD,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UACjErlB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAGjE/hB,EAAS,OAAO5B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SACzGC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,mCAIpB,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAYxe,qBAAsBA,EAAqB97B,SAC9FC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,kCAKpB,MAAMmjB,EAAWlhB,EAAKkhB,SAChBH,EAAW/gB,EAAK+hB,gBAGtB,OAAKhB,EAAS9Z,MAAM3J,OAalBY,cAACuwD,GAAoB,CAAClW,WAAYA,EAAY3uB,UAAW1I,EAAS9c,KAAM21B,qBAAsBA,EAAqB97B,SACjHC,cAACyN,GAAW,CACVuB,UAAWA,EACXI,aAAa,EACbb,SAAUsU,EAAStU,SACnBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyS,EAAStU,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqT,gBAAgB9a,MAC3CwF,EAAWiC,EAAgBqT,gBAAgBtV,SAEjD,OAAOkC,EAASrR,OACZ,CAGEykB,gBAAiB,CACfnT,WAAYH,EAAesT,gBAAgBnT,WAC3C3H,MAAO,IAAKwH,EAAesT,gBAAgB9a,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEFC,cAAC8jB,GAAmB,CAClBjB,SAAUA,EACV/J,iBAAiB,QA1CrB9Y,cAACuwD,GAAoB,CAAClW,WAAYA,EAAY3uB,UAAW1I,EAAS9c,KAAM21B,qBAAsBA,EAAqB97B,SACjHC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,4CA4ClB,KCzDeF,qBAAkB4C,aA/BP3C,IAAA,IAAC,EAAEC,EAAC,UAAEsd,EAAS,aAAEzL,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OAC1EU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iCAAiCE,SAAA,CACpDC,cAACgS,KAAK,CAACG,UAAU,SACXjM,KAAK,sBACLhG,UAAYyR,EAAO6b,oBAAuB,0BAA4B,eACtEvb,aAAa,MAAKlS,SAErBod,EAAUwP,qBAAqB5jB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,MAG3DtM,cAACkS,KAAY,CAAChM,KAAK,sBAAsBiM,UAAU,OAAOjS,UAAU,wBAEtEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOuH,QAAW,0BAA4B,eAC1DjH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,2BAG5DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KC+FIxG,qBAAkB4C,aAzHjC,SAA+B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACnD,MAAMkwD,EAAa1sD,EAAMmK,OAAO0iD,YAC1B5V,EAAa,WACbrrC,EAAYnP,EAAE,oCACdsG,EAAa,kBAAiB2pD,cAE9B,QAAEluD,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,GAAwB,CAC9DpN,UAAW,CACT8X,SAAU8sC,MAIT9K,GAAiBzyC,YAAYk+C,GAAoB,CACtD,GAKF,GAAI7uD,EACF,OAAO5B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACtEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,UAMxC,GAAIc,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACuwD,GAAoB,CAAClW,WAAYA,EAAYl0C,UAAWA,EAAUpG,SACtEC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAMhB,MAAMmjB,EAAWlhB,EAAKkhB,SAChB2J,EAAuB7qB,EAAK6qB,qBAC5Bs4B,EAAoBt4B,GAAwBA,EAAqB5jB,OAAS4jB,EAAqB5jB,MAAM,GAAGG,KAAK0M,GAGnH,OACE5V,cAACuwD,GAAoB,CAAClW,WAAYA,EAAY3uB,UAAW1I,EAAS9c,KAAMC,UAAWA,EAAUpG,SAC3FC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACb+a,oBAAqBy3B,EACrB/rC,QAAS,IAGXtG,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZmyC,EAAc,CAAE95C,UAAW,CACzB6H,MAAO,CACLiQ,SAAU8sC,EACVtiC,oBAAqB3a,EAAO2a,oBAC5BtU,QAASrG,EAAOqG,UAEjBhG,eAAgB,CACjB,CAACC,MAAOiP,GAAoBlX,UAAW,CAAC8X,SAAU8sC,OAEnD18C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE7BpQ,EAAQnB,KAAK,0BAA4BJ,EAAKojD,qBAAqBhhC,eAAetO,IAClF9C,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACF/S,SAEH0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,WAAE4U,EAAU,gBAAErK,EAAe,cAAEC,GAAe5Q,EAAA,OAC5EzM,cAAC0wD,GAAiB,CAChBvzC,UAAWrb,EACX4P,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EACZrK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GAEO,OAyBhC,KCvHA,MAAMwqD,WAAqBjjD,YACzBC,YAAYa,GACV4F,MAAM5F,GACN9V,QAAQC,IAAI,wBACZD,QAAQC,IAAI6V,EACd,CAEAO,SACE,MAAMlP,EAAIP,KAAKkP,MAAM3O,EACfwN,EAAYxN,EAAE,kBAEpB,OACEG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBACtBG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACmN,GAAoB,CACnBtD,SAAS,gBACTD,WAAW,OAAM7J,SAEjBC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAG4N,GAAI,EAAEvU,SACpCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4BACNA,EAAE,gCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,+BAKnDpN,cAACmN,GAAoB,CACnBtD,SAAS,gBACTD,WAAW,OAAM7J,SAEjBC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,2BACNA,EAAE,+BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,8BAKnDpN,cAACmN,GAAoB,CACnBtD,SAAS,gBACTD,WAAW,OAAM7J,SAEjBC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,2BACNA,EAAE,+BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAAClH,UAAWA,EAAWD,KAAK,2CAqBhE,EAIUzN,qBAAkB4C,YAAWouD,K,+DCpE7BhxD,qBAAkB4C,aAvBjC,SAA8B3C,GAAkG,IAAjG,EAAEC,EAAC,UAAEK,EAAS,gBAAE0wD,EAAgBnhD,IAAGA,GAAC,YAAEohD,EAAYphD,IAAGA,GAAC,eAAEqhD,EAAerhD,IAAGA,GAAC,YAAEshD,GAAY,GAAKnxD,EAC3H,OACEU,eAACoE,IAAOqB,KAAI,CAAC7F,UAAWA,EAAUH,SAAA,CAChCC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACN0K,QAAUqhD,IAEVG,GACF/wD,cAAC0E,IAAM,CACLrC,KAAK,SACLwC,MAAM,YACN0K,QAAUuhD,IAEZ9wD,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUshD,MAIlB,KCfA,SAAS5uC,GAAgB9f,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GACxC,OAAI6f,GAGK,EAEX,CAEA,SAASrH,GAA6BC,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KACV,CAEA,MAAMypD,GAAc,kCAwHLrxD,qBAAkB4C,aArHjC,SAA8B3C,GAAiC,IAAhC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,GACrD4b,EAAUy1C,GAAe97C,mBAAS8M,GAAgBzjB,EAAK1B,oCACvDo0D,EAAWC,GAAgBh8C,mBAAS8M,GAAgBzjB,EAAK7B,qCACzD4H,EAAY6sD,GAAiBj8C,mBAAS8M,GAAgBzjB,EAAK5B,sCAC3Dy0D,EAAOC,GAAYn8C,mBAAS8M,GAAgBzjB,EAAK3B,gCAEtD,OACEyD,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAC0E,IAAM,CACLxE,UAAU,cACV2E,MAAM,OACND,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAK7B,kCAAmC,IAC7D2B,aAAaC,QAAQC,EAAK5B,mCAAoC,IAC9D0B,aAAaC,QAAQC,EAAK3B,8BAA+B,IACzDyB,aAAaC,QAAQC,EAAK1B,iCAAkC,IAC5Dm0D,EAAY,IACZG,EAAc,IACdD,EAAa,IACbG,EAAS,IACTl8C,EAAQ7N,KAA2B,EACnCxH,SAEDF,EAAE,0BAELG,cAAA,MAAIE,UAAU,YAAWH,SAAEF,EAAE,yBAGjCS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAEfO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAOqZ,EACP5B,SAAYsB,IACV+1C,EAAY/1C,EAAM9V,OAAOjD,OACzBwY,GACEnc,EAAK1B,iCACLoe,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0CAATyM,gBACrBxK,EAAK6qC,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC7ChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,SAI7DtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAEfO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAO+uD,EACPt3C,SAAYsB,IACVi2C,EAAaj2C,EAAM9V,OAAOjD,OAC1BwY,GACEnc,EAAK7B,kCACLue,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,2CAATyM,gBACrBxK,EAAK+mC,uBAAuB9/B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,SAI7DtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAEfO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAOoC,EACPqV,SAAYsB,IACVk2C,EAAcl2C,EAAM9V,OAAOjD,OAC3BwY,GACEnc,EAAK5B,mCACLse,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,4CAATyM,gBACrBxK,EAAKo+B,YAAYn3B,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACnCzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,SAIjEtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAEfO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAOkvD,EACPz3C,SAAYsB,IACVo2C,EAASp2C,EAAM9V,OAAOjD,OACtBwY,GACEnc,EAAK3B,8BACLqe,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,uCAATyM,gBACrBxK,EAAKyuC,mBAAmBxnC,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC1ChoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,cAOrE,KCvHKhO,aAAayE,QAAQvE,EAAKhC,8BAC7B9D,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKhC,2BAA4B4O,MAASC,OAAO,eACtE/M,aAAaC,QAAQC,EAAK/B,4BAA6B2O,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,gBAiHzE1L,qBAAkB4C,aA7GjC,SAA4B3C,GAA4C,IAA1C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAE+B,EAAI,QAAEsT,GAASxV,EA+BnE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,0BAA0BE,SAC7EO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAA,QAAMoG,MAAOvG,EAAE,6CAA6CE,SAC1DC,cAAC0E,IAAM,CACLrC,KAAK,OACLkvD,QAAQ,OACRrxD,UAAU,OACV2E,MAC6D,aAAzDvG,aAAayE,QAAQvE,EAAK9B,4BAAgD4B,aAAayE,QAAQvE,EAAK9B,2BAC5F,YAAV,QAEF6S,QAASA,KACPjR,aAAaC,QAAQC,EAAK9B,0BAA2B,YACrD0Y,EAAQ7N,KAA2B,MAIzCvH,cAAA,QAAMoG,MAAOvG,EAAE,8CAA8CE,SAC3DC,cAAC0E,IAAM,CACLrC,KAAK,QACLnC,UAAU,OACV2E,MAC4D,cAAzDvG,aAAayE,QAAQvE,EAAK9B,2BAC3B,QAAU,YAEZ6S,QAASA,KACPjR,aAAaC,QAAQC,EAAK9B,0BAA2B,aACrD0Y,EAAQ7N,KAA2B,MAIzCvH,cAACob,GAAY,CACXlb,UAAU,+CACVyZ,SAAU,IAAIzW,KAAK5E,aAAayE,QAAQvE,EAAKhC,6BAC7Csd,aAAa,EACbF,SAAWpN,IACT,IAAIglD,EAAepmD,IAAOoB,GACtBilD,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKhC,2BAA4Bg1D,EAAanmD,OAAO,eAC1E/M,aAAaC,QAAQC,EAAK/B,4BAA6Bg1D,EAAcpmD,OAAO,eAE5E3S,QAAQC,IAAI4O,MAEZ6N,EAAQ7N,KAA2B,EAErCwS,gBAAiBla,EAAE,iCAErBG,cAAC0xD,GAAqB,CACpBxxD,UAAU,sCACV0wD,gBApFd,WACE,IAAIY,EAAepmD,IAAO9M,aAAayE,QAAQvE,EAAKhC,6BAA6Bk/B,SAAS,EAAG,QACzF+1B,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKhC,2BAA4Bg1D,EAAanmD,OAAO,eAC1E/M,aAAaC,QAAQC,EAAK/B,4BAA6Bg1D,EAAcpmD,OAAO,eAE5E+J,EAAQ7N,KACV,EA6EcspD,YA3Ed,WACE,IAAIW,EAAepmD,IAAO9M,aAAayE,QAAQvE,EAAKhC,6BAA6BkN,IAAI,EAAG,QACpF+nD,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKhC,2BAA4Bg1D,EAAanmD,OAAO,eAC1E/M,aAAaC,QAAQC,EAAK/B,4BAA6Bg1D,EAAcpmD,OAAO,eAE5E+J,EAAQ7N,KACV,EAoEcupD,eAlEd,WACE,IAAIa,EAAkBvmD,MAClBwmD,EAAmBxmD,IAAOumD,GAAiBjoD,IAAI,EAAG,QAEtDpL,aAAaC,QAAQC,EAAKhC,2BAA4Bm1D,EAAgBtmD,OAAO,eAC7E/M,aAAaC,QAAQC,EAAK/B,4BAA6Bm1D,EAAiBvmD,OAAO,eAE/E+J,EAAQ7N,KACV,IA4DYvH,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,gBAAe9J,SAC5CC,cAACgV,GAAS,CAACH,OAAQ,wBAAyB3U,UAAU,gBAI5DF,cAACI,IAAKC,IAAG,CAAAN,SACTO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACb+B,EACA9B,cAAC6xD,GAAqB,CAAC/vD,KAAMA,EAAMsT,QAASA,IAC5C,GACDrV,aAOb,KCtGA,MAAM+xD,GAAwBp4D,GAAI;;;;;;EA+C7B4E,aAAayE,QAAQvE,EAAKhC,8BAC7B9D,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKhC,2BAA4B4O,MAASC,OAAO,eACtE/M,aAAaC,QAAQC,EAAK/B,4BAA6B2O,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,gBA2PzE1L,qBAAkB4C,aAvPjC,SAAwBkK,GAAmB,IAAjB,EAAE5M,EAAC,QAAEwD,GAASoJ,EACtC,MACM7B,EADcpH,qBAAWvC,GACA4J,kBAEzB,QAACjJ,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAW9R,YAASi8C,GAAmB,CAClEr0C,UAAW3D,KACX+D,YAAa,kBAERymD,GAAuBx/C,YAAYu/C,IAE1C,OAAIlwD,EAEA5B,cAACgyD,GAAmB,CAAAjyD,SAClBC,cAAA,KAAAD,SAAIF,EAAE,iCAKRgC,EAEA7B,cAACgyD,GAAmB,CAAAjyD,SAClBC,cAAA,KAAAD,SAAIF,EAAE,gCAKIiC,EAAK8J,gBAGRxM,OASXY,cAACgyD,GAAmB,CAAClwD,KAAMA,EAAMsT,QAASA,EAAQrV,SAC9C+B,EAAK8J,gBAAgBG,KAAIic,IAAA,IAAC,KAAExb,EAAI,QAAE5J,GAASolB,EAAA,OAC3C1nB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbO,eAAA,MAAAP,SAAA,CACGiH,GAAWoE,IAAOoB,GAAMnB,OAAO,SAAS,IAAE,IAC3CrL,cAAA,SAAOE,UAAU,aAAYH,SACtBqL,IAAOoB,GAAMnB,OAAO,WAG1BzI,EAAQxD,OAMTwD,EAAQmJ,KAAIkc,IAAA,IACV,eAAEvb,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,QACNI,EAAO,YACPC,EAAW,YACXF,EAAW,QACX6a,EAAO,KACPrb,EAAI,SACJq4C,EAAQ,MACRC,EAAK,yBACL1zC,EAAwB,sBACxBnF,EAAqB,kBACrBC,EAAiB,UACjBmF,EAAS,QACTC,EAAO,OACPC,EAAM,wBACNC,EAAuB,cACvBigB,GAAehF,EAAA,OACbjoB,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAAA,CAC7BC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SACfO,eAAA,MAAAP,SAAA,CACGqI,GAAuBC,GACxB/H,eAAA,QAAMJ,UAAU,OAAMH,SAAA,CAErB0H,EAAsBvB,KAAK,IAAG,IAE9BkF,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAG,OAEnDlD,GAAqB1H,cAAA,SAAOE,UAAU,aAAYH,SAChD2H,EAAkBxB,cAK3B5F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAAA,CAEZsjB,EACCtb,GAAqBsb,EAAQC,SAAUtb,GACvChI,cAAA,QAAME,UAAU,WAAUH,SAAEF,EAAE,oCACjC,IAACG,cAAA,SACFA,cAAA,SAAOE,UAAU,aAAYH,SACzBsgD,EAAYt4C,GAAqBs4C,EAAS/8B,SAAUg9B,GAAS,QAGnEhgD,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SAAA,CAEfC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAE0G,EAAyBjF,qBAAqBzB,KACpE5F,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,MAAI6M,EAAyB1G,iBAIjElG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAC5BC,cAAC6qB,IAAQ,CAEP3qB,UAAU,cACVmE,KAAK,OACLkP,SAAS,OACTuX,QAAQ,EAGRC,eACEzqB,eAACoE,IAAM,CACLC,SAAO,EACPE,MAAM,UACND,KAAK,KAAI7E,SAAA,CAETC,cAAA,QAAME,UAAU,YAAWH,SAAEF,EAAE,oBAC/BG,cAAA,QAAME,UAAU,0CAAyCH,SAACC,cAACiG,IAAI,CAACC,KAAK,uBAGzEjE,MAAO,CACLjC,cAACmN,GAAoB,CAAYvD,WAAW,OAAOC,SAAS,yBAAwB9J,SAClFC,cAACyE,IAAI,CAACrC,GAAI,sCAAwCsK,EAAiB,IAAMF,EAAKzM,SAC5EC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,eAActC,SAEhBF,EAAE,uBAHAyM,mBAHgBA,gBAU3BtM,cAACmN,GAAoB,CAAYvD,WAAW,OAAOC,SAAS,yBAAwB9J,SAClFC,cAACyE,IAAI,CAACrC,GAAI,4CAA8CsK,EAAiB,IAAMF,EAAKzM,SAClFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,cAAatC,SACfF,EAAE,kDAFAyM,mBAHgBA,gBAS3BtM,cAACmN,GAAoB,CAAYvD,WAAW,OAAOC,SAAS,wBAAuB9J,SACjFC,cAACyE,IAAI,CAACrC,GAAI,gCAAkCsK,EAAiB,IAAMF,EAAKzM,SACtEC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,SAAQtC,SAEZF,EAAE,iBAHEyM,mBAHgBA,gBAU3BhM,eAAC6M,GAAoB,CAAYvD,WAAW,SAASC,SAAS,gBAAe9J,SAAA,CAC3EC,cAAC6qB,IAASonC,YAAW,GAAM3lD,gBAC3BtM,cAACyE,IAAI,CAACrC,GAAI,8BAAgCsK,EAAe3M,SACvDC,cAAC6qB,IAASzmB,KAAI,CAEZ6D,MAAOpI,EAAE,0CACTqyD,UAAU,YACV7vD,KAAK,SAAQtC,SAEVF,EAAE,iBALAyM,oBAJgBA,gBAa3BhM,eAAC6M,GAAoB,CAAYvD,WAAW,SAASC,SAAS,gBAAe9J,SAAA,CAC3EC,cAAC6qB,IAASonC,YAAW,GAAM3lD,gBAC3BtM,cAAA,QAAME,UAAU,WAAUH,SAC1BC,cAAC6qB,IAASzmB,KAAI,CAEZ6D,MAAOpI,EAAE,0CACTqyD,UAAU,SACV7vD,KAAK,UACLkN,QAASA,KAnOpB3P,KAAqF,IAApF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,eAAEqB,EAAc,kBAAEnB,GAAkB7X,EACpG8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAgBJ,UAAU,YAAWH,SAAA,CACnCC,cAAA,MAAAD,SAAKF,EAAE,4BACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,+BACjES,eAAA,UACEJ,UAAU,iBACVqP,QAASA,KACPqJ,EAAenB,GACZrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,YAAY,IAAErG,EAAE,mCAxBrByM,eA0BJ,GAGV,EAmMgCqM,CAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,uCACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CACbqL,IAAOoB,EAAO,IAAMK,GAAWxB,OAAO,MAAM,IAAE,MAC9CD,IAAOoB,EAAO,IAAMM,GAASzB,OAAO,MAAM,IAAE,IAAI,MAAI,IACpDuB,EAAyBjF,qBAAqBzB,KAAK,IAAE,IACrD0G,EAAyB1G,KACzBuB,EAAsB0xC,OALD7sC,gBAOxBiL,WAAY1X,EAAE,4BACd+Y,eAAgBm5C,EAChBt6C,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAIlJ,IAELwG,eAAgB,CACjB,CAAEC,MAAOosC,GAAmBr0C,UAAW3D,SAEzC,EACFxH,SACHF,EAAE,mBA1BIyM,oBAJkBA,kBA5DxBA,qBAkGXhM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,GAAG3G,SAC7BO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBC,cAACugD,GAAW,CAACrgD,UAAU,OAAOo/C,SAAUryB,IACpB,aAAlBtgB,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,kBAC3C,KACkB,0BAAlB8M,EACA3M,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,qBAC3C,KACW,cAAXwI,EACArI,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,OAAMH,SAAEF,EAAE,uBAC3C,KACAS,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAACC,cAAA,SAAOuI,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,WAG/F1I,cAACI,IAAKoF,IAAG,CAACyH,GAAI,EAAGC,GAAI,EAAGxG,GAAI,EAAE3G,SAE5BC,cAACmN,GAAoB,CAACvD,WAAW,OAAOC,SAAS,yBAAwB9J,SACvEC,cAACyE,IAAI,CAACrC,GAAI,sCAAwCsK,EAAiB,IAAMF,EAAKzM,SAC5EO,eAAA,SAAOJ,UAAU,mBAAkBH,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAE8G,EAAwB,IAAED,kBA/JtFT,eAqKJ,IA/LMtM,cAAC8G,IAAI,CAAA/G,SACtBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAAA,MAAAP,SAAA,CAAKF,EAAE,+BAA+B,IAACG,cAAA,KAAGE,UAAU,yBATvCoM,eAyMH,MAnNtBtM,cAACgyD,GAAmB,CAAAjyD,SAClBC,cAAA,KAAAD,SACGF,EAAE,kCAqNX,KC/UO,MAAMsyD,GAAejhD,OAAaC,MAAM,CAC3CxE,cAAeuE,OACZG,SAASxR,YAAE,uBACd+M,yBAA0BsE,OACvBG,SAASxR,YAAE,uBACd4H,sBAAuByJ,OACpBG,SAASxR,YAAE,uBACduf,UAAWlO,OACRipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdgN,UAAWqE,OACRipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdiN,QAASoE,OACNipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdkN,OAAQmE,OACLG,SAASxR,YAAE,uBACduyD,aAAclhD,OACXG,SAASxR,YAAE,uBACdwyD,iBAAkBnhD,OACfG,SAASxR,YAAE,yBCIHF,sBAtBf,SAAqBC,GAA2G,IAA1G,EAACC,EAAC,SAAE8Z,EAAQ,SAAEC,EAASnK,IAAGA,GAAC,OAAEoK,EAAOpK,IAAGA,GAAC,UAAEvP,EAAU,eAAc,UAAEoyD,GAAU,EAAI,gBAAEv4C,EAAgB,IAAGna,EAC3H,MACMgL,EADcpH,qBAAWvC,GACA4J,iBAE/B,OACE7K,cAACga,KAAU,CACTjB,WAAYnO,EACZ+O,SAAUA,EACVI,gBAAkBA,GAAqCla,EAAE,+BACzDia,YAAaw4C,EACbC,gBAAc,EACdC,oBAAkB,EAClBC,cAAe,GACfC,YAAa7yD,EAAE,gBACfK,UAAWA,EACXka,aAAa,SACbR,SAAWpN,GAASoN,EAASpN,GAC7BqN,OAAQA,IAAMA,KAGpB,IC0NiBla,qBAAkB4C,aAjOT3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,UAAE1Z,GAAWvG,EAAA,OAClIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,gCAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,aAGjDnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,kBACL0lB,QAAS/Y,EAAO8/C,kBAClB3yD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,2CAEnDG,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,gBAIrD7R,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kCAAkCE,SAAA,CACrDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,gBACLhG,UAAYyR,EAAOhF,cAAiB,0BAA4B,eAChEsF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,qCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,SAAQpC,SAAaF,EAAE,mCAATyM,gBAC5BtM,cAAA,UAAQmC,MAAM,wBAAuBpC,SAAaF,EAAE,kDAATyM,mBAE7CtM,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,OAAOjS,UAAU,wBAEpC,aAAzB2S,EAAOlG,cAAgC,GACxCrM,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAO+vC,kBAAqB,0BAA4B,eACpEzvC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,oBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,sBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,qBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,qBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,mBAEzBtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,wBAGtEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAO/E,yBAA4B,0BAA4B,eAC3EqF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUsyB,0BAA0B1mC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACtD1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKvB,qBAAqBzB,KAAK,MAAIgD,EAAKhD,OAA/CoG,eAA6D,OAG9FtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAO4+B,mBAAsB,0BAA4B,eACrEt+B,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,KAATyM,gBACrB6Q,EAAUozB,mBAAmBxnC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,OAAOjS,UAAU,6BAIzEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,wBACLhG,UAAYyR,EAAOlK,sBAAyB,0BAA4B,eACxEwK,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU0rB,uBAAuB9/B,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACnDzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,wBAAwBiM,UAAU,OAAOjS,UAAU,wBAExEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAGlC,aAAzB2S,EAAOlG,cAAgC,GACxC3M,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,GACzCrD,gBAAiBla,EAAE,0CAErBG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAKhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACxCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO9E,UAAa,0BAA4B,eAC5D8M,SAAU9G,EAAOhG,UACjB+M,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,GAC3Ck1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACtCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO7E,QAAW,0BAA4B,eAC1D6M,SAAU9G,EAAO/F,QACjB8M,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,GACzCk1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2BAA2BE,SAAA,CAC9CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,SACLhG,UAAYyR,EAAO5E,OAAU,0BAA4B,eACzDkF,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,eACLhG,UAAYyR,EAAOygD,aAAgB,0BAA4B,eAC/DngD,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,6BAInEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uCAAuCE,SAAA,CAC1DC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,mBACLhG,UAAYyR,EAAO0gD,iBAAoB,0BAA4B,eACnEpgD,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,4BAIvEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACmnB,KAAM,CACHC,iBAAiB,mCACjBC,aAAa,kBACbxG,aAAchO,EAAOggD,gBACrB75D,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,kBAAmBiH,EAAElf,OAAOmiB,cAC1CnK,EAAgB,mBAAmB,GAAM,EAAK,IAGpDpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIJ,KC5MEF,qBAAkB4C,aAvBjC,SAA6B3C,GAAiB,IAAhB,EAACC,EAAC,SAAEE,GAASH,EAGzC,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,mBAAmBE,SACtEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UARN,0BAWVnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC0GeJ,qBAAkB4C,aAvHjC,SAAyB3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACpC,MAAMoP,EAAYnP,EAAE,+BAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KAClCw6C,GAAwBvgD,YAAYktC,IAG5C,GAAI79C,EAAS,OACX5B,cAAC+yD,GAAoB,CAAAhzD,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAAO,OACT7B,cAAC+yD,GAAoB,CAAAhzD,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAMd,MAAMsd,EAAYrb,EAElB,OACE9B,cAAC+yD,GAAoB,CAAAhzD,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACftgB,cAAe,SACf+0C,kBAAmB,EACnB90C,yBAA0B,GAC1BnF,sBAAuB,GACvBC,kBAAmB,GACnB0X,UAAW,IAAIlc,KACf2J,UAAW,IAAI3J,KACf4J,QAAS,IAAI5J,KACb6J,OAAQ,GACRqlD,aAAc,GACdC,iBAAkB,GAEpB1/C,iBAAkBw/C,GAClBv/C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAIIwM,EAJAqiC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOlG,gBACT+0C,EAAoB,GAIlBriC,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGrByzC,EAAoB,CAAE5nD,UAAW,CAC/B6H,MAAO,CACLka,cAAepa,EAAOoa,cACtBtgB,cAAekG,EAAOlG,cACtB+0C,kBAAmBA,GAAqB1rC,SAAS0rC,GACjD90C,yBAA0BiG,EAAOjG,yBACjCnF,sBAAuBoL,EAAOpL,sBAC9BC,kBAAmBmL,EAAOnL,kBAC1B0X,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTxS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,SACnCC,OAAQiJ,SAASnD,EAAO9F,QACxBqlD,aAAcp8C,SAASnD,EAAOu/C,cAC9BC,iBAAkBr8C,SAASnD,EAAOw/C,kBAClCQ,gBAAiBhgD,EAAOggD,kBAEzB3/C,eAAgB,CACf,CAACC,MAAOosC,GAAmBr0C,UAAW3D,SAEzC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxB,MAAMkxD,EAAUlxD,EAAKgxD,oBAAoBhV,aAAaloC,GACtDvS,EAAQnB,KAAM,8BAA6B8wD,KAC3C3/C,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAASpT,EAAA,OACrEzM,cAACizD,GAAiB,CAChB91C,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACT1Z,UA1GE,qBA4GgB,OAOpC,KCxIO,MAAM+sD,GAAex5D,GAAI;;;;;;;;EC4FjBiG,sBApFOC,IAAA,IAAC,EAAEC,EAAC,WAAEw6C,EAAU,QAAE2Y,GAASpzD,EAAA,OAC7CU,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CAC1BC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,+BAAiC4wD,EACrC3wD,KAAK,SACLtB,OAAuB,SAAfs5C,EAAsBt6C,SAE7BF,EAAE,iBANEyM,gBAQTtM,cAACmN,GAAoB,CACjBtD,SAAS,sBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,sCAAwC4wD,EAC5C3wD,KAAK,QACLtB,OAAuB,gBAAfs5C,EAA6Bt6C,SAEpCF,EAAE,wBANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,yBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,sCAAwC4wD,EAC5C3wD,KAAK,eACLtB,OAAuB,gBAAfs5C,EAA6Bt6C,SAEpCF,EAAE,wBANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,oBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,iCAAmC4wD,EACvC3wD,KAAK,OACLtB,OAAuB,WAAfs5C,EAAwBt6C,SAE/BF,EAAE,kCANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,4CACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,wCAA0C4wD,EAC9C3wD,KAAK,OACLtB,OAAuB,kBAAfs5C,EAA+Bt6C,SAEtCF,EAAE,0BANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,yCACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,sCAAwC4wD,EAC5C3wD,KAAK,cACLtB,OAAuB,gBAAfs5C,EAA6Bt6C,SAEpCF,EAAE,wBANEyM,oBASF,IC5CF3M,qBAAkB4C,aAhCjC,SAA0B3C,GAAiH,IAAhH,EAACC,EAAC,MAAEuD,EAAK,SAAErD,EAAQ,SAAEsG,EAAS,GAAE,UAAE2I,EAAU,GAAE,YAAEmkD,GAAY,EAAI,eAAEtR,EAAe,GAAE,qBAAEhmB,EAAqB,IAAGj8B,EACtI,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SAE7B,OACEv+C,cAAC2K,GAAW,CAAA5K,SACVO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CACVJ,MAAOvG,EAAE,kBACTwG,SAAUA,EAAStG,SAEnBC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC3BozD,EACDnzD,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBA,IAFaA,IAMpBC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAACozD,GAAa,CAAC/Y,WAAYwH,EAAgBmR,QAASA,aAMhE,KCtBO,SAASK,GAA0BxzD,EAAGmI,GAE3C,OADAtP,QAAQC,IAAIqP,GACJA,GACN,IAAK,MACH,OAAOnI,EAAE,yCACX,IAAK,YACH,OAAOA,EAAE,+CACX,IAAK,QACH,OAAOA,EAAE,2CACX,QACE,MAAO,GAEb,CC2CeF,qBAAkB4C,aA/DjC,SAAsB3C,GAAoG,IAAnG,EAACC,EAAC,MAAEuD,EAAK,SAAErD,EAAQ,eAAE8hD,EAAe,GAAE,YAAEsR,GAAY,EAAI,qBAAEt3B,EAAqB,GAAE,UAAE7sB,EAAU,IAAGpP,EACrH,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,UACvB,QAAE38C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASk8C,GAAiB,CAAEt0C,UAAW,CACtE0K,GAAIo9C,KAON,GAJKhkD,IACHA,EAAYnP,EAAE,gCAGZ+B,EAAS,OACX5B,cAACszD,GAAiB,CAChBtkD,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EACtBgmB,eAAgBA,EAAe9hD,SAE/BC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAAO,OACTvB,eAACgzD,GAAiB,CAChBtkD,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EACtBgmB,eAAgBA,EAAe9hD,SAAA,CAE9BrH,QAAQC,IAAIkJ,GACb7B,cAAA,KAAAD,SAAIF,EAAE,iCAIVnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAM2Q,EAAgB3Q,EAAKg8C,aAErByV,EAAmBr3C,GAAsBzJ,EAAc5F,WACvDxG,EDhDD,SAAgCzG,GAAkG,IAAjG,EAACC,EAAC,SAAE2b,EAAQ,aAAEg4C,EAAY,UAAEtC,EAAS,UAAEuC,EAAS,UAAEr0C,EAAS,cAAEzS,EAAa,kBAAE+0C,GAAkB9hD,EACpI,MAAM2hD,EAAe/kC,GAAgB3c,GAGrC,IAAI6zD,EAEFA,EADoB,WAAlB/mD,EACWvB,IAAOgU,GAAWs0C,aAGlBhS,EAGf,MAAMiS,EAAcpS,EAAamS,EAAW,GAG5C,OAAO7zD,EAAE,iBAAmB,KAAO8zD,EAAc,IAAMvoD,IAAOqoD,GAAWpoD,OAAO,MAAQ,MAAQ6lD,EAAY,MAAQ11C,EAAW,KAAOg4C,EAAe,GACvJ,CCgCmBI,CAAwB,CACvC/zD,EAAGA,EACH2b,SAAU/I,EAAc7F,yBAAyBjF,qBAAqBzB,KACtEstD,aAAc/gD,EAAc7F,yBAAyB1G,KACrDgrD,UAAWz+C,EAAchL,sBAAsBvB,KAC/CutD,UAAWF,EACXn0C,UAAW3M,EAAc2M,UACzBzS,cAAe8F,EAAc9F,cAC7B+0C,kBAAmBjvC,EAAcivC,oBAGnC,OACE1hD,cAACszD,GAAiB,CAChBjtD,SAAUA,EACV2I,UAAWA,EACX6sB,qBAAsBA,EACtBs3B,YAAaA,EACbtR,eAAgBA,EAAe9hD,SAE9BA,GAIP,KC8FeJ,qBAAkB4C,aApJjC,SAA6B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACtC,MAAMgW,EAAKxS,EAAMmK,OAAOgxC,SAClBsD,EAAiB,OAEjB7yC,EAAYnP,EAAE,gCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASk8C,GAAiB,CACzDt0C,UAAW,CAAE0K,GAAIA,MAEXi+C,GAAwBthD,YAAY2gD,IAEtCr3B,EAAuB77B,cAACyG,GAAU,CAACN,UAAU,sBAEnD,GAAIvE,EAAS,OACX5B,cAAC8zD,GAAa,CAACC,gBAAiBlS,EAAgBhmB,qBAAsBA,EAAqB97B,SACzFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAAC8zD,GAAa,CAACC,gBAAiBlS,EAAgBhmB,qBAAsBA,EAAqB97B,SACzFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZ2Q,EAAgB3Q,EAAKg8C,aAE3B,IAAIkW,EAAiB,GACjBvhD,EAAc/K,oBAChBssD,EAAiBvhD,EAAc/K,kBAAkBkO,IAGnD,MAAM29C,EAAmBr3C,GAAsBzJ,EAAc5F,WACvDonD,EAAiB/3C,GAAsBzJ,EAAc3F,SAG3D,IAAIsS,EAAY,KACZC,EAAU,KASd,OARI5M,EAAc2M,YAChBA,EAAY,IAAIlc,KAAKuP,EAAc2M,YAEjC3M,EAAc4M,UAChBA,EAAU,IAAInc,KAAKuP,EAAc4M,UAKjCrf,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAexa,EAAcwa,cAC7BtgB,cAAe8F,EAAc9F,cAC7B+0C,kBAAmBjvC,EAAcivC,kBACjC90C,yBAA0B6F,EAAc7F,yBAAyBgJ,GACjEnO,sBAAuBgL,EAAchL,sBAAsBmO,GAC3DlO,kBAAmBssD,EACnB50C,UAAWA,EACXC,QAASA,EACTxS,UAAW0mD,EACXzmD,QAASmnD,EACTlnD,OAAQ0F,EAAc1F,OACtBqlD,aAAc3/C,EAAc2/C,aAC5BC,iBAAkB5/C,EAAc4/C,iBAChCM,gBAAiBlgD,EAAckgD,gBAC/BE,gBAAiBpgD,EAAcogD,iBAEjClgD,iBAAkBw/C,GAClBv/C,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAIIwM,EAJAqiC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOlG,gBACT+0C,EAAoB,GAIlBriC,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGrBw0C,EAAoB,CAAE3oD,UAAW,CAC/B6H,MAAO,CACL6C,GAAIA,EACJqX,cAAepa,EAAOoa,cACtBtgB,cAAekG,EAAOlG,cACtB+0C,kBAAmB1rC,SAAS0rC,GAC5B90C,yBAA0BiG,EAAOjG,yBACjCnF,sBAAuBoL,EAAOpL,sBAC9BC,kBAAmBmL,EAAOnL,kBAC1B0X,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTxS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,SACnCC,OAAQiJ,SAASnD,EAAO9F,QACxBqlD,aAAcp8C,SAASnD,EAAOu/C,cAC9BC,iBAAkBr8C,SAASnD,EAAOw/C,kBAClCM,gBAAiB9/C,EAAO8/C,gBACxBE,gBAAiBhgD,EAAOggD,kBAEzB3/C,eAAgB,CACf,CAACC,MAAOosC,GAAmBr0C,UAAW3D,SAEzC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAASpT,EAAA,OACzEzM,cAACizD,GAAiB,CAChB91C,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACT1Z,UAxIM,qBAyIN,OAMd,KC9JexG,sBAJOC,IAAA,IAAC,EAAEC,EAAC,UAAEK,GAAWN,EAAA,OACrCI,cAACyG,GAAU,CAACN,UAAU,oBAAoBjG,UAAWA,GAAa,ICqNrDP,qBAAkB4C,aA9LjC,SAAiC3C,GAA0B,IAAzB,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,GAAU5b,EACtD,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAExBg4C,EAAamD,GAAkB/+C,oBAAS,GACzCzI,EAAiBtJ,EAAMmK,OAAOgxC,SAC9BvvC,EAAYnP,EAAE,uBACdgiD,EAAiB,eAEjB,QAAEjgD,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YACnDo9C,GAAqC,CACnCx1C,UAAWi2C,GAAiCz0C,KAIhDpO,aAAaC,QAAQC,EAAKxB,mCAAoCwe,EAASmI,UAUvE,MAAMwwC,EAAsBn0D,cAACmN,GAAoB,CAACvD,WAAW,MAAMC,SAAS,yBAAwB9J,SAClGC,cAACgV,GAAS,CAACH,OAAS,qCAAoCnI,WAAyBxM,UAAU,WAGvF27B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACo0D,GAAa,IACbD,KAIH,GAAIvyD,EAAS,OACX5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oDAKZnH,QAAQC,IAAImJ,GACZ,MAAMg8C,EAAeh8C,EAAKg8C,aACpBuW,EAAcvW,EAAauW,YAC3BC,EAAmBD,EAAYtrD,MAAM3J,OAErCkW,EAAgBhV,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACjCO,eAAA,OAAKJ,UAAU,OAAMH,SAAA,CACnBO,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAEu0D,EAAiB,IAAEz0D,EAAE,4CAAiD,IAAE,IAChGS,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAE+9C,EAAauU,iBAAmBiC,EAAiB,IAAEz0D,EAAE,+DAAoE,IAAE,OAErJG,cAAC0E,IAAM,CAACG,MAAQksD,EAAe,UAAW,YAClCnsD,KAAK,KACL2K,QAASA,KACP2kD,GAAe,GACf,IAAItsD,EAAYu5C,GAAiCz0C,GACjDhU,QAAQC,IAAIiP,GACZwN,EAAQxN,EAAU,EAClB7H,SAEPF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAASksD,EAA0B,YAAX,UACxBnsD,KAAK,KACL1E,UAAU,OACVqP,QAASA,KACP2kD,GAAe,GACf,IAAItsD,EAAYu5C,GAAiCz0C,GAAgB,GACjEhU,QAAQC,IAAIiP,GACZwN,EAAQxN,EAAU,EAClB7H,SAEPF,EAAE,sBAKP,OAAKw0D,EAAYtrD,MAAM3J,OAkBrBY,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CAACuB,UAAWA,EACXT,SAAU8lD,EAAY9lD,SACtBa,aAAa,EACbH,cAAeqG,EACf5G,WAAYA,KACToB,EAAU,CACV5E,UAAW,CACTkF,MAAOikD,EAAY9lD,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBstC,aAAauW,YAAYtrD,MACpDwF,EAAWiC,EAAgBstC,aAAauW,YAAY9lD,SAE1D,OAAOkC,EAASrR,OACZ,CAGEm1D,qBAAsB,CACpB9S,wBAAyB,CACvB/wC,WAAYH,EAAeutC,aAAauW,YAAY3jD,WACpD3H,MAAO,IAAKwH,EAAeutC,aAAauW,YAAYtrD,SAAU0H,GAC9DlC,cAINgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0BACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRs0D,EAAYtrD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKo4C,oBAAoBj+B,QAAQC,WAEpCtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKo4C,oBAAoBniB,yBAAyBj5B,OAErDlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAc,KAE9DzY,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAE/BC,cAAC8xC,GAAU,CAAClB,QAAU,qCAAoClkC,UAAuBxD,EAAK0M,OAEtF5V,cAAC2hD,GAA6B,CAACz4C,KAAMA,SAjBzBoD,eAoBJ,aApFxBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CAACuB,UAAWA,EACXI,aAAa,EACbH,cAAeqG,EAAcvV,SAExCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kDAiFhB,KCtNO,MAAMo3C,GAAqBv9C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC8LvBiG,qBAAkB4C,aAvKjC,SAAuC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,GACtDm3C,EAAYyd,GAAiBr/C,mBAAS7W,aAAayE,QAAQvE,EAAKzB,qCAErE,MAAM2P,EAAiBtJ,EAAMmK,OAAOgxC,SAC9BvvC,EAAYnP,EAAE,6CACdgiD,EAAiB,eAEjB,QAAEjgD,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YACnD2zC,GAAoB,CAClB/rC,UAAWg2C,GAA0BnK,KAInCzhC,EAAgBtV,cAAC8G,IAAKyO,QAAO,CAAAxV,SACjCC,cAAC0gB,GAAW,CACVI,gBAAiBtiB,EAAKzB,mCACtB0kB,YAAY,YACZ7H,SAAWzX,IACT7D,aAAaC,QAAQC,EAAKzB,mCAAoCoF,GAC9DqyD,EAAcryD,GACdiT,EAAQ8rC,GAA0B/+C,GAAO,MAKzC05B,EAAuB77B,cAACkB,IAAMiH,SAAQ,CAAApI,SAC1CC,cAACyG,GAAU,CAACN,UAAY,qCAAoCuG,QAI9D,GAAI9K,EAAS,OACX5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SAAEF,EAAE,2DAK9BnH,QAAQC,IAAImJ,GACZ,MAAMo6B,EAAWp6B,EAAKo6B,SAGtB,OAAK6a,EAoBA7a,EAASnzB,MAAM3J,OAmBlBY,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CAACuB,UAAWA,EACXT,SAAU2tB,EAAS3tB,SACnBa,aAAa,EACbH,cAAeqG,EACf5G,WAAYA,KACToB,EAAU,CACV5E,UAAW,CACTkF,MAAO8rB,EAAS3tB,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0rB,SAASnzB,MACpCwF,EAAWiC,EAAgB0rB,SAAS3tB,SAE1C,OAAOkC,EAASrR,OACZ,CAGEm1D,qBAAsB,CACpB9S,wBAAyB,CACvB/wC,WAAYH,EAAe2rB,SAASxrB,WACpC3H,MAAO,IAAKwH,EAAe2rB,SAASnzB,SAAU0H,GAC9ClC,cAINgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRm8B,EAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoa,UADQhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+f,OADQ3c,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC/BC,cAACyE,IAAI,CAACrC,GAAK,qCAAoCsK,aAA0BxD,EAAK0M,KAAK7V,SACjFO,eAACoE,IAAM,CAACG,MAAM,YAAW9E,SAAA,CACtBF,EAAE,kBAAkB,IAACG,cAACiG,IAAI,CAACC,KAAK,wBAHAoG,kBAPzBA,eAcJ,aA9EtBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CAACuB,UAAWA,EACXI,aAAa,EACbH,cAAeqG,EAAcvV,SAExCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,YAAWtE,SAAEF,EAAE,0DA9BjCG,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CAACuB,UAAWA,EACXI,aAAa,EACbH,cAAeqG,EAAcvV,SAExCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,UAAUhC,KAAK,OAAMtC,SAC9BF,EAAE,iFA8Ff,KCnEeF,qBAAkB4C,aAvGjC,SAAmC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACvD,MAAMuL,EAAY/H,EAAMmK,OAAOktC,WACzBuY,EAAU5vD,EAAMmK,OAAOgxC,SACvBkW,EAAwBrxD,EAAMmK,OAAOmnD,wBACrCvuD,EAAa,qCAAoC6sD,aAAmB7nD,IACpEwpD,EAAUr2D,aAAayE,QAAQvE,EAAKxB,qCAAwC,qCAAoCg2D,IACtH,IAAIhkD,EAAYnP,EAAE,0CAClB,MAAMgiD,EAAiB,cACjBhmB,EAAuB77B,cAACyG,GAAU,CAACN,UAAWA,KAC9C,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu9C,GAAgC,CACxE31C,UAAW,CAAE0K,GAAI6+C,MAEZG,GAA8BriD,YAAYuuC,IAEjD,GAAIl/C,EAAS,OACX5B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,MAIlC,GAAIc,EAAO,OACT7B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAA,KAAAD,SAAIF,EAAE,gCAIV,MAAMwjB,EAAUvhB,EAAKw/C,oBAAoBj+B,QACnCi+B,EAAsBx/C,EAAKw/C,oBAC3BuT,EAAQh1D,EAAE,iBAKhB,OAJAmP,EAAa,GAAEA,KAAaqU,EAAQC,YAAYuxC,KAASvT,EAAoBniB,yBAAyBj5B,OAKpGlG,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb+R,MAAO,GACPpF,UAAW,IAAIlc,MAEjByP,iBAAkBivC,GAClBhvC,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBu1C,EAA2B,CAAE1pD,UAAW,CACtC6H,MAAO,CACL+qC,aAAckV,EACd1R,oBAAqBmT,EACrBr1C,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAOutC,GAAqCx1C,UAAWi2C,GAAiC6R,OAG5F5/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKyyD,GACbthD,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACiiD,GAA2B,CAC1BvwC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KC9GexG,qBAAkB4C,aAJG3C,IAAA,IAAC,EAAEC,EAAC,QAAEmzD,GAASpzD,EAAA,OACjDI,cAACyG,GAAU,CAACN,UAAY,qCAAuC6sD,GAAY,KCsI9DrzD,qBAAkB4C,aA3HjC,SAAoC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACxD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBo9C,EAAU5vD,EAAMmK,OAAOgxC,SACvBp4C,EAAa,qCAAoC6sD,IACvD,IAAIhkD,EAAYnP,EAAE,2CAClB,MAAMgiD,EAAiB,cACjBhmB,EAAuB77B,cAAC80D,GAA2B,CAAC9B,QAASA,KAE7D,QAACpxD,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASq9C,GAAoC,CAC1Ez1C,UAAW,CAAE0K,GAAIA,MAEZmsC,GAAiCxvC,YAAYwuC,IAEpD,GAAIn/C,EAAS,OACX5B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAM+yD,EAAQh1D,EAAE,iBAChBmP,EAAa,SACTA,YACAlN,EAAKkgD,uBAAuBV,oBAAoBj+B,QAAQC,kBACxDuxC,WACA/yD,EAAKkgD,uBAAuBV,oBAAoBniB,yBAAyBj5B,WAG7E,MAAM87C,EAAyBlgD,EAAKkgD,uBAGpC,IAAI5iC,EAAY,KACZ4iC,EAAuB5iC,YACzBA,EAAY,IAAIlc,KAAK8+C,EAAuB5iC,YAG9C,IAAIC,EAAU,KAKd,OAJI2iC,EAAuB3iC,UACzBA,EAAU,IAAInc,KAAK8+C,EAAuB3iC,UAI1Crf,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAe,cACfhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWA,EACXC,QAASA,GAEX1M,iBAAkBivC,GAClBhvC,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnB0iC,EAA8B,CAAE72C,UAAW,CACzC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjBwJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAOutC,GAAqCx1C,UAAWi2C,GAAiC6R,OAE5F5/C,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACiiD,GAA2B,CAC1BvwC,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACe,KAKxC,KC5EehS,qBAAkB4C,aA7CjC,SAAyC3C,GAKrC,IALsC,EACxCC,EAAC,MACDuD,EAAK,QACLC,EAAO,cACPX,GACD9C,EACC,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBpzC,EAAY/H,EAAMmK,OAAOktC,WAGzB1hC,EADcvV,qBAAWvC,GACA8X,WAE/B,OACErW,EAAcqJ,KAAK+rC,GACjBx3C,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACbrH,QAAQC,IAAIm/C,GACbx3C,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,wBAAwBE,SAAA,CACnCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAI+3C,EAAawJ,oBAAoBniB,yBAAyBj5B,OAASlG,cAAA,SACvEA,cAAA,QAAME,UAAU,aAAYH,SACzBqL,IAAO0sC,EAAa14B,WAAW/T,OAAO0N,QAG3C/Y,cAAC8G,IAAKwI,OAAM,CAAAvP,SACP+3C,EAAaid,QACd/0D,cAACyE,IAAI,CAACrC,GAAK,qCAAoC4wD,SAAe7nD,KAAa2sC,EAAawJ,oBAAoB1rC,KAAK7V,SAC/GO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UAAS9E,SAAA,CAEdF,EAAE,kBAAkB,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAPZrG,EAAE,mEAgBvC,KCMeF,qBAAkB4C,aArDjC,SAAuC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC3D,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBpzC,EAAY/H,EAAMmK,OAAOktC,WACzBt0C,EAAa,qCAAoC6sD,WACjDnR,EAAiB,cACjBhmB,EAAuB77B,cAACyG,GAAU,CAACN,UAAWA,KAC9C,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASs9C,GAA4C,CACpF11C,UAAW,CACTmY,QAASlY,EACT2yC,aAAckV,GAEhB1nD,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAAC8zD,GAAa,CACdX,aAAa,EACbtR,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAEzCC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,MAIlC,GAAIc,EAAO,OACT7B,cAAC8zD,GAAa,CACZX,aAAa,EACbtR,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAA,KAAAD,SAAIF,EAAE,gCAIV,MAAMwjB,EAAUvhB,EAAKuhB,QACf3gB,EAAgBZ,EAAKkzD,+BAA+BtyD,cAG1D,OACEpC,eAACwzD,GAAa,CACZX,aAAa,EACbtR,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAAA,CAE3CO,eAAA,MAAAP,SAAA,CAAKF,EAAE,uDAAuD,IAAEwjB,EAAQC,YACxEtjB,cAACI,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAClBC,cAACi1D,GAAgC,CAACvyD,cAAeA,QAIzD,KC/Ce/C,sBAZEC,IAAA,IAAC,EAAEC,EAAC,QAAEq1B,GAASt1B,EAAA,OAC5BI,cAAA,QAAME,UAAU,YACV,cAAY,UACZ,iBAAe,MACf,eAAcg1B,EACd,sBAAoB,GACpB9uB,MAAO8uB,EACP,mBAAkB,eAAen1B,SAAC,KAEjC,IC6DIJ,qBAAkB4C,aA3DE3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,cAAEoB,EAAa,WAAE2U,EAAU,OAAE9V,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAezd,EAAA,OAChJI,cAAC4R,KAAM,CAAA7R,SACLC,cAACc,IAAM,CAACC,OAAQ2Q,EAAc1Q,OAAQ0Q,EAAa3R,SACjDO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0T,SAAUA,KACRyD,EAAc,YAAaxK,EAAOqiD,UAClC93C,EAAgB,YAAY,GACvBvK,EAAOqiD,WACV73C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAOqiD,WAClBl1D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,+CAEjDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,aAG5CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACLkM,SAAWS,EAAOqiD,SAClBt7C,SAAUA,KACRyD,EAAc,UAAWxK,EAAOsiD,QAChC/3C,EAAgB,UAAU,GAC1BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAOsiD,SAClBn1D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uBAG9CgT,EAAOqiD,SAAY50D,eAAA,OAAAP,SAAA,CAClBC,cAACkjB,IAAKC,MAAK,CAAApjB,SAAEF,EAAE,kDAA6D,IAAG,IAC/EG,cAACo1D,GAAQ,CAAClgC,QAASr1B,EAAE,0DACd,GACXG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,mBAKvC,KCrEJ,MAAMkjD,GAAkCnkD,OAAaC,MAAM,CAChE+jD,SAAUhkD,OACVikD,OAAQjkD,SCFGokD,GAAuC57D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAqD3C67D,GAAkC77D,GAAI;;;;;;;;EC4TpCiG,qBAAkB4C,aA3VjC,SAAiC3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EAC5C,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBsD,EAAiB,cACjB7yC,EAAYnP,EAAE,uCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASgyD,GAAsC,CACzFpqD,UAAW,CAAE4yC,aAAckV,MAErBwC,GAAiCjjD,YAAYgjD,IAE/C15B,EAAuB77B,cAACo0D,GAAa,IAG3C,OAAIxyD,EACF5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oDAMPiC,EAAK2zD,wCAAwC1sD,MAAM3J,OAatDY,cAAC8zD,GAAa,CACZX,aAAa,EACbtR,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE7CC,cAACyN,GAAW,CACVuB,UAAWA,EAEXT,SAAUzM,EAAK2zD,wCAAwClnD,SACvDa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAK2zD,wCAAwClnD,SAAS8B,WAE/DC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBilD,wCAAwC1sD,MACnEwF,EAAWiC,EAAgBilD,wCAAwClnD,SAEzE,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJ2zD,wCAAyC,CACvC/kD,WAAYH,EAAeklD,wCAAwC/kD,WACnE3H,MAAO,IAAKwH,EAAeklD,wCAAwC1sD,SAAU0H,GAC7ElC,cAINgC,CAAc,GAElB,EACFxQ,SACFC,cAAA,OAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,6BACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAK2zD,wCAAwC1sD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/DjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACPrH,QAAQC,IAAIuQ,GACblJ,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK0+B,2BAA2B1hC,MADnBoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACVC,cAACwS,KAAM,CACHC,cAAe,CACbyiD,SAAUhsD,EAAKgsD,SACfC,OAAQjsD,EAAKisD,QAEfxiD,iBAAkB0iD,GAClBziD,SAAUA,CAACC,EAAMpG,KAAyB,IAAvB,cAAEqG,GAAerG,EAChC/T,QAAQC,IAAIka,GAEZ2iD,EAA6B,CAAEtqD,UAAW,CACtC6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTs/C,SAAUriD,EAAOqiD,SACjBC,OAAQtiD,EAAOsiD,SAEhBjiD,eAAgB,CACjB,CAAEC,MAAOmiD,GACPpqD,UAAW,CAAE4yC,aAAckV,KAG/BtU,qBAAqB,IAEtBtrC,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EACXtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAEDkoB,IAAA,IAAC,aAAEvW,EAAY,cAAEoB,EAAa,OAAEnB,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,WAAEoK,GAAYQ,EAAA,OAC3F3nB,eAACo1D,GAA0B,CACzBhkD,aAAcA,EACdoB,cAAeA,EACfsK,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EAAW1nB,SAAA,CAEtBrH,QAAQC,IAAIgZ,GACZjZ,QAAQC,IAAIka,GAAQ,SAEM,QAxDrBvG,eA4DJ,eArHtBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gDAuHd,KCzFeF,qBAAkB4C,aAnFK3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,cAAEoB,EAAa,WAAE2U,EAAU,OAAE9V,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAezd,EAAA,OACnJI,cAAC4R,KAAM,CAAA7R,SACLC,cAACc,IAAM,CAACC,OAAQ2Q,EAAc1Q,OAAQ0Q,EAAa3R,SACjDO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACL0T,SAAUA,KACRyD,EAAc,UAAWxK,EAAO8iD,QAChCv4C,EAAgB,UAAU,GACrBvK,EAAO8iD,SACVt4C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAO8iD,SAClB31D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uBAEjDG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,aAG1CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0T,SAAUA,KACRyD,EAAc,YAAaxK,EAAOqiD,UAClC93C,EAAgB,YAAY,GACvBvK,EAAOqiD,WACV73C,EAAc,UAAU,GACxBD,EAAgB,UAAU,IAE5BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAOqiD,WAClBl1D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,iDAEjDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,aAG5CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACLkM,SAAYS,EAAOqiD,UAAcriD,EAAO8iD,OACxC/7C,SAAUA,KACRyD,EAAc,UAAWxK,EAAOsiD,QAChC/3C,EAAgB,UAAU,GAC1BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAOsiD,SAClBn1D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uBAG7CgT,EAAOqiD,UAAcriD,EAAO8iD,OAAWr1D,eAAA,OAAAP,SAAA,CACvCC,cAACkjB,IAAKC,MAAK,CAAApjB,SAAEF,EAAE,oDAA+D,IAAG,IACjFG,cAACo1D,GAAQ,CAAClgC,QAASr1B,EAAE,4DACd,GACXG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,mBAKvC,KC7FJ,MAAMyjD,GAAqC1kD,OAAaC,MAAM,CACnEwkD,OAAQzkD,OACRgkD,SAAUhkD,OACVikD,OAAQjkD,SCHG2kD,GAAyCn8D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsD7Co8D,GAAqCp8D,GAAI;;;;;;;;ECuIvCiG,qBAAkB4C,aAvKjC,SAAmC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACrD,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBsD,EAAiB,gBACjB7yC,EAAYnP,EAAE,yCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASuyD,GAAwC,CAC3F3qD,UAAW,CAAE4yC,aAAckV,MAErB+C,GAAoCxjD,YAAYujD,IAElDj6B,EAAuB77B,cAACo0D,GAAa,IAG3C,OAAIxyD,EACF5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,sDAMPiC,EAAKk0D,2CAA2CjtD,MAAM3J,OAazDY,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWA,EAEXT,SAAUzM,EAAKk0D,2CAA2CznD,SAC1Da,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAKk0D,2CAA2CznD,SAAS8B,WAElEC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBwlD,2CAA2CjtD,MACtEwF,EAAWiC,EAAgBwlD,2CAA2CznD,SAE5E,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJk0D,2CAA4C,CAC1CtlD,WAAYH,EAAeylD,2CAA2CtlD,WACtE3H,MAAO,IAAKwH,EAAeylD,2CAA2CjtD,SAAU0H,GAChFlC,cAINgC,CAAc,GAElB,EACFxQ,SACFC,cAAA,OAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,gCACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKk0D,2CAA2CjtD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClEjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACPrH,QAAQC,IAAIuQ,GACblJ,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKusC,8BAA8BvvC,MADtBoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACwS,KAAM,CACLC,cAAe,CACbkjD,OAAQzsD,EAAKysD,OACbT,SAAUhsD,EAAKgsD,SACfC,OAAQjsD,EAAKisD,QAEfxiD,iBAAkBijD,GAClBhjD,SAAUA,CAACC,EAAMpG,KAAyB,IAAvB,cAAEqG,GAAerG,EAChC/T,QAAQC,IAAIka,GACZkjD,EAAgC,CAC9B7qD,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT+/C,OAAQ9iD,EAAO8iD,OACfT,SAAUriD,EAAOqiD,SACjBC,OAAQtiD,EAAOsiD,SAGnBjiD,eAAgB,CACd,CAAEC,MAAO0iD,GACP3qD,UAAW,CAAE4yC,aAAckV,KAG/BtU,qBAAqB,IAEtBtrC,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EACXtvB,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,qDAAuD,CACpE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAEDkoB,IAAA,IAAC,aAAEvW,EAAY,cAAEoB,EAAa,OAAEnB,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,WAAEoK,GAAYQ,EAAA,OAC3F3nB,eAAC21D,GAA6B,CAC5BvkD,aAAcA,EACdoB,cAAeA,EACfsK,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR4U,WAAYA,EAAW1nB,SAAA,CAEtBrH,QAAQC,IAAIgZ,GACZjZ,QAAQC,IAAIka,KACiB,QA1DxBvG,eA8DJ,eAvHxBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kDAyHd,KC3LO,MAAMq2D,GAAoCx8D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwDxCy8D,GAA2Cz8D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmC/C4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;EAoB7B08D,GAAgC18D,GAAI;;;;;;;;EAWpC28D,GAAmC38D,GAAI;;;;;;;;EAWvC48D,GAAmC58D,GAAI;;;;;;ECmErCiG,qBAAkB4C,aA9KjC,SAAiC3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACpD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzBi6C,EAAU5vD,EAAMmK,OAAOgxC,SACvBsD,EAAiB,cACjB7yC,EAAYnP,EAAE,uCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS4yD,GAAmC,CACtFhrD,UAAW,CAAC4yC,aAAckV,MAEpBuD,GAA8BhkD,YAAY+jD,IAE5CE,EAAsBx2D,cAACmN,GAAoB,CAACvD,WAAW,MAAMC,SAAS,sBAAqB9J,SAC/FC,cAACgV,GAAS,CAACH,OAAS,qCAAoCm+C,QAAe9yD,UAAU,WAG7E27B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACo0D,GAAa,IACboC,KAIH,OAAI50D,EACF5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oDAMPiC,EAAK20D,qBAAqB1tD,MAAM3J,OAanCY,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUzM,EAAK20D,qBAAqBloD,SACpCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAK20D,qBAAqBloD,SAAS8B,WAE5CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBimD,qBAAqB1tD,MAChDwF,EAAWiC,EAAgBimD,qBAAqBloD,SAEtD,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJ20D,qBAAsB,CACpB/lD,WAAYH,EAAekmD,qBAAqB/lD,WAChD3H,MAAO,IAAKwH,EAAekmD,qBAAqB1tD,SAAU0H,GAC1DlC,cAINgC,CAAc,GAElB,EACFxQ,SACFC,cAAA,OAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0BACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAK20D,qBAAqB1tD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACPrH,QAAQC,IAAIuQ,GACblJ,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAc,IAD9CzM,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKma,QAAQC,SAAS,IAACtjB,cAAA,SACxBA,cAAA,QAAME,UAAU,aAAYH,SACzBszD,GAA0BxzD,EAAGqJ,EAAKlB,WAGvChI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKm3C,SACJ//C,eAAA,QAAAP,SAAA,CACGmJ,EAAKm3C,SAAS/8B,SAAS,IAACtjB,cAAA,SACzBA,cAAA,QAAME,UAAU,aAAYH,SACzBszD,GAA0BxzD,EAAGqJ,EAAKo3C,YAE7B,KAGdhgD,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,qCAAoC4wD,UAAgB9pD,EAAK0M,KAAK7V,SACvEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SAEtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,mDACdyX,eAAgBtX,cAAA,KAAAD,SAAIF,EAAE,6DACtB0X,WAAY1X,EAAE,wCACd+Y,eAAgB29C,EAChB9+C,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAO+iD,GAAmChrD,UAAW,CAAE4yC,aAAc16C,EAAMmK,OAAOgxC,cAEvF,EAAEx+C,SAENC,cAAA,QAAME,UAAU,WAAUH,SACxBC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBA5BUoG,kBAxBzBA,eAwDJ,eAnHxBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gDAqHd,KCpMO,MAAM62D,GAAmCxlD,OAAaC,MAAM,CACjEkS,QAASnS,OACNG,SAASxR,YAAE,uBACdmI,KAAMkJ,OACNmvC,SAAUnvC,OACVovC,MAAOpvC,OACPkO,UAAWlO,OACRG,SAASxR,YAAE,yBCgHDF,qBAAkB4C,aAxGG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,UAAEhX,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OAC5IU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,UACLhG,UAAYyR,EAAO0R,QAAW,0BAA4B,eAC1DpR,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,gDACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACrChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2BAA2BE,SAAA,CAC9CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,OACLhG,UAAYyR,EAAO3J,KAAQ,0BAA4B,eACvDiK,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACtBtM,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,0CAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,gDAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,4CAATyM,mBAE7BtM,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,6BAI3DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO0uC,SAAY,0BAA4B,eAC3DpuC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,0BAG7DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4BAA4BE,SAAA,CAC/CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,QACLhG,UAAYyR,EAAO2uC,MAAS,0BAA4B,eACxDruC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACtBtM,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,0CAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,gDAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,4CAATyM,mBAE7BtM,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,gCAK9DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAGN,KC7GIF,qBAAkB4C,aAJG3C,IAAA,IAAC,EAAEC,EAAC,QAAEmzD,GAASpzD,EAAA,OACjDI,cAACyG,GAAU,CAACN,UAAY,qCAAuC6sD,GAAY,KC0H9DrzD,qBAAkB4C,aA9GjC,SAAmC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACvD,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBp4C,EAAa,qCAAoC6sD,IACjDhkD,EAAYnP,EAAE,0CACdgiD,EAAiB,cACjBhmB,EAAuB77B,cAAC22D,GAA2B,CAAC3D,QAASA,KAE7D,QAACpxD,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASgV,GAAwB,CAC9DhN,YAAa,kBAERsrD,GAA8BrkD,YAAY6jD,IAEjD,GAAIx0D,EAAS,OACX5B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAElB,OACE9B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb+R,MAAO,GACPpF,UAAW,IAAIlc,KACfmgB,QAAS,GACTrb,KAAM,GACNq4C,SAAU,GACVC,MAAO,IAET3tC,iBAAkB+jD,GAClB9jD,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBu3C,EAA2B,CAAE1rD,UAAW,CACtC6H,MAAO,CACL+qC,aAAc16C,EAAMmK,OAAOgxC,SAC3Bl7B,QAASxQ,EAAOwQ,QAChBrb,KAAM6K,EAAO7K,KACbq4C,SAAUxtC,EAAOwtC,SACjBC,MAAOztC,EAAOytC,MACdlhC,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAO+iD,GAAmChrD,UAAW,CAAE4yC,aAAc16C,EAAMmK,OAAOgxC,cAGtFnrC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC62D,GAA2B,CAC1B15C,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KCyBexG,qBAAkB4C,aArIjC,SAAoC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACxD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBo9C,EAAU5vD,EAAMmK,OAAOgxC,SACvBp4C,EAAa,qCAAoC6sD,IACjDhkD,EAAYnP,EAAE,2CACdgiD,EAAiB,cACjBhmB,EAAuB77B,cAAC22D,GAA2B,CAAC3D,QAASA,KAE7D,QAACpxD,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS6yD,GAA0C,CAChFjrD,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,kBAERwrD,GAAiCvkD,YAAY8jD,IAEpD,GAAIz0D,EAAS,OACX5B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZoU,EAAcpU,EAAKi1D,oBAEzB,IAAIC,EAAkB,GAClB9gD,EAAYmqC,WACd2W,EAAmB9gD,EAAYmqC,SAASzqC,IAK1C,IAAIwJ,EAAY,KACZlJ,EAAYkJ,YACdA,EAAY,IAAIlc,KAAKgT,EAAYkJ,YAGnC,IAAIC,EAAU,KAKd,OAJInJ,EAAYmJ,UACdA,EAAU,IAAInc,KAAKgT,EAAYmJ,UAI/Brf,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAe,cACfhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWA,EACXC,QAASA,EACTgE,QAASnN,EAAYmN,QAAQzN,GAC7B5N,KAAMkO,EAAYlO,KAClBq4C,SAAU2W,EACV1W,MAAOpqC,EAAYoqC,OAErB3tC,iBAAkB+jD,GAClB9jD,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBy3C,EAA8B,CAAE5rD,UAAW,CACzC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjByN,QAASxQ,EAAOwQ,QAChBrb,KAAM6K,EAAO7K,KACbq4C,SAAUxtC,EAAOwtC,SACjBC,MAAOztC,EAAOytC,MACdlhC,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAO+iD,GAAmChrD,UAAW,CAAE4yC,aAAc16C,EAAMmK,OAAOgxC,cAGtFnrC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC62D,GAA2B,CAC1B15C,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACe,KAKxC,KCCehS,qBAAkB4C,aAhIjC,SAAsC3C,GAAoD,IAAnD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,aAAE4zD,EAAY,YAAEC,GAAat3D,EACrF,MAAOu3D,EAAmBC,GAAwBjiD,oBAAS,GACrD8oC,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MACxB6qD,GAAa,OAAEj3B,EAAM,QAAEx+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,IAAgB2wB,aAAcwW,IAE5F,SAASmJ,IACP,OAAOpgD,cAAC0gB,GAAW,CACjBxgB,UAAU,OACV4gB,gBAAiBtiB,EAAKvB,yCACtBwkB,YAAa5hB,EAAE,wDACf+Z,SAAWzX,IACT7D,aAAaC,QAAQC,EAAKvB,yCAA0CkF,GAChEA,IAAUi+B,GACZg3B,GAAqB,GACrBC,EAAY,CAAEnsD,UAAW6yC,GAA6B57C,MAC7CA,GAGTi1D,GAAqB,GACrBhiD,EAAQ2oC,GAA6B57C,KAErCi1D,GAAqB,EACvB,GAGN,CAEA,OAAKD,EAID/2B,GAAUx+B,EACZtB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCo/B,GAAUv+B,EACZvB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SAAEF,EAAE,iCAIxBugC,IAAWt+B,EAAKo6B,SAASnzB,MAAM3J,OACjCkB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACP9/C,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CACnBC,cAAA,UAAAD,SAASF,EAAE,iEAAwE,IAAE,MACpFA,EAAE,qEAMPS,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACLhgB,GAAUt+B,EACZ9B,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BACd0O,SAAUzM,EAAKo6B,SAAS3tB,SACxBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACXkF,MAAOtO,EAAKo6B,SAAS3tB,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0rB,SAASnzB,MACpCwF,EAAWiC,EAAgB0rB,SAAS3tB,SAE1C,OAAOkC,EAASrR,OACZ,CAGEk4D,kBAAmB,CACjBp7B,SAAU,CACRxrB,WAAYH,EAAe2rB,SAASxrB,WACpC3H,MAAO,IAAKwH,EAAe2rB,SAASnzB,SAAU0H,GAC9ClC,cAINgC,CAAc,GAEpB,EACFxQ,SACVO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKo6B,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoa,UADQhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+f,OADQ3c,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNk3D,EAAaM,SAASruD,EAAK0M,IAC3B5V,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,yEAChCG,cAACyE,IAAI,CAACrC,GAAI,gCAAkC67C,EAAmB,IAAMO,EAAa,IAAMt1C,EAAK0M,GAAG7V,SAC9FO,eAACoE,IAAM,CAACG,MAAM,uBAAsB9E,SAAA,CACjCF,EAAE,mBAAmB,IAACG,cAACiG,IAAI,CAACC,KAAK,wBAL1BoG,kBAPFA,eAiBJ,WAKlB,MA7FGtM,cAACogD,EAAM,GAgGlB,KCxIezgD,qBAAkB4C,aAJP3C,IAAA,IAAC,EAAEC,EAAC,QAAEmzD,GAASpzD,EAAA,OACvCI,cAACyG,GAAU,CAACvG,UAAU,OAAOiG,UAAU,qBAAsB,KCyEhDxG,sBAtEf,SAAkBC,GAAiD,IAA/C,EAAEC,EAAC,eAAE6M,EAAc,UAAE2yC,EAAS,WAAEhF,GAAYz6C,EAC1D43D,GAAoB,EACpBC,GAAyB,EACzBC,GAAc,EAElB,OAAQrd,GACN,IAAK,aACHmd,GAAoB,EACpB,MACF,IAAK,kBACHC,GAAyB,EACzB,MACF,IAAK,OACHC,GAAc,EAMlB,OACE13D,cAAA,OAAAD,SACEO,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CAC5BC,cAACmN,GAAoB,CACjBtD,SAAS,yBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,uCAAyCsK,EAAiB,IAAM2yC,EACpEh9C,KAAK,eACLtB,OAAQy2D,EAAkBz3D,SAEzBF,EAAE,uBANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,yBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,6CAA+CsK,EAAiB,IAAM2yC,EAC1Eh9C,KAAK,cACLtB,OAAQ02D,EAAuB13D,SAE9BF,EAAE,kDANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,wBACTD,WAAW,SAAQ7J,SAErBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAI,iCAAmCsK,EAAiB,IAAM2yC,EAC9Dh9C,KAAK,SACLtB,OAAQ22D,EAAY33D,SAEnBF,EAAE,gDANEyM,sBAanB,ICCe3M,qBAAkB4C,aA5DjC,SAAwC3C,GAA+D,IAA9D,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,aAAE43D,EAAY,QAAEviD,EAAQ3F,IAAGA,IAAG7P,EAClG,MAAM8M,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,KACzBiK,EAAa,kDAAiD/J,KAAkB2yC,KAE/E7oC,GAAkBjE,YAAY5Y,GAWrC,OACEqG,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUsxD,EAAa53D,SAC9DO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC43D,GAAiB,IAElB53D,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,iBACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAEDF,EAAE,0BAELG,cAAC0xD,GAAqB,CACpBX,aAAa,EACbH,gBA7Bd,WACE,MAAMiH,EAAezsD,IAAOi0C,GAAW3jB,SAAS,EAAG,QAAQrwB,OAAO,cAClEhI,EAAQnB,KAAM,sCAAqCwK,KAAkBmrD,IACvE,EA2BchH,YA1Bd,WACE,MAAMgH,EAAezsD,IAAOi0C,GAAW31C,IAAI,EAAG,QAAQ2B,OAAO,cAC7DhI,EAAQnB,KAAM,sCAAqCwK,KAAkBmrD,IACvE,SA2BQv3D,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACLC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC7BA,IAEHC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC83D,GAAS,CACRprD,eAAgBA,EAChB2yC,UAAWA,EACXhF,WAAW,0BAQ7B,KC3EO,SAAS0d,GAAcn4D,GAA2D,IAA1D,EAACC,EAAC,SAAE2b,EAAQ,aAAEg4C,EAAY,UAAEtC,EAAS,UAAErkD,EAAS,KAAEL,GAAK5M,EACpF,OAAOC,EAAE,iBAAmB,KACrB2b,EAAW,KAAOg4C,EAAe,OACjCtC,EAAY,MACZ9lD,IAAOoB,GAAMnB,OAAO,MAAQ,IAAMD,IAAOyB,GAAWxB,OAAO,KACpE,CC2De1L,qBAAkB4C,aAlDjC,SAAoC3C,GAA4C,IAA3C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,QAAEqV,GAASxV,EAC3E,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAC1BwC,EAAUnP,EAAE,uBACZ,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAC/Bm6C,GAA0B,CACxBvyC,UAAW,CAAE4yC,aAAcG,EAAkBzxC,KAAMgyC,KAIvD,GAAI58C,EAAS,OACX5B,cAACg4D,GAA+B,CAAC5iD,QAASA,EAAQrV,SAChDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACg4D,GAA+B,CAAC5iD,QAASA,EAAQrV,SAChDC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,yDAKZ,MAAMo4D,EAAgBn2D,EAAKm2D,cAErBN,EAAeI,GAAe,CAClCl4D,EAAGA,EACH2b,SAAUy8C,EAAcrrD,yBAAyBjF,qBAAqBzB,KACtEstD,aAAcyE,EAAcrrD,yBAAyB1G,KACrDgrD,UAAW+G,EAAcxwD,sBAAsBvB,KAC/C2G,UAAWqP,GAAsB+7C,EAAcprD,WAC/CL,KAAMgyC,IAKR,OAFA9lD,QAAQC,IAAIs/D,EAAc5vD,QAGxBrI,cAACg4D,GAA+B,CAACL,aAAcA,EAAeviD,QAASA,EAAQrV,SAC5EA,GAIP,KCbeJ,qBAAkB4C,aAnCjC,SAAsC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EACrD,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MACzBqxC,GAAiCtrC,YAAYmrC,IAElD,OACE19C,cAAA,UAAQE,UAAU,sCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,wDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKma,QAAQC,WACjC/L,WAAY1X,EAAE,oDACd+Y,eAAgBilC,EAChBpmC,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAOqqC,GACPtyC,UAAW8yC,GAAoCC,EAAkBO,OAGvE,EACJz+C,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KCqJevG,qBAAkB4C,aA/JjC,SAAgC3C,GAA0B,IAAzB,EAAEC,EAAC,MAAEuD,EAAK,SAAEoY,GAAU5b,EACrD,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MACzBoyC,EAAsBR,GAA2BjpC,oBAAS,IAC3D,QAAEvT,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YACnDk6C,GAAqC,CACnCtyC,UAAW8yC,GAAoCC,EAAkBO,GACjElzC,YAAa,kBAGT4sD,GAAmB3lD,YAAYqrC,IAWvC,GAPAt/C,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAIrErlB,aAAaC,QAAQC,EAAKjC,6BAA8Bif,EAASmI,UAG7D/hB,EAAS,OAAO5B,cAACm4D,GAA2B,CAAAp4D,SAC5CC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,sBAAsBE,SAC9CC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAIpC,GAAIc,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACm4D,GAA2B,CAAAp4D,SAAEF,EAAE,8BAGzC,MAAMo4D,EAAgBn2D,EAAKm2D,cAC3Bv/D,QAAQC,IAAIs/D,GACZ,IAAIhB,EAAe,GACnBn1D,EAAKg9C,wBAAwB/1C,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC9CirD,EAAa/0D,KAAKgH,EAAKma,QAAQzN,GAAG,IAGpC,MAAMN,EAAgBtV,cAAC8G,IAAKyO,QAAO,CAAAxV,SACjCO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BO,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAEk4D,EAAcG,eAAe,IAAEv4D,EAAE,kDAAuD,IAAE,IAClHS,eAAC4H,IAAK,CAACrD,MAAM,UAAS9E,SAAA,CAAEk4D,EAAcI,YAAY,IAAEx4D,EAAE,+CAAoD,IAAE,SAMhH,OACES,eAAC63D,GAA2B,CAAC/iD,QAASA,EAAQrV,SAAA,CACjB,cAAzBk4D,EAAc5vD,OACd/H,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CACnBC,cAAA,UAAAD,SAASF,EAAE,+DAAsE,MAAI,IACpFA,EAAE,iEAGLG,cAACs4D,GAA6B,CAC5BrB,aAAcA,IAGlBj3D,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,sBACb0O,SAAUzM,EAAKg9C,wBAAwBvwC,SACvCU,cAAeqG,EACflG,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACV5E,UAAW,CACTkF,MAAOtO,EAAKg9C,wBAAwBvwC,SAAS8B,WAE/CC,YAAaA,CAACC,EAAchE,KAA2B,IAAzB,gBAAEiE,GAAiBjE,EAC/C,MAAMkE,EAAWD,EAAgBsuC,wBAAwB/1C,MACnDwF,EAAWiC,EAAgBsuC,wBAAwBvwC,SAEzD,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJg9C,wBAAyB,CACvBpuC,WAAYH,EAAeuuC,wBAAwBpuC,WACnD3H,MAAO,IAAKwH,EAAeuuC,wBAAwB/1C,SAAU0H,GAC7DlC,cAINgC,CAAc,GAElB,EACFxQ,SACE+B,EAAKg9C,wBAAwB/1C,MAAM3J,OAKrCY,cAACc,IAAM,CAACC,OAAQ69C,EAAsB59C,QAAQ,EAAKjB,SACjDO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKg9C,wBAAwB/1C,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC7CnM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,aAAa7V,SACxDmJ,EAAKma,QAAQC,WACT,IAACtjB,cAAA,SACPtH,QAAQswD,MAAM9/C,GACdA,EAAK85C,kBACJ1iD,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BmJ,EAAK85C,iBAAiB9gB,sBAAsBh8B,KAAK,IAAG,OAGxDgD,EAAK85C,kBACN95C,EAAK85C,iBAAiB9gB,sBAAsB6D,WAC5C/lC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,gDAG5BS,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,gBACjCz+C,cAACyZ,GAAa,CACRrT,MAAOvG,EAAE,uEACTwX,WAAYrX,cAAA,KAAAD,SAAIF,EAAE,sEAClByX,eAAgBtX,cAAA,KAAAD,SAAGC,cAAA,KAAAD,SAAImJ,EAAKma,QAAQC,aACpC/L,WAAY1X,EAAE,oDACd2X,eAAgB0gD,EAChBlgD,wBAAyB,CAAC9M,UAAW,CAAC6H,MAAO,CAAC6C,GAAI1M,EAAK0M,MACvDqC,YAAY,uBACZC,WAAYlY,cAACiG,IAAI,CAACC,KAAK,SACvB4O,WAAYjV,EAAE,sDACdsY,gBAAgB,QAGxB7X,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAERC,cAACu4D,GAA6B,CAACrvD,KAAMA,IAErClJ,cAACg/C,GAA2C,CAC1CZ,wBAAyBA,EACzBO,2BAA4Bz1C,EAC5Bo1C,+BAA+B,SAtCrBhyC,eAyCJ,WAxDtBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,wDAgElB,KCnJeF,qBAAkB4C,aAhCjC,SAA8B3C,GAAmE,IAAlE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,SAAEsG,EAAS,GAAE,eAAEw7C,EAAe,IAAIjiD,EAC5F,MAAM8M,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,KAE/B,OACExM,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUA,EAAStG,SAC1DC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC43D,GAAiB,QAGtBt3D,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC5BA,IAEHC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC7BC,cAAC83D,GAAS,CACRprD,eAAgBA,EAChB2yC,UAAWA,EACXhF,WAAYwH,eAQ5B,KCxCO,MAAM2W,GAAkC9+D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECwFpCiG,qBAAkB4C,aAxEjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,QAAEwD,EAAO,MAAED,GAAMxD,EACvD,MAAMy/C,EAAYj8C,EAAMmK,OAAOf,KACzBE,EAAiBtJ,EAAMmK,OAAOgxC,SAC9BsD,EAAiB,kBACjB5uC,EAAO+C,SAASqpC,EAAU9X,UAAU,EAAG,KAEvC,QAAE3lC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASk1D,GAAiC,CACzEttD,UAAW,CACT+H,KAAMA,EACN6qC,aAAcpxC,KAIlB,GAAI9K,EACF,OACE5B,cAACy4D,GAAqB,CAAC5W,eAAgBA,EAAe9hD,SACjDF,EAAE,+BAKX,GAAIgC,EACF,OACE7B,cAACy4D,GAAqB,CAAC5W,eAAgBA,EAAe9hD,SACjDF,EAAE,8BAMX,MAAM09B,EAAYz7B,EAAK42D,gCAAgCC,MAAM5sD,KAAI,CAAC2xB,EAAM9X,KAAK,IACtE8X,EAAMk7B,SAAW,GAAE/4D,EAAE,mBAAmB69B,EAAKm7B,WAG9C/a,EAAeh8C,EAAKg8C,aACpBz3C,EAAW0xD,GAAe,CAC9Bl4D,EAAGA,EACH2b,SAAUsiC,EAAalxC,yBAAyBjF,qBAAqBzB,KACrEstD,aAAc1V,EAAalxC,yBAAyB1G,KACpDgrD,UAAWpT,EAAar2C,sBAAsBvB,KAC9C2G,UAAWqP,GAAsB4hC,EAAajxC,WAC9CL,KAAM6yC,IAGR,OACEr/C,cAACy4D,GAAqB,CAAC5W,eAAgBA,EAAgBx7C,SAAUA,EAAStG,SACxEC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iDAAiDE,SAC9DC,cAAC49B,KAAmB,CAACC,MAAM,OAAOC,OAAQ,IAAI/9B,SAC5CO,eAAC++B,KAAQ,CACPxB,MAAO,IACPG,OAAQ,IACRl8B,KAAMy7B,EACNU,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,EACNC,OAAQ,IACRt+B,SAAA,CAEFC,cAACs+B,KAAK,CAACC,QAAQ,WAAWu6B,SAAU,IACpC94D,cAACw+B,KAAK,IACNx+B,cAACy+B,KAAO,IACRz+B,cAAC0+B,KAAM,IACP1+B,cAACs/B,KAAG,CAACf,QAAQ,6BAA6Br4B,KAAM+M,EAAM8rB,KAAMF,IAAc,QAC1E7+B,cAACs/B,KAAG,CAACf,QAAQ,8BAA8Br4B,KAAM+M,EAAK,EAAG8rB,KAAMF,IAAO,2BAMlF,KC9Eel/B,qBAAkB4C,aAJHw2D,IAC5B/4D,cAACyG,GAAU,CAACN,UAAW7H,aAAayE,QAAQvE,EAAKjC,mCCL5C,MAAMy8D,GAA4Bt/D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmFhCu/D,GAAkCv/D,GAAI;;;;;;;;ECpF5C,SAASw/D,KAGd,OAAO56D,aAAayE,QAAQvE,EAAKjC,6BASnC,CCwEeoD,qBAAkB4C,aArEjC,SAA+B3C,GAA6D,IAA5D,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAE20C,EAAS,SAAEmhB,EAAQ,WAAE7rB,EAAW,MAAK1tC,EACvFlH,QAAQC,IAAIq/C,GACZ,MAAMyC,EAAar3C,EAAMmK,OAAOktC,WAC1BwD,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAE1B4sD,EAAc,CAClB,QAAW3e,EACX,aAAgBwD,EAChB,iBAAoBjG,EAAUgL,iBAAiBptC,GAC/C,KAAQ4oC,EACR,eAAkB,YAClB,cAAiB,cAGZ6a,GAAc,QAAEz3D,EAAO,MAAEC,IAAW0Q,YAAY0mD,IAEvD,GAAIr3D,EACF,OAAO5B,cAAC0E,IAAM,CACZ4I,OAAK,EACL3I,SAAO,EACPyN,UAAU,EACVvN,MAAM,UAAS9E,SAEdF,EAAE,+CAIP,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SACxBF,EAAE,iDAIP,MAAMsG,EAAY+yD,KAElB,OACEl5D,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACNxC,KAAK,QACLkN,QAASA,IAAM8pD,EAAa,CAC1BnuD,UAAW,CAAE,MAASkuD,GACtBlmD,eAAgB,CACd,CAACC,MAAOqqC,GAAqCtyC,UAAW8yC,GAAoCC,EAAkBO,OAE/GprC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GAExBuB,EAAQnB,KAAKiE,GAEbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IACzD9B,SAENF,EAAE,oBAGT,KCnCeF,qBAAkB4C,aAnCjC,SAAqC3C,GAQjC,IARkC,EACpCC,EAAC,MACDuD,EAAK,QACLC,EAAO,YACPV,EAAW,WACX2qC,EAAU,eACVgsB,EAAe7pD,IAAGA,GAAC,SACnB0pD,EAAS,oBACVv5D,EAEC,OACE+C,EAAYoJ,KAAKisC,GACfh4C,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC7BO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,qBAAqBE,SAAA,CAChCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIi4C,EAAUgL,iBAAiB9gB,sBAAsBh8B,OAASlG,cAAA,SAC9DM,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBF,EAAE,6BAA6B,KAAGm4C,EAAUgL,iBAAiB/K,wBAAwB,IAACj4C,cAAA,SACtFH,EAAE,uBAAuB,KAAGuL,IAAO4sC,EAAUgL,iBAAiB3jC,SAAShU,OAAO,MAAM,IAACrL,cAAA,eAG1FA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACPi4C,EAAU+c,QACX/0D,cAACu5D,GAAsB,CAACvhB,UAAWA,EAAWmhB,SAAUA,EAAU7rB,WAAYA,IADxDztC,EAAE,6DAQpC,KC6DeF,qBAAkB4C,aAvFjC,SAAkC3C,GAAgE,IAA/D,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,aAAEy0C,EAAY,SAAEqhB,EAAQ,WAAE7rB,EAAW,MAAK1tC,EAC7FlH,QAAQC,IAAIm/C,GACZ,MAAM2C,EAAar3C,EAAMmK,OAAOktC,WAC1BwD,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAE1B4sD,EAAc,CAClB,QAAW3e,EACX,aAAgBwD,EAChB,oBAAuBnG,EAAawJ,oBAAoB1rC,GACxD,KAAQ4oC,EACR,eAAkB,eAClB,cAAiB,cAGZ6a,GAAc,QAAEz3D,EAAO,MAAEC,IAAW0Q,YAAY0mD,IAEvD,GAAIr3D,EACF,OAAO5B,cAAC0E,IAAM,CACZ4I,OAAK,EACL3I,SAAO,EACPyN,UAAU,EACVvN,MAAM,UAAS9E,SAEdF,EAAE,+CAIP,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SACxBF,EAAE,iDAIP,MAAMsG,EAAY+yD,KAElB,OAAIphB,EAAa0hB,QAEbl5D,eAAA,KAAGJ,UAAU,aAAYH,SAAA,CACvBC,cAACiG,IAAI,CAACC,KAAK,mBACVrG,EAAE,uDAKLi4C,EAAa2hB,OAEbn5D,eAAA,KAAGJ,UAAU,aAAYH,SAAA,CACvBC,cAACiG,IAAI,CAACC,KAAK,UACVrG,EAAE,sDAMPG,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACNxC,KAAK,QACLkN,QAASA,IAAM8pD,EAAa,CAC1BnuD,UAAW,CAAE,MAASkuD,GACtBlmD,eAAgB,CACd,CAACC,MAAOqqC,GAAqCtyC,UAAW8yC,GAAoCC,EAAkBO,OAE/GprC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GAExBuB,EAAQnB,KAAKiE,GAEbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IACzD9B,SAENF,EAAE,oBAGT,KCzDeF,qBAAkB4C,aAlCjC,SAAuC3C,GAOnC,IAPoC,EACtCC,EAAC,MACDuD,EAAK,QACLC,EAAO,cACPX,EAAa,WACb4qC,EAAU,SACV6rB,EAAS,oBACVv5D,EAEC,OACE8C,EAAcqJ,KAAK+rC,GACjB93C,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC7BO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,wBAAwBE,SAAA,CACnCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAI+3C,EAAawJ,oBAAoBniB,yBAAyBj5B,OAASlG,cAAA,SACvEA,cAAA,QAAME,UAAU,aAAYH,SACxB+3C,EAAawJ,oBAAoBniB,yBAAyB6G,UAAanmC,EAAE,qBAC3ES,eAAA,QAAAP,SAAA,CAAOF,EAAE,mCAAmC,KAAGi4C,EAAa4hB,sBAGhE15D,cAAC8G,IAAKwI,OAAM,CAAAvP,SACP+3C,EAAaid,QACd/0D,cAAC25D,GAAyB,CAAC7hB,aAAcA,EAAcqhB,SAAUA,EAAU7rB,WAAYA,IAD9DztC,EAAE,gEAQvC,KC2CeF,qBAAkB4C,aArEjC,SAAkC3C,GAAyD,IAAxD,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,MAAEmhB,EAAK,SAAE20C,EAAQ,WAAE7rB,EAAW,MAAK1tC,EACtFlH,QAAQC,IAAI6rB,GACZ,MAAMi2B,EAAar3C,EAAMmK,OAAOktC,WAC1BwD,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAE1B4sD,EAAc,CAClB,QAAW3e,EACX,aAAgBwD,EAChB,sBAAyBz5B,EAAM5O,GAC/B,KAAQ4oC,EACR,eAAkB,yBAClB,cAAiB,cAGZ6a,GAAc,QAAEz3D,EAAO,MAAEC,IAAW0Q,YAAY0mD,IAEvD,GAAIr3D,EACF,OAAO5B,cAAC0E,IAAM,CACZ4I,OAAK,EACL3I,SAAO,EACPyN,UAAU,EACVvN,MAAM,UAAS9E,SAEdF,EAAE,+CAIP,GAAIgC,EAEF,OADAnJ,QAAQC,IAAIkJ,GACL7B,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SACxBF,EAAE,iDAIP,MAAMsG,EAAY+yD,KAElB,OACEl5D,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACNxC,KAAK,QACLkN,QAASA,IAAM8pD,EAAa,CAC1BnuD,UAAW,CAAE,MAASkuD,GACtBlmD,eAAgB,CACd,CAACC,MAAOqqC,GAAqCtyC,UAAW8yC,GAAoCC,EAAkBO,OAE/GprC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GAExBuB,EAAQnB,KAAKiE,GAEbkN,IAAMC,QAASzT,EAAE,6CAA+C,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IACzD9B,SAENF,EAAE,oBAGT,KC1CeF,qBAAkB4C,aA9BjC,SAAqC3C,GAQjC,IARkC,EACpCC,EAAC,MACDuD,EAAK,QACLC,EAAO,YACPu2D,EAAW,WACXtsB,EAAU,eACVgsB,EAAe7pD,IAAGA,GAAC,SACnB0pD,EAAS,oBACVv5D,EAIC,OAHAlH,QAAQC,IAAI,eACZD,QAAQC,IAAIihE,GAGV55D,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC7BO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,kBAAkBE,SAAA,CAC7BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAI65D,EAAY3kC,eAAiBj1B,cAAA,SAChCH,EAAE,mDAAmD,IAACG,cAAA,YAEzDA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC65D,GAAyB,CAACr1C,MAAOo1C,EAAaT,SAAUA,EAAUW,WAAYxsB,UAKvF,KCIe3tC,qBAAkB4C,aA9BjC,SAAoC3C,GAQhC,IARiC,EACnCC,EAAC,MACDuD,EAAK,QACLC,EAAO,WACP02D,EAAU,WACVzsB,EAAU,eACVgsB,EAAe7pD,IAAGA,GAAC,SACnB0pD,EAAS,oBACVv5D,EAIC,OAHAlH,QAAQC,IAAI,cACZD,QAAQC,IAAIohE,GAGV/5D,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAE3G,SAC7BO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,iBAAiBE,SAAA,CAC5BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIg6D,EAAW9kC,eAAiBj1B,cAAA,SAC/BH,EAAE,kDAAkD,IAACG,cAAA,YAExDA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAC65D,GAAyB,CAACr1C,MAAOu1C,EAAYZ,SAAUA,EAAU7rB,WAAYA,UAKtF,KCmEe3tC,qBAAkB4C,aAjFjC,SAA0B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAE9CtB,aAAaC,QAAQC,EAAKvB,yCAA0C,IAEpE,MAAMw9C,EAAar3C,EAAMmK,OAAOktC,WAC1BwD,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MACxB5K,QAAS4sB,EAAc3sB,MAAO4sB,EAAY3sB,KAAMurD,GAAc/pD,YACpE01D,GAA2B,CACzB9tD,UAAW,CACTmY,QAASo3B,EACTqD,aAAcG,EACdzxC,KAAMgyC,EACNwb,SAAU,UAEZ1uD,YAAa,iBAMjB,GAAIkjB,EAAc,OAAOxuB,cAAA,KAAAD,SAAIF,EAAE,+BAE/B,GAAI4uB,EAEF,OADA/1B,QAAQC,IAAI81B,GACLzuB,cAAA,KAAAD,SAAIF,EAAE,8BAGfnH,QAAQC,IAAI00D,GACZ,MAAMhqC,EAAUgqC,EAAU4M,4BAA4B52C,QAChD1gB,EAAc0qD,EAAU4M,4BAA4Bt3D,YACpDD,EAAgB2qD,EAAU4M,4BAA4Bv3D,cACtDw3D,EAAS7M,EAAU4M,4BAA4BE,mBAC/Crc,EAAeuP,EAAU4M,4BAA4Bnc,aACrDkJ,EAAW+Q,GAAe,CAC9Bl4D,EAAGA,EACH2b,SAAUsiC,EAAalxC,yBAAyBjF,qBAAqBzB,KACrEstD,aAAc1V,EAAalxC,yBAAyB1G,KACpDgrD,UAAWpT,EAAar2C,sBAAsBvB,KAC9C2G,UAAWqP,GAAsB4hC,EAAajxC,WAC9CL,KAAMgyC,IAMR,OAHA9lD,QAAQC,IAAIuhE,GAIVl6D,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAU2gD,EAASjnD,SAC1DC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC+4D,GAAqB,CAAC/F,QAAS/U,EAAkBzxC,KAAMgyC,QAG5Dx+C,cAACI,IAAKC,IAAG,CAAAN,SACLO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfO,eAAA,MAAAP,SAAA,CAAKF,EAAE,2BAA2B,IAAEwjB,EAAQC,YAC5CtjB,cAAA,OAAKE,UAAU,OAAMH,SACrBO,eAACF,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAAA,CAClBC,cAACo6D,GAA8B,CAAC13D,cAAeA,IAC/C1C,cAACq6D,GAA4B,CAAC13D,YAAaA,IACzCu3D,GACCA,EAAOI,4BACNt6D,cAACu6D,GAA4B,CAACX,YAAaM,EAAOI,8BAClD,GACFJ,GACEA,EAAOM,6BAAiCn3C,EAAQo3C,qBAChDz6D,cAAC06D,GAA2B,CAACX,WAAYG,EAAOM,6BAChD,mBAStB,KCpGO,MAAMG,GAAuCjhE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoI3CkhE,GAAmClhE,GAAI;;;;;;EASvCmhE,GAAmCnhE,GAAI;;;;;;;;EC9IvCohE,GAAiC5pD,OAAaC,MAAM,CAC/DpE,OAAQmE,OAAa2xC,WAAWkY,cAChC3I,aAAclhD,OAAa2xC,WAAWkY,gBC6OvBp7D,qBAAkB4C,aAhOL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,UAAE1Z,GAAWvG,EAAA,OACtIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,kBACL0lB,QAAS/Y,EAAO8/C,kBAClB3yD,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,2CAEnDG,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,eAIrD7R,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,KAATyM,gBACtBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,sBAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,mCAATyM,mBAE5BtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,6BAIlEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,UACLhG,UAAYyR,EAAO0R,QAAW,0BAA4B,eAC1DpR,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,gDACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACrChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2BAA2BE,SAAA,CAC9CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,OACLhG,UAAYyR,EAAO3J,KAAQ,0BAA4B,eACvDiK,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACtBtM,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,0CAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,gDAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,4CAATyM,mBAE7BtM,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,6BAI3DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO0uC,SAAY,0BAA4B,eAC3DpuC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,0BAG7DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4BAA4BE,SAAA,CAC/CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,QACLhG,UAAYyR,EAAO2uC,MAAS,0BAA4B,eACxDruC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACtBtM,cAAA,UAAQmC,MAAM,MAAKpC,SAAaF,EAAE,0CAATyM,gBACzBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,gDAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,QAAOpC,SAAaF,EAAE,4CAATyM,mBAE7BtM,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,6BAI5DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAO/E,yBAA4B,0BAA4B,eAC3EqF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sBAATyM,gBACrB6Q,EAAUsyB,0BAA0B1mC,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACtDnM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKvB,qBAAqBzB,KAAK,MAAIgD,EAAKhD,OAA/CoG,eAA6D,OAG9FtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAO4+B,mBAAsB,0BAA4B,eACrEt+B,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sBAATyM,gBACrB6Q,EAAUozB,mBAAmBxnC,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC/ChoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,OAAOjS,UAAU,6BAIzEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,wBACLhG,UAAYyR,EAAOlK,sBAAyB,0BAA4B,eACxEwK,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sBAATyM,gBACrB6Q,EAAU0rB,uBAAuB9/B,MAAMgD,KAAIkc,IAAA,IAAC,KAAE/e,GAAM+e,EAAA,OACnDjoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,wBAAwBiM,UAAU,OAAOjS,UAAU,wBAExEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACxCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO9E,UAAa,0BAA4B,eAC5D8M,SAAU9G,EAAOhG,UACjB+M,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,GAC3Ck1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACtCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO7E,QAAW,0BAA4B,eAC1D6M,SAAU9G,EAAO/F,QACjB8M,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,GACzCk1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2BAA2BE,SAAA,CAC9CC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,SACLhG,UAAYyR,EAAO5E,OAAU,0BAA4B,eACzDkF,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SAAA,CACtDC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,eACLhG,UAAYyR,EAAOygD,aAAgB,0BAA4B,eAC/DngD,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,6BAInEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,kBACbxG,aAAchO,EAAOggD,gBACrB75D,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,kBAAmBiH,EAAElf,OAAOmiB,cAC1CnK,EAAgB,mBAAmB,GAAM,EAAK,IAGlDpd,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,2BAGzDI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAWpG,SACvDF,EAAE,yBAGF,KCpLEF,qBAAkB4C,aA1CjC,SAAqC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACvD,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MACzBwuD,GAAkBzoD,YAAYqoD,GAAkC,CACrE9rC,YAAaA,KAAQzrB,EAAQnB,KAAK,qBAAqB,IAEnDgoD,EAAa,CACjBpM,aAAcG,EACdzxC,KAAMgyC,GAGR,OACEx+C,cAAA,UAAQE,UAAU,qCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,kDACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,8CACd+Y,eAAgBoiD,EAChBvjD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL+qC,aAAcG,EACdzxC,KAAMgyC,IAGVtrC,eAAgB,CACd,CAAEC,MAAOwnD,GAAsCzvD,UAAWg/C,GAC1D,CAAE/2C,MAAOosC,GAAmBr0C,UAAW3D,SAG3C,EACJxH,SACAO,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,YAAY,IAAE,IAAI,IAAErG,EAAE,sDAGhF,KCuMeF,qBAAkB4C,aA/NjC,SAA0B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1Cq7D,GAAa,EACjB,MAAMvuD,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,KAC/B9T,QAAQC,IAAI+T,GACZhU,QAAQC,IAAI0mD,GAEZ,MAAM6K,EAAa,CACjBpM,aAAcpxC,EACdF,KAAM6yC,IAGAz9C,QAAS4sB,EAAc3sB,MAAO4sB,EAAY3sB,KAAMurD,GAAc/pD,YAASq3D,GAAsC,CACnHzvD,UAAWg/C,KAELgR,GAAiC3oD,YAAYsoD,IAWrD,GAAIrsC,EAAc,OAAOxuB,cAAA,KAAAD,SAAIF,EAAE,+BAE/B,GAAI4uB,EAEF,OADA/1B,QAAQC,IAAI81B,GACLzuB,cAAA,KAAAD,SAAIF,EAAE,8BAGfnH,QAAQC,IAAI,aACZD,QAAQC,IAAI00D,GAEZ,MAAMvP,EAAeuP,EAAUvP,aACzBkJ,EAAW+Q,GAAe,CAC9Bl4D,EAAGA,EACH2b,SAAUsiC,EAAalxC,yBAAyBjF,qBAAqBzB,KACrEstD,aAAc1V,EAAalxC,yBAAyB1G,KACpDgrD,UAAWpT,EAAar2C,sBAAsBvB,KAC9C2G,UAAWqP,GAAsB4hC,EAAajxC,WAC9CL,KAAM6yC,IAGR,IAAInpC,EACJ,IAAIzD,EAAgB,CAAC,EA6DrB,OA5DI46C,EAAU8N,uBAAuBpyD,MAAM3J,QACzC67D,GAAa,EAEb/kD,EAAcm3C,EAAU8N,uBAAuBpyD,MAAM,GAAGG,KAExDuJ,EAAcpK,OAAS6N,EAAY7N,OACnCoK,EAAcjK,YAAc0N,EAAY1N,YACpC0N,EAAYmN,UACd5Q,EAAc4Q,QAAUnN,EAAYmN,QAAQzN,IAE1CM,EAAYmqC,WACd5tC,EAAc4tC,SAAWnqC,EAAYmqC,SAASzqC,IAEhDnD,EAAczK,KAAOkO,EAAYlO,MAAQ,GACzCyK,EAAc6tC,MAAQpqC,EAAYoqC,OAAS,GACvCpqC,EAAYtJ,2BACd6F,EAAc7F,yBAA2BsJ,EAAYtJ,yBAAyBgJ,IAE5EM,EAAYzO,wBACdgL,EAAchL,sBAAwByO,EAAYzO,sBAAsBmO,IAEtEM,EAAYxO,oBACd+K,EAAc/K,kBAAoBwO,EAAYxO,kBAAkBkO,IAE9DM,EAAYrJ,YACd4F,EAAc5F,UAAYqP,GAAsBhG,EAAYrJ,YAE1DqJ,EAAYpJ,UACd2F,EAAc3F,QAAUoP,GAAsBhG,EAAYpJ,UAExDoJ,EAAYnJ,SACd0F,EAAc1F,OAASmJ,EAAYnJ,QAEjCmJ,EAAYk8C,eACd3/C,EAAc2/C,aAAel8C,EAAYk8C,cAEvCl8C,EAAYy8C,kBACdlgD,EAAckgD,gBAAkBz8C,EAAYy8C,iBAE1Cz8C,EAAY28C,kBACdpgD,EAAcogD,gBAAkB38C,EAAY28C,mBAI9Cn6D,QAAQC,IAAI,0BACZ8Z,EAAcpK,OAAS,GACvBoK,EAAcjK,YAAc,GAC5BiK,EAAc4Q,QAAU,GACxB5Q,EAAczK,KAAO,GACrByK,EAAc4tC,SAAW,GACzB5tC,EAAc6tC,MAAQ,GACtB7tC,EAAc7F,yBAA2B,GACzC6F,EAAchL,sBAAwB,GACtCgL,EAAc/K,kBAAoB,GAClC+K,EAAc5F,UAAY,GAC1B4F,EAAc3F,QAAU,GACxB2F,EAAckgD,iBAAkB,EAChClgD,EAAcogD,gBAAkB,IAIhC7yD,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAU2gD,EAASjnD,SAC1DO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC43D,GAAiB,IAClB53D,cAAC0xD,GAAqB,CACpBX,aAAa,EACbH,gBApGd,WACE,MAAMiH,EAAezsD,IAAOi0C,GAAW3jB,SAAS,EAAG,QAAQrwB,OAAO,cAClEhI,EAAQnB,KAAM,gCAA+BwK,KAAkBmrD,IACjE,EAkGchH,YAjGd,WACE,MAAMgH,EAAezsD,IAAOi0C,GAAW31C,IAAI,EAAG,QAAQ2B,OAAO,cAC7DhI,EAAQnB,KAAM,gCAA+BwK,KAAkBmrD,IACjE,SAkGQv3D,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oBAEjBG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAeA,EACfE,iBAAkBmoD,GAClBloD,SAAUA,CAACC,EAAM7G,KAAyB,IAKlCa,EACAC,GANW,cAAEgG,GAAe9G,EAEhCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAIRA,EAAOhG,YACTA,EAAYkP,GAAmBlJ,EAAOhG,YAGpCgG,EAAO/F,UACTA,EAAUiP,GAAmBlJ,EAAO/F,UAItCouD,EAA6B,CAAEhwD,UAAW,CACxC6H,MAAO,CACL+qC,aAAcpxC,EACdF,KAAM6yC,EACNh3C,OAAQwK,EAAOxK,OACfG,YAAaqK,EAAOrK,YACpB6a,QAASxQ,EAAOwQ,QAChBrb,KAAM6K,EAAO7K,KACbq4C,SAAUxtC,EAAOwtC,SACjBC,MAAOztC,EAAOytC,MACd1zC,yBAA0BiG,EAAOjG,yBACjCnF,sBAAuBoL,EAAOpL,sBAC9BC,kBAAmBmL,EAAOnL,kBAC1BmF,UAAWA,EACXC,QAASA,EACTC,OAAQiJ,SAASnD,EAAO9F,QACxBqlD,aAAcp8C,SAASnD,EAAOu/C,cAC9BO,gBAAiB9/C,EAAO8/C,gBACxBE,gBAAiBhgD,EAAOggD,kBAEzB3/C,eAAgB,CACf,CAACC,MAAOwnD,GAAsCzvD,UAAWg/C,GACzD,CAAC/2C,MAAOosC,GAAmBr0C,UAAW3D,SAEzC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,kDAAoD,CACjE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDnJ,QAAQC,IAAI,uCAAwCkJ,EAAMu5D,eAC1DtoD,GAAc,EAAM,GACpB,EAEL/S,SAEA0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACq7D,GAAqB,CACpBl+C,UAAWkwC,EACX37C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACS,WAMlCrR,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAAA,CAC5Bk7D,EACAj7D,cAACs7D,GAA4B,IAAM,GAErCt7D,cAAC83D,GAAS,CACRprD,eAAgBA,EAChB2yC,UAAWA,EACXhF,WAAW,qBAQ3B,KCxPO,MAAMkhB,GAAiC7hE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsDrC8hE,GAAuC9hE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAgC3C4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;EAmB7B+hE,GAA0B/hE,GAAI;;;;;;;;EAU9BgiE,GAA6BhiE,GAAI;;;;;;;;EAUjCiiE,GAA6BjiE,GAAI;;;;;;ECvF/BiG,qBAAkB4C,aA9BjC,SAAiC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACvD,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,UACtBqd,GAAoBrpD,YAAYopD,IACjCzR,EAAa,CACjBpM,aAAckV,GAGhB,OACEhzD,cAACi8B,GAAY,CACX5kB,WAAYxX,EAAE,8CACdyX,eAAgB,GAChBC,WAAY1X,EAAE,0CACd+Y,eAAgBgjD,EAChBhgC,wBACE,CACE1wB,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAOooD,GAAgCrwD,UAAWg/C,MAMhE,KCsHevqD,qBAAkB4C,aAlIjC,SAA4B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC9C,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzBi6C,EAAU5vD,EAAMmK,OAAOgxC,SACvBsD,EAAiB,SACjB7yC,EAAYnP,EAAE,iCACdg8B,EAAuBv7B,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAC1CC,cAACo0D,GAAa,IACdp0D,cAACgV,GAAS,CAACH,OAAS,gCAA+Bm+C,QAAe9yD,UAAU,aAGxE,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASi4D,GAAgC,CACnFrwD,UAAW,CAAE4yC,aAAckV,KAG7B,OAAIpxD,EACF5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,+CAMPiC,EAAKq4D,mBAAmBpxD,MAAM3J,OAajCY,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChBhmB,qBAAsBA,EACtBs3B,aAAa,EAAMpzD,SAErBC,cAACyN,GAAW,CACVuB,UAAWA,EAEXI,aAAa,EACbb,SAAUzM,EAAKq4D,mBAAmB5rD,SAClCG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAKq4D,mBAAmB5rD,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2pD,mBAAmBpxD,MAC9CwF,EAAWiC,EAAgB2pD,mBAAmB5rD,SAEpD,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJq4D,mBAAoB,CAClBzpD,WAAYH,EAAe4pD,mBAAmBzpD,WAC9C3H,MAAO,IAAKwH,EAAe4pD,mBAAmBpxD,SAAU0H,GACxDlC,cAINgC,CAAc,GAElB,EACFxQ,SACFC,cAAA,OAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKq4D,mBAAmBpxD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACPrH,QAAQC,IAAIuQ,GACblJ,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAc,IAD9CzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKoxD,4BAA+BpxD,EAAKoxD,4BAA4Bp0D,KAAO,KAEhFlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKsxD,2BAA8BtxD,EAAKsxD,2BAA2Bt0D,KAAO,KAE9E5F,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAAC8xC,GAAU,CAAClB,QAAU,gCAA+BoiB,UAAgB9pD,EAAK0M,OAC1E5V,cAAC67D,GAAwB,CAACjmD,GAAI1M,EAAK0M,OAFEtJ,kBAdzBA,eAkBJ,eA9EtBtM,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,2CAgFd,KCvEeF,qBAAkB4C,aAjEF3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,UAAEhX,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OACvIU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qCAAqCE,SAAA,CACxDO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,8BACLhG,UAAYyR,EAAO2oD,4BAA+B,0BAA4B,eAC9EroD,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,4CACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU2oB,wBAAwB/8B,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACpDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,0BAGhFF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oCAAoCE,SAAA,CACvDO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,6BACLhG,UAAYyR,EAAO6oD,2BAA8B,0BAA4B,eAC7EvoD,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,KAATyM,gBACrB6Q,EAAU2oB,wBAAwB/8B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACpDvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,6BAA6BiM,UAAU,OAAOjS,UAAU,gCAKnFI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC4d,GAAgB,CAACxL,SAAUV,IAC5B1R,cAAC6d,GAAgB,CAAC1X,UAAWA,SAE1B,KCnEIxG,qBAAkB4C,aAJF3C,IAAA,IAAC,EAAEC,EAAC,QAAEmzD,GAASpzD,EAAA,OAC5CI,cAACyG,GAAU,CAACN,UAAY,gCAA+B6sD,KAAa,KC+GvDrzD,qBAAkB4C,aApGjC,SAA8B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAClD,MAAMozD,EAAU5vD,EAAMmK,OAAOgxC,SACvBp4C,EAAa,gCAA+B6sD,IAC5ChkD,EAAYnP,EAAE,qCACdgiD,EAAiB,SACjBhmB,EAAuB77B,cAAC87D,GAAsB,CAAC9I,QAASA,KACxD,QAAEpxD,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASgV,KACpCyjD,GAAyBxpD,YAAYkpD,GAAyB,CACnE3sC,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAGlC,GAAIvE,EAAS,OACX5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAAO,OACT7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAA,KAAAD,SAAIF,EAAE,gCAIVnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAGlB,OACE9B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfo3D,4BAA6B,GAC7BE,2BAA4B,IAG9B5nD,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnB08C,EAAsB,CAAE7wD,UAAW,CACjC6H,MAAO,CACL+qC,aAAc16C,EAAMmK,OAAOgxC,SAC3Bn/B,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTi7C,4BAA6BznD,EAAOynD,4BACpCE,2BAA4B3nD,EAAO2nD,6BAEpCtnD,eAAgB,CACf,CAACC,MAAOooD,GAAgCrwD,UAAW,CAAE4yC,aAAc16C,EAAMmK,OAAOgxC,cAGnFnrC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACg8D,GAAsB,CACrB7+C,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KCwJexG,qBAAkB4C,aA3PjC,SAA+B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACnD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBo9C,EAAU5vD,EAAMmK,OAAOgxC,SACvBp4C,EAAa,gCAA+B6sD,IAC5CnR,EAAiB,SACjB7yC,EAAYnP,EAAE,sCACdg8B,EAAuB77B,cAAC87D,GAAsB,CAAC9I,QAASA,KACxD,QAAEpxD,EAAO,MAAEC,EAAK,KAAEC,GAAUwB,YAASk4D,GAAsC,CAC/EtwD,UAAW,CACT0K,GAAIA,MAGDqmD,GAA0B1pD,YAAYmpD,GAA4B,CACvE5sC,YAAaA,IAAMzrB,EAAQnB,KAAKiE,KAIlC,GAAIvE,EAAS,OACX5B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAAO,OACT7B,cAAC8zD,GAAa,CACZjS,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAA,KAAAD,SAAIF,EAAE,gCAKVnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAElB,IAAIo6D,EACAC,EAEAh/C,EAAUi/C,kBAAkB9B,8BAC9B4B,EAAqC/+C,EAAUi/C,kBAAkB9B,4BAA4B1kD,IAG3FuH,EAAUi/C,kBAAkB5B,6BAC9B2B,EAAoCh/C,EAAUi/C,kBAAkB5B,2BAA2B5kD,IAK7F,IAAIwJ,EAAY,KACZC,EAAU,KASd,OARIlC,EAAUi/C,kBAAkBh9C,YAC9BA,EAAY,IAAIlc,KAAKia,EAAUi/C,kBAAkBh9C,YAE/CjC,EAAUi/C,kBAAkB/8C,UAC9BA,EAAU,IAAInc,KAAKia,EAAUi/C,kBAAkB/8C,UAKjDrf,cAAC8zD,GAAa,CACZ9kD,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWA,EACXC,QAASA,EACTi7C,4BAA6B4B,EAC7B1B,2BAA4B2B,GAG9BvpD,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnB48C,EAAuB,CAAE/wD,UAAW,CAClC6H,MAAO,CACL6C,GAAIA,EACJwJ,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTi7C,4BAA6BznD,EAAOynD,4BACpCE,2BAA4B3nD,EAAO2nD,6BAEpCtnD,eAAgB,CACf,CAACC,MAAOooD,GAAgCrwD,UAAW,CAAE4yC,aAAc16C,EAAMmK,OAAOgxC,cAGnFnrC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACg8D,GAAsB,CACrB7+C,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKV,KChHexG,qBAAkB4C,aArBjC,SAA2B3C,GAA4D,IAA3D,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,qBAAE87B,EAAqB,IAAIj8B,EAClF,OACII,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,yBAAyBE,SAC5EC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGL77B,cAACI,IAAKC,IAAG,CAAAN,SACTC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACbA,YAOhB,KC9BO,MAAMs8D,GAA4B3iE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwDhC4iE,GAA2B5iE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2F/B4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiD7B6iE,GAAyB7iE,GAAI;;;;;;;;EAU7B8iE,GAA2B9iE,GAAI;;;;;;;;EC9MrC,SAAS6N,KACd,IAAI0N,EAAW3W,aAAayE,QAAQvE,EAAKtB,0BACxB,OAAb+X,IACFA,GAAW,GAGb,IAAIrN,EAAY,CACdqN,SAAwB,SAAbA,EACXzN,QAAuB,SAAbyN,EAAuB,cAAe,cAKlD,OAFAvc,QAAQC,IAAIiP,GAELA,CACT,CC0CejI,qBAAkB4C,aA9CjC,SAA6B3C,GAA6B,IAA5B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,KAAE6F,GAAKtJ,EACrD,MAAO68D,GAAwBlqD,YAAYgqD,IACrCrpD,EAAiB,CACrB,CAAEC,MAAOkpD,GAA2BnxD,UAAW3D,OAGjD,OAAK2B,EAAK+L,SAqBNjV,cAACyxC,GAAe,CACdp6B,WAAYxX,EAAE,yCACd0X,WAAY1X,EAAE,sBACdyxC,kBAAmBmrB,EACnBlrB,2BAA4B,CACxBrmC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTX,UAAU,IAGd/B,eAAgBA,KA9BtBlT,cAAC0xC,GAAa,CACZr6B,WAAYxX,EAAE,uCACd0X,WAAY1X,EAAE,oBACdsxC,gBAAiBsrB,EACjBrrB,yBAA0B,CACtBlmC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTX,UAAU,IAGd/B,eAAgBA,IAyB5B,KCtBK5U,aAAayE,QAAQvE,EAAKtB,2BAC7BoB,aAAaC,QAAQC,EAAKtB,0BAA0B,GA2KvCyC,qBAAkB4C,aAvKjC,SAAuB3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAClC,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACzB,QAAEnX,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YAAS+4D,GAA2B,CACvFnxD,UAAW3D,QAENm1D,GAA0BnqD,YAAYiqD,IAEvC3gC,EAAuB77B,cAACmN,GAAoB,CAACvD,WAAW,MAAMC,SAAS,gBAAe9J,SAC1FC,cAACgV,GAAS,CAACH,OAAO,2BAGd8nD,EAAoBr8D,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACrCC,cAAC0E,IAAM,CAACG,MAAgE,UAAxDvG,aAAayE,QAAQvE,EAAKtB,0BAAyC,UAAW,YACtF0H,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAKtB,0BAA0B,GACpDkY,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,qBAELG,cAAC0E,IAAM,CAACG,MAAgE,SAAxDvG,aAAayE,QAAQvE,EAAKtB,0BAAwC,UAAW,YACrF0H,KAAK,KACL1E,UAAU,OACVqP,QAASA,KACPjR,aAAaC,QAAQC,EAAKtB,0BAA0B,GACpDkY,EAAQ7N,KAA2B,EAE5CxH,SACEF,EAAE,wBAIP,GAAI+B,EACF,OACE5B,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,yBACboP,cAAe0tD,EAAkB58D,SAEjCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAOxB,GAAIa,EACF,OACE7B,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,yBACboP,cAAe0tD,EAAkB58D,SAEhCF,EAAE,0CAMXnH,QAAQC,IAAImJ,GAEZ,MAAM+6D,EAAiB/6D,EAAK+6D,eAE5B,OACE78D,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,yBACboP,cAAe0tD,EACfvtD,aAAa,EACbb,SAAUsuD,EAAetuD,SACrBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOysD,EAAetuD,SAAS8B,WAEjCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqsD,eAAe9zD,MAC1CwF,EAAWiC,EAAgBqsD,eAAetuD,SAEhD,OAAOkC,EAASrR,OACZ,CAGEy9D,eAAgB,CACdnsD,WAAYH,EAAessD,eAAensD,WAC1C3H,MAAO,IAAKwH,EAAessD,eAAe9zD,SAAU0H,GACpDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAENO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,MALFtE,kBAQlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACP88D,EAAe9zD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAClCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,GAAa,IAAC/Y,cAAA,YAEhDM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAAA,QAAMoG,MAAQ8C,EAAKhD,KAAMnG,SAAGmJ,EAAKhD,KAAKkd,MAAM,MAAY,IAACpjB,cAAA,SACzDA,cAAA,SAAOE,UAAU,aAAYH,SACzBmJ,EAAKvB,qBAAqBzB,UAGhClG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAELmJ,EAAK3E,WAAc2E,EAAK3E,WAAW+e,SAASF,MAAM,IAAM,KAG7DpjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK47B,gBAQ5BxkC,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACmN,GAAoB,CAAYvD,WAAW,MAAMC,SAAS,gBAAe9J,SACxEC,cAACyZ,GAAa,CACZrT,MAAOvG,EAAE,qCACTwX,WAAY/W,eAAA,KAAAP,SAAA,CAAImJ,EAAKhD,KAAK,IAAGkF,IAAOlC,EAAKkW,WAAW/T,OAAO0N,MAC3DxB,WAAa1X,EAAE,2CACf2X,eAAgBklD,EAChB1kD,wBAAyB,CACvB9M,UAAW,CAAC6H,MAAO,CAAC6C,GAAI1M,EAAK0M,KAC7B1C,eAAgB,CACd,CAAEC,MAAOkpD,GAA2BnxD,UAAW3D,QAGnD0Q,YAAY,gBACZC,WAAYlY,cAACiG,IAAI,CAACC,KAAK,SACvB4O,WAAYjV,EAAE,qBACdsY,gBAAgB,MAfO7L,gBAkBzBpD,EAAK+L,SACLjV,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,+BAC9BG,cAAC8xC,GAAU,CAAClB,QAAU,yBAAwB1nC,EAAK0M,OAEvD5V,cAAC88D,GAAoB,CAAC5zD,KAAMA,MAvBSoD,kBAxBzBA,eAiDJ,YAO1B,KCzMO,MAAMywD,GAA6B7rD,OAAaC,MAAM,CAC3D8b,cAAe/b,OACf4zB,YAAa5zB,OACb8rD,iBAAkB9rD,OAClBvJ,qBAAsBuJ,OACnBG,SAASxR,YAAE,uBACd6H,kBAAmBwJ,OACnB3M,WAAY2M,OACZ+rD,YAAa/rD,OACbhL,KAAMgL,OACDK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBAChBq9D,QAAShsD,OACTisD,QAASjsD,OACT1I,YAAa0I,OACb2hD,gBAAiB3hD,SCuMJvR,qBAAkB4C,aAxMP3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEvK,EAAM,OAAElB,EAAM,UAAExL,GAAWvG,EAAA,OAC3HU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,+BAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,aAGjDnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,cACL0lB,QAAS/Y,EAAOiyB,cAChB9kC,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,6BAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,aAG/CnS,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,mBACL0lB,QAAS/Y,EAAOmqD,mBAChBh9D,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,4CAEnDG,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,gBAItD7R,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,uBACLhG,UAAYyR,EAAOhK,qBAAwB,0BAA4B,eACvEsK,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0CAATyM,gBACrB6Q,EAAUwvB,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAClDhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,uBAAuBiM,UAAU,OAAOjS,UAAU,0BAGzEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOjK,kBAAqB,0BAA4B,eACpEuK,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUozB,mBAAmBxnC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,6BAIxEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,aACLhG,UAAYyR,EAAOpN,WAAc,0BAA4B,eAC7D0N,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,4CAATyM,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACrCzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,0BAG/DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,cACLhG,UAAYyR,EAAOsrD,YAAe,0BAA4B,eAC9DhrD,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OACrChoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,6BAIlEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOurD,QAAW,0BAA4B,eAC1DjrD,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,4BAI9DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbxG,aAAchO,EAAOsqD,QACrBnkE,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,UAAWiH,EAAElf,OAAOmiB,cAClCnK,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,4BAI9DF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIlEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2BAA2BE,SAAA,CAC9CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,kBACbxG,aAAchO,EAAOggD,gBACrB75D,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,kBAAmBiH,EAAElf,OAAOmiB,cAC1CnK,EAAgB,mBAAmB,GAAM,EAAK,IAGlDpd,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,+BAKxEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACjBF,EAAE,2BAIF,KC/LX,MAAMu9D,GAAwB1jE,GAAI;;;;;;;;EAiHnBiG,qBAAkB4C,aAtGjC,SAAyB3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACtC,MAAMuG,EAAY,mBACZ01B,EAAuB77B,cAACyG,GAAU,CAACN,UAAWA,KAE9C,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,GAAwB,CAChEhN,YAAa,kBAEP+xD,GAAwB9qD,YAAY6qD,IAE5C,GAAIx7D,EACF,OACE5B,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,uCAObnH,QAAQC,IAAI,oCACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAElB,OACE9B,cAAC48D,GAAkB,CAAC/gC,qBAAsBA,EAAqB97B,SAC7DC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACf6X,aAAa,EACb5+B,KAAM,GACNsC,YAAa,IAEfmK,iBAAkBoqD,GAClBnqD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZwqD,EAAoB,CAAEnyD,UAAW,CAC/B6H,MAAO,CACLka,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpBw4B,iBAAkBzqD,EAAOyqD,iBACzB31D,qBAAsBkL,EAAOlL,qBAC7BD,kBAAmBmL,EAAOnL,kBAC1BxB,KAAM2M,EAAO3M,KACbg3D,QAASrqD,EAAOqqD,QAChBC,QAAStqD,EAAOsqD,QAChB30D,YAAaqK,EAAOrK,YACpBjE,WAAYsO,EAAOtO,WACnB04D,YAAapqD,EAAOoqD,YACpBpK,gBAAiBhgD,EAAOggD,kBAEzB3/C,eAAgB,CACf,CAAEC,MAAOkpD,GAA2BnxD,UAAW3D,SAElD6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,qCAAuC,CACpD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACu9D,GAAiB,CAChBpgD,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,OAMd,KCnCexG,sBAzFWC,IAAA,IAAC,EAAEC,EAAC,QAAE29D,EAAO,WAAEnjB,GAAYz6C,EAAA,OACnDU,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CAC5BC,cAACmN,GAAoB,CACjBtD,SAAS,gBACTD,WAAW,SAAQ7J,SAErBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,IAC9Bn7D,KAAK,SACLtB,OAAwB,YAAfs5C,EAA0Bt6C,SAElCF,EAAE,+BANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,sBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,YAC9Bn7D,KAAK,YACLtB,OAAwB,YAAfs5C,EAA0Bt6C,SAElCF,EAAE,kCANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,gBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,eAC9Bn7D,KAAK,WACLtB,OAAwB,eAAfs5C,EAA6Bt6C,SAErCF,EAAE,qCANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,qBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,UAC9Bn7D,KAAK,QACLtB,OAAwB,UAAfs5C,EAAwBt6C,SAEhCF,EAAE,gCANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,yBACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,eAC9Bn7D,KAAK,QACLtB,OAAwB,eAAfs5C,EAA6Bt6C,SAErCF,EAAE,qCANEyM,kBASXtM,cAACmN,GAAoB,CACjBtD,SAAS,yCACTD,WAAW,OAAM7J,SAEnBC,cAAC+F,IAAKw0C,UAAS,CAEXr6C,UAAU,4BACVkC,GAAK,0BAAyBo7D,iCAC9Bn7D,KAAK,OACLtB,OAAwB,iCAAfs5C,EAA+Ct6C,SAEvDF,EAAE,uDANEyM,oBASA,IC5CA3M,qBAAkB4C,aArCjC,SAAkC3C,GAS7B,IAT8B,EACjCC,EAAC,MACDuD,EAAK,QACLC,EAAO,SACPtD,EAAQ,UACRoG,EAAU,mBAAkB,kBAC5BG,EAAiB,WACjB+zC,EAAU,aACVsd,GACA/3D,EACA,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SAE7B,OACIz9D,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,yBAA0BwG,SAAUsxD,EAAa53D,SACrEO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAElCC,cAACyG,GAAU,CAACN,UAAWA,IACrBG,OAGNhG,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACTC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACZA,IAEJC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC09D,GAAqB,CAACrjB,WAAYA,EAAYmjB,QAASA,eAOtE,KCuCe79D,qBAAkB4C,aAxEjC,SAA8B3C,GAU3B,IAV4B,EAC3BC,EAAC,MACDuD,EAAK,QACLC,EAAO,UACPmmD,EAAS,SACTzpD,EAAQ,WACRs6C,EAAU,UACVrrC,EAAS,kBACT1I,EAAiB,UACjBH,EAAU,oBAAmBvG,EAE/B,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzBykD,EAAUp6D,EAAMmK,OAAOkwD,SAGxBzuD,IACHA,EAAYnP,EAAE,+BAGhB,MAAM,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,KAGnB,GAAI57D,EACF,OACE5B,cAAC29D,GAAyB,CAACr3D,kBAAmBA,EAAmBH,UAAWA,EAAWk0C,WAAYA,EAAWt6C,SAC5GC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,cAAC29D,GAAyB,CAACr3D,kBAAmBA,EAAmBH,UAAWA,EAAWk0C,WAAYA,EAAWt6C,SAC5GC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,uCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACbppC,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgB1iD,EACtB5a,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEV,OACEpf,cAAC29D,GAAyB,CACxB3uD,UAAWA,EACX1I,kBAAmBA,EACnBH,UAAWA,EACXk0C,WAAYA,EAAWt6C,SAEvBO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEiP,EAAU,IAAE4uD,OAE1B79D,MAIP,KChEF,MAAM89D,GAAwBnkE,GAAI;;;;;;;;;EA6InBiG,qBAAkB4C,aAlIjC,SAA0B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAMgW,EAAKxS,EAAMmK,OAAOkwD,SAElBpjB,EAAa,WAEb,QAAEz4C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,kBAEPwyD,GAAwBvrD,YAAYsrD,IAG5C,GAAIj8D,EACF,OACE5B,cAAC+9D,GAAqB,CAAC1jB,WAAYA,EAAWt6C,SAC5CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,QAMvC,GAAIc,EACF,OACE7B,cAAC+9D,GAAqB,CAAC1jB,WAAYA,EAAWt6C,SAC5CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,qCAMX,MAAMqW,EAAcpU,EAAK0mD,cACnBrrC,EAAYrb,EAElB,IAAIk8D,EAA4B,GAC5B9nD,EAAYxO,oBACds2D,EAA4B9nD,EAAYxO,kBAAkBkO,IAG5D,IAAIqoD,EAAoB,GACpB/nD,EAAY3R,aACd05D,EAAoB/nD,EAAY3R,WAAWqR,IAG7C,IAAIsoD,EAAqB,GAKzB,OAJIhoD,EAAY+mD,cACdiB,EAAqBhoD,EAAY+mD,YAAYrnD,IAI7C5V,cAAC+9D,GAAqB,CAAC1jB,WAAYA,EAAWt6C,SAC1CC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAe/W,EAAY+W,cAC3B6X,YAAa5uB,EAAY4uB,YACzBk4B,iBAAkB9mD,EAAY8mD,iBAC9Br1D,qBAAsBuO,EAAYvO,qBAAqBiO,GACvDlO,kBAAmBs2D,EACnB93D,KAAMgQ,EAAYhQ,KAClBg3D,QAAShnD,EAAYgnD,QACrBC,QAASjnD,EAAYinD,QACrB30D,YAAa0N,EAAY1N,YACzBjE,WAAY05D,EACZhB,YAAaiB,EACbrL,gBAAiB38C,EAAY28C,iBAE/BlgD,iBAAkBoqD,GAClBnqD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAI8gB,EAAc,CAChB/d,GAAIA,EACJqX,cAAepa,EAAOoa,cACtB6X,YAAajyB,EAAOiyB,YACpBk4B,iBAAkBnqD,EAAOmqD,iBACzBr1D,qBAAsBkL,EAAOlL,qBAC7BD,kBAAmBmL,EAAOnL,kBAC1BxB,KAAM2M,EAAO3M,KACbg3D,QAASrqD,EAAOqqD,QAChBC,QAAStqD,EAAOsqD,QAChB30D,YAAaqK,EAAOrK,YACpBqqD,gBAAiBhgD,EAAOggD,iBAGtBhgD,EAAOtO,aACTovB,EAAwB,WAAI9gB,EAAOtO,YAGjCsO,EAAOoqD,cACTtpC,EAAyB,YAAI9gB,EAAOoqD,aAGtCa,EAAoB,CAAE5yD,UAAW,CAC/B6H,MAAO4gB,GACNzgB,eAAgB,CACf,CAAEC,MAAOkpD,GAA2BnxD,UAAW3D,SAElD6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,GAAQpG,EAAA,OAChEzM,cAACu9D,GAAiB,CAChBpgD,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACR1M,UAxHM,oBAyHN,KAKd,KC/JO,MAAMg4D,GAAsCzkE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8C1C0kE,GAAoC1kE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA+DxC2kE,GAAiC3kE,GAAI;;;;;;EASrC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECpB3BiG,qBAAkB4C,aAnFjC,SAAkC3C,GAY9B,IAZ+B,EACjCC,EAAC,MACDuD,EAAK,QACLC,EAAO,UACPmmD,EAAS,SACTj7C,EAAQ,WACRG,EAAU,WACV2rC,EAAU,SACVt6C,EAAQ,kBACRuG,EAAkB,GAAE,aACpBqxD,EAAa,GAAE,UACfxxD,EAAU,oBACXvG,EACC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB/J,EAAYnP,EAAE,8BACd29D,EAAUp6D,EAAMmK,OAAOkwD,UAEvB,QAAE77D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,KAIrB,GAAI57D,EACF,OACE5B,cAAC29D,GAAyB,CACxBr3D,kBAAmBA,EACnB+zC,WAAYA,EACZsd,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,EACF,OACE7B,cAAC29D,GAAyB,CACxBr3D,kBAAmBA,EACnB+zC,WAAYA,EACZsd,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,uCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACbppC,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgB1iD,EACtB5a,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEV,OACEpf,cAAC29D,GAAyB,CACxBr3D,kBAAmBA,EACnB+zC,WAAYA,EACZsd,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAACyN,GAAW,CACVuB,UAAW1O,eAAA,QAAAP,SAAA,CAAOiP,EAAU,IAAE4uD,KAC9BrvD,SAAUA,EACVG,WAAYA,EACZU,aAAa,EAAMrP,SAElBA,KAIP,KClDeJ,qBAAkB4C,aAnCjC,SAAoC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EAC1D,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,UACtBa,GAA+B/rD,YAAY8rD,IAC5CnU,EAAa,CACjB1B,cAAegV,GAGjB,OACEx9D,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iDACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,6CACd+Y,eAAgB0lD,EAChB7mD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAOgrD,GAAqCjzD,UAAWg/C,MAG7D,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCyHevG,qBAAkB4C,aA9IjC,SAAsB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACxC,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAC/BnS,QAAQC,IAAI05B,GAEZ,MAAMmrC,EAAUp6D,EAAMmK,OAAOkwD,SACvBpjB,EAAa,aACb5jC,EAAa,kDAAiD+mD,KAE9D,QAAE57D,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS66D,GAAqC,CACxFjzD,UAAW,CACTs9C,cAAegV,GAEjBlyD,YAAa,kBAGRkL,GAAkBjE,YAAY5Y,GAE/B2M,EAAoBhG,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CAEvCC,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,iBACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAASoT,GAC5B1W,SAEDF,EAAE,oBAELG,cAACgV,GAAS,CAACH,OAAS,yBAAwB2oD,mBAA0Bt9D,UAAU,YAGlF,GAAI0B,EAAS,OACX5B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACrFF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACi+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SAAA,CACtFC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMspC,EAAgB18D,EAAK08D,cACrBjwD,EAAWzM,EAAK08D,cAAcjwD,SAGpC,OAAKiwD,EAAcz1D,MAAM3J,OAiCvBY,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY9rC,SAAUA,EAAUG,WAzBtDA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAOouD,EAAcjwD,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBguD,cAAcz1D,MACzCwF,EAAWiC,EAAgBguD,cAAcjwD,SAE/C,OAAOkC,EAASrR,OACZ,CAGEo/D,cAAe,CACb9tD,WAAYH,EAAeiuD,cAAc9tD,WACzC3H,MAAO,IAAKwH,EAAeiuD,cAAcz1D,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EAI6FjK,kBAAmBA,EAAkBvG,SAClIO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,MAPFtE,kBAUlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNy+D,EAAcz1D,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,GAAY,IAAC/Y,cAAA,SAE5CM,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BqL,IAAOlC,EAAKkW,UAAY,IAAMlW,EAAK2D,WAAWxB,OAAOT,GAAY,IAAE,MACnEQ,IAAOlC,EAAKkW,UAAY,IAAMlW,EAAK4D,SAASzB,OAAOT,GAAY,IAAG,UAGvEtK,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKhD,KAAK,IAAClG,cAAA,SACZA,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,cAAgBtI,UAAU,kBAE3FI,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK0D,yBAAyBjF,qBAAqBzB,KAAK,IAAClG,cAAA,SAC1DA,cAAA,SAAOE,UAAU,aAAYH,SAAEmJ,EAAK0D,yBAAyB1G,UAE/D5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKma,SAAWna,EAAKma,QAAQC,SAC5Bpa,EAAKm3C,SAAY//C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,cAAA,SAAOkJ,EAAKm3C,SAAS/8B,YAAmB,MAE1FhjB,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK8D,wBAAwB,IAAE9D,EAAK6D,UAEvC/M,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,kBAE5B3sB,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,yBAAwBo7D,qBAA2Bt0D,EAAK0M,KAAK7V,SACtEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACy+D,GAA2B,CAAC7oD,GAAI1M,EAAK0M,UAlC1BtJ,eAoCJ,WAnFtBtM,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,8CAuFd,KCjKO,MAAM6+D,GAAiCxtD,OAAaC,MAAM,CAC/D8b,cAAe/b,OACfhL,KAAMgL,OACDK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBAChBkN,OAAQmE,OACLG,SAASxR,YAAE,uBACd+M,yBAA0BsE,OACvBG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdgN,UAAWqE,OACRipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdiN,QAASoE,OACNipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdwjB,QAASnS,OACTmvC,SAAUnvC,SCIGvR,qBAAkB4C,aAdjC,SAAkC3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EAC7C,MACMuG,EAAa,yBADH/C,EAAMmK,OAAOkwD,sBAG7B,OACEz9D,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBO,eAACoE,IAAM,CAACG,MAAM,yBAAwB9E,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAAkB,IAAErG,EAAE,oBAIrD,KC6JeF,qBAAkB4C,aAnKjC,SAAkC3C,GAYjC,IAZmC,EAClCC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAGpB,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,0CAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,eAInDnS,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACxCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO9E,UAAa,0BAA4B,eAC5D8M,SAAU9G,EAAOhG,UACjB+M,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,GAC3Ck1C,WAAW,IAMbtyD,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACtCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO7E,QAAW,0BAA4B,eAC1D6M,SAAU9G,EAAO/F,QACjB8M,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,GACzCk1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAO/E,yBAA4B,0BAA4B,eAC3EqF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUsyB,0BAA0B1mC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACtD1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKvB,qBAAqBzB,KAAK,MAAIgD,EAAKhD,OAA/CoG,eAA6D,OAG9FtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,SACLhG,UAAYyR,EAAO5E,OAAU,0BAA4B,eACzDkF,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,UACLhG,UAAYyR,EAAO0R,QAAW,0BAA4B,eAC1DpR,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,gDACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO0uC,SAAY,0BAA4B,eAC3DpuC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACrCzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,gCAKjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KC5JA,MAAM8+D,GAA8BjlE,GAAI;;;;;;;;EA8HzBiG,qBAAkB4C,aAnHjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACrD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,gBACrCnjB,EAAa,aACbrrC,EAAYnP,EAAE,mCAEb++D,GAA0BrsD,YAAYosD,GAA6B,CACxE7vC,YAAaA,IAAMzrB,EAAQnB,KAAKiE,MAE5B,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,IAEpCumD,EAAiB7+D,cAAC8+D,GAAyB,IAEjD,GAAIl9D,EAAS,OACX5B,cAAC+9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACTvB,eAACy9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM/X,EAAYrb,EAGlB,OAFApJ,QAAQC,IAAIwkB,GAGVnd,cAAC+9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACf/mB,KAAM,GACN6G,OAAQ,GACRH,yBAA0B,GAC1BwS,UAAW,IAAIlc,KAEf2J,UAAW,IAAI3J,KAAK,IAAM,EAAG,EAAG,EAAG,GACnC4J,QAAS,IAAI5J,KAAK,IAAM,EAAG,EAAG,GAAI,GAClCmgB,QAAS,GACTg9B,SAAU,IAEZ1tC,iBAAkB+rD,GAClB9rD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ+rD,EAAuB,CAAE1zD,UAAW,CAClC6H,MAAO,CACLy1C,cAAegV,EACf7wD,cAAe,WACf+0C,kBAAmB,EACnBqd,iBAAkB,iBAClB9xC,cAAepa,EAAOoa,cACtB/mB,KAAM2M,EAAO3M,KACb6G,OAAQiJ,SAASnD,EAAO9F,QACxBH,yBAA0BiG,EAAOjG,yBACjCyW,QAASxQ,EAAOwQ,QAChBg9B,SAAUxtC,EAAOwtC,SACjBjhC,UAAWtD,GAAejJ,EAAOuM,WACjCvS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,WAEpCoG,eAAgB,CACf,CAACC,MAAOgrD,GAAqCjzD,UAAW,CACtDs9C,cAAegV,OAGpBpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACg/D,GAAyB,CACxBttD,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWA,EACXhX,UAAWA,GACX,KAKZ,KCpHexG,sBAvBf,SAAkCC,GAA4C,IAA3C,EAAEC,EAAC,UAAE2pD,EAAS,QAAEgU,EAAO,eAAE9wD,GAAe9M,EAGzE,OAFAlH,QAAQC,IAAI6wD,GAGVxpD,cAACupD,GAAQ,CACPh2C,SAAS,MACT81C,KAAM,CACF,CACEnjD,KAAM,UACNE,MAAOvG,EAAE,6CACTuN,KAAO,yBAAwBowD,qBAA2B9wD,KAE5D,CACExG,KAAM,aACNE,MAAOvG,EAAE,gDACTuN,KAAO,yBAAwBowD,qBAA2B9wD,iBAGhE3L,OAAQyoD,GAGd,ICqEe7pD,qBAAkB4C,aA1EjC,SAAsC3C,GAA4C,IAA3C,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEmmD,EAAS,SAAEzpD,GAASH,EAC7E,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB/J,EAAYnP,EAAE,mCAGd29D,EAAUp6D,EAAMmK,OAAOkwD,SACvB/wD,EAAiBtJ,EAAMmK,OAAOqI,GAC9BzP,EAAa,yBAAwBq3D,gBAErC,QAAE57D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,MAGX57D,QAASq9D,EAAiBp9D,MAAOq9D,EAAep9D,KAAMq9D,GAAiB77D,YAAS86D,GAAmC,CACzHlzD,UAAW,CACT0K,GAAIlJ,KAIFmyD,EAAiB7+D,cAAC8+D,GAAyB,IAEjD,GAAIl9D,GAAWq9D,EACb,OACEj/D,cAAC29D,GAAyB,CAACkB,eAAgBA,EAAgB14D,UAAWA,EAAUpG,SAC9EO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IACnF1M,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAASq9D,EACX,OACEl/D,cAAC29D,GAAyB,CAACkB,eAAgBA,EAAiB14D,UAAWA,EAAUpG,SAC/EO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IACnF1M,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,wCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACb1K,EAAeqhB,EAAarhB,aAC5B1+B,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgB9f,EACtBx9C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEJigD,EAAwBvhB,EAC9Bx9C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB+9C,EAAa53C,QACR,GAEV,OACElG,cAAC29D,GAAyB,CAACtjB,WA1DV,aA0DkCwkB,eAAgBA,EAAgB14D,UAAWA,EAAUpG,SACtGO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEiP,EAAU,IAAE4uD,EAAa,IAAEyB,OAE1Cr/D,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IAClF3M,MAIT,KC3EA,MAAMu/D,GAAiC5lE,GAAI;;;;;;;;EAgJ5BiG,qBAAkB4C,aApIjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvB/wD,EAAiBtJ,EAAMmK,OAAOqI,GAC9BzP,EAAa,yBAAwBq3D,gBACrChU,EAAY,UACZx6C,EAAYnP,EAAE,oCAEb0/D,GAA6BhtD,YAAY+sD,KAC1C,QAAE19D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS86D,GAAmC,CAC3ElzD,UAAW,CACT0K,GAAIlJ,KAGFmyD,EAAiB7+D,cAAC8+D,GAAyB,IAEjD,GAAIl9D,EAAS,OACX5B,cAACw/D,GAA6B,CAC5BX,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACk/D,GAA6B,CAC5BX,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM/X,EAAYrb,EACZg8C,EAAeh8C,EAAKg8C,aAC1BplD,QAAQC,IAAIwkB,GAIZ,IAAIsiD,EAAmB,KACnB3hB,EAAa1+B,YACfqgD,EAAmB,IAAIv8D,KAAK46C,EAAa1+B,YAG3C,IAAIm0C,EAAmB,KACnBzV,EAAajxC,YACf0mD,EAAmBr3C,GAAsB4hC,EAAajxC,YAExD,IAAIonD,EAAiB,KAMrB,OALInW,EAAahxC,UACfmnD,EAAiB/3C,GAAsB4hC,EAAahxC,UAKpD9M,cAACw/D,GAA6B,CAC5BX,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAe6wB,EAAa7wB,cAC5B/mB,KAAM43C,EAAa53C,KACnB6G,OAAQ+wC,EAAa/wC,OACrBH,yBAA0BkxC,EAAalxC,yBAAyBgJ,GAChEwJ,UAAWqgD,EACX5yD,UAAW0mD,EACXzmD,QAASmnD,EACT5wC,QAAUy6B,EAAaz6B,QAAWy6B,EAAaz6B,QAAQzN,GAAK,GAC5DyqC,SAAWvC,EAAauC,SAAYvC,EAAauC,SAASzqC,GAAK,IAEjEjD,iBAAkB+rD,GAClB9rD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ0sD,EAA0B,CAAEr0D,UAAW,CACrC6H,MAAO,CACL6C,GAAIlJ,EACJugB,cAAepa,EAAOoa,cACtB/mB,KAAM2M,EAAO3M,KACb6G,OAAQiJ,SAASnD,EAAO9F,QACxBH,yBAA0BiG,EAAOjG,yBACjCyW,QAASxQ,EAAOwQ,QAChBg9B,SAAUxtC,EAAOwtC,SACjBjhC,UAAWtD,GAAejJ,EAAOuM,WACjCvS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,WAEpCoG,eAAgB,CACf,CAACC,MAAOgrD,GAAqCjzD,UAAW,CACtDs9C,cAAegV,OAGpBpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACg/D,GAAyB,CACxBttD,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWA,EACXhX,UAAWA,GACX,KAKZ,KC7JO,MAAMu5D,GAAsChmE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC2GxCiG,qBAAkB4C,aAtFjC,SAA4C3C,GAAkE,IAAjE,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEmmD,EAAS,WAAE96C,EAAU,SAAEH,EAAQ,SAAExO,GAASH,EACzG,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB/J,EAAYnP,EAAE,mCACdw6C,EAAa,aAEnB3hD,QAAQC,IAAI6wD,GAEZ,MAAMgU,EAAUp6D,EAAMmK,OAAOkwD,SACvB/wD,EAAiBtJ,EAAMmK,OAAOqI,GAC9BzP,EAAa,yBAAwBq3D,gBAErC,QAAE57D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,MAGX57D,QAASq9D,EAAiBp9D,MAAOq9D,EAAep9D,KAAMq9D,GAAiB77D,YAAS86D,GAAmC,CACzHlzD,UAAW,CACT0K,GAAIlJ,KAIFmyD,EAAiB7+D,cAAC8+D,GAAyB,IAEjD,GAAIl9D,GAAWq9D,EACb,OACEj/D,cAAC29D,GAAyB,CAAEtjB,WAAYA,EAAYwkB,eAAgBA,EAAgB14D,UAAWA,EAAUpG,SACvGO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IACnF1M,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAASq9D,EACX,OACEl/D,cAAC29D,GAAyB,CAACtjB,WAAYA,EAAYwkB,eAAgBA,EAAgB14D,UAAWA,EAAUpG,SACtGO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IACnF1M,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,uCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACb1K,EAAeqhB,EAAarhB,aAC5B1+B,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgB9f,EACtBx9C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEJigD,EAAwBvhB,EAC9Bx9C,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB+9C,EAAa53C,QACR,GAEV,OACElG,cAAC29D,GAAyB,CAACtjB,WAAYA,EAAYwkB,eAAgBA,EAAgB14D,UAAWA,EAAUpG,SACtGC,cAACyN,GAAW,CACVuB,UAAW1O,eAAA,QAAAP,SAAA,CAAOiP,EAAU,IAAE4uD,EAAa,IAAEyB,KAC7ClwD,SAAUnP,cAACo/D,GAAyB,CAAC5V,UAAWA,EAAWgU,QAASA,EAAS9wD,eAAgBA,IAC7F0C,aAAa,EACbb,SAAUA,EACVG,WAAYA,EAAW3O,SAGtBA,KAWT,KCuBeJ,qBAAkB4C,aAhHjC,SAAwC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC5D,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvB/wD,EAAiBtJ,EAAMmK,OAAOqI,GAC9BzP,EAAa,yBAAwBq3D,gBACrChU,EAAY,aACZx6C,EAAYnP,EAAE,oCAGd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASo8D,GAAqC,CACxFx0D,UAAW,CACTy0D,cAAejzD,GAEjBpB,YAAa,iBAGTuzD,EAAiB7+D,cAAC8+D,GAAyB,IAEjD,GAAIl9D,EAAS,OACX5B,cAAC4/D,GAAmC,CAClCf,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACs/D,GAAmC,CAClCf,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM4pB,EAA0Bh9C,EAAKg9C,wBACrCpmD,QAAQC,IAAImJ,GACZ,MAAMyM,EAAWuwC,EAAwBvwC,SAGzC,OAAKuwC,EAAwB/1C,MAAM3J,OAiCjCY,cAAC4/D,GAEC,CACApW,UAAWA,EACXj7C,SAAUA,EACVG,WA9BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO0uC,EAAwBvwC,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsuC,wBAAwB/1C,MACnDwF,EAAWiC,EAAgBsuC,wBAAwBvwC,SAEzD,OAAOkC,EAASrR,OACZ,CAGE0/C,wBAAyB,CACvBpuC,WAAYH,EAAeuuC,wBAAwBpuC,WACnD3H,MAAO,IAAKwH,EAAeuuC,wBAAwB/1C,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EASuBxQ,SAEvBO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR++C,EAAwB/1C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,aAAa7V,SACxDmJ,EAAKma,QAAQC,aAGlBtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,oBAPrBnyC,eASJ,WA1DpBtM,cAAC4/D,GAAmC,CAACvlB,WAvCpB,aAuC4CmP,UAAWA,EAAWqV,eAAgBA,EAAe9+D,SAChHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,yDA8Dd,KC5HO,MAAMggE,GAAsCnmE,GAAI;;;;;;;;;;;;;;;;;;;;;;EAyB1ComE,GAAqCpmE,GAAI;;;;;;;;;EAYzCqmE,GAA+BrmE,GAAI;;;;;;;;EAWnCsmE,GAAkCtmE,GAAI;;;;;;;;EAWtCumE,GAAoCvmE,GAAI;;;;;;ECdtCiG,qBAAkB4C,aAnCjC,SAAqC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EAC3D,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,UACtByC,GAAgC3tD,YAAY0tD,IAC7C/V,EAAa,CACjB1B,cAAegV,GAGjB,OACEx9D,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iDACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,6CACd+Y,eAAgBsnD,EAChBzoD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO0sD,GAAqC30D,UAAWg/C,MAG7D,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCuFevG,qBAAkB4C,aA9GjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WAC/BrgB,QAAQC,IAAI05B,GAEZ,MAAMmrC,EAAUp6D,EAAMmK,OAAOkwD,SACvBpjB,EAAa,aAEb/zC,EAAoBtG,cAACgV,GAAS,CAClCH,OAAS,yBAAwB2oD,mBACjCt9D,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASu8D,GAAqC,CACxF30D,UAAW,CACTs9C,cAAegV,KAInB,GAAI57D,EAAS,OACX5B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACrFF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACi+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SAAA,CACtFC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAEZ,MAAMq+D,EAA0Br+D,EAAKq+D,wBAC/B5xD,EAAWzM,EAAKq+D,wBAAwB5xD,SAG9C,OAAK4xD,EAAwBp3D,MAAM3J,OAiCjCY,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY9rC,SAAUA,EAAUG,WAzBtDA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+vD,EAAwB5xD,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB2vD,wBAAwBp3D,MACnDwF,EAAWiC,EAAgB2vD,wBAAwB5xD,SAEzD,OAAOkC,EAASrR,OACZ,CAGE+gE,wBAAyB,CACvBzvD,WAAYH,EAAe4vD,wBAAwBzvD,WACnD3H,MAAO,IAAKwH,EAAe4vD,wBAAwBp3D,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EAI6FjK,kBAAmBA,EAAkBvG,SAClIO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mDACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNogE,EAAwBp3D,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAE/BzY,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKk3D,mBAAmB,QAE3B9/D,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,yBAAwBo7D,qBAA2Bt0D,EAAK0M,KAAK7V,SACtEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACqgE,GAA4B,CAACzqD,GAAI1M,EAAK0M,UAjB3BtJ,eAmBJ,WA/DtBtM,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,8CAmEd,KC/HO,MAAMygE,GAAmCpvD,OAAaC,MAAM,CACjEiO,UAAWlO,OACRG,SAASxR,YAAE,uBACdwf,QAASnO,OACNG,SAASxR,YAAE,uBACdugE,mBAAoBlvD,OACnBG,SAASxR,YAAE,yBCkFCF,qBAAkB4C,aA1EjC,SAA+B3C,GAW9B,IAXgC,EAC/BC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACN1M,EAAS,gBACTiX,EAAe,cACfC,GACDzd,EAEC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXlb,UAAYyR,EAAO0N,QAAW,0BAA4B,eAC1D1F,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iDAAiDE,SAAA,CACpEC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,qBACLhG,UAAYyR,EAAOyuD,mBAAsB,0BAA4B,eACrEnuD,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,OAAOjS,UAAU,+BAK3EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAOmD,KAAK,SAAQjI,SAC7BF,EAAE,2BAMnB,KCReF,qBAAkB4C,aAlEjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,gBAErCxuD,EAAYnP,EAAE,mCAEb0gE,GAA6BhuD,YAAYwtD,IAEhD,OACE//D,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WARe,aASfl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfmc,QAAS,GACT+gD,mBAAoB,GAEtBztD,iBAAkB2tD,GAClB1tD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ0tD,EAA0B,CAAEr1D,UAAW,CACrC6H,MAAO,CACLy1C,cAAegV,EACfp+C,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B+gD,mBAAoBvtD,EAAOutD,qBAE5BltD,eAAgB,CACf,CAACC,MAAO0sD,GAAqC30D,UAAW,CAACs9C,cAAegV,OAE3EpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwgE,GAA0B,CACzB9uD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,KAKZ,KC+CexG,qBAAkB4C,aA1GjC,SAAmC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACvD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBgD,EAA2Br9D,EAAMmK,OAAOqI,GACxCzP,EAAa,yBAAwBq3D,gBACrCnjB,EAAa,aACbrrC,EAAYnP,EAAE,oCAEb6gE,GAAgCnuD,YAAYytD,KAC7C,QAAEp+D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASw8D,GAAoC,CAC5E50D,UAAW,CACT0K,GAAI6qD,KAGR,GAAI7+D,EAAS,OACX5B,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACy9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMyrC,EAAyB7+D,EAAK6+D,uBAIpC,IAAIlB,EAAmB,KACnBkB,EAAuBvhD,YACzBqgD,EAAmB,IAAIv8D,KAAKy9D,EAAuBvhD,YAGrD,IAAIwhD,EAAiB,KAKrB,OAJID,EAAuBthD,UACzBuhD,EAAiB,IAAI19D,KAAKy9D,EAAuBthD,UAIjDrf,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWqgD,EACXpgD,QAASuhD,EACTR,mBAAoBO,EAAuBP,oBAE7CztD,iBAAkB2tD,GAClB1tD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ6tD,EAA6B,CAAEx1D,UAAW,CACxC6H,MAAO,CACL6C,GAAI6qD,EACJrhD,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASvD,GAAejJ,EAAOwM,SAC/B+gD,mBAAoBvtD,EAAOutD,qBAE5BltD,eAAgB,CACf,CAACC,MAAO0sD,GAAqC30D,UAAW,CAACs9C,cAAegV,OAE3EpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwgE,GAA0B,CACzB9uD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,KAKZ,KCxHO,MAAM06D,GAAkCnnE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA2BtConE,GAAiCpnE,GAAI;;;;;;;;;EAYrCqnE,GAAgCrnE,GAAI;;;;;;EASXA,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECH3BiG,qBAAkB4C,aAnCjC,SAAiC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACvD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,UACtBuD,GAA4BzuD,YAAYwuD,IACzC7W,EAAa,CACjB1B,cAAegV,GAGjB,OACEx9D,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,4CACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,wCACd+Y,eAAgBooD,EAChBvpD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO0tD,GAAiC31D,UAAWg/C,MAGzD,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCiFevG,qBAAkB4C,aA1GjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBpjB,EAAa,QAEb/zC,EAAoBtG,cAACgV,GAAS,CAClCH,OAAS,yBAAwB2oD,cACjCt9D,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASu9D,GAAiC,CACpF31D,UAAW,CACTs9C,cAAegV,KAInB,GAAI57D,EAAS,OACX5B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACrFF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACi+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SAAA,CACtFC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAEZ,MAAMm/D,EAAsBn/D,EAAKm/D,oBAC3B1yD,EAAWzM,EAAKm/D,oBAAoB1yD,SAG1C,OAAK0yD,EAAoBl4D,MAAM3J,OAiC7BY,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY9rC,SAAUA,EAAUG,WAzBtDA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO6wD,EAAoB1yD,SAAS8B,WAEtCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBywD,oBAAoBl4D,MAC/CwF,EAAWiC,EAAgBywD,oBAAoB1yD,SAErD,OAAOkC,EAASrR,OACZ,CAGE6hE,oBAAqB,CACnBvwD,WAAYH,EAAe0wD,oBAAoBvwD,WAC/C3H,MAAO,IAAKwH,EAAe0wD,oBAAoBl4D,SAAU0H,GACzDlC,aAGJgC,CAAc,GAEpB,EAI6FjK,kBAAmBA,EAAkBvG,SAClIO,eAACqQ,IAAK,CAAA5Q,SAAA,CACJC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,MAJFtE,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNkhE,EAAoBl4D,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACtCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC8oC,IAAM,CAAClkC,KAAK,KAAKjB,SAAUuF,EAAKmB,2BAEnCrK,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKV,cAERxI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK6qC,YAERzzC,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,yBAAwBo7D,gBAAsBt0D,EAAK0M,KAAK7V,SACjEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACkhE,GAAwB,CAACtrD,GAAI1M,EAAK0M,UAjBvBtJ,eAmBJ,WA/DtBtM,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,yCAmEd,KCzHO,MAAMshE,GAA8BjwD,OAAaC,MAAM,CAC5D3I,YAAa0I,OACRK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBAChBk0C,UAAW7iC,SCqBEvR,qBAAkB4C,aAdjC,SAA+B3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EAC1C,MACMuG,EAAa,yBADH/C,EAAMmK,OAAOkwD,iBAG7B,OACEz9D,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBO,eAACoE,IAAM,CAACG,MAAM,yBAAwB9E,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAAkB,IAAErG,EAAE,oBAIrD,KC2DeF,qBAAkB4C,aApEjC,SAA+B3C,GAY9B,IAZgC,EAC/BC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACN1M,EAAS,cACTmX,EAAa,eACbC,EAAc,sBACdC,EAAsB/N,IAAGA,IAC1B7P,EAEC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,YACLhG,UAAYyR,EAAOoiC,UAAa,0BAA4B,eAC5D9hC,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,6BAIhEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPC,cAAC6R,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mCAAmCE,SACtDO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,SAAOqE,KAAK,OAAOqZ,IAAKJ,EAAepd,UAAU,oBAAoB0Z,SAAU4D,IAC/Exd,cAAA,SAAOE,UAAU,oBAAoByd,MAAOZ,GAA0Bhd,SACnEwd,gBAObjd,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAOmD,KAAK,SAAQjI,SAC7BF,EAAE,2BAMnB,KClEA,MAAMuhE,GAA2B1nE,GAAI;;;;;;;;EAsHtBiG,qBAAkB4C,aA3GjC,SAA8B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAClD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,WAErCxuD,EAAYnP,EAAE,8BAEbwhE,GAAyB9uD,YAAY6uD,GAA0B,CACpEtyC,YAAaA,IAAMzrB,EAAQnB,KAAKiE,MAI3B4X,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGnC24D,EAAiB7+D,cAACshE,GAAsB,IAE9C,OACEthE,cAAC+9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAvBe,QAwBfl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbjK,YAAa,GACburC,UAAW,GAEbphC,iBAAkBwuD,GAClBvuD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdqqC,cAAegV,EACfh1D,YAAaqK,EAAOrK,YACpBurC,UAAWlhC,EAAOkhC,UAClBzK,cAAevrB,GAGbM,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAElB4iD,EAAsB,CAAEn2D,UAAW,CACjC6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAO0tD,GAAiC31D,UAAW,CAACs9C,cAAegV,OAEvEpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EAEA,IAAI4L,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,KAEdO,IAAMxR,MAAMhC,EAAE,gCAAiC,CAC7C0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,GAChB,EACA/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACuhE,GAAsB,CACrB7vD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRyK,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,GACX,KAKZ,KC7CexG,qBAAkB4C,aAtEjC,SAAmC3C,GAA4C,IAA3C,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEmmD,EAAS,SAAEzpD,GAASH,EAC1E,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzBykD,EAAUp6D,EAAMmK,OAAOkwD,SACvB+D,EAAuBp+D,EAAMmK,OAAOqI,GACpC5G,EAAYnP,EAAE,8BAEdsG,EAAa,yBAAwBq3D,YAGrC,QAAE57D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,MAGX57D,QAAS6/D,EAAc5/D,MAAO6/D,EAAY5/D,KAAM6/D,GAAcr+D,YAASw9D,GAAgC,CAC7G51D,UAAW,CACT0K,GAAI4rD,KAIR,GAAI5/D,GAAW6/D,EACb,OACEzhE,cAAC29D,GAAyB,CAACx3D,UAAWA,EAAUpG,SAC9CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,UAOzC,GAAIc,GAAS6/D,EACX,OACE1hE,cAAC29D,GAAyB,CAACx3D,UAAWA,EAAUpG,SAC9CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,uCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACboZ,EAAqBD,EAAUC,mBAC/BxiD,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgBgE,EACtBthE,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEJigD,EAAwBuC,EAC9BthE,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxB6hE,EAAmBp5D,eACd,GAEV,OACExI,cAAC29D,GAAyB,CAACtjB,WApDV,QAoDkCl0C,UAAWA,EAAUpG,SACtEO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEiP,EAAU,IAAE4uD,EAAa,IAAEyB,OAEzCt/D,MAIT,KCrEA,MAAM8hE,GAA8BnoE,GAAI;;;;;;;;EAqJzBiG,qBAAkB4C,aA1IjC,SAA+B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACnD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvB+D,EAAuBp+D,EAAMmK,OAAOqI,GACpCzP,EAAa,yBAAwBq3D,WACrChU,EAAY,UACZx6C,EAAYnP,EAAE,+BAEbiiE,GAA4BvvD,YAAYsvD,KACzC,QAAEjgE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASw9D,GAAgC,CACxE51D,UAAW,CACT0K,GAAI4rD,KAGF3C,EAAiB7+D,cAACshE,GAAsB,KAGvCvjD,EAAUC,GAAe7I,mBAAS,IACnCmI,EAAgBW,iBAAO,MACvBV,EAAiBQ,GAAYle,EAAE,yCAE/B2d,EAAyBtC,IAC7BxiB,QAAQC,IAAI,uBACZqlB,EAAY9C,EAAM9V,OAAO8Y,MAAM,GAAGhY,KAAK,EAGzC,GAAItE,EAAS,OACX5B,cAAC+hE,GAA0B,CACzBlD,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACyhE,GAA0B,CACzBlD,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM/X,EAAYrb,EACZ8/D,EAAqB9/D,EAAK8/D,mBAGhC,OAFAlpE,QAAQC,IAAIwkB,GAGVnd,cAAC+hE,GAA0B,CACzBlD,eAAgBA,EAChB7vD,UAAWA,EACXw6C,UAAWA,EACXrjD,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbjK,YAAao5D,EAAmBp5D,YAChCurC,UAAW6tB,EAAmB7tB,WAEhCphC,iBAAkBwuD,GAClBvuD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIolB,GAEZ,IAAII,EAAY,CACdvI,GAAI4rD,EACJh5D,YAAaqK,EAAOrK,YACpBurC,UAAWlhC,EAAOkhC,WAGpB,SAASiuB,IACPF,EAAyB,CAAE52D,UAAW,CACpC6H,MAAOoL,GACNjL,eAAgB,CACf,CAACC,MAAO0tD,GAAiC31D,UAAW,CAACs9C,cAAegV,OAEvEpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,4CAA8C,CAC3D0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,CAEA,IAAIuL,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACvB9lB,QAAQC,IAAI6lB,EAAapZ,OAAO4L,QAChC,IAAIyN,EAAeD,EAAapZ,OAAO4L,OACvCtY,QAAQC,IAAI8lB,GAEZN,EAAU+qB,MAAQzqB,EAClBN,EAAUmrB,cAAgBvrB,EAE1BikD,GACF,EAEA,IAAItjD,EAAOpB,EAAcqB,QAAQT,MAAM,GACnCQ,GAAQA,EAAK9Z,KAAO,QACtByZ,EAAOO,cAAcF,GACZA,GAAQA,EAAK9Z,KAAO,SAC7ByO,IAAMxR,MAAMhC,EAAE,qDAAsD,CAClE0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,IAEdkvD,GACF,EACAjiE,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACuhE,GAAsB,CACrB7vD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRyK,cAAeA,EACfC,eAAgBA,EAChBC,sBAAuBA,EACvBrX,UAAWA,GACX,KAKZ,KC/JO,MAAM87D,GAAwDvoE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;EA2B5D4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;EAoB7BwoE,GAAuDxoE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;EA4B3DyoE,GAAiDzoE,GAAI;;;;;;;;EAWrD0oE,GAAoD1oE,GAAI;;;;;;;;EAWxD2oE,GAAsD3oE,GAAI;;;;;;EChDxDiG,qBAAkB4C,aApCjC,SAAqD3C,GAA6B,IAA5B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,KAAE6F,GAAKtJ,EAC7E,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,UACtB6E,GAAgD/vD,YACrD8vD,IAEInY,EAAa,CACjB1B,cAAegV,GAGjB,OACEx9D,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,mEACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CAAImJ,EAAKusC,8BAA8BvvC,KAAK,MAAIgD,EAAKk3D,mBAAmB,QACxF7oD,WAAY1X,EAAE,+DACd+Y,eAAgB0pD,EAChB7qD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAO8uD,GAAuD/2D,UAAWg/C,MAG/E,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCwFevG,qBAAkB4C,aApHjC,SAAgD3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClE,MAAMyyB,EAAc7uB,qBAAWvC,GAE/BvI,QAAQC,IAAI05B,GAEZ,MAAMmrC,EAAUp6D,EAAMmK,OAAOkwD,SACvBpjB,EAAa,+BAEb/zC,EAAoBtG,cAACgV,GAAS,CAClCH,OAAS,yBAAwB2oD,qCACjCt9D,UAAU,UAGN,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS2+D,GAAuD,CAC1G/2D,UAAW,CACTs9C,cAAegV,KAInB,GAAI57D,EAAS,OACX5B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAIpC,GAAIa,EAAO,OACT7B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,eAKhBx8B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAEZ,MAAMygE,EAA0CzgE,EAAKygE,wCAC/Ch0D,EAAWzM,EAAKygE,wCAAwCh0D,SAG9D,OAAKg0D,EAAwCx5D,MAAM3J,OAiCjDY,cAACu+D,GAAyB,CACxBlkB,WAAYA,EACZ9rC,SAAUA,EACVG,WA5BeA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAOmyD,EAAwCh0D,SAAS8B,WAE1DC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB+xD,wCAAwCx5D,MACnEwF,EAAWiC,EAAgB+xD,wCAAwCh0D,SAEzE,OAAOkC,EAASrR,OACZ,CAGEmjE,wCAAyC,CACvC7xD,WAAYH,EAAegyD,wCAAwC7xD,WACnE3H,MAAO,IAAKwH,EAAegyD,wCAAwCx5D,SAAU0H,GAC7ElC,aAGJgC,CAAc,GAEpB,EAQAjK,kBAAmBA,EAAkBvG,SAErCO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,gCACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mDACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNwiE,EAAwCx5D,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1DjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAEPmJ,EAAKusC,8BAA8BvvC,OAEtC5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKk3D,mBAAmB,QAE3B9/D,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,yBAAwBo7D,uCAA6Ct0D,EAAK0M,KAAK7V,SACxFC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAGPG,cAACwiE,GAA4C,CAACt5D,KAAMA,SAfxCoD,eAiBJ,WAjEtBtM,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gEAqEd,KCrIO,MAAM4iE,GAAoDvxD,OAAaC,MAAM,CAClFskC,8BAA+BvkC,OAC5BG,SAASxR,YAAE,uBACdugE,mBAAoBlvD,OACjBG,SAASxR,YAAE,yBCqEDF,qBAAkB4C,aA7DjC,SAAmD3C,GAYlD,IAZoD,EACnDC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACN1M,EAAS,UACTgX,EAAS,gBACTC,EAAe,cACfC,GACDzd,EAEC,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,gCACLhG,UAAYyR,EAAO8jC,8BAAiC,0BAA4B,eAChFxjC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUg4B,+BAA+BpsC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC3DhM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,gCAAgCiM,UAAU,OAAOjS,UAAU,0BAGlFF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iDAAiDE,SAAA,CACpEC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,qBACLhG,UAAYyR,EAAOyuD,mBAAsB,0BAA4B,eACrEnuD,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,qBAAqBiM,UAAU,OAAOjS,UAAU,+BAK3EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAOmD,KAAK,SAAQjI,SAC7BF,EAAE,2BAMnB,KC0CeF,qBAAkB4C,aA7FjC,SAAkD3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACtE,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,kCACrCnjB,EAAa,aACbrrC,EAAYnP,EAAE,qDAGd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KACnCioD,GAA6BhuD,YAAY4vD,IAEhD,OAAIvgE,EACF5B,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACE,QAAQ,EAAMD,QAAQ,QAKhCc,EACF7B,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,eAMdl1B,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfmc,QAAS,GACT+gD,mBAAoB,GAEtBztD,iBAAkB8vD,GAClB7vD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ0tD,EAA0B,CAAEr1D,UAAW,CACrC6H,MAAO,CACLy1C,cAAegV,EACf/nB,8BAA+B5iC,EAAO4iC,8BACtC2qB,mBAAoBvtD,EAAOutD,qBAE5BltD,eAAgB,CACf,CAACC,MAAO8uD,GAAuD/2D,UAAW,CAACs9C,cAAegV,OAE7FpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,kEAAoE,CACjF0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACwgE,GAA0B,CACzB9uD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRsK,UAAWrb,EACXsb,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,KAKZ,KCDexG,qBAAkB4C,aA9FjC,SAA2C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC/D,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBiF,EAA2Ct/D,EAAMmK,OAAOqI,GACxDzP,EAAa,yBAAwBq3D,kCACrCnjB,EAAa,+BACbrrC,EAAYnP,EAAE,sDAEb8iE,GAAgDpwD,YAAY6vD,KAC7D,QAAExgE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4+D,GAAsD,CAC9Fh3D,UAAW,CACT0K,GAAI8sD,KAGR,GAAI9gE,EAAS,OACX5B,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACTvB,eAACy9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM0tC,EAAyC9gE,EAAK8gE,uCAGpD,OACE5iE,cAAC+9D,GAAqB,CACpB/uD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbgjC,8BAA+BmtB,EAAuCntB,8BAA8B7/B,GACpGwqD,mBAAoBwC,EAAuCxC,oBAE7DztD,iBAAkB8vD,GAClB7vD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ8vD,EAA6C,CAAEz3D,UAAW,CACxD6H,MAAO,CACL6C,GAAI8sD,EACJjtB,8BAA+B5iC,EAAO4iC,8BACtC2qB,mBAAoBvtD,EAAOutD,qBAE5BltD,eAAgB,CACf,CAACC,MAAO8uD,GAAuD/2D,UAAW,CAACs9C,cAAegV,OAE7FpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mEAAqE,CAClF0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC6iE,GAA0C,CACzCnxD,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRsK,UAAWrb,EACXsb,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,KAKZ,KC5GO,MAAM28D,GAAmCppE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAyCvCqpE,GAAkCrpE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkEtCspE,GAA+BtpE,GAAI;;;;;;EASnC4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECtE3BiG,qBAAkB4C,aAnCjC,SAAkC3C,GAA2B,IAA1B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,GAAEuS,GAAGhW,EACxD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,UACrBwF,GAA8B1wD,YAAYywD,IAC5C9Y,EAAa,CACjB1B,cAAegV,GAGjB,OACEx9D,cAAA,UAAQE,UAAU,2CAChBkG,MAAOvG,EAAE,kBACT0P,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,8CACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,0CACd+Y,eAAgBqqD,EAChBxrD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAIA,IAGR1C,eAAgB,CACd,CAAEC,MAAO2vD,GAAkC53D,UAAWg/C,MAG1D,EACJnqD,SACAC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,aAG7B,KCjCevG,sBAJf,SAAqBC,GAAS,IAAR,EAAEC,GAAGD,EACzB,OAAOI,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,qBACnC,ICkIeF,qBAAkB4C,aAtHjC,SAA6B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC/C,MAAMyyB,EAAc7uB,qBAAWvC,GAC/BvI,QAAQC,IAAI05B,GAEZ,MAAMmrC,EAAUp6D,EAAMmK,OAAOkwD,SACvBpjB,EAAa,UAEb/zC,EAAoBtG,cAACgV,GAAS,CAACH,OAAS,yBAAwB2oD,gBAAuBt9D,UAAU,UAEjG,QAAE0B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASw/D,GAAkC,CACrF53D,UAAW,CACTs9C,cAAegV,KAInB,GAAI57D,EAAS,OACX5B,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACrFF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACi+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SAAA,CACtFC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAMguC,EAAuBphE,EAAKohE,qBAC5B30D,EAAWzM,EAAKohE,qBAAqB30D,SAG3C,OAAK20D,EAAqBn6D,MAAM3J,OA+B9BY,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY9rC,SAAUA,EAAUG,WAzBtDA,KACjBoB,EAAU,CACR5E,UAAW,CACTkF,MAAO8yD,EAAqB30D,SAAS8B,WAEvCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0yD,qBAAqBn6D,MAChDwF,EAAWiC,EAAgB0yD,qBAAqB30D,SAEtD,OAAOkC,EAASrR,OACZ,CAGE8jE,qBAAsB,CACpBxyD,WAAYH,EAAe2yD,qBAAqBxyD,WAChD3H,MAAO,IAAKwH,EAAe2yD,qBAAqBn6D,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EAI6FjK,kBAAmBA,EAAkBvG,SAClIO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRmjE,EAAqBn6D,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACvCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CAORO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKhD,KAAK,IAAClG,cAAA,SACZA,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAASlD,EAAKV,cAAgBtI,UAAU,kBAE3FI,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAK+rB,aAAa,IAACj1B,cAAA,SAClBkJ,EAAKi6D,UAAanjE,cAACojE,GAAY,IAAM,MAEzCpjE,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAK+jB,kBAE5BjtB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKoQ,iBAAoBpQ,EAAKoQ,iBAAiBpT,KAAO,KAE1DlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKiN,kBAAqBjN,EAAKiN,kBAAkBjQ,KAAO,KAE5D5F,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,yBAAwBo7D,kBAAwBt0D,EAAK0M,KAAK7V,SACnEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SACtBF,EAAE,oBAILqJ,EAAKm6D,UAAarjE,cAACsjE,GAAyB,CAAC1tD,GAAI1M,EAAK0M,KAAS,QAhCrDtJ,eAkCJ,WA9EpBtM,cAACu+D,GAAyB,CAAClkB,WAAYA,EAAY/zC,kBAAmBA,EAAkBvG,SACtFC,cAAA,KAAAD,SAAIF,EAAE,yCAmFZ,KCvIO,MAAM0jE,GAA+BryD,OAAaC,MAAM,CAC7D8b,cAAe/b,OACfhL,KAAMgL,OACDK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBAChB2I,YAAa0I,OACbsT,MAAOtT,OACP4L,eAAgB5L,OAChBoI,iBAAkBpI,OAClBiF,kBAAmBjF,SCgBNvR,qBAAkB4C,aAdjC,SAAgC3C,GAAgB,IAAf,EAAEC,EAAC,MAAEuD,GAAOxD,EAC3C,MACMuG,EAAa,yBADH/C,EAAMmK,OAAOkwD,mBAG7B,OACEz9D,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBO,eAACoE,IAAM,CAACG,MAAM,yBAAwB9E,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAAkB,IAAErG,EAAE,oBAIrD,KCkIeF,qBAAkB4C,aAxIjC,SAAgC3C,GAY/B,IAZiC,EAChCC,EAAC,QACDwD,EAAO,MACPD,EAAK,aACLsO,EAAY,OACZC,EAAM,OACNkB,EAAM,UACNsK,EAAS,UACThX,EAAS,gBACTiX,EAAe,cACfC,EAAa,UACbmlB,EAAU,UAAU5iC,EAGpB,OACEU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOoa,gBAClBjtB,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uCAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,eAInDnS,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,4BAI3DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CAClCC,cAACgS,KAAK,CAAC3N,KAAK,OACR6B,KAAK,QACLhG,UAAYyR,EAAO6S,MAAS,0BAA4B,eACxDvS,aAAa,QACjBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,iBACLhG,UAAYyR,EAAOmL,eAAkB,0BAA4B,eACjE7K,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,yCACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUsH,gBAAgB1b,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC5C1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAK2T,WAAW,KAAG3T,EAAKwb,SAAS,MAArDpY,eAA+D,OAGhGtM,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,6BAIrEF,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACTO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,4BAIhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,mBACLhG,UAAYyR,EAAO2H,iBAAoB,0BAA4B,eACnErH,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUM,kBAAkB1U,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CjM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOwE,kBAAqB,0BAA4B,eACpElE,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAUzH,mBAAmB3M,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC/CnM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKhD,KAAK,KAAGgD,EAAKyM,KAAK,MAA9BrJ,eAAwC,OAGzEtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,gCAK1EI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAAC0E,IAAM,CAACG,MAAM,OAAO0K,QAASA,IAAMlM,EAAQnB,KAAKiE,GAAY6B,KAAK,SAAQjI,SACrEF,EAAE,yBAKjB,KCzIA,MAAM2jE,GAA4B9pE,GAAI;;;;;;;;EAkHvBiG,qBAAkB4C,aAvGjC,SAA+B3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACnD,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,aACrCnjB,EAAa,UACbrrC,EAAYnP,EAAE,gCAEb++D,GAA0BrsD,YAAYixD,GAA2B,CACtE10C,YAAaA,IAAMzrB,EAAQnB,KAAKiE,MAE5B,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,IAEpCumD,EAAiB7+D,cAACyjE,GAAuB,IAE/C,GAAI7hE,EAAS,OACX5B,cAAC+9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAACy9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM/X,EAAYrb,EAElB,OACE9B,cAAC+9D,GAAqB,CACpBc,eAAgBA,EAChB7vD,UAAWA,EACXqrC,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACf/mB,KAAM,GACNsC,YAAa,IAEfmK,iBAAkB4wD,GAClB3wD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ+rD,EAAuB,CAAE1zD,UAAW,CAClC6H,MAAO,CACLy1C,cAAegV,EACfvwC,cAAepa,EAAOoa,cACtB/mB,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBxD,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,oBAE3BjD,eAAgB,CACf,CAACC,MAAO2vD,GAAkC53D,UAAW,CACnDs9C,cAAegV,OAGpBpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,6CAA+C,CAC5D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC0jE,GAAuB,CACtBhyD,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRsK,UAAWA,EACXhX,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KChGe7iC,sBA1Bf,SAAgCC,GAAmC,IAAlC,EAAEC,EAAC,OAAEkB,EAAM,QAAEy8D,EAAO,SAAEmG,GAAS/jE,EAC9D,OACEI,cAACupD,GAAQ,CACPh2C,SAAS,MACT81C,KAAM,CACF,CACEnjD,KAAM,UACNE,MAAOvG,EAAE,6CACTuN,KAAO,yBAAwBowD,kBAAwBmG,KAEzD,CACEz9D,KAAM,aACNE,MAAOvG,EAAE,gDACTuN,KAAO,yBAAwBowD,kBAAwBmG,gBAEzD,CACEz9D,KAAM,YACNE,MAAOvG,EAAE,+CACTuN,KAAO,yBAAwBowD,kBAAwBmG,gBAG7D5iE,OAAQA,GAGd,IC+DepB,qBAAkB4C,aAzEjC,SAAoC3C,GAAoF,IAAnF,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEmmD,EAAS,SAAEzpD,EAAQ,kBAAEuG,EAAkB,GAAE,cAAEs9D,EAAc,IAAGhkE,EACnH,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzBykD,EAAUp6D,EAAMmK,OAAOkwD,SACvBkG,EAAWvgE,EAAMmK,OAAOqI,GACxBzP,EAAa,yBAAwBq3D,aACrCxuD,EAAYnP,EAAE,iCAGd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,MAGX57D,QAASiiE,EAAehiE,MAAOiiE,EAAahiE,KAAMiiE,GAAezgE,YAASy/D,GAAiC,CACjH73D,UAAW,CACT0K,GAAI+tD,KAIR,GAAI/hE,GAAWiiE,EACb,OACE7jE,cAAC29D,GAAyB,CAACr3D,kBAAmBA,EAAmBH,UAAWA,EAAUpG,SACpFO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACgkE,GAAuB,CAACjjE,OAAQyoD,EAAWgU,QAASA,EAAUmG,SAAUA,IACzE3jE,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACc,SAAS,EAAMb,QAAQ,WAOzC,GAAIc,GAASiiE,EACX,OACE9jE,cAAC29D,GAAyB,CAACr3D,kBAAmBA,EAAmBH,UAAWA,EAAUpG,SACpFO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBC,cAACgkE,GAAuB,CAACjjE,OAAQyoD,EAAWgU,QAASA,EAASmG,SAAUA,IACxE3jE,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,wCAOb,MAAMqb,EAAQpZ,EAAK0mD,cACbyb,EAASF,EAAWxb,oBACpBnpC,EAAalE,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAc,GAC7E6kD,EAAgB1iD,EACtB5a,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBmb,EAAMhV,KAAO,IAAMkZ,KACd,GAEJ8kD,EAAsBD,EAC5B3jE,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAAC,KACxBkkE,EAAO/9D,QACF,GAEV,OACE5F,eAACq9D,GAAyB,CAACr3D,kBAAmBA,EAAmB+zC,WApDhD,UAoDwEl0C,UAAWA,EAAUpG,SAAA,CAC3G6jE,EACDtjE,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CAAEiP,EAAU,IAAE4uD,EAAa,IAAEsG,OAE1ClkE,cAACgkE,GAAuB,CAACjjE,OAAQyoD,EAAWgU,QAASA,EAASmG,SAAUA,IACvE5jE,OAIT,KCxEA,MAAMokE,GAA+BzqE,GAAI;;;;;;;;EA8I1BiG,qBAAkB4C,aAnIjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACpD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB4nD,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,aACrChU,EAAY,UACZnP,EAAa,UACbwkB,EAAiB7+D,cAACyjE,GAAuB,KAEzC,QAAE7hE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASy/D,GAAiC,CACzE73D,UAAW,CACT0K,GAAIA,MAID2pD,GAA6BhtD,YAAY4xD,IAEhD,GAAIviE,EAAS,OACX5B,cAACokE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC8jE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZymD,EAAsBzmD,EAAKymD,oBAGjC,IAAI8b,EAAwB,GACxB9b,EAAoBzrC,iBACtBunD,EAAwB9b,EAAoBzrC,eAAelH,IAG7D,IAAI0uD,EAA0B,GAC1B/b,EAAoBjvC,mBACtBgrD,EAA0B/b,EAAoBjvC,iBAAiB1D,IAGjE,IAAI2uD,EAA2B,GAM/B,OALIhc,EAAoBpyC,oBACtBouD,EAA2Bhc,EAAoBpyC,kBAAkBP,IAKjE5V,cAACokE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,cAAes7B,EAAoBt7B,cACnC/mB,KAAMqiD,EAAoBriD,KAC1BsC,YAAa+/C,EAAoB//C,YACjCgc,MAAO+jC,EAAoB/jC,MAC3B1H,eAAgBunD,EAChB/qD,iBAAkBgrD,EAClBnuD,kBAAmBouD,GAErB5xD,iBAAkB4wD,GAClB3wD,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAClCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ0sD,EAA0B,CAAEr0D,UAAW,CACrC6H,MAAO,CACL6C,GAAIA,EACJqX,cAAepa,EAAOoa,cACtB/mB,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBgc,MAAO3R,EAAO2R,MACd1H,eAAgBjK,EAAOiK,eACvBxD,iBAAkBzG,EAAOyG,iBACzBnD,kBAAmBtD,EAAOsD,oBAE3BjD,eAAgB,CACf,CAACC,MAAO2vD,GAAkC53D,UAAW,CACnDs9C,cAAegV,OAGpBpqD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,8CAAgD,CAC7D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC0jE,GAAuB,CACtBhyD,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACfF,UAAWA,EACXxL,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EACXq8B,UAAU,UACV,KAKZ,KC3JO,MAAMgiC,GAAiD9qE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;ECArD+qE,GAA4CvzD,OAAaC,MAAM,CAC1EuzD,SAAUxzD,SCmCGvR,qBAAkB4C,aA3BW3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,SAAEgP,EAAQ,aAAEV,EAAY,cAAEoB,EAAa,WAAE2U,EAAU,OAAE9V,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAezd,EAAA,OACnKI,cAAC4R,KAAM,CAAA7R,SACLC,cAACc,IAAM,CAACC,OAAQ2Q,EAAc1Q,OAAQ0Q,EAAa3R,SACjDO,eAACuR,IAAKC,MAAK,CAAC5R,UAAU,OAAMH,SAAA,CAC1BO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,WACL0T,SAAUA,KACRyD,EAAc,YAAaxK,EAAO6xD,UAClCtnD,EAAgB,YAAY,GAC5BtK,GAAc,GACdwO,YAAW,KAAOmG,GAAY,GAAG,IAAI,EAEvCmE,QAAS/Y,EAAO6xD,SAChBtyD,SAAUA,IAEZpS,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,yBAEjDG,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,cAGrC,KCdX,MAAMwyD,GAA6CjrE,GAAI;;;;;;;;EAsIxCiG,qBAAkB4C,aA3HjC,SAA0C3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EAC9D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAElBzP,EAAa,yBADH/C,EAAMmK,OAAOkwD,oBAEvBjU,EAAY,aACZnP,EAAa,UACbwkB,EAAiB7+D,cAACyjE,GAAuB,KAEzC,QAAE7hE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkhE,GAAgD,CACxFt5D,UAAW,CACTq9C,oBAAqB3yC,MAIlBgvD,GAAyCryD,YAAYoyD,IAE5D,GAAI/iE,EAAS,OACX5B,cAACokE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC8jE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAId,MAAM2vC,EAAgC/iE,EAAKgjE,iCAE3C,OACE9kE,cAACokE,GAA2B,CAC1BvF,eAAgBA,EAChBrV,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAErBO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAC1Q,UAAU,aAAYH,SAAEF,EAAE,2BAG/CG,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR8kE,EAA8B97D,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAChD1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK40C,aAAa53C,OAErBlG,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC/BC,cAACwS,KAAM,CACLC,cAAe,CACbiyD,SAAUx7D,EAAKw7D,UAEjB/xD,iBAAkB8xD,GAClB7xD,SAAUA,CAACC,EAAMtG,KAAyB,IAAvB,cAAEuG,GAAevG,EAClC7T,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAEZ+xD,EAAsC,CAAE15D,UAAW,CACjD6H,MAAO,CACH6C,GAAI1M,EAAK0M,GACT8uD,SAAU7xD,EAAO6xD,WAGrBxxD,eAAgB,CACZ,CAACC,MAAOqxD,GAAgDt5D,UAAW,CACjEq9C,oBAAqB3yC,OAI1BxC,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EACX/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,yDAA2D,CACxE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAEDioB,IAAA,IAAC,aAAGtW,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,WAAEoK,EAAU,cAAE3U,GAAekV,EAAA,OAC5FhoB,cAAC+kE,GAAmC,CAClCrzD,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACRT,SAAUlJ,EAAKq/C,oBAAoByc,UACnClyD,cAAeA,EACf2U,WAAYA,GAIwB,QAtD9Bnb,eA0DJ,UAMxB,KCgCe3M,qBAAkB4C,aAlKjC,SAAyC3C,GAAmC,IAAlC,EAAEC,EAAC,QAAEwD,EAAO,SAAEmY,EAAQ,MAAEpY,GAAOxD,EACvE,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClB4nD,EAAUp6D,EAAMmK,OAAOkwD,SACvBt3D,EAAa,yBAAwBq3D,aACrChU,EAAY,YACZnP,EAAa,WAEb,QAAEz4C,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS2kD,GAA0C,CAClF/8C,UAAW,CACTq9C,oBAAqB3yC,MAIlBwyC,GAAoC71C,YAAY41C,IASvD,GALA7pD,aAAaC,QAAQC,EAAKzD,6BAA8BygB,EAASmI,UACjErlB,aAAaC,QAAQC,EAAK1C,iCAAkC0f,EAASmI,UAIjE/hB,EAAS,OACX5B,cAACokE,GAA2B,CAC1B5a,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAEpBF,EAAE,+BAGP,GAAIgC,EAAO,OACTvB,eAAC8jE,GAA2B,CAC1B5a,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EAAUpG,SAAA,CAErBC,cAAA,KAAAD,SAAIF,EAAE,8BACNG,cAAA,KAAAD,SAAI8B,EAAMqzB,aAIdx8B,QAAQC,IAAImJ,GAEZ,MAAMwE,EAAoBtG,cAACkB,IAAMiH,SAAQ,CAAApI,SACvCC,cAACgV,GAAS,CAACH,OAAS,yBAAwB2oD,kBAAwB5nD,qBAClE1V,UAAU,WAKd,OACEF,cAACokE,GAA2B,CAC1B5a,UAAWA,EACXnP,WAAYA,EACZl0C,UAAWA,EACXG,kBAAmBA,EAAkBvG,SAErCO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4CACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKwmD,4BAA4Bv/C,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACnD1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACyE,IAAI,CAACrC,GAAK,uBAAsB8G,EAAKma,QAAQzN,aAAa7V,SACxDmJ,EAAKma,QAAQC,WACT,IAACtjB,cAAA,SACNkJ,EAAKu/C,UAAazoD,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uBAAgC,MAEhFS,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACNmJ,EAAK69C,aAAah+C,MAAM3J,OAASkB,eAACmE,IAAI,CAACrC,GAAK,0BAAyB8G,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAetO,KAAK7V,SAAA,CACtHmJ,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAejB,cAAe,IAACjjB,cAAA,YACxD,GAEZM,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CACzBmJ,EAAK69C,aAAah+C,MAAM3J,OAAS8J,EAAK69C,aAAah+C,MAAM,GAAGG,KAAKgb,eAAehL,QAAQkK,MAAM,IAAM,GAAG,IAACpjB,cAAA,eAG9GM,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACgtB,GAAY,CAAC7qB,MAAO+G,EAAKw/C,eAAgB,IAAC1oD,cAAA,YAG7CA,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKu/C,UACLzoD,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACN0K,QAASA,IACP64C,EAAiC,CAAEl9C,UAAW,CAC5C6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6yC,WAAW,IAEZv1C,eAAgB,CACf,CAACC,MAAO80C,GAA0C/8C,UAAW,CAC3Dq9C,oBAAqB3yC,OAG1BxC,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAG/D9B,SAEAF,EAAE,sBAGLG,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACN0K,QAASA,IACP64C,EAAiC,CAAEl9C,UAAW,CAC5C6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6yC,WAAW,IAEZv1C,eAAgB,CACf,CAACC,MAAO80C,GAA0C/8C,UAAW,CAC3Dq9C,oBAAqB3yC,OAG1BxC,MAAK3G,IAAe,IAAd,KAAE3K,GAAM2K,EACX/T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE7D9B,SAEAF,EAAE,wBAhFGyM,eAoFJ,UAMxB,KCrLO,SAAS40C,GAA0ByiB,EAAU5sB,GAClD,IAAInvC,EAAY,CACdrD,gBAAYlF,EACZmF,cAAUnF,EACV03C,gBAAY13C,EACZskE,SAAUA,GAOZ,OAJA/7D,EAAUmvC,WAAaA,EAEvBr+C,QAAQC,IAAIiP,GAELA,CACT,CC+NejI,qBAAkB4C,aAjNjC,SAA+C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,GAC9Dm3C,EAAYyd,GAAiBr/C,mBAAS,IAC3C,MACM4D,EADcvV,qBAAWvC,GACA8X,WAEzB4qD,EAAWvgE,EAAMmK,OAAOqI,GAExBzP,EAAa,yBADH/C,EAAMmK,OAAOkwD,yBACsCkG,cAC7DtpB,EAAa,UACbrrC,EAAYnP,EAAE,mDAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,GAAcxM,YACnD2zC,GAAoB,CAClB/rC,UAAWg2C,GAA0ByiB,EAAU5sB,MAG3CkuB,GAAkC1yD,YAAY21C,IAEhD5yC,EAAgBtV,cAAC8G,IAAKyO,QAAO,CAAAxV,SACjCC,cAAC0gB,GAAW,CACVI,gBAAiBtiB,EAAKrB,yCACtBskB,YAAY,YACZ7H,SAAWzX,IACTzJ,QAAQC,IAAIwJ,GACZ7D,aAAaC,QAAQC,EAAKrB,yCAA0CgF,GACpEqyD,EAAcryD,GACdzJ,QAAQC,IAAI,qBACZyc,EAAQ,CAAElK,UAAWg2C,GAA0ByiB,EAAUxhE,IAAQ,MAMvE,GAAIP,EAAS,OACX5B,cAAC29D,GAAyB,CACxBtjB,WAAYA,EACZrrC,UAAWA,EACX7I,UAAWA,EAAUpG,SAErBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKpC,GAAIa,EAAO,OACT7B,cAAC29D,GAAyB,CACxBtjB,WAAYA,EACZrrC,UAAWA,EACX7I,UAAWA,EAAUpG,SAErBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,gEAKZnH,QAAQC,IAAImJ,GACZ,MAAMo6B,EAAWp6B,EAAKo6B,SAChB+nC,EAASniE,EAAKymD,oBACdrtC,EAAQ+oD,EAAOzb,cACfF,EAA8BxmD,EAAKwmD,4BACnClpC,EAAYhU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAE3C4+C,EAAgB,GAAEsM,EAAOzb,cAActiD,QAAQkZ,OAAe6kD,EAAO/9D,OAC3E,IAAIg/D,EAAwB,GAO5B,OANA5c,EAA4Bv/C,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC7Ck5D,EAAsBhjE,KAAKgH,EAAKma,QAAQzN,GAAG,IAE7Cld,QAAQC,IAAIusE,GAGPnuB,EAoBA7a,EAASnzB,MAAM3J,OAmBlBY,cAAC29D,GAAyB,CACxBtjB,WAAYA,EACZrrC,UAAWA,EACX2oD,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAACyN,GAAW,CAACuB,UAAWA,EACXT,SAAU2tB,EAAS3tB,SACnBa,aAAa,EACbH,cAAeqG,EACf5G,WAAYA,KACToB,EAAU,CACV5E,UAAW,CACTkF,MAAO8rB,EAAS3tB,SAAS8B,WAE3BC,YAAaA,CAACC,EAAchE,KAA2B,IAAzB,gBAAEiE,GAAiBjE,EAC/C,MAAMkE,EAAWD,EAAgB0rB,SAASnzB,MACpCwF,EAAWiC,EAAgB0rB,SAAS3tB,SAE1C,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJo6B,SAAU,CACRxrB,WAAYH,EAAe2rB,SAASxrB,WACpC3H,MAAO,IAAKwH,EAAe2rB,SAASnzB,SAAU0H,GAC9ClC,cAINgC,CAAc,GAEpB,EACFxQ,SAEZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRm8B,EAASnzB,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC3BnM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoa,UADQhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+f,OADQ3c,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC7BmlE,EAAsB3N,SAASruD,EAAK0M,IACpC5V,cAACkI,IAAK,CAACrD,MAAM,UAAU3E,UAAU,aAAYH,SAAEF,EAAE,qEACjDS,eAACoE,IAAM,CAACygE,GAAC,EACPtgE,MAAM,UACNF,SAAO,EACP4K,QAASA,IACP01D,EAA8B,CAAE/5D,UAAW,CACzC6H,MAAO,CACLsQ,QAASna,EAAK0M,GACd2yC,oBAAqBob,IAEtBzwD,eAAgB,CACf,CAACC,MAAO80C,GAA0C/8C,UAAW,CAC3Dq9C,oBAAqBob,OAG1BvwD,MAAK4U,IAAe,IAAd,KAAElmB,GAAMkmB,EACXtvB,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAAU,GAAEzT,EAAE,0DAA0DqJ,EAAKoa,WAAa,CAC5F/P,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE/D9B,SAAA,CAEAF,EAAE,gBAAgB,IAACG,cAACiG,IAAI,CAACC,KAAK,sBA/BEoG,kBAPzBA,eA0CJ,aA1GtBtM,cAAC29D,GAAyB,CACxBtjB,WAAYA,EACZsd,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAACyN,GAAW,CAACuB,UAAWA,EACXI,aAAa,EACbH,cAAeqG,EAAcvV,SAExCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,YAAWtE,SAAEF,EAAE,+DA9BjCG,cAAC29D,GAAyB,CACxBtjB,WAAYA,EACZsd,aAAcA,EACdxxD,UAAWA,EAAUpG,SAErBC,cAACyN,GAAW,CAACuB,UAAWA,EACXI,aAAa,EACbH,cAAeqG,EAAcvV,SAExCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,UAAUhC,KAAK,OAAMtC,SAC9BF,EAAE,uFA0Hf,KCnOO,SAAS0H,KACd,IAAIC,EACA2rC,EACAxrC,EAEAC,EAAY,CACdC,SAAUvJ,aAAayE,QAAQvE,EAAKpB,2BACpC0K,UAAWxJ,aAAayE,QAAQvE,EAAKnB,6BAwBvC,OArBAmK,EAAUlJ,aAAayE,QAAQvE,EAAKlB,0BAChCkK,IACFI,EAAUJ,QAAUA,GAGtB2rC,EAAoB70C,aAAayE,QAAQvE,EAAKjB,8BAE5CqK,EAAUurC,kBADRA,GAG4B,GAGhCxrC,EAAuBrJ,aAAayE,QAAQvE,EAAKhB,iCAE/CoK,EAAUD,qBADRA,GAG+B,GAGnCjP,QAAQC,IAAIiP,GAELA,CACT,CA4BO,SAASw9D,GAAuB/8D,GACrC,IAAIxD,EAEJ,OAAQwD,GACN,IAAK,MACHxD,EAAQ,UACR,MACF,IAAK,YACHA,EAAQ,UACR,MACF,IAAK,OACHA,EAAQ,SACR,MACF,QACEA,EAAQ,UAGZ,OAAO7E,cAACsI,GAAU,CAACzD,MAAOA,GAC5B,CAGO,SAAS0D,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,GAClE,OAAID,EACKnI,eAAA,QAAAP,SAAA,CAAOF,EAAE,mBAAmB,KAAG6I,EAAY,OAGrC,aAAXL,EACKG,OADT,CAGF,CCnFA,SAASyZ,GAAgB9f,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GACxC,OAAI6f,GAGK,EAEX,CAGA,SAASrH,GAA6BC,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KAEV,CAEA,MAAMypD,GAAc,kCA0ELrxD,qBAAkB4C,aAvEjC,SAA6B3C,GAAiC,IAAhC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,GACpD4b,EAAUy1C,GAAe97C,mBAAS8M,GAAgBzjB,EAAKhB,mCACvD6nE,EAAOC,GAAYnwD,mBAAS8M,GAAgBzjB,EAAKjB,+BAEtD,OACE+C,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAC0E,IAAM,CACLxE,UAAU,cACV2E,MAAM,OACND,KAAK,KACL2K,QAASA,KACPjR,aAAaC,QAAQC,EAAKhB,gCAAiC,IAC3Dc,aAAaC,QAAQC,EAAKjB,6BAA8B,IACxD0zD,EAAY,IACZqU,EAAS,IACTlwD,EAAQ7N,KAA2B,EACnCxH,SAEDF,EAAE,mBAELG,cAAA,MAAIE,UAAU,YAAWH,SAAEF,EAAE,yBAGjCS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SAEPO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAOqZ,EACP5B,SAAYsB,IACV+1C,EAAY/1C,EAAM9V,OAAOjD,OACzBwY,GACEnc,EAAKhB,gCACL0d,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,yCAATyM,gBACrBxK,EAAK6qC,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC7ChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,SAI7DtM,cAACI,IAAKoF,IAAG,CAAAzF,SAEPO,eAAA,UACEJ,UAAW8wD,GACX7uD,MAAOkjE,EACPzrD,SAAYsB,IACVoqD,EAASpqD,EAAM9V,OAAOjD,OACtBwY,GACEnc,EAAKjB,6BACL2d,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sCAATyM,gBACrBxK,EAAKgxC,mBAAmB/pC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC1CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,cAOrE,KCvEKhO,aAAayE,QAAQvE,EAAKpB,6BAC7B1E,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKpB,0BAA2BgO,MAASC,OAAO,eACrE/M,aAAaC,QAAQC,EAAKnB,2BAA4B+N,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,gBAwHxE1L,qBAAkB4C,aApHjC,SAA2B3C,GAA4C,IAA1C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,KAAE+B,EAAI,QAAEsT,GAASxV,EAElE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,yBAAyBE,SAC5EO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAA,QAAMoG,MAAOvG,EAAE,6CAA6CE,SAC1DC,cAAC0E,IAAM,CACLrC,KAAK,OACLkvD,QAAQ,OACRrxD,UAAU,OACV2E,MAC4D,aAAxDvG,aAAayE,QAAQvE,EAAKlB,2BAA+CgB,aAAayE,QAAQvE,EAAKlB,0BAC3F,YAAV,QAEFiS,QAASA,KACPjR,aAAaC,QAAQC,EAAKlB,yBAA0B,YACpD8X,EAAQ7N,KAA2B,MAIzCvH,cAAA,QAAMoG,MAAOvG,EAAE,8CAA8CE,SAC3DC,cAAC0E,IAAM,CACLrC,KAAK,QACLnC,UAAU,OACV2E,MAC2D,cAAxDvG,aAAayE,QAAQvE,EAAKlB,0BAC3B,QAAU,YAEZiS,QAASA,KACPjR,aAAaC,QAAQC,EAAKlB,yBAA0B,aACpD8X,EAAQ7N,KAA2B,MAIzCvH,cAACob,GAAY,CACXlb,UAAU,+CACVyZ,SAAU,IAAIzW,KAAK5E,aAAayE,QAAQvE,EAAKpB,4BAC7C0c,aAAa,EACbF,SAAWpN,IACT,IAAIglD,EAAepmD,IAAOoB,GACtBilD,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKpB,0BAA2Bo0D,EAAanmD,OAAO,eACzE/M,aAAaC,QAAQC,EAAKnB,2BAA4Bo0D,EAAcpmD,OAAO,eAE3E3S,QAAQC,IAAI4O,MAEZ6N,EAAQ7N,KAA2B,EAErCwS,gBAAiBla,EAAE,iCAErBS,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,sCAAqCH,SAAA,CAC1DC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIiiD,EAAepmD,IAAO9M,aAAayE,QAAQvE,EAAKpB,4BAA4Bs+B,SAAS,EAAG,QACxF+1B,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKpB,0BAA2Bo0D,EAAanmD,OAAO,eACzE/M,aAAaC,QAAQC,EAAKnB,2BAA4Bo0D,EAAcpmD,OAAO,eAE3E+J,EAAQ7N,KAA2B,IAEvCvH,cAAC0E,IAAM,CACLrC,KAAK,SACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIoiD,EAAkBvmD,MAClBwmD,EAAmBxmD,IAAOumD,GAAiBjoD,IAAI,EAAG,QAEtDpL,aAAaC,QAAQC,EAAKpB,0BAA2Bu0D,EAAgBtmD,OAAO,eAC5E/M,aAAaC,QAAQC,EAAKnB,2BAA4Bu0D,EAAiBvmD,OAAO,eAE9E+J,EAAQ7N,KAA2B,IAEvCvH,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIiiD,EAAepmD,IAAO9M,aAAayE,QAAQvE,EAAKpB,4BAA4BsM,IAAI,EAAG,QACnF+nD,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKpB,0BAA2Bo0D,EAAanmD,OAAO,eACzE/M,aAAaC,QAAQC,EAAKnB,2BAA4Bo0D,EAAcpmD,OAAO,eAE3E+J,EAAQ7N,KAA2B,OAGzCvH,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,gBAAe9J,SAC5CC,cAACyE,IAAI,CAACrC,GAAI,uBAAuBrC,SAC/BO,eAACoE,IAAM,CAACG,MAAM,yBAAwB9E,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAErG,EAAE,2BAMrDG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACb+B,EACA9B,cAACulE,GAAoB,CAACzjE,KAAMA,EAAMsT,QAASA,IAC3C,GACDrV,aAOf,KCpJO,MAAMuyC,GAAmB54C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiFvB64C,GAAkB74C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4DtB4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuC7B8rE,GAAe9rE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BnB+rE,GAAwB/rE,GAAI;;;;;;ECnLpC4E,aAAayE,QAAQvE,EAAKpB,6BAC7B1E,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKpB,0BAA2BgO,MAASC,OAAO,eACrE/M,aAAaC,QAAQC,EAAKnB,2BAA4B+N,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,gBAiMxE1L,qBAAkB4C,aA7LjC,SAAuB3C,GAAmB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACrC,MACMgL,EADcpH,qBAAWvC,GACA4J,kBAEzB,QAACjJ,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAW9R,YAASgvC,GAAkB,CACjEpnC,UAAW3D,KACX+D,YAAa,kBAERo6D,GAAuBnzD,YAAYkzD,IAE1C,GAAI7jE,EACF,OACE5B,cAAC2lE,GAAkB,CAAA5lE,SACjBC,cAAA,KAAAD,SAAIF,EAAE,iCAKZ,GAAIgC,EACF,OACE7B,cAAC2lE,GAAkB,CAAA5lE,SACjBC,cAAA,KAAAD,SAAIF,EAAE,gCAKZ,MAAMgzC,EAAS/wC,EAAK8jE,eAIpB,OAHAltE,QAAQC,IAAIk6C,GAGPA,EAAOzzC,OASVY,cAAC2lE,GAAkB,CAAC7jE,KAAMA,EAAMsT,QAASA,EAAQrV,SAC7C+B,EAAK8jE,eAAe75D,KAAIC,IAAA,IAAC,KAAEQ,EAAI,OAAEqmC,GAAQ7mC,EAAA,OACzChM,cAAA,OAAAD,SACEO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CACTC,cAAA,KAAAD,SAAIqL,IAAOoB,GAAMnB,OAAO,UAAY,IAAE,IACtCrL,cAAA,QAAME,UAAU,aAAYH,SACzBqL,IAAOoB,GAAMnB,OAAO,aAIxBwnC,EAAOzzC,OACRkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,IAChB5Q,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,MANFtE,kBASlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR8yC,EAAO9mC,KAAIQ,IAAA,IACV,eAAEG,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,QACNI,EAAO,YACPC,EAAW,YACXF,EAAW,QACX6a,EAAO,SACPg9B,EAAQ,yBACRzzC,EAAwB,kBACxBumC,EAAiB,UACjBtmC,EAAS,QACTC,GAASP,EAAA,OACXjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqlE,GAAuB/8D,KAE1B/H,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAEPqL,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAG,IAChC,aAAlB+B,EAAgC3M,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,kBAA2B,KAAM,IAACG,cAAA,SAC9FA,cAAA,SAAOE,UAAU,aAAYH,SAAEwI,GAAmB1I,EAAGwI,EAAQG,EAAaC,EAASC,QAErFpI,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAEP6M,EAAyBjF,qBAAqBzB,KAAK,IAAClG,cAAA,SACrDA,cAAA,SAAOE,UAAU,aAAYH,SAAE6M,EAAyB1G,UAE1DlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAEPozC,EAAkBjtC,OAErB5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAELsjB,EACCA,EAAQC,SACRtjB,cAAA,QAAME,UAAU,WAAUH,SAAEF,EAAE,iCACjC,IAACG,cAAA,SACFA,cAAA,SAAOE,UAAU,aAAYH,SACzBsgD,EAAYA,EAAS/8B,SAAW,QAGtCtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC6qB,IAAQ,CAEP3qB,UAAU,aACVmE,KAAK,SACLymB,QAAM,EACNjmB,MAAM,mBACNkmB,eAAgBlrB,EAAE,mBAClBoC,MAAO,CACLjC,cAACmN,GAAoB,CAAYvD,WAAW,OAAOC,SAAS,wBAAuB9J,SACjFC,cAACyE,IAAI,CAACrC,GAAI,+BAAiCsK,EAAiB,IAAMF,EAAKzM,SACrEC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,SAAQtC,SAEZF,EAAE,iBAHEyM,mBAHgBA,gBAU3BhM,eAAC6M,GAAoB,CAAYvD,WAAW,SAASC,SAAS,gBAAe9J,SAAA,CAC3EC,cAAC6qB,IAASonC,YAAW,GAAM3lD,gBAC3BtM,cAACyE,IAAI,CAACrC,GAAI,6BAA+BsK,EAAe3M,SACtDC,cAAC6qB,IAASzmB,KAAI,CAEZ6D,MAAOpI,EAAE,wCACTqyD,UAAU,YACV7vD,KAAK,SAAQtC,SAEVF,EAAE,iBALAyM,oBAJgBA,gBAa3BhM,eAAC6M,GAAoB,CAAYvD,WAAW,SAASC,SAAS,gBAAe9J,SAAA,CAC3EC,cAAC6qB,IAASonC,YAAW,GAAM3lD,gBAC3BtM,cAAA,QAAME,UAAU,WAAUH,SAC1BC,cAAC6qB,IAASzmB,KAAI,CAEZ6D,MAAOpI,EAAE,wCACTqyD,UAAU,SACV7vD,KAAK,UACLkN,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,sCACdyX,eAAgBhX,eAAA,KAAAP,SAAA,CACbqL,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAE,IAClDuoC,EAAkBjtC,KAAK,IAAE,IAAI,MAAI,IACjC0G,EAAyBjF,qBAAqBzB,KAAK,IAAE,IACrD0G,EAAyB1G,OALJoG,gBAOxBiL,WAAY1X,EAAE,2BACd+Y,eAAgB8sD,EAChBjuD,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAIlJ,IAELwG,eAAgB,CACjB,CAAEC,MAAOm/B,GAAkBpnC,UAAW3D,SAExC,EACFxH,SACHF,EAAE,mBA1BIyM,oBAJkBA,kBA9BxBA,oBAhCKA,eAmGJ,SA9HAtM,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,oCAV5ByM,eA8IJ,MAxJVtM,cAAC2lE,GAAkB,CAAA5lE,SACjBC,cAAA,KAAAD,SACGF,EAAE,iCA0JX,KChOO,MAAMkzC,GAAe7hC,OAAaC,MAAM,CAC3CxE,cAAeuE,OACZG,SAASxR,YAAE,uBACd+M,yBAA0BsE,OACvBG,SAASxR,YAAE,uBACdszC,kBAAmBjiC,OAChBG,SAASxR,YAAE,uBACduf,UAAWlO,OACRG,SAASxR,YAAE,uBACdgN,UAAWqE,OACRipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,uBACdiN,QAASoE,OACNipB,UAAUt6B,YAAE,sBACZwR,SAASxR,YAAE,yBCyJDF,qBAAkB4C,aAvJT3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,UAAE1Z,GAAWvG,EAAA,OAClIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kCAAkCE,SAAA,CACrDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,gBACLhG,UAAYyR,EAAOhF,cAAiB,0BAA4B,eAChEsF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,WAAUpC,SAAaF,EAAE,qCAATyM,gBAC9BtM,cAAA,UAAQmC,MAAM,SAAQpC,SAAaF,EAAE,mCAATyM,mBAE9BtM,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,OAAOjS,UAAU,wBAEpC,aAAzB2S,EAAOlG,cAAgC,GACxCrM,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sCAAsCE,SAAA,CACzDO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAO+vC,kBAAqB,0BAA4B,eACpEzvC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,oBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,sBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,qBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,qBAATyM,gBACvBtM,cAAA,UAAQmC,MAAM,IAAGpC,SAAaF,EAAE,mBAATyM,mBAEzBtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,wBAGtEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAO/E,yBAA4B,0BAA4B,eAC3EqF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAUsyB,0BAA0B1mC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACtD1L,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKvB,qBAAqBzB,KAAK,MAAIgD,EAAKhD,OAA/CoG,eAA6D,OAG9FtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOwhC,kBAAqB,0BAA4B,eACpElhC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU21B,mBAAmB/pC,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,6BAIxEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAiC,aAAzBc,EAAOlG,cAAgC9M,EAAE,gBAAkBA,EAAE,sBAAsBE,SAAA,CACrGC,cAACob,GAAY,CACXlb,UAAYyR,EAAOyN,UAAa,0BAA4B,eAC5DzF,SAAU9G,EAAOuM,UACjBxF,SAAWpN,IACT6Q,EAAc,YAAa7Q,GAC3B4Q,EAAgB,aAAa,EAAK,EAEpCvD,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAGlC,aAAzB2S,EAAOlG,cAAgC,GACxC3M,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,IACT6Q,EAAc,UAAW7Q,GACzB4Q,EAAgB,WAAW,EAAK,EAElCvD,OAAQA,IAAMuD,EAAgB,WAAW,GACzCrD,gBAAiBla,EAAE,0CAErBG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAKhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACxCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO9E,UAAa,0BAA4B,eAC5D8M,SAAU9G,EAAOhG,UACjB+M,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,GAC3Ck1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACtCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO7E,QAAW,0BAA4B,eAC1D6M,SAAU9G,EAAO/F,QACjB8M,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,GACzCk1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,gCAkBhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIJ,KCnIEF,qBAAkB4C,aAvBjC,SAA6B3C,GAAiB,IAAhB,EAACC,EAAC,SAAEE,GAASH,EAGzC,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,yBAAyBE,SAC5EC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UARN,yBAWVnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCgGeJ,qBAAkB4C,aA5GjC,SAAyB3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EACpC,MAAMoP,EAAYnP,EAAE,6BACdsG,EAAY,oBACZ,QAAEvE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASgV,KAClCutD,GAAwBtzD,YAAYizD,IAG5C,GAAI5jE,EAAS,OACX5B,cAAC8lE,GAAoB,CAAA/lE,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,qCAMd,GAAIgC,EAAO,OACT7B,cAAC8lE,GAAoB,CAAA/lE,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,oCAMd,MAAMsd,EAAYrb,EAElB,OACE9B,cAAC8lE,GAAoB,CAAA/lE,SACnBC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACbwa,eAAe,EACftgB,cAAe,SACf+0C,kBAAmB,EACnB90C,yBAA0B,GAC1BumC,kBAAmB,GACnB/zB,UAAW,IAAIlc,KACf2J,UAAW,IAAI3J,KACf4J,QAAS,IAAI5J,MAEfyP,iBAAkBogC,GAClBngC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAIIwM,EAJAqiC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOlG,gBACT+0C,EAAoB,GAIlBriC,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGrBwmD,EAAoB,CAAE36D,UAAW,CAC/B6H,MAAO,CACLpG,cAAekG,EAAOlG,cACtB+0C,kBAAmBA,EACnB90C,yBAA0BiG,EAAOjG,yBACjCumC,kBAAmBtgC,EAAOsgC,kBAC1B/zB,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTxS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,WAEpCoG,eAAgB,CACf,CAACC,MAAOm/B,GAAkBpnC,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,qCAAuC,CACpD0T,SAAUF,IAAMG,SAASC,eAE7BpQ,EAAQnB,KAAKiE,EAAU,IACtBuN,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAASpT,EAAA,OACrEzM,cAAC+lE,GAAiB,CAChB5oD,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACT1Z,UAAWA,GAEO,OAOpC,KC7HO,MAAMssC,GAAe/4C,GAAI;;;;;;;;ECOjBiG,sBAJOC,IAAA,IAAC,EAAEC,GAAGD,EAAA,OACxBI,cAACyG,GAAU,CAACN,UAAU,oBAAqB,IC+BhCxG,sBA1BOC,IAAA,IAAC,EAAEC,EAAC,WAAEw6C,EAAU,QAAE2rB,GAASpmE,EAAA,OAC/CU,eAACyF,IAAK+L,MAAK,CAACwoC,aAAa,EAAKv6C,SAAA,CAC5BC,cAAC+F,IAAKw0C,UAAS,CAEbr6C,UAAU,4BACVkC,GAAI,8BAAgC4jE,EACpC3jE,KAAK,SACLtB,OAAsB,SAAbs5C,EAAqBt6C,SAE7BF,EAAE,iBANEyM,gBAQPtM,cAACmN,GAAoB,CAACvD,WAAW,OACXC,SAAS,sBAAqB9J,SAClDC,cAAC+F,IAAKw0C,UAAS,CAEbr6C,UAAU,4BACVkC,GAAI,mCAAqC4jE,EACzC3jE,KAAK,QACLtB,OAAqB,cAAbs5C,EAAyBt6C,SAEhCF,EAAE,sBANEyM,oBASE,ICYA3M,qBAAkB4C,aAhCjC,SAA0B3C,GAAiH,IAAhH,EAACC,EAAC,MAAEuD,EAAK,SAAErD,EAAQ,SAAEsG,EAAS,GAAE,UAAE2I,EAAU,GAAE,YAAEmkD,GAAY,EAAI,eAAEtR,EAAe,GAAE,qBAAEhmB,EAAqB,IAAGj8B,EACtI,MAAMomE,EAAU5iE,EAAMmK,OAAO04D,SAE7B,OACEjmE,cAAC2K,GAAW,CAAA5K,SACVO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CACVJ,MAAOvG,EAAE,kBACTwG,SAAUA,EAAStG,SAEnBC,cAAA,OAAKE,UAAU,sBAAqBH,SACjC87B,MAGLv7B,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACXozD,EACDnzD,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACpBA,IAFaA,IAMpBC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAACkmE,GAAa,CAAC7rB,WAAYwH,EAAgBmkB,QAASA,aAMhE,KC+BermE,qBAAkB4C,aA5DjC,SAAsB3C,GAAoG,IAAnG,EAACC,EAAC,MAAEuD,EAAK,SAAErD,EAAQ,eAAE8hD,EAAe,GAAE,YAAEsR,GAAY,EAAI,qBAAEt3B,EAAqB,GAAE,UAAE7sB,EAAU,IAAGpP,EACrH,MAAMomE,EAAU5iE,EAAMmK,OAAO04D,UACvB,QAAErkE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASivC,GAAiB,CAAErnC,UAAW,CACtE0K,GAAIowD,KAON,GAJKh3D,IACHA,EAAYnP,EAAE,+BAGZ+B,EAAS,OACX5B,cAACmmE,GAAiB,CAChBn3D,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EACtBgmB,eAAgBA,EAAe9hD,SAE/BC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAIgC,EAAO,OACTvB,eAAC6lE,GAAiB,CAChBn3D,UAAWA,EACXmkD,aAAa,EACbt3B,qBAAsBA,EACtBgmB,eAAgBA,EAAe9hD,SAAA,CAE9BrH,QAAQC,IAAIkJ,GACb7B,cAAA,KAAAD,SAAIF,EAAE,iCAIVnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAM2Q,EAAgB3Q,EAAKg8C,aAErByV,EAAmBr3C,GAAsBzJ,EAAc5F,WACvDxG,EClDD,SAAgCzG,GAAiD,IAAhD,EAACC,EAAC,SAAE2b,EAAQ,aAAEg4C,EAAY,MAAE6R,EAAK,UAAE5R,GAAU7zD,EACnF,OAAOC,EAAE,iBAAmB,KAAO2b,EAAW,KAAOg4C,EAAe,OAAS6R,EAAQ,MAAQj6D,IAAOqoD,GAAWpoD,OAAO,KACxH,CDgDmB+6D,CAAwB,CACvCvmE,EAAGA,EACH2b,SAAU/I,EAAc7F,yBAAyBjF,qBAAqBzB,KACtEstD,aAAc/gD,EAAc7F,yBAAyB1G,KACrDm/D,MAAO5yD,EAAc0gC,kBAAkBjtC,KACvCutD,UAAWF,IAGb,OACEvzD,cAACmmE,GAAiB,CAChB9/D,SAAUA,EACV2I,UAAWA,EACX6sB,qBAAsBA,EACtBs3B,YAAaA,EACbtR,eAAgBA,EAAe9hD,SAE9BA,GAIP,KE6EeJ,qBAAkB4C,aAhIjC,SAA6B3C,GAAc,IAAb,EAACC,EAAC,MAAEuD,GAAMxD,EACtC,MAAMgW,EAAKxS,EAAMmK,OAAO04D,SAClBpkB,EAAiB,OAEjB7yC,EAAYnP,EAAE,8BACdg8B,EAAuB77B,cAACqmE,GAAa,KACrC,QAAEzkE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASivC,GAAiB,CACzDrnC,UAAW,CAAE0K,GAAIA,MAEX0wD,GAAwB/zD,YAAYkgC,IAE5C,GAAI7wC,EAAS,OACX5B,cAACumE,GAAa,CAACxS,gBAAiBlS,EAAgBhmB,qBAAsBA,EAAqB97B,SACzFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAACumE,GAAa,CAACxS,gBAAiBlS,EAAgBhmB,qBAAsBA,EAAqB97B,SACzFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZ2Q,EAAgB3Q,EAAKg8C,aAErByV,EAAmBr3C,GAAsBzJ,EAAc5F,WACvDonD,EAAiB/3C,GAAsBzJ,EAAc3F,SAG3D,IAAIsS,EAAY,KACZC,EAAU,KASd,OARI5M,EAAc2M,YAChBA,EAAY,IAAIlc,KAAKuP,EAAc2M,YAEjC3M,EAAc4M,UAChBA,EAAU,IAAInc,KAAKuP,EAAc4M,UAKjCrf,cAACumE,GAAa,CACZ1kB,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACLC,cAAe,CACb9F,cAAe8F,EAAc9F,cAC7B+0C,kBAAmBjvC,EAAcivC,kBACjC90C,yBAA0B6F,EAAc7F,yBAAyBgJ,GACjEu9B,kBAAmB1gC,EAAc0gC,kBAAkBv9B,GACnDwJ,UAAWA,EACXC,QAASA,EACTxS,UAAW0mD,EACXzmD,QAASmnD,GAEXthD,iBAAkBogC,GAClBngC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAIIwM,EAJAqiC,EAAoB7uC,EAAO6uC,kBACF,aAAzB7uC,EAAOlG,gBACT+0C,EAAoB,GAIlBriC,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGrBinD,EAAoB,CAAEp7D,UAAW,CAC/B6H,MAAO,CACL6C,GAAIA,EACJjJ,cAAekG,EAAOlG,cACtB+0C,kBAAmBA,EACnB90C,yBAA0BiG,EAAOjG,yBACjCumC,kBAAmBtgC,EAAOsgC,kBAC1B/zB,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,EACTxS,UAAWkP,GAAmBlJ,EAAOhG,WACrCC,QAASiP,GAAmBlJ,EAAO/F,WAEpCoG,eAAgB,CACf,CAACC,MAAOm/B,GAAkBpnC,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,sCAAwC,CACrD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,GAASpT,EAAA,OACzEzM,cAAC+lE,GAAiB,CAChB5oD,UAAWA,EACXzL,aAAcA,EACd2L,cAAeA,EACfD,gBAAiBA,EACjBzL,OAAQA,EACRkB,OAAQA,EACRgN,QAASA,EACT1Z,UApHM,oBAqHN,OAMd,KChJO,MAAMqgE,GAAuC9sE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwG3C+sE,GAAkC/sE,GAAI;;;;;;EAStCgtE,GAAkChtE,GAAI;;;;;;;;EC+BlCiG,qBAAkB4C,aAnIL3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,UAAE8Z,EAAS,aAAEzL,EAAY,cAAE2L,EAAa,gBAAED,EAAe,OAAEzL,EAAM,OAAEkB,EAAM,QAAEgN,EAAO,UAAE1Z,GAAWvG,EAAA,OACtIU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,SACLhG,UAAYyR,EAAOtJ,OAAU,0BAA4B,eACzD4J,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,KAATyM,gBACtBtM,cAAA,UAAQmC,MAAM,YAAWpC,SAAaF,EAAE,sBAATyM,gBAC/BtM,cAAA,UAAQmC,MAAM,OAAMpC,SAAaF,EAAE,mCAATyM,mBAE5BtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,cACLhG,UAAYyR,EAAOnJ,YAAe,0BAA4B,eAC9DyJ,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,6BAIlEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,UACLhG,UAAYyR,EAAO0R,QAAW,0BAA4B,eAC1DpR,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,gDACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACrChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO0uC,SAAY,0BAA4B,eAC3DpuC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,2BACLhG,UAAYyR,EAAO/E,yBAA4B,0BAA4B,eAC3EqF,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sBAATyM,gBACrB6Q,EAAUsyB,0BAA0B1mC,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACtDnM,eAAA,UAAQ6B,MAAO+G,EAAK0M,GAAG7V,SAAA,CAAamJ,EAAKvB,qBAAqBzB,KAAK,MAAIgD,EAAKhD,OAA/CoG,eAA6D,OAG9FtM,cAACkS,KAAY,CAAChM,KAAK,2BAA2BiM,UAAU,OAAOjS,UAAU,0BAG7EF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,oBACLhG,UAAYyR,EAAOwhC,kBAAqB,0BAA4B,eACpElhC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sBAATyM,gBACrB6Q,EAAU21B,mBAAmB/pC,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC/ChoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,OAG3DtM,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,6BAIxEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACxCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO9E,UAAa,0BAA4B,eAC5D8M,SAAU9G,EAAOhG,UACjB+M,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,GAC3Ck1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACtCC,cAAC4yD,GAAY,CACX1yD,UAAYyR,EAAO7E,QAAW,0BAA4B,eAC1D6M,SAAU9G,EAAO/F,QACjB8M,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,GACzCk1C,WAAW,IAEbtyD,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,gCAKhEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACVC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAAC6d,GAAgB,CAAC1X,UAAWA,SAExB,KCpIExG,qBAAkB4C,aAJP3C,IAAA,IAAC,EAAEC,EAAC,QAAEmzD,GAASpzD,EAAA,OACvCI,cAACyG,GAAU,CAACN,UAAW,oBAAsB,KC6BhCxG,qBAAkB4C,aAvBjC,SAA8B3C,GAAyE,IAAxE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,qBAAE87B,EAAqB,GAAE,SAAEx1B,EAAS,IAAIzG,EAClG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUA,EAAStG,SAC1DO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC2mE,GAAiB,IACjB9qC,OAGL77B,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KCuBeJ,qBAAkB4C,aA1CjC,SAAoC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACtD,MAAM8M,EAAiBtJ,EAAMmK,OAAO04D,SAC9BW,EAAYxjE,EAAMmK,OAAOf,MACxBq6D,GAA0Bt0D,YAAYk0D,GAAiC,CAC5E33C,YAAaA,KAAQzrB,EAAQnB,KAAK,oBAAoB,IAElDgoD,EAAa,CACjBpM,aAAcpxC,EACdF,KAAMo6D,GAGR,OACE5mE,cAAA,UAAQE,UAAU,qCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,iDACdyX,eAAgBtX,cAAA,QAChBuX,WAAY1X,EAAE,6CACd+Y,eAAgBiuD,EAChBpvD,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL+qC,aAAcpxC,EACdF,KAAMo6D,IAGV1zD,eAAgB,CACd,CAAEC,MAAOqzD,GAAsCt7D,UAAWg/C,GAC1D,CAAE/2C,MAAOm/B,GAAkBpnC,UAAW3D,SAG1C,EACJxH,SACAO,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,YAAY,IAAE,IAAI,IAAErG,EAAE,qDAGhF,KCsIeF,qBAAkB4C,aApKjC,SAA0B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1Cq7D,GAAa,EACjB,MAAMvuD,EAAiBtJ,EAAMmK,OAAO04D,SAC9BW,EAAYxjE,EAAMmK,OAAOf,KAGzB09C,EAAa,CACjBpM,aAAcpxC,EACdF,KAAMo6D,IAGAhlE,QAAS4sB,EAAc3sB,MAAO4sB,EAAY3sB,KAAMurD,GAAc/pD,YAASkjE,GAAsC,CACnHt7D,UAAWg/C,KAEL4c,GAAgCv0D,YAAYm0D,IAEpD,GAAIl4C,EAAc,OAChBxuB,cAAC+mE,GAAqB,CAAAhnE,SACpBC,cAAA,KAAAD,SAAIF,EAAE,iCAIV,GAAI4uB,EAEF,OADA/1B,QAAQC,IAAI81B,GAEVzuB,cAAC+mE,GAAqB,CAAAhnE,SACpBC,cAAA,KAAAD,SAAIF,EAAE,gCAKZnH,QAAQC,IAAI,aACZD,QAAQC,IAAI00D,GAEZ,MAAMvP,EAAeuP,EAAUvP,aACzBkJ,ECzDD,SAAsBpnD,GAAuD,IAAtD,EAACC,EAAC,SAAE2b,EAAQ,aAAEg4C,EAAY,MAAE6R,EAAK,UAAEx4D,EAAS,KAAEL,GAAK5M,EAC/E,OAAOC,EAAE,iBAAmB,KACrB2b,EAAW,KAAOg4C,EAAe,OACjC6R,EAAQ,MACRj6D,IAAOoB,GAAMnB,OAAO,MAAQ,IAAMD,IAAOyB,GAAWxB,OAAO,KACpE,CDoDmB27D,CAAc,CAC7BnnE,EAAGA,EACH2b,SAAUsiC,EAAalxC,yBAAyBjF,qBAAqBzB,KACrEstD,aAAc1V,EAAalxC,yBAAyB1G,KACpDm/D,MAAOvnB,EAAa3K,kBAAkBjtC,KACtC2G,UAAWqP,GAAsB4hC,EAAajxC,WAC9CL,KAAMo6D,IAGR,IAAI1wD,EACJ,IAAIzD,EAAgB,CAAC,EAwCrB,OAvCI46C,EAAU8N,uBAAuBpyD,MAAM3J,QACzC67D,GAAa,EAEb/kD,EAAcm3C,EAAU8N,uBAAuBpyD,MAAM,GAAGG,KAExDuJ,EAAcpK,OAAS6N,EAAY7N,OACnCoK,EAAcjK,YAAc0N,EAAY1N,YACpC0N,EAAYmN,UACd5Q,EAAc4Q,QAAUnN,EAAYmN,QAAQzN,IAE1CM,EAAYmqC,WACd5tC,EAAc4tC,SAAWnqC,EAAYmqC,SAASzqC,IAE5CM,EAAYtJ,2BACd6F,EAAc7F,yBAA2BsJ,EAAYtJ,yBAAyBgJ,IAE5EM,EAAYi9B,oBACd1gC,EAAc0gC,kBAAoBj9B,EAAYi9B,kBAAkBv9B,IAE9DM,EAAYrJ,YACd4F,EAAc5F,UAAYqP,GAAsBhG,EAAYrJ,YAE1DqJ,EAAYpJ,UACd2F,EAAc3F,QAAUoP,GAAsBhG,EAAYpJ,YAI5DpU,QAAQC,IAAI,0BACZ8Z,EAAcpK,OAAS,GACvBoK,EAAcjK,YAAc,GAC5BiK,EAAc4Q,QAAU,GACxB5Q,EAAc4tC,SAAW,GACzB5tC,EAAc7F,yBAA2B,GACzC6F,EAAc0gC,kBAAoB,GAClC1gC,EAAc5F,UAAY,GAC1B4F,EAAc3F,QAAU,IAKxB9M,cAAC+mE,GAAqB,CAAC1gE,SAAU2gD,EAAUnrB,qBAAuBo/B,EAAcj7D,cAACinE,GAA4B,IAAK,GAAGlnE,SACnHO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,oBAEjBG,cAACwS,KAAM,CACLC,cAAeA,EAEfG,SAAUA,CAACC,EAAM7G,KAAyB,IAKlCa,EACAC,GANW,cAAEgG,GAAe9G,EAEhCtT,QAAQC,IAAI,iBACZD,QAAQC,IAAIka,GAIRA,EAAOhG,YACTA,EAAYkP,GAAmBlJ,EAAOhG,YAGpCgG,EAAO/F,UACTA,EAAUiP,GAAmBlJ,EAAO/F,UAItCg6D,EAA4B,CAAE57D,UAAW,CACvC6H,MAAO,CACL+qC,aAAcpxC,EACdF,KAAMo6D,EACNv+D,OAAQwK,EAAOxK,OACfG,YAAaqK,EAAOrK,YACpB6a,QAASxQ,EAAOwQ,QAChBg9B,SAAUxtC,EAAOwtC,SACjBzzC,yBAA0BiG,EAAOjG,yBACjCumC,kBAAmBtgC,EAAOsgC,kBAC1BtmC,UAAWA,EACXC,QAASA,IAEVoG,eAAgB,CACf,CAACC,MAAOqzD,GAAsCt7D,UAAWg/C,GACzD,CAAC/2C,MAAOm/B,GAAkBpnC,UAAW3D,SAExC6L,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,iDAAmD,CAChE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACrBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDnJ,QAAQC,IAAI,uCAAwCkJ,EAAMu5D,eAC1DtoD,GAAc,EAAM,GACpB,EAEL/S,SAEA0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACknE,GAAqB,CACpB/pD,UAAWkwC,EACX37C,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UApJM,mBAoJepG,SAEpBrH,QAAQC,IAAIgZ,IACS,QAMpC,KEvLO,MAAMw1D,GAAoCztE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiDxC0tE,GAA2C1tE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiC/C4e,GAAyB5e,GAAI;;;;;;;;;;;;;;;;;EAoB7B2tE,GAA6B3tE,GAAI;;;;;;;;EAWjC4tE,GAAgC5tE,GAAI;;;;;;;;EAWpC6tE,GAAgC7tE,GAAI;;;;;;EC0ElCiG,qBAAkB4C,aA7KjC,SAA+B3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAEzBitD,EAAU5iE,EAAMmK,OAAO04D,SACvBpkB,EAAiB,YACjB7yC,EAAYnP,EAAE,mCACdmV,EAAYhV,cAACmN,GAAoB,CAACvD,WAAW,MAAMC,SAAS,sBAAqB9J,SACrFC,cAACyE,IAAI,CAACrC,GAAK,kCAAiC4jE,QAAejmE,SACzDO,eAACoE,IAAM,CAACG,MAAM,eAAc9E,SAAA,CAC5BC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,gBAAgB,IAAErG,EAAE,sBAIzCg8B,EAAuBv7B,eAACoE,IAAOqB,KAAI,CAAAhG,SAAA,CACvCC,cAACqmE,GAAa,IACbrxD,MAEG,QAAEpT,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS6jE,GAAmC,CACtFj8D,UAAW,CAAC4yC,aAAckoB,MAEpBzP,GAA8BhkD,YAAYg1D,IAKlD,OAAI3lE,EACF5B,cAACumE,GAAa,CACZ1kB,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,QAKhCa,EACF7B,cAACumE,GAAa,CACZ1kB,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,iDAMPiC,EAAK20D,qBAAqB1tD,MAAM3J,OAanCY,cAACumE,GAAa,CACd1kB,eAAgBA,EAChBsR,aAAa,EACbt3B,qBAAsBA,EAAqB97B,SAEzCC,cAACyN,GAAW,CACVuB,UAAWA,EACXT,SAAUzM,EAAK20D,qBAAqBloD,SACpCa,aAAa,EACbV,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOtO,EAAK20D,qBAAqBloD,SAAS8B,WAE5CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBimD,qBAAqB1tD,MAChDwF,EAAWiC,EAAgBimD,qBAAqBloD,SAEtD,OAAOkC,EAASrR,OACZ,CAGE0C,KAAM,CACJ20D,qBAAsB,CACpB/lD,WAAYH,EAAekmD,qBAAqB/lD,WAChD3H,MAAO,IAAKwH,EAAekmD,qBAAqB1tD,SAAU0H,GAC1DlC,cAINgC,CAAc,GAElB,EACFxQ,SAEFC,cAAA,OAAAD,SACEO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,uBACpBG,cAAC2Q,IAAMC,UAAS,SAGpB5Q,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAK20D,qBAAqB1tD,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC5CjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACPrH,QAAQC,IAAIuQ,GACblJ,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,IADjBzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKmW,QAAWjU,IAAOlC,EAAKmW,SAAShU,OAAO0N,GAAc,IAD9CzM,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKma,QAAQC,WAEhBtjB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNmJ,EAAKm3C,SAAWn3C,EAAKm3C,SAAS/8B,SAAW,KAE7ChjB,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAACyE,IAAI,CAACrC,GAAK,kCAAiC4jE,UAAgB98D,EAAK0M,KAAK7V,SACpEC,cAAC0E,IAAM,CAACxE,UAAU,SACV2E,MAAM,YAAW9E,SAEtBF,EAAE,oBAGPG,cAAA,UAAQE,UAAU,2BACdkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,gDACdyX,eAAgBhX,eAACyF,IAAI,CAAAhG,SAAA,CACjBO,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CAAEF,EAAE,iBAAiB,KAAGuL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,MAChEzY,eAACyF,IAAK3B,KAAI,CAAArE,SAAA,CAAEmJ,EAAKma,QAAQC,SAAS,OACjCpa,EAAKm3C,SAAYrgD,cAAC+F,IAAK3B,KAAI,CAAArE,SAAEmJ,EAAKm3C,SAAS/8B,WAAwB,MAExE/L,WAAY1X,EAAE,qCACd+Y,eAAgB29C,EAChB9+C,kBAAmB,CAAEvM,UAAW,CAC9B6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAEV1C,eAAgB,CACjB,CAACC,MAAOg0D,GAAmCj8D,UAAW,CAAE4yC,aAAckoB,OAE1E,EAAEjmE,SAENC,cAAA,QAAME,UAAU,WAAUH,SACxBC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAhCUoG,kBAdzBA,eAkDJ,eA9GxBtM,cAACumE,GAAa,CACZ1kB,eAAgBA,EAChB7yC,UAAWA,EACX6sB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,6CAgHd,KClMO,MAAM2nE,GAAiCt2D,OAAaC,MAAM,CAC/DkS,QAASnS,OACNG,SAASxR,YAAE,uBACdwgD,SAAUnvC,OACVkO,UAAWlO,OACRG,SAASxR,YAAE,yBCsFDF,qBAAkB4C,aA5EC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,MAAED,EAAK,aAAEsO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAEsK,EAAS,UAAEhX,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OAC1IU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACob,GAAY,CACXzB,SAAU9G,EAAOwM,QACjBzF,SAAWpN,GAAS6Q,EAAc,UAAW7Q,GAC7CqN,OAAQA,IAAMuD,EAAgB,WAAW,KAE3Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,6BAI9DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,UACLhG,UAAYyR,EAAO0R,QAAW,0BAA4B,eAC1DpR,aAAa,MAAKlS,SAAA,CACvBrH,QAAQC,IAAI,8CACZD,QAAQC,IAAIwkB,GACbnd,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,0BAATyM,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACrChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,WACLhG,UAAYyR,EAAO0uC,SAAY,0BAA4B,eAC3DpuC,aAAa,MAAKlS,SAAA,CACxBC,cAAA,UAAQmC,MAAM,IAAQmK,gBACrB6Q,EAAU+e,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,OAG/DtM,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,gCAKjEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAOmD,KAAK,SAAQjI,SAC7BF,EAAE,2BAIR,KCjFIF,qBAAkB4C,aAJC3C,IAAA,IAAC,EAAEC,EAAC,QAAEmmE,GAASpmE,EAAA,OAC/CI,cAACyG,GAAU,CAACN,UAAW,kCAAoC6/D,GAAW,KCiHzDrmE,qBAAkB4C,aAvGjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,QAAEwD,EAAO,MAAED,GAAOxD,EACrD,MAAMomE,EAAU5iE,EAAMmK,OAAO04D,SACvB9/D,EAAa,kCAAiC6/D,IAC9Ch3D,EAAYnP,EAAE,uCACdgiD,EAAiB,YACjBhmB,EAAuB77B,cAACynE,GAAyB,CAACzB,QAASA,KAE3D,QAACpkE,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAASgV,KACjCovD,GAA2Bn1D,YAAY80D,IAE9C,GAAIzlE,EAAS,OACX5B,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EAElB,OACE9B,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAW,IAAIlc,KACfmgB,QAAS,GACTg9B,SAAU,IAEZ1tC,iBAAkB60D,GAClB50D,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBqoD,EAAwB,CAAEx8D,UAAW,CACnC6H,MAAO,CACL+qC,aAAckoB,EACd3iD,QAASxQ,EAAOwQ,QAChBg9B,SAAUxtC,EAAOwtC,SACjBjhC,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAOg0D,GAAmCj8D,UAAW,CAAE4yC,aAAckoB,OAGzE5yD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,+CAAiD,CAC9D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC2nE,GAAyB,CACxBxqD,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,GACX,KAKZ,KC2BexG,qBAAkB4C,aAhIjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBowD,EAAU5iE,EAAMmK,OAAO04D,SACvB9/D,EAAa,kCAAiC6/D,IAC9Ch3D,EAAYnP,EAAE,wCACdgiD,EAAiB,YACjBhmB,EAAuB77B,cAACynE,GAAyB,CAACzB,QAASA,KAE3D,QAACpkE,EAAO,MAAEC,EAAK,KAAEC,GAAQwB,YAAS8jE,GAA0C,CAChFl8D,UAAW,CAAE0K,GAAIA,MAEZgyD,GAA8Br1D,YAAY+0D,IAEjD,GAAI1lE,EAAS,OACX5B,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,mCAKZ,GAAIgC,EAAO,OACT7B,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GACZ,MAAMqb,EAAYrb,EACZoU,EAAcpU,EAAKi1D,oBAEzB,IAAIC,EAAkB,GAClB9gD,EAAYmqC,WACd2W,EAAmB9gD,EAAYmqC,SAASzqC,IAK1C,IAAIwJ,EAAY,KACZlJ,EAAYkJ,YACdA,EAAY,IAAIlc,KAAKgT,EAAYkJ,YAGnC,IAAIC,EAAU,KAKd,OAJInJ,EAAYmJ,UACdA,EAAU,IAAInc,KAAKgT,EAAYmJ,UAI/Brf,cAACumE,GAAa,CACZv3D,UAAWA,EACX6yC,eAAgBA,EAChBhmB,qBAAsBA,EAAqB97B,SAE3CC,cAACwS,KAAM,CACLC,cAAe,CACb2M,UAAWA,EACXC,QAASA,EACTgE,QAASnN,EAAYmN,QAAQzN,GAC7ByqC,SAAU2W,GAEZrkD,iBAAkB60D,GAClB50D,SAAUA,CAACC,EAAM7G,KAAyB,IAElCqT,GAFW,cAAEvM,GAAe9G,EAI9BqT,EADExM,EAAOwM,QACCvD,GAAejJ,EAAOwM,SAEtBxM,EAAOwM,QAGnBuoD,EAA2B,CAAE18D,UAAW,CACtC6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjByN,QAASxQ,EAAOwQ,QAChBg9B,SAAUxtC,EAAOwtC,SACjBjhC,UAAWtD,GAAejJ,EAAOuM,WACjCC,QAASA,IAEVnM,eAAgB,CACf,CAACC,MAAOg0D,GAAmCj8D,UAAW,CAAE4yC,aAAckoB,OAGzE5yD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC2nE,GAAyB,CACxBxqD,UAAWA,EACXzL,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAWA,EAAUpG,SAEpBrH,QAAQC,IAAIgZ,IACa,KAKtC,KClGA,MAAMxO,GAAM,IAAID,KA4QDvD,sBA1Qf,SAA+BC,GAAiC,IAAhC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAASH,EAC3D,MAAM,MAAEiC,EAAK,QAAED,EAAO,KAAEE,GAASwB,YAASqF,IAE1C,OAAI/G,EAAgB5B,cAACyD,EAAsB,IACvC5B,EAAc7B,cAAA,KAAAD,SAAIF,EAAE,gCAExBnH,QAAQC,IAAImJ,GAGVxB,eAACwD,IAAKC,QAAO,CACXC,YAAa,CACXC,KAAM,IACNzD,IAAK,cACLmD,SAAU,+CAqCV2G,gBAAiB,CACjBF,UAAW,IACXlE,KAAMpE,EAAKwC,KAAKiG,UAAY,IAAMzI,EAAKwC,KAAKkG,SAC5ChC,YAAa,GACbiC,QAAS,CAEP,CAAEpI,KAAM,OAAQF,MAAO,kBAAmBC,GAAI,4BAC9C,CAAEsI,WAAW,GACb,CAAErI,KAAM,UAAWF,MAAO,WAAYC,GAAI,sBAM9C4C,2BAA4BzC,YAAW0C,KACvCC,YAAa,CAaXC,UACEnF,cAACkB,WAAc,CAAAnB,SACbO,eAAA,SAAAP,SAAA,CAAO,wBAELO,eAAA,KACE2D,KAAK,0BACLmB,OAAO,SACPC,IAAI,sBAAqBtF,SAAA,CAExB,IAAI,iBAEF,KAAK,4BACaoD,GAAImC,cAAc,SAI/CC,IACEjF,eAACY,WAAc,CAAAnB,SAAA,CACbC,cAACI,IAAKoF,IAAG,CAACC,MAAM,IAUhBzF,cAACI,IAAKoF,IAAG,CAACC,MAAM,QAapB1F,SAAA,CAEDA,EACDC,cAACS,IAAc,CACbC,UAAW,IACXC,WAAYC,SAIpB,IC/IejB,qBAAkB4C,aAnBjC,SAAwB3C,GAAuD,IAAtD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,MAAEqG,EAAK,SAAEC,EAAS,IAAIzG,EAE1E,OACEI,cAAC6nE,GAAsB,CAAA9nE,SACrBC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOA,EAAOC,SAAUA,IACnCrG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACbA,YAOlB,KC1BO,MAAMk3C,GAAqBv9C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCzB8jD,GAAsC9jD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiE1CikD,IATmCjkD,GAAI;;;;;;EASLA,GAAI;;;;;;;;GClG5C,SAASqkD,GAA6BhH,GAC3C,IAAInvC,EAAY,CACdmvC,gBAAY13C,GAKd,OAFAuI,EAAUmvC,WAAaA,EAEhBnvC,CACT,CAEO,SAASo2C,GAAoCtxC,EAAgBF,GAClE,MAAO,CACLsxC,aAAcpxC,EACdF,KAAMA,EAEV,CAEO,SAAS4+B,GAAYiU,EAAWvB,EAAc7tB,GACnD,OAAO3vB,eAAA,QAAAP,SAAA,CACJ+9C,EAAalxC,yBAAyBjF,qBAAqBzB,KAAK,IAAG,MACnEkF,IAAOi0C,EAAY,IAAOvB,EAAajxC,WAAWxB,OAAO4kB,GAAgB,IAAG,IAC5E6tB,EAAar2C,sBAAsBvB,KAAK,IAAG,MAEhD,CCIA,SAASg4C,GAAmBt+C,GAA2F,IAA1F,EAACC,EAAC,iBAAEs+C,EAAgB,KAAEj1C,EAAI,OAAEb,EAAM,eAAEqE,EAAc,UAAE2yC,EAAS,wBAAEyoB,GAAwBloE,EAClHkoE,GAAwB,GAExB3pB,EAAiB,CACfjzC,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACT6oC,cAAep2C,IAGnB6K,eAAgB,CACd,CAACC,MAAOqqC,GACNtyC,UAAW8yC,GAAoCtxC,EAAgB2yC,KAEnEX,qBAAqB,IACpBtrC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACftT,QAAQC,IAAI,WAAYmJ,GACxBgmE,GAAwB,GACxBz0D,IAAMC,QACJzT,EAAE,kDAAmD,CACnD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRimE,GAAwB,GACxBz0D,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE9D,CA0TelC,qBAAkB4C,aAvTjC,SAA2BgK,GAA0B,IAAzB,EAAE1M,EAAC,MAAEuD,EAAK,SAAEoY,GAAUjP,EAChD,MAAOw7D,EAAYC,GAAiB7yD,oBAAS,IACtC8yD,EAAsBH,GAA2B3yD,oBAAS,IAC1D4hC,EAAYyd,GAAiBr/C,wBAAS9V,GACvCiuC,EAAalqC,EAAMmK,OAAO6hC,YAC1B1iC,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,KACzB6lB,EAAc7uB,qBAAWvC,GAGzBgvB,EAFaoC,EAAYtZ,WAEK,IADjBsZ,EAAYxnB,iBAI/BvM,aAAaC,QAAQC,EAAKjC,6BAA8Bif,EAASmI,UAEjE,MAEE/hB,QAASsmE,EACTrmE,MAAOsmE,EACPrmE,KAAMsmE,GACJ9kE,YACFk6C,GAAqC,CACnCtyC,UAAW8yC,GAAoCtxC,EAAgB2yC,GAC/D/zC,YAAa,kBAIT6yC,GAAqB5rC,YAAYorC,KAEjC0Z,GACJvnD,UAAWu4D,EACXzmE,QAAS0mE,EACTzmE,MAAO0mE,EACPzmE,KAAMw1D,IACH72B,aAAcwW,GAAoB,CAAE3rC,YAAa,iBAKxD,GAHA5S,QAAQC,IAAI,qBACZD,QAAQC,IAAI2+D,GAER4Q,EAAwB,OAC1BloE,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,+BAGP,GAAIsoE,EAAsB,OACxBnoE,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,uCAIPnH,QAAQC,IAAIyvE,GACZ,IAAInR,EAAe,GACnBmR,EAAoBtpB,wBAAwB/1C,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC7DwqD,EAAa/0D,KAAKgH,EAAKma,QAAQzN,GAAG,IAEpCld,QAAQC,IAAIs+D,GACZ,MAAMnZ,EAAesqB,EAAoBtqB,aAEnCz3C,EAAW+kC,GACfiU,EACAvB,EACA7tB,GAGF,OACE3vB,eAACkoE,GAAe,CAACpiE,MAAOvG,EAAE,6BAA8BwG,SAAUA,EAAStG,SAAA,CACzEC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,sBACbuP,aAAa,EACZb,SAAU65D,EAAoBtpB,wBAAwBvwC,SACtDG,WAAYA,KACV25D,EAAkB,CAClBn9D,UAAW,CACTkF,MAAOg4D,EAAoBtpB,wBAAwBvwC,SAAS8B,WAE9DC,YAAaA,CAACC,EAAcyX,KAA2B,IAAzB,gBAAExX,GAAiBwX,EAC/C,MAAMvX,EAAWD,EAAgBsuC,wBAAwB/1C,MACnDwF,EAAWiC,EAAgBsuC,wBAAwBvwC,SAEzD,OAAOkC,EAASrR,OACZ,CAGEgpE,oBAAqB,CACnBtpB,wBAAyB,CACvBpuC,WAAYH,EAAeuuC,wBAAwBpuC,WACnD3H,MAAO,IAAKwH,EAAeuuC,wBAAwB/1C,SAAU0H,GAC7DlC,cAINgC,CAAc,GAEpB,EACZxQ,SACEqoE,EAAoBtpB,wBAAwB/1C,MAAM3J,OAEpDY,cAACc,IAAM,CAACC,OAAQknE,EAAsBjnE,QAAQ,EAAKjB,SACnDO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,4BACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRqoE,EAAoBtpB,wBAAwB/1C,MAAMgD,KAAIkc,IAAA,IAAC,KAAE/e,GAAM+e,EAAA,OAC5D3nB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKma,QAAQC,SAAS,IAACtjB,cAAA,SACvBkJ,EAAK85C,kBACJ1iD,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BmJ,EAAK85C,iBAAiB9gB,sBAAsBh8B,KAAK,IAAG,OAGxDgD,EAAK85C,kBACL95C,EAAK85C,iBAAiB9gB,sBAAsB6D,WAC5C/lC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,gDAG7BG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,kBAEnCn+C,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CAIRC,cAAC6qB,IAAQ,CAEP3qB,UAAU,aACVmE,KAAK,SACLymB,QAAM,EACNjmB,MAAM,YACNkmB,eAAgBlrB,EAAE,kBAClBoC,MAAO,CACLjC,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,QACLkN,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHs+C,iBAAkBA,EAClBj1C,KAAMA,EACNb,OAAQ,YACRqE,eAAgBA,EAChB2yC,UAAWA,EACXyoB,wBAAyBA,GACzB,EACF/nE,SACCF,EAAE,+DAbAyM,iBAFkBA,gBAkB3BtM,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,WACLkN,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHs+C,iBAAkBA,EAClBj1C,KAAMA,EACNb,OAAQ,SACRqE,eAAgBA,EAChB2yC,UAAWA,EACXyoB,wBAAyBA,GACzB,EACF/nE,SACCF,EAAE,4DAbAyM,iBAFkBA,gBAkB3BtM,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC6qB,IAASzmB,KAAI,CAEZ/B,KAAK,IACLkN,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHs+C,iBAAkBA,EAClBj1C,KAAMA,EACNb,OAAQ,YACRqE,eAAgBA,EAChB2yC,UAAWA,EACXyoB,wBAAyBA,GACzB,EACF/nE,SACCF,EAAE,+DAbAyM,iBAFkBA,kBA3CxBA,gBA+DkB,WAAvBpD,EAAKu1C,cACLz+C,cAACmN,GAAoB,CAAYvD,WAAW,SAASC,SAAS,yBAAwB9J,SACpFC,cAAC0E,IAAM,CAELxE,UAAU,aACV2E,MAAM,UACND,KAAK,GACL2K,QAASA,KACP2uC,GAAoB,CAClBr+C,EAAGA,EACHs+C,iBAAkBA,EAClBj1C,KAAMA,EACNb,OAAQ,YACRqE,eAAgBA,EAChB2yC,UAAWA,EACXyoB,wBAAyBA,GACzB,EACF/nE,SACCF,EAAE,oBAfAyM,iBAFkBA,gBAmBA,QAxGjBA,eA0GJ,WAtHlBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,oDA6HpBG,cAAA,MAAAD,SAAKF,EAAE,2CACPG,cAAC0gB,GAAW,CACVI,gBAAiBi2B,EACjBt1B,YAAa5hB,EAAE,UACf+Z,SAAWzX,IACTzJ,QAAQC,IAAIwJ,GACZ7D,aAAaC,QAAQC,EAAKf,2BAA4B0E,GAClDA,GAGF6lE,GAAc,GACdxT,EAAcryD,GACdk1D,EAAY,CAAEnsD,UAAW6yC,GAA6B57C,OAEtD6lE,GAAc,GACdxT,OAAcn1D,GAChB,IAEF,IAACW,cAAA,SAED+nE,GAAezQ,IAAwBgR,IAA2BC,EAClEvoE,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BACd0O,SAAU+oD,EAAkBp7B,SAAS3tB,SACrCa,aAAa,EACbV,WAAYA,KACV25D,EAAkB,CAChBn9D,UAAW,CACXkF,MAAOknD,EAAkBp7B,SAAS3tB,SAAS8B,WAE7CC,YAAaA,CAACC,EAAc2X,KAA2B,IAAzB,gBAAE1X,GAAiB0X,EAC/C,MAAMzX,EAAWD,EAAgB0rB,SAASnzB,MACpCwF,EAAWiC,EAAgB0rB,SAAS3tB,SAE1C,OAAOkC,EAASrR,OACZ,CAGEk4D,kBAAmB,CACjBp7B,SAAU,CACRxrB,WAAYH,EAAe2rB,SAASxrB,WACpC3H,MAAO,IAAKwH,EAAe2rB,SAASnzB,SAAU0H,GAC9ClC,cAINgC,CAAc,GAEpB,EACFxQ,SACNu3D,EAAkBp7B,SAASnzB,MAAM3J,OAEnCkB,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACRu3D,EAAkBp7B,SAASnzB,MAAMgD,KAAIqc,IAAA,IAAC,KAAElf,GAAMkf,EAAA,OAC7C9nB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoa,UADQhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+f,OADQ3c,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNk3D,EAAaM,SAASruD,EAAK0M,IAC3B5V,cAAA,QAAME,UAAU,aAAYH,SAAEF,EAAE,yEAChCG,cAACyE,IAAI,CAACrC,GAAI,qBAAuBkrC,EAAa,IAAM5gC,EAAiB,IAAM2yC,EAAY,IAAMn2C,EAAK0M,GAAG7V,SACnGO,eAACoE,IAAM,CAACG,MAAM,uBAAsB9E,SAAA,CACjCF,EAAE,mBAAmB,IAACG,cAACiG,IAAI,CAACC,KAAK,wBAL1BoG,kBAPFA,eAiBJ,SA5BlBtM,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,6DAkChB,KAIV,KC9WO,MAAMm5D,GAA4Bt/D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4EEA,GAAI;;;;;;;;ECgCpCiG,qBAAkB4C,aAzFjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtD,MAAMyyB,EAAc7uB,qBAAWvC,GAGzBgvB,EAFaoC,EAAYtZ,WAEK,IADjBsZ,EAAYxnB,iBAGzB4vC,EAAar3C,EAAMmK,OAAOktC,WAC1BwD,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAC1B8gC,EAAalqC,EAAMmK,OAAO6hC,aACxBxtC,QAAS4sB,EAAc3sB,MAAO4sB,EAAY3sB,KAAMurD,GAAc/pD,YACpE01D,GAA2B,CACzB9tD,UAAW,CACTmY,QAASo3B,EACTqD,aAAcG,EACdzxC,KAAMgyC,EACNwb,SAAU,YAUhB,GAJA17D,aAAaO,WAAWL,EAAKf,4BAIzB+wB,EAAc,OAAOxuB,cAAA,KAAAD,SAAIF,EAAE,+BAE/B,GAAI4uB,EAEF,OADA/1B,QAAQC,IAAI81B,GACLzuB,cAAA,KAAAD,SAAIF,EAAE,8BAGfnH,QAAQC,IAAI00D,GACZ,MAAMhqC,EAAUgqC,EAAU4M,4BAA4B52C,QAChD1gB,EAAc0qD,EAAU4M,4BAA4Bt3D,YACpDD,EAAgB2qD,EAAU4M,4BAA4Bv3D,cACtDw3D,EAAS7M,EAAU4M,4BAA4BE,mBAC/Crc,EAAeuP,EAAU4M,4BAA4Bnc,aAC3DplD,QAAQC,IAAIuhE,GAEZ,MAAM7zD,EAAW+kC,GACfoT,EACAV,EACA7tB,GAGF,OACEjwB,cAACwoE,GAAe,CAACpiE,MAAOvG,EAAE,6BAA8BwG,SAAUA,EAAStG,SACzEC,cAACI,IAAKC,IAAG,CAAAN,SACLO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfO,eAAA,MAAAP,SAAA,CAAKF,EAAE,2BAA2B,IAAEwjB,EAAQC,YAC5CtjB,cAAA,OAAKE,UAAU,OAAMH,SACrBO,eAACF,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAAA,CAClBC,cAACo6D,GAA8B,CAC7B13D,cAAeA,EACfy2D,SAAS,cACT7rB,WAAYA,IAEdttC,cAACq6D,GAA4B,CAC3B13D,YAAaA,EACbw2D,SAAS,cACT7rB,WAAYA,IAEZ4sB,GACCA,EAAOI,4BACNt6D,cAACu6D,GAA4B,CAC3BX,YAAaM,EAAOI,4BACpBnB,SAAS,cACT7rB,WAAYA,IAEd,GACF4sB,GACCA,EAAOM,2BACNx6D,cAAC06D,GAA2B,CAC1BX,WAAYG,EAAOM,2BACnBrB,SAAS,cACT7rB,WAAYA,IAEd,cAOlB,KC1GO,MAAMm7B,GAAmC/uE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;ECuErCiG,qBAAkB4C,aA1DjC,SAAkB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtC,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASmlE,IAE1C,OAAI7mE,EACF5B,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,+BAGHgC,EACF7B,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,yCAMLS,eAACkoE,GAAe,CAACpiE,MAAOvG,EAAE,0BAA0BE,SAAA,CAClDC,cAAA,MAAAD,SAAKF,EAAE,yCACLG,cAAC+F,IAAK+L,MAAK,CAAA/R,SAEP+B,EAAK6qC,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAC9C,GAAK8C,EAAA,OAC1ChM,cAAC+F,IAAKw0C,UAAS,CAACmuB,QAAM,EAAA3oE,SACpBC,cAACyE,IAAI,CAACrC,GAAI,yBAA2B8G,EAAK0M,GAAG7V,SAC3CO,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,aAAYH,SAACC,cAACiG,IAAI,CAACC,KAAK,oBACxClG,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAEgD,EAAKhD,WAGhB,QA2B/B,KCpEO,MAAMyiE,GAA6BjvE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC2H/BiG,qBAAkB4C,aA1GjC,SAAwB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC5C,MAAM0tC,EAAalqC,EAAMmK,OAAO6hC,YAE1BxkC,EADcpH,qBAAWvC,GACA4J,iBACzB+9D,EAAQx9D,MAASC,OAAO,eAExB,QAAEzJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASqlE,GAA4B,CACpEz9D,UAAW,CACTrD,SAAU+gE,EACV9gE,UAAW8gE,EACXjhE,qBAAsB2lC,KAI1B,GAAI1rC,EAAS,OACX5B,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAACwoE,GAAe,CAAAzoE,SACbF,EAAE,uCAIPnH,QAAQC,IAAImJ,GACZ,MAAMuE,EAAWvE,EAAK6F,qBAAqBzB,KAE3C,OACElG,cAACwoE,GAAe,CAACpiE,MAAOvG,EAAE,6BAA8BwG,SAAUA,EAAStG,SACzEC,cAAC8G,IAAI,CAAA/G,SACLO,eAACqQ,IAAK,CAAA5Q,SAAA,CACJC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACZF,EAAE,kBAENG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACZF,EAAE,kBAENG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACZF,EAAE,mBAENG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SACZF,EAAE,6BAIVG,cAAC2Q,IAAM5J,KAAI,CAAAhH,SAEP+B,EAAK8J,gBAAgBG,KAAIC,IAAA,IAAC,KAAEQ,EAAI,QAAE5J,GAASoJ,EAAA,OACzCpJ,EAAQmJ,KAAIQ,IAAA,IACV,eAAEG,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,YACNG,EAAW,QACX6a,EAAO,KACPrb,EAAI,SACJq4C,EAAQ,MACRC,EAAK,yBACL1zC,EAAwB,sBACxBnF,EAAqB,kBACrBC,EAAiB,UACjBmF,EAAS,QACTC,EAAO,cACPmgB,GAAe1gB,EAAA,OAEbjM,cADA,CACCqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPqL,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,MAEvC5K,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACN6M,EAAyB1G,OAE7BlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACN0H,EAAsBvB,OAE1BlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAELsjB,EAAWA,EAAQC,SACpBtjB,cAAA,QAAME,UAAU,WAAUH,SAAEF,EAAE,sCAGlCG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAI,wBAA0BkrC,EAAa,IAAM5gC,EAAiB,IAAMF,EAAKzM,SACjFO,eAACoE,IAAM,CAACG,MAAM,YAAY3E,UAAU,aAAYH,SAAA,CAC7CF,EAAE,qCACHG,cAACiG,IAAI,CAACC,KAAK,2BAIP,GAEf,YAQjB,KCvHO,MAAM2iE,GAA4BnvE,GAAI;;;;;;;;;;;;EAehCovE,GAAwBpvE,GAAI;;;;;;;;ECP1BiG,sBANf,SAAqBC,GAAgC,IAA/B,EAAEC,EAAC,UAAEsG,EAAU,aAAavG,EAChD,OACEI,cAACyG,GAAU,CAACN,UAAWA,GAE3B,ICgCexG,qBAAkB4C,aA3BjC,SAAqB3C,GAAwF,IAAvF,EAAEC,EAAC,SAAEE,EAAQ,eAAEgpE,EAAe,GAAE,UAAE/5D,EAAS,YAAEg6D,EAAY,GAAE,UAAE7iE,EAAU,aAAavG,EACxG,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAU0iE,EAAehpE,SAChEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACipE,GAAY,CAAC9iE,UAAWA,QAG7BnG,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACdipE,EACD1oE,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEiP,MAEdjP,gBAQjB,KC6JeJ,qBAAkB4C,aAtLjC,SAAsB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1C,MAAMmpE,EAAiBlpE,EAAE,wBACnBmP,EAAYnP,EAAE,+BAGlB+B,QAASsnE,EACTrnE,MAAOsnE,EACPrnE,KAAMsnE,GACJ9lE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,qBAIXznE,QAAS0nE,EACTznE,MAAO0nE,EACPznE,KAAM0nE,GACJlmE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,0BAIb,GAAKH,GAAoBI,EACvB,OACEtpE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SACvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAKmoE,GAAiBI,EACpB,OACEvpE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SACvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAIqrC,EAAU,EACVw+B,EAAQ,EAQZ,OAPIN,EAAYO,eAAe5gE,MAAM3J,SACnC8rC,EAAUk+B,EAAYO,eAAe5gE,MAAM,GAAGG,KAAK/G,OAEjDqnE,EAAUG,eAAe5gE,MAAM3J,SACjCsqE,EAAQF,EAAUG,eAAe5gE,MAAM,GAAGG,KAAK/G,OAI/CnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAErBO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,MAAAP,SAAA,CACGF,EAAE,4CAA4C,IAAG,GAAEqrC,KAAWw+B,OAEjE1pE,cAAA,MAAAD,SAAKF,EAAE,0BACNA,EAAE,wCAAwC,IAACG,cAAA,SAAMA,cAAA,SAClDA,cAAA,MAAAD,SAAKF,EAAE,qBAAwB,mPACyMG,cAAA,SAAMA,cAAA,SAAM,uEACxLA,cAAA,KAAAD,SAAG,yBAAwB,0CAAuCC,cAAA,KAAAD,SAAG,oBAAmB,OAAIC,cAAA,KAAAD,SAAG,qCAAoC,0DAAuDC,cAAA,SAAMA,cAAA,SAAM,gNAC7DA,cAAA,SAC7MA,cAAA,SAAM,6BACoBA,cAAA,SAC1BA,cAAA,SAAM,uBACcA,cAAA,SACpBA,cAAA,SAAM,sHAC6GA,cAAA,SACnHA,cAAA,SAAM,0HACiHA,cAAA,SACvHA,cAAA,SAAM,WACEA,cAAA,SACRA,cAAA,SAAM,gjBACuiBA,cAAA,SAC7iBA,cAAA,SAAM,4ZACmZA,cAAA,SAAMA,cAAA,SAC/ZA,cAAA,SAAM,0QACiQA,cAAA,SACvQA,cAAA,SAAM,wRAC+QA,cAAA,SACrRA,cAAA,SAAM,qLAC4KA,cAAA,SAClLA,cAAA,SAAM,uXAC8WA,cAAA,SACpXA,cAAA,SAAM,wVAC+UA,cAAA,SACrVA,cAAA,SAAM,sFAC6EA,cAAA,SACnFA,cAAA,SAAM,kEACyDA,cAAA,SAC/DA,cAAA,SAAM,wmBAC+lBA,cAAA,SACrmBA,cAAA,SAAM,sYAC6XA,cAAA,SACnYA,cAAA,SAAM,0aACiaA,cAAA,SACvaA,cAAA,SAAM,gJACuIA,cAAA,SAC7IA,cAAA,SAAM,mQAC0PA,cAAA,SAChQA,cAAA,SAAM,qkDAC4jDA,cAAA,SAClkDA,cAAA,SAAM,qPAC4OA,cAAA,SAClPA,cAAA,SAAM,+OACsOA,cAAA,SAC5OA,cAAA,SAAM,kNACyMA,cAAA,SAC/MA,cAAA,SAAM,u+CAC89CA,cAAA,SACp+CA,cAAA,SAAM,6TACoTA,cAAA,SAC1TA,cAAA,SAAM,ybACgbA,cAAA,SACtbA,cAAA,SAAM,yfACgfA,cAAA,SACtfA,cAAA,SAAM,oaAC2ZA,cAAA,SACjaA,cAAA,SAAM,syBAC6xBA,cAAA,SACnyBA,cAAA,SAAM,6NACoNA,cAAA,SAC1NA,cAAA,SAAM,4mBACmmBA,cAAA,SACzmBA,cAAA,SAAM,sHAC6GA,cAAA,SACnHA,cAAA,SAAM,odAC2cA,cAAA,SACjdA,cAAA,SAAM,6PACoPA,cAAA,SAC1PA,cAAA,SAAM,icACwbA,cAAA,SAC9bA,cAAA,SAAM,yeACgeA,cAAA,SACteA,cAAA,SAAM,cACKA,cAAA,SACXA,cAAA,SAAM,wlBAC+kBA,cAAA,SACrlBA,cAAA,SAAM,wmBAC+lBA,cAAA,SACrmBA,cAAA,SAAM,8BACqBA,cAAA,SAC3BA,cAAA,SAAM,gDACuCA,cAAA,SAC7CA,cAAA,SAAM,yNACgNA,cAAA,SACtNA,cAAA,SAAM,qRAC4QA,cAAA,SAClRA,cAAA,SAAM,qGAC4FA,cAAA,SAClGA,cAAA,SAAM,kPACyOA,cAAA,SAC/OA,cAAA,SAAM,2OACkOA,cAAA,SACxOA,cAAA,SAAM,wRAC+QA,cAAA,SACrRA,cAAA,SAAM,gHACuGA,cAAA,SAC7GA,cAAA,SAAM,ghBACugBA,cAAA,SAC7gBA,cAAA,SAAM,6LACoLA,cAAA,SAC1LA,cAAA,SAAM,kJACyIA,cAAA,SAC/IA,cAAA,SAAM,oEAKN,KClJeL,qBAAkB4C,aAvBjC,SAA4B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAChD,MAAMmpE,EAAiBlpE,EAAE,oCACnB+pE,EAfR,WACE,IAAIA,EAAa,CAAC,EAClB,MAAM/kD,EAAOD,OAAOC,KAAKvmB,cACzB,IAAIqN,EAAIkZ,EAAKzlB,OAEb,KAAQuM,KACNi+D,EAAY/kD,EAAKlZ,IAAOrN,aAAayE,QAAS8hB,EAAKlZ,IAGrD,OAAOi+D,CACT,CAKqBC,GAEnB,OACE7pE,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWnP,EAAE,oDAAoDE,SAEjEC,cAAC8G,IAAKC,KAAI,CAAAhH,SAEN6kB,OAAOklD,QAAQF,GAAY79D,KAAIC,IAAA,IAAE4O,EAAKzY,GAAM6J,EAAA,OAC1C1L,eAAA,OAAAP,SAAA,CACEO,eAAA,UAAAP,SAAA,CAAS6a,EAAI,OAAU,IAAEzY,IADjByY,EAEJ,OAMlB,KCOejb,qBAAkB4C,aApCO3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC9FU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACPO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACnCC,cAACgS,KAAK,CACJ9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,6BACL0lB,QAAS/Y,EAAOk3D,6BAEhB/pE,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,4CAErDG,cAACkS,KAAY,CAAChM,KAAK,6BAA6BiM,UAAU,aAG9DnS,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCuEIF,qBAAkB4C,aArGjC,SAA4B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAChD,MAAMmpE,EAAiBlpE,EAAE,0BACnBmP,EAAYnP,EAAE,yCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASulE,GAA2B,CACnE39D,UAAW,CACTm+D,QAAS,iCAILW,GAAmBz3D,YAAYu2D,IAEvC,GAAIlnE,EACF,OACE5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClBw3D,MAAM,GAMR,OAJInoE,EAAK6nE,eAAe5gE,MAAM3J,SAC5BqT,EAAoB,KAA+D,SAA1D3Q,EAAK6nE,eAAe5gE,MAAM,GAAGG,KAAK/G,MAAMgF,eAIjEnH,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACbs3D,2BAA4Bt3D,EAAoB,MAGlDG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChC,MAAMk+D,EAAW,CACf,CAAEb,QAAS,6BAA8BlnE,MAAO0Q,EAAOk3D,6BAGzD,IAAK,IAAIp+D,KAAKu+D,EACZF,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,MAAMgoE,aAE1Bj3D,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACoqE,GAA+B,CAC9B14D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACmB,KAK1C,KChEehS,qBAAkB4C,aArCG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC1FU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,6BAA6BE,SAAA,CAChDC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,mBACLhG,UAAYyR,EAAO04D,iBAAoB,0BAA4B,eACnEp4D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,mBAAmBiM,UAAU,OAAOjS,UAAU,wBAEnEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oCAAoCE,SAAA,CACvDC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,0BACLhG,UAAYyR,EAAO24D,wBAA2B,0BAA4B,eAC1Er4D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,0BAA0BiM,UAAU,OAAOjS,UAAU,2BAG9EF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KC4FIF,qBAAkB4C,aA5HjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACpD,MAAMmpE,EAAiBlpE,EAAE,0BACnBmP,EAAYnP,EAAE,mCACd0qE,EAAgB,eAGpB3oE,QAAS4oE,EACT3oE,MAAO4oE,EACP3oE,KAAM4oE,GACJpnE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,uBAIXznE,QAAS+oE,EACT9oE,MAAO+oE,EACP9oE,KAAM+oE,GACJvnE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,8BAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAK0B,GAAqBG,EACxB,OACE3qE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAKypE,GAAkBG,EACrB,OACE5qE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClBqgB,SAAU,MACVg4C,OAAQ,UAWV,OATIJ,EAAaf,eAAe5gE,MAAM3J,SACpCqT,EAAwB,SAAIi4D,EAAaf,eAAe5gE,MAAM,GAAGG,KAAK/G,OAEpE0oE,EAAWlB,eAAe5gE,MAAM3J,SAClCqT,EAAsB,OAAIo4D,EAAWlB,eAAe5gE,MAAM,GAAGG,KAAK/G,OAMlEnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACb43D,iBAAkB53D,EAAwB,SAC1C63D,wBAAyB73D,EAAsB,QAGjDG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChC,MAAMk+D,EAAW,CACf,CAAEb,QAAS,mBAAoBlnE,MAAO0Q,EAAOw3D,kBAC7C,CAAEhB,QAAS,0BAA2BlnE,MAAO0Q,EAAOy3D,0BAGtD,IAAK,IAAI3+D,KAAKu+D,EAEZF,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC+qE,GAA2B,CAC1Br5D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACe,KAKtC,KCvIO,MAAMq5D,GAAkB95D,OAAaC,MAAM,CAC9C4H,WAAY7H,OACTG,SAASxR,YAAE,uBACd+K,WAAYsG,OACTG,SAASxR,YAAE,yBCqDHF,qBAAkB4C,aA5CG3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC1FU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,aACLhG,UAAYyR,EAAOoH,WAAc,0BAA4B,eAC7D9G,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,aAAYpC,SAAaF,EAAE,6CAATyM,gBAChCtM,cAAA,UAAQmC,MAAM,aAAYpC,SAAaF,EAAE,6CAATyM,gBAChCtM,cAAA,UAAQmC,MAAM,aAAYpC,SAAaF,EAAE,6CAATyM,mBAEpCtM,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,wBAE7DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDO,eAAC0R,KAAK,CAACG,UAAU,SACTjM,KAAK,aACLhG,UAAYyR,EAAO/G,WAAc,0BAA4B,eAC7DqH,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,uCAATyM,gBACxBtM,cAAA,UAAQmC,MAAM,KAAIpC,SAAaF,EAAE,uCAATyM,mBAE5BtM,cAACkS,KAAY,CAAChM,KAAK,aAAaiM,UAAU,OAAOjS,UAAU,2BAGjEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCwDIF,qBAAkB4C,aA/FjC,SAAgC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACpD,MAAMmpE,EAAiBlpE,EAAE,6BACnBmP,EAAYnP,EAAE,6BACd0qE,EAAgB,WAEhB,QAAE3oE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS/D,IAClCyqE,GAAmBz3D,YAAY/S,GAKvC,OAHA9G,QAAQC,IAAI,2BACZD,QAAQC,IAAImJ,GAERF,EAEA5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMpBa,EAEA7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAQTG,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACbsG,WAAYjX,EAAKuwB,YAAYtZ,WAC7BnO,WAAY9I,EAAKuwB,YAAYznB,WAC7B8c,KAAM,IAER/U,iBAAkBq4D,GAClBp4D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZq4D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLgG,WAAYlG,EAAOkG,WACnBnO,WAAYiI,EAAOjI,aAEpBsI,eAAgB,CACf,CAACC,MAAO5T,MAEX6T,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACirE,GAA2B,CAC1Bv5D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACe,KAKtC,KCjEehS,qBAAkB4C,aA9BC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACxFU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,2CAA2CE,SAAA,CAC9DC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,kBACLhG,UAAYyR,EAAOu5D,gBAAmB,0BAA4B,eAClEj5D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,0BAGtEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KC4EIF,qBAAkB4C,aApGjC,SAA8B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAClD,MAAMmpE,EAAiBlpE,EAAE,0BACnBmP,EAAYnP,EAAE,iCACd0qE,EAAgB,UAChBY,EAAiB,CACrB9B,QAAS,oBAGL,QAAEznE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASulE,GAA2B,CACnE39D,UAAWigE,KAELnB,GAAmBz3D,YAAYu2D,IAEvC,GAAIlnE,EACF,OACE5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAIurE,EAAW,GAMf,OALItpE,EAAK6nE,eAAe5gE,MAAM3J,SAC5BgsE,EAAWtpE,EAAK6nE,eAAe5gE,MAAM,GAAGG,KAAK/G,OAK7CnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACby4D,gBAAiBE,GAGnBx4D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZq4D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAAS,kBACTlnE,MAAO0Q,EAAOq4D,kBAEfh4D,eAAgB,CACf,CAAEC,MAAO01D,GAA2B39D,UAAWigE,MAElD/3D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACqrE,GAAyB,CACxB35D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACa,KAKpC,KCyHehS,qBAAkB4C,aA/NjC,SAAqB3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,OAAEmK,GAAQ3N,EACxC,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBACtBS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,8BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,sCAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,mCACNA,EAAE,uCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,uCAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,+BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,2CACNA,EAAE,+CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,4CAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iDACNA,EAAE,qDACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,kDAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,mCACNA,EAAE,uCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,oCAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,sCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,sCAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,8BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qCACNA,EAAE,yCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,sCAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0CACNA,EAAE,8CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,8CAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,2BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,yCACNA,EAAE,6CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,0CAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,mCACNA,EAAE,uCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,oCAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,uCACNA,EAAE,2CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,2CAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,2BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,sCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,oCAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0CACNA,EAAE,8CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,+CAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,kCAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,0CACNA,EAAE,8CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,4CAI3BpN,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,uCACNA,EAAE,2CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CAACnH,KAAK,4CAK7B9M,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,4BAETG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,gCACNA,EAAE,8BACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CACbnH,KAAK,kBACLC,UAAWxN,EAAE,sBAKrBG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuU,GAAc,CACbnH,KAAK,wBACLC,UAAWxN,EAAE,+BAUjC,KCxLeF,qBAAkB4C,aArCQ3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC/FU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,oBACLhG,UAAYyR,EAAO25D,kBAAqB,0BAA4B,eACpEr5D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,oBAAoBiM,UAAU,OAAOjS,UAAU,wBAEpEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gDAAgDE,SAAA,CACnEC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,0BACLhG,UAAYyR,EAAO45D,wBAA2B,0BAA4B,eAC1Et5D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,0BAA0BiM,UAAU,OAAOjS,UAAU,2BAG5EF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCsGIF,qBAAkB4C,aAnIjC,SAAqC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACzD,MAAMmpE,EAAiBlpE,EAAE,8BACnBmP,EAAYnP,EAAE,wCACd0qE,EAAgB,eAGpB3oE,QAASkJ,EACTjJ,MAAOkJ,EACPjJ,KAAMkJ,GACJ1H,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,0CAIXznE,QAAS4pE,EACT3pE,MAAO4pE,EACP3pE,KAAMy8B,GACJj7B,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,oCAILW,GAAmBz3D,YAAYu2D,IAMvC,GAJApwE,QAAQC,IAAI,2BACZD,QAAQC,IAAIqS,GACZtS,QAAQC,IAAI4lC,GAERzzB,GAAe0gE,EACjB,OACExrE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAI+J,GAAa0gE,EACf,OACEzrE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI6rE,EAAS,GACT1gE,EAAS2+D,eAAe5gE,MAAM3J,SAChCssE,EAAS1gE,EAAS2+D,eAAe5gE,MAAM,GAAGG,KAAK/G,OAGjD,IAAIwpE,EAAW,GAKf,OAJIptC,EAAQorC,eAAe5gE,MAAM3J,SAC/BusE,EAAWptC,EAAQorC,eAAe5gE,MAAM,GAAGG,KAAK/G,OAIhDnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACb84D,wBAAyBG,EACzBJ,kBAAmBK,GAGrB/4D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ,MAAMu4D,EAAW,CACf,CAAEb,QAAS,sCAAuClnE,MAAO0Q,EAAO04D,yBAChE,CAAElC,QAAS,gCAAiClnE,MAAO0Q,EAAOy4D,oBAG5D,IAAK,IAAI3/D,KAAKu+D,EACZxxE,QAAQC,IAAIgT,GAEZq+D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC4rE,GAAgC,CAC/Bl6D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACoB,KAK3C,KCrGehS,qBAAkB4C,aA9BK3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC5FU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uCAAuCE,SAAA,CAC1DC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,iBACLhG,UAAYyR,EAAOk6D,eAAkB,0BAA4B,eACjE55D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,iBAAiBiM,UAAU,OAAOjS,UAAU,0BAGrEF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCPIF,qBAAkB4C,aArBjC,SAA+C3C,GAAuC,IAAtC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,aAAEyoE,GAAclsE,EACjF,OAAIksE,EACK,GAIPxrE,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CACnBC,cAACwG,IAAOulE,GAAE,CAAAhsE,SAAEF,EAAE,sDACdG,cAAA,KAAAD,SACGF,EAAE,wDAELG,cAAA,KAAGiE,KAAK,kDAAkDmB,OAAO,SAASC,IAAI,aAAYtF,SACxFO,eAACoE,IAAM,CAACG,MAAM,UAAUsS,cAAc,SAAQpX,SAAA,CAC3CF,EAAE,yCAAyC,IAACG,cAACiG,IAAI,CAACC,KAAK,yBAKlE,KC2FevG,qBAAkB4C,aAxGjC,SAAkC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtD,MAAMmpE,EAAiBlpE,EAAE,8BACnBmP,EAAYnP,EAAE,qCACd0qE,EAAgB,eAEhB,QAAE3oE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASulE,GAA2B,CACnE39D,UAAW,CACTm+D,QAAS,iCAGLW,GAAmBz3D,YAAYu2D,IAKvC,GAHApwE,QAAQC,IAAI,2BACZD,QAAQC,IAAImJ,GAERF,EACF,OACE5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAIisE,EAAe,GAKnB,OAJIhqE,EAAK6nE,eAAe5gE,MAAM3J,SAC5B0sE,EAAehqE,EAAK6nE,eAAe5gE,MAAM,GAAGG,KAAK/G,OAIjDnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EACfvB,YAAahpE,cAACgsE,GAAsC,CAACF,aAAcA,IAAiB/rE,SAEtFC,cAACwS,KAAM,CACLC,cAAe,CACbo5D,eAAgBC,GAGlBl5D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZq4D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAAS,6BACTlnE,MAAO0Q,EAAOg5D,iBAEf34D,eAAgB,CACf,CAACC,MAAO01D,GAA+B39D,UAAW,CAChDm+D,QAAS,kCAGdj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACisE,GAA6B,CAC5Bv6D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACiB,KAKxC,KCtHO,MAAMu6D,GAA4BxyE,GAAI;;;;;;;;;;;;;;;;;;;;EAsBhCyyE,GAA2BzyE,GAAI;;;;;;;;;;EAY/B0yE,GAAqB1yE,GAAI;;;;;;;;EAUzB2yE,GAAwB3yE,GAAI;;;;;;;;EAU5B4yE,GAAwB5yE,GAAI;;;;;;ECb1BiG,qBAAkB4C,aA5BjC,SAAuC3C,GAA4C,IAA3C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAOnV,EAC9E,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,uBAAuBE,SAC1EC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,mCAEtBnG,cAACmN,GAAoB,CAACvD,WAAW,MACXC,SAAS,sBAAqB9J,SAClDC,cAACgV,GAAS,CAACH,OAAO,6CAK1B7U,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAMd,KCTcJ,qBAAkB4C,aAtBjC,SAAwC3C,GAAoB,IAAnB,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,GAAKtJ,EACvD,MAAQ2sE,GAAwBh6D,YAAY+5D,IAE5C,OAAOtsE,cAACi8B,GAAY,CAClB5kB,WAAYxX,EAAE,oDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKhD,OACzBqR,WAAY1X,EAAE,gDACd+Y,eAAgB2zD,EAChB3wC,wBAAyB,CACrB1wB,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,KAGb1C,eAAgB,CACd,CAAEC,MAAO+4D,OAInB,KCsFevsE,qBAAkB4C,aA/FjC,SAAmC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAChD,MAAMoP,EAAYnP,EAAE,wCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS4oE,IAGrD,GAAItqE,EAAS,OACX5B,cAACwsE,GAA8B,CAAAzsE,SAC7BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwsE,GAA8B,CAAAzsE,SAC7BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,qDAKZ,MAAM4sE,EAAiB3qE,EAAK4qE,qBAG5B,OAAKD,EAAe1jE,MAAM3J,OAWxBY,cAACwsE,GAA8B,CAAAzsE,SAC7BC,cAACyN,GAAW,CAACuB,UAAWA,EACVI,aAAa,EACbb,SAAUk+D,EAAel+D,SACzBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOq8D,EAAel+D,SAAS8B,WAEjCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBm8D,2BAA2B5jE,MACtDwF,EAAWiC,EAAgBm8D,2BAA2Bp+D,SAE5D,OAAOkC,EAASrR,OACZ,CAGEutE,2BAA4B,CAC1Bj8D,WAAYH,EAAeo8D,2BAA2Bj8D,WACtD3H,MAAO,IAAKwH,EAAeo8D,2BAA2B5jE,SAAU0H,GAChElC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qDACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN0sE,EAAe1jE,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACjCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK0jE,iBADQtgE,gBAGhBhM,eAACqQ,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAA,CAC/BC,cAAC8xC,GAAU,CAAClB,QAAU,uCAAsC1nC,EAAK0M,OACjE5V,cAAC6sE,GAA+B,CAAC3jE,KAAMA,MAFFoD,kBAPzBA,eAWJ,aA1DxBtM,cAACwsE,GAA8B,CAAAzsE,SAC7BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SACGF,EAAE,iDA8Db,KC5GO,MAAMitE,GAAwB57D,OAAaC,MAAM,CACpDjL,KAAMgL,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2I,YAAa0I,OACVK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdktE,UAAW77D,OACRK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd+sE,gBAAiB17D,OACdK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBC+DDF,qBAAkB4C,aA/DD3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,cAAEwK,EAAa,gBAAED,EAAe,UAAEjX,GAAWvG,EAAA,OACtHU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOzL,KAAQ,0BAA4B,eACvD+L,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mDAAmDE,SAAA,CACtEC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,kBACLhG,UAAYyR,EAAOi7D,gBAAmB,0BAA4B,eAClE36D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,6BAIpEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAOo7D,UAAa,0BAA4B,eAC5D96D,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,wBAE5DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,2BAGlEI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACPG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAEHG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAChBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,2BAIV,KCEEF,qBAAkB4C,aAxDjC,SAAqC3C,GAAgB,IAAf,EAACC,EAAC,QAAEwD,GAAQzD,EAChD,MAAMuG,EAAY,kCACV6mE,GAAqBz6D,YAAY65D,IAEzC,OACCpsE,cAACwsE,GAA8B,CAACz3D,UAAU,EAAKhV,SAC9CO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,+CAEjBG,cAACwS,KAAM,CACHC,cAAe,CAAEvM,KAAM,GAAIsC,YAAa,GAAIukE,UAAW,GAAIH,gBAAiB,IAC5Ej6D,iBAAkBm6D,GAClBl6D,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCghE,EAAiB,CAAE9hE,UAAW,CAC5B6H,MAAO,CACL7M,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBukE,UAAWl6D,EAAOk6D,UAClBH,gBAAiB/5D,EAAO+5D,kBAEzB15D,eAAgB,CACf,CAACC,MAAO+4D,OAEX94D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAExK,EAAM,OAAElB,GAAQlF,EAAA,OAChEzM,cAACitE,GAA6B,CAC5Bv7D,aAAcA,EACdmB,OAAQA,EACRlB,OAAQA,EACRyL,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,QAMd,KCoCexG,qBAAkB4C,aAzFjC,SAAsC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACxD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBzP,EAAY,iCACZ6I,EAAYnP,EAAE,6CACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS6oE,GAA0B,CAClEjhE,UAAW,CAAE0K,GAAIA,MAEXs3D,GAAwB36D,YAAY85D,IAE5C,GAAIzqE,EAAS,OACX5B,cAACwsE,GAA8B,CAACz3D,UAAU,EAAKhV,SAC7CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAACwsE,GAA8B,CAACz3D,UAAU,EAAKhV,SAC7CC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,kCAKZ,MAAMqW,EAAcpU,EAAKqrE,oBAIzB,OAHAz0E,QAAQC,IAAI,cACZD,QAAQC,IAAImJ,GAGV9B,cAACwsE,GAA8B,CAACz3D,UAAU,EAAKhV,SAC7CC,cAAC8G,IAAI,CAACV,MAAO4I,EAAUjP,SACrBC,cAACwS,KAAM,CACHC,cAAe,CACbvM,KAAMgQ,EAAYhQ,KAClBsC,YAAa0N,EAAY1N,YACzBukE,UAAW72D,EAAY62D,UACvBH,gBAAiB12D,EAAY02D,iBAE/Bj6D,iBAAkBm6D,GAClBl6D,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZq6D,EAAoB,CAAEhiE,UAAW,CAC/B6H,MAAO,CACL6C,GAAIxS,EAAMmK,OAAOqI,GACjB1P,KAAM2M,EAAO3M,KACbsC,YAAaqK,EAAOrK,YACpBukE,UAAWl6D,EAAOk6D,UAClBH,gBAAiB/5D,EAAO+5D,kBAEzB15D,eAAgB,CACf,CAACC,MAAO+4D,OAEX94D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAKiE,GACbkN,IAAMC,QAASzT,EAAE,oDAAsD,CACnE0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,gBAAE0L,EAAe,cAAEC,EAAa,OAAExK,EAAM,OAAElB,GAAQlF,EAAA,OAChEzM,cAACitE,GAA6B,CAC5Bv7D,aAAcA,EACdmB,OAAQA,EACRlB,OAAQA,EACRyL,gBAAiBA,EACjBC,cAAeA,EACflX,UAAWA,GACX,OAMhB,KCxGO,MAAMinE,GAA0B1zE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;EA4B9B2zE,GAA8B3zE,GAAI;;;;;;;;EAUlC4zE,GAA8B5zE,GAAI;;;;;;ECChCiG,qBAAkB4C,aA5BjC,SAAsC3C,GAA4C,IAA3C,EAAEC,EAAC,QAAEwD,EAAO,SAAEtD,EAAQ,SAAEgV,GAAS,GAAOnV,EAC7E,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,kBAAmBwG,SAAUxG,EAAE,uBAAuBE,SAC1EC,cAAA,OAAKE,UAAU,sBAAqBH,SAChCgV,EACA/U,cAACyG,GAAU,CAACN,UAAU,iCACtB,OAQNnG,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAMd,KCScJ,qBAAkB4C,aAjCjC,SAA+C3C,GAA+C,IAA9C,EAACC,EAAC,MAAEuD,EAAK,KAAE8F,EAAI,UAAEiC,EAAS,eAAEoiE,GAAe3tE,EACzF,MAAO4tE,GAA8Bj7D,YAAY+6D,IAE/C,OACEttE,cAAA,UAAQE,UAAU,sCAChBkG,MAAOvG,EAAE,kBACToE,KAAK,GACLsL,QAASA,KACPoJ,GAAe,CACb9Y,EAAGA,EACHwX,WAAYxX,EAAE,kDACdyX,eAAgBtX,cAAA,KAAAD,SAAImJ,EAAKoa,WACzB/L,WAAY1X,EAAE,8CACd+Y,eAAgB40D,EAChB/1D,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACLsQ,QAASlY,EACTsiE,mBAAoBF,IAGxBr6D,eAAgB,CACd,CAAEC,MAAOi6D,OAGb,EACJrtE,SACAC,cAAA,QAAME,UAAU,WAAUH,SAACC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAG1D,KC2FevG,qBAAkB4C,aAnHjC,SAAkC3C,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EAC/C,MAAMoP,EAAYnP,EAAE,sCACd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS8pE,IAGrD,GAAIxrE,EAAS,OACX5B,cAAC0tE,GAA6B,CAAA3tE,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMtB,GAAIa,EAAO,OACT7B,cAAC0tE,GAA6B,CAAA3tE,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SAAIF,EAAE,mDAKZ,MAAM8tE,EAAgB7rE,EAAK8rE,oBAG3B,OAAKD,EAAc5kE,MAAM3J,QAUzB1G,QAAQC,IAAIg1E,GAGV3tE,cAAC0tE,GAA6B,CAAA3tE,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EACVI,aAAa,EACbb,SAAUo/D,EAAcp/D,SACxBG,WAAYA,KACZoB,EAAU,CACR5E,UAAW,CACTkF,MAAOu9D,EAAcp/D,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBo9D,oBAAoB7kE,MAC/CwF,EAAWiC,EAAgBo9D,oBAAoBr/D,SAErD,OAAOkC,EAASrR,OACZ,CAGEwuE,oBAAqB,CACnBl9D,WAAYH,EAAeq9D,oBAAoBl9D,WAC/C3H,MAAO,IAAKwH,EAAeq9D,oBAAoB7kE,SAAU0H,GACzDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACZO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAC1Q,UAAU,aAAYH,SAAEF,EAAE,4CAF7ByM,kBAKlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACN4tE,EAAc5kE,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,MADQoG,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CACzBmJ,EAAKgzB,SAASnzB,MAAMgD,KAAIU,IAAA,IAAGvD,KAAM2kE,GAAaphE,EAAA,OAG7CnM,cAFA,CAEA,OAAAP,SAAA,CACEC,cAAA,OAAKE,UAAU,cAAaH,SAC1BC,cAAC8tE,GAA2C,CAC1C5kE,KAAM2kE,EACNN,eAAgBrkE,EAAK0M,GACrBzK,UAAW0iE,EAAYj4D,OAG1Bi4D,EAAYvqD,SAAStjB,cAAA,SACtBA,cAAA,QAAME,UAAU,aAAYH,SAAE8tE,EAAY5kD,UACtC,IAERjpB,cAACyE,IAAI,CAACrC,GAAK,4CAA2C8G,EAAK0M,KAAK7V,SAC9DC,cAAC0E,IAAM,CACLG,MAAM,OACNxC,KAAK,cAAatC,SACfF,EAAE,sDAzBCyM,eA8BJ,cA9ExBtM,cAAC0tE,GAA6B,CAAA3tE,SAC5BC,cAACyN,GAAW,CAACuB,UAAWA,EAAUjP,SAChCC,cAAA,KAAAD,SACGF,EAAE,+CAkFb,KClFeF,qBAAkB4C,aArCjC,SAAiD3C,GAAqC,IAApC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAE8H,GAAWvL,EAChF,MAAM2tE,EAAiBnqE,EAAMmK,OAAOqI,IAC5Bm4D,GAA8Bx7D,YAAY86D,IAElD,OACE/sE,eAACoE,IAAM,CACLG,MAAM,YACN0K,QAAUA,IACRw+D,EAA0B,CAAE7iE,UAAW,CACrC6H,MAAO,CACL06D,mBAAoBF,EACpBlqD,QAASlY,IAEX+H,eAAgB,CACd,CAACC,MAAOi6D,OAEXh6D,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACbtT,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAM,gCACdmR,IAAMC,QAASzT,EAAE,iDAAmD,CAClE0T,SAAUF,IAAMG,SAASC,cACzB,IACDC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAG5D9B,SAAA,CAEFC,cAACiG,IAAI,CAACC,KAAK,gBAAgB,IAAErG,EAAE,iDAGrC,KC5BA,SAASk+C,GAA6BhH,GACpC,IAAInvC,EAAY,CACdrD,gBAAYlF,EACZmF,cAAUnF,EACV03C,gBAAY13C,GAOd,OAJI03C,IACFnvC,EAAUmvC,WAAaA,GAGlBnvC,CACT,CA8IejI,qBAAkB4C,aA3IjC,SAAuB3C,GAQlB,IARmB,EACtBC,EAAC,MACDuD,EAAK,2BACLw8C,EAA2B,GAAE,kBAC7BouB,EAAkB,GAAE,qBACpBC,EAAqB,GAAE,mBACvBnuB,EAAmB,GAAE,UACrBC,GACAngD,EACA,MAAOu3D,EAAmBC,GAAwBjiD,oBAAS,IACnDkiD,GAAa,OAAEj3B,EAAM,QAAEx+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,EAAO,UAAEtF,IAAgB2wB,aAAcwW,IAW5F,SAASmJ,IACP,OAAOpgD,cAAC0gB,GAAW,CACjBxgB,UAAU,OACV4gB,gBAAiB8+B,EACjBn+B,YAAausD,EACbp0D,SAAWzX,IACT7D,aAAaC,QAAQqhD,EAA4Bz9C,GAC7CA,IAAUi+B,GACZg3B,GAAqB,GACrBC,EAAY,CAAEnsD,UAAW6yC,GAA6B57C,MAC7CA,GAGTi1D,GAAqB,GACrBhiD,EAAQ2oC,GAA6B57C,KAErCi1D,GAAqB,EACvB,GAGN,CAEA,OAAKD,EAID/2B,GAAUx+B,EACZtB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BAA0BE,SAClDC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,SAKhCo/B,GAAUv+B,EACZvB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACPpgD,cAACspB,IAAK,CAACjlB,KAAK,SAAQtE,SAAEF,EAAE,iCAIxBugC,IAAWt+B,EAAKo6B,SAASnzB,MAAM3J,OACjCkB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACP9/C,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CACnBC,cAAA,UAAAD,SAASF,EAAE,sCAA6C,IAAE,MACzDA,EAAE,2CAMPS,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAACogD,EAAM,IACLhgB,GAAUt+B,EACZ9B,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,0BACd0O,SAAUzM,EAAKo6B,SAAS3tB,SACxBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACXkF,MAAOtO,EAAKo6B,SAAS3tB,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0rB,SAASnzB,MACpCwF,EAAWiC,EAAgB0rB,SAAS3tB,SAE1C,OAAOkC,EAASrR,OACZ,CAGEk4D,kBAAmB,CACjBp7B,SAAU,CACRxrB,WAAYH,EAAe2rB,SAASxrB,WACpC3H,MAAO,IAAKwH,EAAe2rB,SAASnzB,SAAU0H,GAC9ClC,cAINgC,CAAc,GAEpB,EACFxQ,SACVO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,MAHFtE,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+B,EAAKo6B,SAASnzB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKoa,UADQhX,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+f,OADQ3c,gBAGhBtM,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACNkuE,EAAqB1W,SAASruD,EAAK0M,IACnC5V,cAAA,QAAME,UAAU,aAAYH,SAAE+/C,IAC9B9/C,cAAA,QAAME,UAAU,aAAYH,UAjHlBoL,EAiHuCjC,EAAK0M,GA/G/D,uCADAmqC,EAEI//C,cAACkuE,GAAwC,CAAC/iE,UAAWA,IAErD,iCAyGiBmB,kBAPFA,gBAvG5B,IAA4BnB,CAoHJ,WAKlB,MAzFGnL,cAACogD,EAAM,GA4FlB,KClJezgD,qBAAkB4C,aAhBjC,SAA4C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAEhE,OACEI,cAAC0tE,GAA6B,CAAC34D,UAAU,EAAKhV,SAC5CC,cAACmuE,GAAc,CACbvuB,2BAA2B,GAC3BouB,kBAAmBnuE,EAAE,0DACrBouE,qBAAsB,CAAC,GACvBnuB,mBAAmB,oBACnBC,UAAU,wCAIlB,KCaepgD,qBAAkB4C,aArBjC,SAAkC3C,GAAqC,IAApC,EAAEC,EAAC,SAAEE,EAAQ,eAAEgpE,EAAe,IAAGnpE,EAClE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBAAqBwG,SAAW,GAAExG,EAAE,0BAA0BkpE,IAAiBhpE,SACnGC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACipE,GAAY,QAGjBjpE,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACdA,YAOf,KC9BO,MAAMquE,GAAkC10E,GAAI;;;;;;;;;;;;;;;;;;;;;;EAwBtC20E,GAAiC30E,GAAI;;;;;;;;;;;;EAcrC40E,GAA+B50E,GAAI;;;;;;;;;;;;;;ECyDjCiG,qBAAkB4C,aA/EjC,SAA4B3C,GAAwB,IAAvB,EAAEC,EAAC,MAAEuD,EAAK,OAAEmK,GAAQ3N,EAC/C,MAAMwG,EAAQvG,EAAE,kCACV,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS8qE,IAErD,GAAIxsE,EAAS,OACX5B,cAACuuE,GAAyB,CAACnoE,MAAOA,EAAMrG,SACrCF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAACuuE,GAAyB,CAACnoE,MAAOA,EAAMrG,SACrCF,EAAE,2CAIP,MAAM2uE,EAAgB1sE,EAAK2sE,oBAI3B,OACEzuE,cAACuuE,GAAyB,CAACnoE,MAAOA,EAAMrG,SACtCC,cAACyN,GAAW,CACVuB,UAAWnP,EAAE,iCAEb0O,SAAUigE,EAAcjgE,SACxBa,aAAa,EACbV,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOo+D,EAAcjgE,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBi+D,oBAAoB1lE,MAC/CwF,EAAWiC,EAAgBi+D,oBAAoBlgE,SAErD,OAAOkC,EAASrR,OACZ,CAGEqvE,oBAAqB,CACnB/9D,WAAYH,EAAek+D,oBAAoB/9D,WAC/C3H,MAAO,IAAKwH,EAAek+D,oBAAoB1lE,SAAU0H,GACzDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kCACpBG,cAAC2Q,IAAMC,UAAS,MAFFtE,kBAKdtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACNyuE,EAAczlE,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAChCjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKhD,OAERlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACRC,cAACyE,IAAI,CAACrC,GAAI,iCAAmC8G,EAAK0M,GAAG7V,SACnDC,cAAC0E,IAAM,CAACxE,UAAU,oBACV2E,MAAM,YAAW9E,SACtBF,EAAE,wBARKyM,eAYJ,YAOhC,KCjCe3M,qBAAkB4C,aAhDjC,SAAkC3C,GAA4C,IAA3C,EAAEC,EAAC,SAAEE,EAAQ,eAAEgpE,EAAc,KAAE2F,EAAK,CAAC,GAAG9uE,EACzE,OACEI,cAAC2K,GAAW,CAAA5K,SACVC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,oBAAqBwG,SAAW,GAAExG,EAAE,0BAA0BkpE,IAAiBhpE,SACnGC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACipE,GAAY,CAAC9iE,UAAU,iCAG5B7F,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACbA,IAEHO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mBAAmBE,SAChCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP2uE,EAAKC,YAGV3uE,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iBAAiBE,SAC9BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP2uE,EAAKtoE,UAGVpG,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP2uE,EAAKlmE,gBAGVxI,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,mBAAmBE,SAChCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP2uE,EAAKriE,YAGVrM,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,oBAAoBE,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACP2uE,EAAKE,yBASxB,KC2CejvE,qBAAkB4C,aArFjC,SAAqC3C,GAAsG,IAArG,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,EAAa,UAAElX,EAAS,UAAE6I,GAAWpP,EAGtI,OACEI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACV,MAAO4I,EAAUjP,SAAA,CACrBO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,UACLhG,UAAYyR,EAAOg9D,QAAW,0BAA4B,eAC1D18D,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACN6B,KAAK,QACLhG,UAAYyR,EAAOvL,MAAS,0BAA4B,eACxD6L,aAAa,QACnBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uBAAuBE,SAAA,CAC1CC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,cACbxG,aAAchO,EAAOrK,YACrBxP,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,cAAeiH,EAAElf,OAAOmiB,cACtCnK,EAAgB,eAAe,GAAM,EAAK,IAG9Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,UACbxG,aAAchO,EAAOxG,QACrBrT,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,UAAWiH,EAAElf,OAAOmiB,cAClCnK,EAAgB,WAAW,GAAM,EAAK,IAG1Cpd,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACmnB,KAAM,CACLC,iBAAiB,mCACjBC,aAAa,WACbxG,aAAchO,EAAO+7D,SACrB51E,KAAM6tB,GACNhN,OAASyK,IACPjH,EAAc,WAAYiH,EAAElf,OAAOmiB,cACnCnK,EAAgB,YAAY,GAAM,EAAK,IAG3Cpd,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,2BAG7DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLxE,UAAU,aACV2E,MAAM,UACNuN,SAAUV,EACVrN,KAAK,SAAQtE,SAEZF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CACLL,KAAK,SACLQ,MAAM,OAAM9E,SAEXF,EAAE,6BAOnB,KCgCeF,qBAAkB4C,aAjHjC,SAAiC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACrD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAElBmzD,EAAiBlpE,EAAE,iCACnBmP,EAAYnP,EAAE,uCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+qE,GAAgC,CACxEnjE,UAAW,CACT0K,GAAIA,MAGAo0D,GAAmBz3D,YAAY+7D,IAKvC,GAHA51E,QAAQC,IAAI,2BACZD,QAAQC,IAAImJ,GAERF,EACF,OACE5B,cAAC6uE,GAA4B,CACzB9F,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAAC6uE,GAA4B,CACzB9F,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,MAAMivE,EC7DD,SAAyBjvE,EAAGkvE,GACjC,IAAI//D,EACAggE,EAGJ,OAAOD,GACL,IAAK,kBACH//D,EAAYnP,EAAE,iDACdmvE,EAAY,CACVL,QAAS9uE,EAAE,wDACXuG,MAAOvG,EAAE,sDACT2I,YAAa3I,EAAE,2DAA4D,CACzEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,uDAAwD,CACjEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,0DAEd,MACF,IAAK,kBACHmP,EAAYnP,EAAE,iDACdmvE,EAAY,CACVL,QAAS9uE,EAAE,wDACXuG,MAAOvG,EAAE,sDACT2I,YAAa3I,EAAE,2DAA4D,CACzEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,uDAAwD,CACjEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,0DAEd,MACF,IAAK,iBACHmP,EAAYnP,EAAE,gDACdmvE,EAAY,CACVL,QAAS9uE,EAAE,uDACXuG,MAAOvG,EAAE,qDACT2I,YAAa3I,EAAE,0DAA2D,CACxEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,sDAAuD,CAChEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,yDAEd,MACF,IAAK,2BACHmP,EAAYnP,EAAE,0DACdmvE,EAAY,CACVL,QAAS9uE,EAAE,iEACXuG,MAAOvG,EAAE,+DACT2I,YAAa3I,EAAE,oEAAqE,CAClFtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,gEAAiE,CAC1EtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,mEAEd,MACF,IAAK,gBACHmP,EAAYnP,EAAE,+CACdmvE,EAAY,CACVL,QAAS9uE,EAAE,sDACXuG,MAAOvG,EAAE,oDACT2I,YAAa3I,EAAE,yDAA0D,CACvEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,qDAAsD,CAC/DtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,wDAEd,MACF,IAAK,qBACHmP,EAAYnP,EAAE,oDACdmvE,EAAY,CACVL,QAAS9uE,EAAE,2DACXuG,MAAOvG,EAAE,yDACT2I,YAAa3I,EAAE,8DAA+D,CAC5EtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzC5iE,QAASxM,EAAE,0DAA2D,CACpEtG,cAAe,CAAEsc,OAAQ,KAAMo5D,OAAQ,QAEzCL,SAAU/uE,EAAE,6DAEd,MACF,QACEmP,EAAYnP,EAAE,2CACdmvE,EAAY,CACVL,QAAS9uE,EAAE,kDACXuG,MAAOvG,EAAE,gDACT2I,YAAa3I,EAAE,sDACfwM,QAASxM,EAAE,kDACX+uE,SAAU/uE,EAAE,oDAKlB,MAAO,CACL,UAAamP,EACb,UAAaggE,EAEjB,CD7CuBE,CAAgBrvE,EAAGiC,EAAKqtE,mBAAmBjpE,MAKhE,OAJAxN,QAAQC,IAAImJ,EAAKqtE,mBAAmBjpE,MACpCxN,QAAQC,IAAIm2E,GAIV9uE,cAAC6uE,GAA4B,CAC3B9F,eAAgBA,EAChB2F,KAAMI,EAAaE,UAAUjvE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACbk8D,QAAS7sE,EAAKqtE,mBAAmBR,QACjCvoE,MAAOtE,EAAKqtE,mBAAmB/oE,MAC/BoC,YAAa1G,EAAKqtE,mBAAmB3mE,YACrC6D,QAASvK,EAAKqtE,mBAAmB9iE,QACjCuiE,SAAU9sE,EAAKqtE,mBAAmBP,UAGpCh8D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZq4D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACL6C,GAAIA,EACJ+4D,QAAS97D,EAAO87D,QAChBvoE,MAAOyM,EAAOzM,MACdoC,YAAaqK,EAAOrK,YACpB6D,QAASwG,EAAOxG,QAChBuiE,SAAU/7D,EAAO+7D,WAElB17D,eAAgB,CACf,CAACC,MAAOi7D,OAEXh7D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,mDAAqD,CAClE0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACovE,GAA4B,CAC3B19D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,EACfrO,UAAW8/D,EAAa9/D,UACxB7I,UApGU,2BAoGWpG,SAEpBrH,QAAQC,IAAIgZ,IACgB,KAKvC,KEnFehS,qBAAkB4C,aAjCM3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC7FU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kDAAkDE,SAAA,CACrEO,eAAC0R,KAAK,CAACG,UAAU,SACfjM,KAAK,uCACLhG,UAAYyR,EAAO09D,qCAAwC,0BAA4B,eACvFp9D,aAAa,MAAKlS,SAAA,CAChBC,cAAA,UAAQmC,MAAM,UAASpC,SAAEF,EAAE,oDAC3BG,cAAA,UAAQmC,MAAM,UAASpC,SAAEF,EAAE,uDAE/BG,cAACkS,KAAY,CAAChM,KAAK,uCAAuCiM,UAAU,OAAOjS,UAAU,0BAG3FF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCiFIF,qBAAkB4C,aA1GjC,SAAmC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACvD,MAAMmpE,EAAiBlpE,EAAE,uBACnBmP,EAAYnP,EAAE,yCAEd,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASulE,GAA2B,CACnE39D,UAAW,CACTm+D,QAAS,2CAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAIlnE,EACF,OACE5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClB48D,qCAAsC,IAMxC,OAJIvtE,EAAK6nE,eAAe5gE,MAAM3J,SAC5BqT,EAAoD,qCAAI3Q,EAAK6nE,eAAe5gE,MAAM,GAAGG,KAAK/G,OAI1FnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACb48D,qCAAsC58D,EAAoD,sCAG5FG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChC,MAAMk+D,EAAW,CACf,CAAEb,QAAS,uCACTlnE,MAAO0Q,EAAOw8D,uCAGlB,IAAK,IAAI1jE,KAAKu+D,EAEZxxE,QAAQC,IAAIgT,GACZjT,QAAQC,IAAIuxE,EAASv+D,GAAG09D,SACxB3wE,QAAQC,IAAIuxE,EAASv+D,GAAGxJ,OAExB6nE,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACsvE,GAA8B,CAC7B59D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACkB,KAKzC,KCvHO,MAAM49D,GAAuBr+D,OAAaC,MAAM,CACnDzO,cAAewO,OACfvO,YAAauO,OACbtO,QAASsO,OACTrO,OAAQqO,SCyFGvR,qBAAkB4C,aAnFA3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACvFU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CAaRO,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,gBACL0lB,QAAS/Y,EAAOnQ,gBAChB1C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,8BAEnDG,cAACkS,KAAY,CAAChM,KAAK,gBAAgBiM,UAAU,WAE/C7R,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,cACL0lB,QAAS/Y,EAAOlQ,cAChB3C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,4BAEnDG,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,WAE7C7R,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,UACL0lB,QAAS/Y,EAAOjQ,UAChB5C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,wBAEnDG,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,WAEzC7R,eAACuR,IAAKC,MAAK,CAAA/R,SAAA,CACTO,eAACuR,IAAK8Z,MAAK,CAACzrB,UAAU,gBAAeH,SAAA,CACjCC,cAACgS,KAAK,CACN9R,UAAU,sBACVmE,KAAK,WACL6B,KAAK,SACL0lB,QAAS/Y,EAAOhQ,SAChB7C,cAAA,QAAME,UAAU,4BAChBF,cAAA,QAAME,UAAU,4BAA2BH,SAAEF,EAAE,uBAEnDG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,cAG1CnS,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCqBIF,qBAAkB4C,aA7FjC,SAA6B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACjD,MAAMmpE,EAAiBlpE,EAAE,gCACnBmP,EAAYnP,EAAE,gCACd0qE,EAAgB,WAEhB,QAAE3oE,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS7B,KAClCuoE,GAAmBz3D,YAAY7Q,IAEvC,GAAIE,EACF,OACE5B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIa,EACF,OACE7B,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAC/BC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,MAAMkC,EAAeD,EAAKE,kBAE1B,OACEhC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EACXu7D,cAAeA,EAAcxqE,SAE/BC,cAACwS,KAAM,CACLC,cAAe,CACb+8D,YAAaztE,EAAaytE,YAC1B9sE,cAAeX,EAAaW,cAC5BC,YAAaZ,EAAaY,YAC1BC,QAASb,EAAaa,QACtBC,OAAQd,EAAac,QAEvB8P,iBAAkB48D,GAClB38D,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCg+D,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLy8D,YAAa38D,EAAO28D,YACpB9sE,cAAemQ,EAAOnQ,cACtBC,YAAakQ,EAAOlQ,YACpBC,QAASiQ,EAAOjQ,QAChBC,OAAQgQ,EAAOhQ,SAEhBqQ,eAAgB,CACf,CAACC,MAAO1R,OAEX2R,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX8G,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACyvE,GAAwB,CACvB/9D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACY,KAKnC,KC1DehS,qBAAkB4C,aArCQ3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OAC/FU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qDAAqDE,SAAA,CACxEC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,mCACLhG,UAAYyR,EAAO+9D,iCAAoC,0BAA4B,eACnFz9D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,mCAAmCiM,UAAU,OAAOjS,UAAU,wBAEnFI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gDAAgDE,SAAA,CACnEC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,8BACLhG,UAAYyR,EAAOg+D,4BAA+B,0BAA4B,eAC9E19D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,8BAA8BiM,UAAU,OAAOjS,UAAU,2BAGlFF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCwFIF,qBAAkB4C,aAvHjC,SAAqC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACzD,MAAMmpE,EAAiBlpE,EAAE,2BACnBmP,EAAYnP,EAAE,0CAGlB+B,QAASguE,EACT/tE,MAAOguE,EACP/tE,KAAMguE,GACJxsE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,uCAIXznE,QAASmuE,EACTluE,MAAOmuE,EACPluE,KAAMmuE,GACJ3sE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,kCAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAK8G,GAAwBG,EAC3B,OACE/vE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAK6uE,GAAqBG,EACxB,OACEhwE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClBi9D,iCAAkC,KAClCC,4BAA6B,KAS/B,OAPIG,EAAgBnG,eAAe5gE,MAAM3J,SACvCqT,EAAgD,iCAAIq9D,EAAgBnG,eAAe5gE,MAAM,GAAGG,KAAK/G,OAE/F8tE,EAAgBtG,eAAe5gE,MAAM3J,SACvCqT,EAA2C,4BAAIw9D,EAAgBtG,eAAe5gE,MAAM,GAAGG,KAAK/G,OAI5FnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACbi9D,iCAAkCj9D,EAAgD,iCAClFk9D,4BAA6Bl9D,EAA2C,6BAG1EG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChC,MAAMk+D,EAAW,CACf,CAAEb,QAAS,mCAAoClnE,MAAO0Q,EAAO68D,kCAC7D,CAAErG,QAAS,8BAA+BlnE,MAAO0Q,EAAO88D,8BAG1D,IAAK,IAAIhkE,KAAKu+D,EACZF,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACkwE,GAAgC,CAC/Bx+D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACoB,KAK3C,KCxFehS,qBAAkB4C,aAjCA3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACvFU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sDAAsDE,SAAA,CACzEO,eAAC0R,KAAK,CAACG,UAAU,SACfjM,KAAK,4CACLhG,UAAYyR,EAAOw+D,0CAA6C,0BAA4B,eAC5Fl+D,aAAa,MAAKlS,SAAA,CAChBC,cAAA,UAAQmC,MAAM,SAAQpC,SAAEF,EAAE,oCAC1BG,cAAA,UAAQmC,MAAM,cAAapC,SAAEF,EAAE,6CAEnCG,cAACkS,KAAY,CAAChM,KAAK,4CAA4CiM,UAAU,OAAOjS,UAAU,0BAGhGF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KCqFIF,qBAAkB4C,aA9GjC,SAA6B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACjD,MAAMmpE,EAAiBlpE,EAAE,2BACnBmP,EAAYnP,EAAE,iCAGlB+B,QAASwuE,EACTvuE,MAAOwuE,EACPvuE,KAAMwuE,GACJhtE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,gDAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAIsH,EACF,OACEpwE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAIqvE,EACF,OACErwE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClB09D,0CAA2C,IAM7C,OAJIG,EAAwB3G,eAAe5gE,MAAM3J,SAC/CqT,EAAyD,0CAAI69D,EAAwB3G,eAAe5gE,MAAM,GAAGG,KAAK/G,OAIlHnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACb09D,0CAA2C19D,EAAyD,2CAGtGG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChC,MAAMk+D,EAAW,CACf,CAAEb,QAAS,4CACTlnE,MAAO0Q,EAAOs9D,4CAGlB,IAAK,IAAIxkE,KAAKu+D,EAEZxxE,QAAQC,IAAIgT,GACZjT,QAAQC,IAAIuxE,EAASv+D,GAAG09D,SACxB3wE,QAAQC,IAAIuxE,EAASv+D,GAAGxJ,OAExB6nE,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACuwE,GAAwB,CACvB7+D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACY,KAKnC,KCzEehS,qBAAkB4C,aArCc3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACrGU,eAACsR,KAAM,CAAA7R,SAAA,CACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8DAA8DE,SAAA,CACjFC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,oDACLhG,UAAYyR,EAAO6+D,kDAAqD,0BAA4B,eACpGv+D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,oDAAoDiM,UAAU,OAAOjS,UAAU,wBAEpGI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4DAA4DE,SAAA,CAC/EC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,kDACLhG,UAAYyR,EAAO8+D,gDAAmD,0BAA4B,eAClGx+D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,kDAAkDiM,UAAU,OAAOjS,UAAU,2BAGtGF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KC+FIF,qBAAkB4C,aA9HjC,SAA2C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC/D,MAAMmpE,EAAiBlpE,EAAE,2BACnBmP,EAAYnP,EAAE,gDAGlB+B,QAAS8uE,EACT7uE,MAAO8uE,EACP7uE,KAAM8uE,GACJttE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,wDAIXznE,QAASivE,EACThvE,MAAOivE,EACPhvE,KAAMivE,GACJztE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,sDAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAK4H,GAAwBG,EAC3B,OACE7wE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAK2vE,GAAqBG,EACxB,OACE9wE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClB+9D,kDAAmD,IACnDC,gDAAiD,KAUnD,OAPIG,EAAgBjH,eAAe5gE,MAAM3J,SACvCqT,EAAiE,kDAAIm+D,EAAgBjH,eAAe5gE,MAAM,GAAGG,KAAK/G,OAEhH4uE,EAAcpH,eAAe5gE,MAAM3J,SACrCqT,EAA+D,gDAAIs+D,EAAcpH,eAAe5gE,MAAM,GAAGG,KAAK/G,OAI9GnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACb+9D,kDAAmD/9D,EAAiE,kDACpHg+D,gDAAiDh+D,EAA+D,iDAGlHG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ,MAAMu4D,EAAW,CACf,CAAEb,QAAS,oDACTlnE,MAAO0Q,EAAO29D,mDAChB,CAAEnH,QAAS,kDACTlnE,MAAO0Q,EAAO49D,kDAGlB,IAAK,IAAI9kE,KAAKu+D,EACZF,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACgxE,GAAsC,CACrCt/D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IAC0B,KAKjD,KChGehS,qBAAkB4C,aA9BC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,GAAWvG,EAAA,OACxFU,eAACsR,KAAM,CAAA7R,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4CAA4CE,SAAA,CAC/DC,cAACgS,KAAK,CAAC3N,KAAK,OACV6B,KAAK,4BACLhG,UAAYyR,EAAOs/D,0BAA6B,0BAA4B,eAC5Eh/D,aAAa,QACfjS,cAACkS,KAAY,CAAChM,KAAK,4BAA4BiM,UAAU,OAAOjS,UAAU,0BAGhFF,cAAC8G,IAAKwI,OAAM,CAAAvP,SACRC,cAAC0E,IAAM,CACLG,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,wBAUJ,KC0FIF,qBAAkB4C,aAjHjC,SAAqC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACzD,MAAMmpE,EAAiBlpE,EAAE,2BACnBmP,EAAYnP,EAAE,0CAGlB+B,QAASsvE,EACTrvE,MAAOsvE,EACPrvE,KAAMsvE,GACJ9tE,YAASulE,GAA2B,CACtC39D,UAAW,CACTm+D,QAAS,gCAGLW,GAAmBz3D,YAAYu2D,IAEvC,GAAIoI,EACF,OACElxE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EACRC,QAAQ,QAMxB,GAAImwE,EACF,OACEnxE,cAACypE,GAAY,CACTV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,sCAMX,IAAI4S,EAAgB,CAClBw+D,0BAA2B,KAM7B,OAJIG,EAAoBzH,eAAe5gE,MAAM3J,SAC3CqT,EAAyC,0BAAI2+D,EAAoBzH,eAAe5gE,MAAM,GAAGG,KAAK/G,OAI9FnC,cAACypE,GAAY,CACXV,eAAgBA,EAChB/5D,UAAWA,EAAUjP,SAEvBC,cAACwS,KAAM,CACLC,cAAe,CACbw+D,0BAA2Bx+D,EAAyC,2BAGtEG,SAAUA,CAACC,EAAM7G,EAAqB2F,KAAY,IAA/B,cAAEmB,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GACZna,QAAQC,IAAIgZ,GAEZ,MAAMu4D,EAAW,CACf,CAAEb,QAAS,4BAA6BlnE,MAAO0Q,EAAOo+D,4BAGxD,IAAK,IAAItlE,KAAKu+D,EAEZxxE,QAAQC,IAAIgT,GACZjT,QAAQC,IAAIuxE,EAASv+D,GAAG09D,SACxB3wE,QAAQC,IAAIuxE,EAASv+D,GAAGxJ,OAExB6nE,EAAe,CAAE9+D,UAAW,CAC1B6H,MAAO,CACLs2D,QAASa,EAASv+D,GAAG09D,QACrBlnE,MAAO+nE,EAASv+D,GAAGxJ,QAEpB+Q,eAAgB,CACf,CAACC,MAAO01D,GAA2B39D,UAAW,CAAEm+D,QAASa,EAASv+D,GAAG09D,aAExEj2D,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAE1B,EACF/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAACqxE,GAAyB,CACxB3/D,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EAAO9S,SAEdrH,QAAQC,IAAIgZ,IACa,KAKpC,KCzGehS,qBAAkB4C,aAbjC,SAA4B3C,GAAgD,IAA/C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,SAAEsG,EAAS,IAAIzG,EACvE,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAUA,IACrDtG,QAKZ,KCKeJ,qBAAkB4C,aAdjC,SAA8B3C,GAA2B,IAA1B,EAAEC,EAAC,KAAEuN,EAAI,WAAE0H,GAAYlV,EACpD,OACEI,cAACyE,IAAI,CAACrC,GAAIgL,EAAKrN,SACbO,eAACoE,IAAM,CACLC,SAAO,EACP2I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEd+U,EAAW,IAAC9U,cAACiG,IAAI,CAACC,KAAK,sBAIhC,KC+JevG,qBAAkB4C,aAtKjC,SAAwB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC1C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4G,IAQ1C,GALA5L,aAAaO,WAAWL,EAAKd,gCAE7BY,aAAaO,WAAWL,EAAKb,2BAGzBiE,EAAS,OACX5B,cAACsxE,GAAmB,CAAAvxE,SAClBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACsxE,GAAmB,CAAAvxE,SACjBF,EAAE,0CAIP,MAAMyE,EAAOxC,EAAKwC,KAElB,OACEhE,eAACgxE,GAAmB,CAACjrE,SAAU/B,EAAKgf,SAASvjB,SAAA,CACzCuE,EAAKC,YAAcD,EAAKE,SACxBlE,eAAA,OAAAP,SAAA,CACEC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,gBACNA,EAAE,iCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,gBAAgB0H,WAAYjV,EAAE,qCAKlEG,cAAA,YAEA,GAEJM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,gCACNA,EAAE,oCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,wBAAwB0H,WAAYjV,EAAE,uCAIxEG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,8BAA8B0H,WAAYjV,EAAE,uCAI9EG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,oCACNA,EAAE,wCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,4BAA4B0H,WAAYjV,EAAE,uCAI5EG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,8BAA8B0H,WAAYjV,EAAE,0CAKhFG,cAAA,SAEAM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,gCACNA,EAAE,oCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,wBAAwB0H,WAAYjV,EAAE,+CAIxEG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qCACNA,EAAE,yCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,6BAA6B0H,WAAYjV,EAAE,oDAI7EG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,+BACNA,EAAE,mCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,uBAAuB0H,WAAYjV,EAAE,uCAIvEG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iCACNA,EAAE,qCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,yBAAyB0H,WAAYjV,EAAE,uCAIzEG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,sCACNA,EAAE,0CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CACpBnkE,KAAK,8BACL0H,WAAYjV,EAAE,yCAKtBG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,wCACNA,EAAE,4CACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,yBAAyB0H,WAAYjV,EAAE,kDAIzEG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,iCACNA,EAAE,qCACHG,cAAA,SAAMA,cAAA,SACNA,cAACuxE,GAAqB,CAACnkE,KAAK,gBAAgB0H,WAAYjV,EAAE,gDAOxE,KC/KO,SAAS2xE,GAAgB5xE,GAO5B,IAP6B,EAC/BC,EAAC,UACDw/C,EAAS,UACToyB,EAAS,WACT14D,EAAU,WACVnO,EAAU,YACV8mE,GACD9xE,EACG,OACEU,eAAAwrB,WAAA,CAAA/rB,SAAA,CACEC,cAAA,MAAAD,SAAK0xE,EAAUhqE,sBAAsBvB,OACrClG,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAGkF,IAAOi0C,GAAWh0C,OAAO0N,GAAa,IAAG,IACjEzY,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBqL,IAAOi0C,EAAY,IAAMoyB,EAAU5kE,WAAWxB,OAAOT,GACpD8mE,GAAgBpxE,eAAAwrB,WAAA,CAAA/rB,SAAA,CAAI,MAAQqL,IAAOi0C,EAAY,IAAMoyB,EAAU3kE,SAASzB,OAAOT,SAC5E5K,cAAA,SACPA,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAGurE,EAAU7kE,yBAAyBjF,qBAAqBzB,KAAM,IAAG,IACxFlG,cAAA,QAAME,UAAU,aAAYH,SACxB0xE,EAAU7kE,yBAAyB1G,SAa/C,CClCO,MAAMyrE,GAA0Bj4E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECmC5BiG,qBAAkB4C,aAvBjC,SAAmC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EACjF,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CACVJ,MAAOvG,EAAE,sBACTwG,SAAWurE,EAAa7xE,SAExBC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCO,eAACmE,IAAI,CAACrC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,uBAI9CE,QAKd,KC2GeJ,qBAAkB4C,aAvHjC,SAA+B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACjD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBgnE,EAAezuE,EAAMmK,OAAOukE,cAC5BplE,EAAiBtJ,EAAMmK,OAAOgxC,SAC9B/xC,EAAOpJ,EAAMmK,OAAOf,MAClB5K,QAASmwE,EAAmBlwE,MAAOmwE,EAAiBlwE,KAAMmwE,GAAmB3uE,YAASquE,GAAyB,CACrHzmE,UAAW,CACT0K,GAAIi8D,EACJnlE,eAAgBA,EAChBF,KAAMA,GAERlB,YAAa,kBAEP1J,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACrEgoE,GAAgC3/D,YAAYorC,IAEnD,GAAI7yC,GAAeinE,EAAmB,OACpC/xE,cAACmyE,GAA0B,CAAApyE,SACzBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAI+J,GAAainE,EAAiB,OAChChyE,cAACmyE,GAA0B,CAAApyE,SACxBF,EAAE,gDAIP,MAAMyE,EAAO0G,EAAS1G,KACtB5L,QAAQC,IAAIqS,GACZtS,QAAQC,IAAIs5E,GACZ,MAAM3lB,EAAyB2lB,EAAe3lB,uBAG9C,MAA6C,cAAzCA,EAAuB7N,cAEvBz+C,cAACmyE,GAA0B,CAACP,YAAattE,EAAKgf,SAASvjB,SACrDC,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,MAAAD,SAAKF,EAAE,uDAQZysD,EAAuB8lB,qBAc1BpyE,cAACmyE,GAA0B,CAACP,YAAattE,EAAKgf,SAASvjB,SACrDC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CAERC,cAAA,MAAAD,SACGF,EAAE,qDAELG,cAACwxE,GAAgB,CACf3xE,EAAGA,EACHw/C,UAAW7yC,EACXilE,UAAWQ,EAAe3lB,uBAAuBxO,aACjD/kC,WAAYA,EACZnO,WAAYA,IAEd5K,cAAA,SACAA,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC0E,IAAM,CACL4I,OAAK,EACLpN,UAAU,OACV2E,MAAM,UACND,KAAK,KACL2K,QAASA,IACP2iE,EAA6B,CAAEhnE,UAAW,CACxC6H,MAAO,CACL6C,GAAIi8D,EACJpzB,cAAe,gBAGlBrrC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAK,yBACbmR,IAAMC,QAASzT,EAAE,qCAAuC,CACpD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE7D9B,SAEFF,EAAE,sDAvDbG,cAACmyE,GAA0B,CAACP,YAAattE,EAAKgf,SAASvjB,SACrDC,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,MAAAD,SAAKF,EAAE,6DA+DnB,KC1IO,MAAM8xE,GAA0Bj4E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECiC5BiG,qBAAkB4C,aAvBjC,SAAqC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EACnF,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CACVJ,MAAOvG,EAAE,sBACTwG,SAAWurE,EAAa7xE,SAExBC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCO,eAACmE,IAAI,CAACrC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,uBAI9CE,QAKd,KC8GeJ,qBAAkB4C,aAvHjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBgnE,EAAezuE,EAAMmK,OAAOukE,cAC5BplE,EAAiBtJ,EAAMmK,OAAOgxC,SAC9B/xC,EAAOpJ,EAAMmK,OAAOf,MAClB5K,QAASmwE,EAAmBlwE,MAAOmwE,EAAiBlwE,KAAMmwE,GAAmB3uE,YAASquE,GAAyB,CACrHzmE,UAAW,CACT0K,GAAIi8D,EACJnlE,eAAgBA,EAChBF,KAAMA,GAERlB,YAAa,kBAEP1J,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACrEgoE,GAAgC3/D,YAAYorC,IAEnD,GAAI7yC,GAAeinE,EAAmB,OACpC/xE,cAACqyE,GAA4B,CAAAtyE,SAC3BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAI+J,GAAainE,EAAiB,OAChChyE,cAACqyE,GAA4B,CAAAtyE,SAC1BF,EAAE,gDAIP,MAAMyE,EAAO0G,EAAS1G,KACtB5L,QAAQC,IAAIqS,GACZtS,QAAQC,IAAIs5E,GACZ,MAAM3lB,EAAyB2lB,EAAe3lB,uBAG9C,MAA6C,cAAzCA,EAAuB7N,cAEvBz+C,cAACqyE,GAA4B,CAACT,YAAattE,EAAKgf,SAASvjB,SACvDC,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,MAAAD,SAAKF,EAAE,qDAQZysD,EAAuBgmB,uBAc1BtyE,cAACqyE,GAA4B,CAACT,YAAattE,EAAKgf,SAASvjB,SACvDC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CAERC,cAAA,MAAAD,SACGF,EAAE,uDAELG,cAACwxE,GAAgB,CACf3xE,EAAGA,EACHw/C,UAAW7yC,EACXilE,UAAWQ,EAAe3lB,uBAAuBxO,aACjD/kC,WAAYA,EACZnO,WAAYA,IAEd5K,cAAA,SACAA,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACoE,IAAM,CACL4I,OAAK,EACLpN,UAAU,OACV2E,MAAM,UACND,KAAK,KACL2K,QAASA,IACP2iE,EAA6B,CAAEhnE,UAAW,CACxC6H,MAAO,CACL6C,GAAIi8D,EACJpzB,cAAe,aAGlBrrC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuB,EAAQnB,KAAK,yBACbmR,IAAMC,QAASzT,EAAE,uCAAyC,CACtD0T,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE7D9B,SAAA,CAEFF,EAAE,2CAA2C,IAACG,cAACiG,IAAI,CAACC,KAAK,gCAvDpElG,cAACqyE,GAA4B,CAACT,YAAattE,EAAKgf,SAASvjB,SACvDC,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,MAAAD,SAAKF,EAAE,iEA+DnB,KC5IO,MAAM49C,GAA2B/jD,GAAI;;;;;;;;;;;;;;;;;;;EC+D7BiG,qBAAkB4C,aAlDjC,SAA8B3C,GAA6C,IAA5C,EAAEC,EAAC,eAAE6M,EAAc,KAAEF,EAAI,SAAE+lE,GAAS,GAAK3yE,EACtE,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,kBAEzB,QAAEjJ,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASm6C,GAA0B,CAClEvyC,UAAW,CACTwB,eAAgBA,EAChBF,KAAMA,KAIV,OAAI5K,EACF5B,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,IAE5Ba,EACAhC,EAAE,2CAGNnH,QAAQC,IAAImJ,GAGRF,GAAYC,EAuBV,GAtBFvB,eAAA,OAAKJ,UAAU,aAAYH,SAAA,CACzBO,eAAA,MAAAP,SAAA,CAAIC,cAACiG,IAAI,CAACC,KAAK,SAAS,IACTrG,EAAZ0yE,EAAc,gDACA,kDAGjBvyE,cAACwxE,GAAgB,CACf3xE,EAAGA,EACHw/C,UAAW7yC,EACXilE,UAAW3vE,EAAKm2D,cAChBl/C,WAAYA,EACZnO,WAAYA,IAEd5K,cAAA,SACE8B,EAAKm2D,cAAcpF,gBACnBvyD,eAAA,OAAAP,SAAA,CACEO,eAAA,MAAAP,SAAA,CAAIC,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAErG,EAAE,yCAC5BG,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAStK,EAAKm2D,cAAcpF,uBAE9E,MAKZ,KCxBelzD,qBAAkB4C,aAvBjC,SAAiC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC/E,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CACVJ,MAAOvG,EAAE,sBACTwG,SAAWurE,EAAa7xE,SAExBC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCO,eAACmE,IAAI,CAACrC,GAAI,wBACJlC,UAAU,oBAAmBH,SAAA,CACjCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,eAAe,IAAErG,EAAE,uBAI9CE,QAKd,KCeeJ,qBAAkB4C,aAnCjC,SAA6B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC/C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4G,IACpCwC,EAAiBtJ,EAAMmK,OAAOgxC,SAC9B/xC,EAAOpJ,EAAMmK,OAAOf,KAE1B,GAAI5K,EAAS,OACX5B,cAACwyE,GAAwB,CAAAzyE,SACvBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACwyE,GAAwB,CAAAzyE,SACtBF,EAAE,gDAIP,MAAMyE,EAAOxC,EAAKwC,KAGlB,OACEtE,cAACwyE,GAAwB,CAACZ,YAAattE,EAAKgf,SAASvjB,SACnDC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,iCAAiCE,SAC9CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACyyE,GAAqB,CACpB/lE,eAAgBA,EAChBF,KAAMA,EACN+lE,UAAU,SAMtB,KC7CO,MAAMG,GAA4Bh5E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECS9BiG,sBAPf,SAAwBC,GAAoC,IAAnC,EAAEC,EAAC,UAAEsG,EAAU,iBAAiBvG,EAEvD,OACEI,cAACyG,GAAU,CAACN,UAAWA,GAE3B,ICmBexG,qBAAkB4C,aAjBjC,SAA+B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC7E,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACjEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGpB5yE,QAKZ,KC0GeJ,qBAAkB4C,aA/GjC,SAA+B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACjD,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACvBnX,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASovE,GAA2B,CAC9EznE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,iBAIf,GAAI1J,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC4yE,GAA0B,CAAA7yE,SACzBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC4yE,GAA0B,CAAA7yE,SACxBF,EAAE,iDAIP,MAAMyE,EAAOxC,EAAKwC,KACZ3B,EAAcb,EAAKmgC,mBAGzB,OAAKt/B,EAAYoG,MAAM3J,OAkBrBY,cAAC4yE,GAA0B,CAAChB,YAAattE,EAAKgf,SAASvjB,SACrDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,kCACxBuP,aAAa,EACbb,SAAU5L,EAAY4L,SACtBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOzN,EAAY4L,SAAS8B,WAE9BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgByxB,mBAAmBl5B,MAC9CwF,EAAWiC,EAAgByxB,mBAAmB1zB,SAEpD,OAAOkC,EAASrR,OACZ,CAGE6iC,mBAAoB,CAClBvxB,WAAYH,EAAe0xB,mBAAmBvxB,WAC9C3H,MAAO,IAAKwH,EAAe0xB,mBAAmBl5B,SAAU0H,GACxDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SACFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,sBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,iCAJNyM,kBAOlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR4C,EAAYoG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKg5B,sBAAsBh8B,OAE9BlG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKkW,WAAW/T,OAAO0N,KAEjC/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,KAE/B/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAK+uC,4BAXM3rC,eAaJ,iBArExBtM,cAAC4yE,GAA0B,CAAChB,YAAattE,EAAKgf,SAASvjB,SACrDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,kCAAkCE,SACnDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,gDAyEnB,KCrGeF,qBAAkB4C,aAjBjC,SAA+B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC7E,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACjEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGpB5yE,QAKZ,KC0GeJ,qBAAkB4C,aA5GjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MACMmZ,EADcvV,qBAAWvC,GACA8X,YACvBnX,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAAS2kD,GAA0C,CAC7Fh9C,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,iBAGf,GAAI1J,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC6yE,GAAsB,CAAA9yE,SACrBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC6yE,GAAsB,CAAA9yE,SACpBF,EAAE,mDAIP,MAAMyE,EAAO0G,EAAS1G,KAChBwuE,EAAehxE,EAAKwmD,4BAG1B,OAAKwqB,EAAa/pE,MAAM3J,OAkBtBY,cAAC6yE,GAAsB,CAACjB,YAAattE,EAAKgf,SAASvjB,SACjDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAACyN,GAAW,CAACuB,UAAWnP,EAAE,oCACxBuP,aAAa,EACbb,SAAUukE,EAAavkE,SACvBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO0iE,EAAavkE,SAAS8B,WAE/BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB83C,4BAA4Bv/C,MACvDwF,EAAWiC,EAAgB83C,4BAA4B/5C,SAE7D,OAAOkC,EAASrR,OACZ,CAGE0zE,aAAc,CACZpiE,WAAYH,EAAe+3C,4BAA4B53C,WACvD3H,MAAO,IAAKwH,EAAe+3C,4BAA4Bv/C,SAAU0H,GACjElC,aAGJgC,CAAc,GAEpB,EACFxQ,SACFO,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,oBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,wBAHNyM,kBAMlBtM,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR+yE,EAAa/pE,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC/BjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKq/C,oBAAoBC,cAActiD,KAAK,IAAClG,cAAA,SAC9CA,cAACkI,IAAK,CAAAnI,SAAEmJ,EAAKq/C,oBAAoBriD,OAAa,IAAE,IAC9CgD,EAAKu/C,UAAazoD,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,uBAAgC,MAEhFG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPqL,IAAOlC,EAAKq/C,oBAAoBC,cAAcppC,WAAW/T,OAAO0N,KAEnE/Y,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPmJ,EAAKq/C,oBAAoBC,cAAc7gD,qBAAqBzB,SAVjDoG,eAYJ,iBAnExBtM,cAAC6yE,GAAsB,CAACjB,YAAattE,EAAKgf,SAASvjB,SACjDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,oCAAoCE,SACrDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kDAuEnB,KC/HO,MAAMwiB,GAAoB3oB,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsFxBq5E,GAAsBr5E,GAAI;;;;;;;;EC1DxBiG,qBAAkB4C,aAjBjC,SAAsC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EACpF,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,CAACxsE,UAAU,+BAG7BpG,QAKd,KCoGeJ,qBAAkB4C,aA/GjC,SAAkC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACpD,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBo9D,EAAwBnzE,EAAE,sCAE1BozE,EAAYh1D,iBAAO,MACnBi1D,EAAiB5yE,eAAA,QAAAP,SAAA,CAAMC,cAACiG,IAAI,CAACC,KAAK,gBAAgB,IAAErG,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,sBACrGitE,EAAUC,GAAcj+D,mBAAS+9D,IAGhCtxE,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+e,GAAmB,CAC3DpX,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACT0K,GAAIA,GAENtK,YAAa,kBAGR+nE,GAAqB9gE,YAAYwgE,IAoBxC,GAAInxE,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAACszE,GAA6B,CAAAvzE,SAC5BC,cAAC8G,IAAI,CAACV,MAAO4sE,EAAsBjzE,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAKtC,GAAIa,GAASkJ,EAAW,OACtB/K,cAACszE,GAA6B,CAAAvzE,SAC5BC,cAAC8G,IAAI,CAACV,MAAO4sE,EAAsBjzE,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,yDAMXnH,QAAQC,IAAI,kBACZD,QAAQC,IAAImJ,GACZ,MAAMwC,EAAO0G,EAAS1G,KAChBivE,EAAUzxE,EAAKoiB,eAGrB,OACElkB,cAACszE,GAA6B,CAAC1B,YAAattE,EAAKgf,SAASvjB,SACxDO,eAACwG,IAAI,CAACV,MAAO9F,eAAA,QAAAP,SAAA,CAAOF,EAAE,mBAAmB,KAAG0zE,EAAQtwD,iBAAsBljB,SAAA,CACxEO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNwzE,EAAQtxE,MAAM8G,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACjCjM,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACbmJ,EAAKkb,YAAY,IAACpkB,cAAA,SACnBA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKV,iBAGVxI,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAA,QAAME,UAAU,cAAaH,SAC1BmJ,EAAKua,mBAGD,IAGbnjB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,OAAMH,SAAA,CAC/BC,cAAA,SACCH,EAAE,oBAELG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAAA,QAAMJ,UAAU,mBAAkBH,SAAA,CAChCC,cAAA,SACCuzE,EAAQ9vD,wBAKjBzjB,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAAA,UACEE,UAAU,8BACVwd,IAAKu1D,EACL1jE,QAhFV,WACE0jE,EAAUt0D,QAAQ60D,aAAa,WAAY,YAC3CJ,EAAWvzE,EAAE,sCAIbwzE,EAAkB,CAAEnoE,UAAW,CAAE0K,GAAIA,KAAQxC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACzDtT,QAAQC,IAAI,WAAYmJ,GACxB,MAAM2xE,EAAc3xE,EAAK4xE,gCAAgCC,0BAA0BF,YACnFtlE,OAAOqN,SAASvX,KAAOwvE,CAAW,IACjC//D,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE9D,EAgEgC9B,SAErBozE,UAMb,KCtGexzE,qBAAkB4C,aAbjC,SAA4C3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC1F,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,IACtD7xE,QAKd,KC8FeJ,qBAAkB4C,aAhGjC,SAAwC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC1D,MAAMgW,EAAKxS,EAAMmK,OAAOqI,GAClBo9D,EAAwBnzE,EAAE,uCAGxB+B,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+e,GAAmB,CAC3DpX,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACT0K,GAAIA,KAIR,GAAIhU,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC4zE,GAAmC,CAAA7zE,SAClCC,cAAC8G,IAAI,CAACV,MAAO4sE,EAAsBjzE,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,UAKtC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC4zE,GAAmC,CAAA7zE,SAClCC,cAAC8G,IAAI,CAACV,MAAO4sE,EAAsBjzE,SACjCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,gEAMX,MAAMyE,EAAO0G,EAAS1G,KAChBivE,EAAUzxE,EAAKoiB,eAErB,IAAI2vD,EAYJ,OAVEA,EADqB,SAAnBN,EAAQlrE,OACFrI,cAACspB,IAAK,CAACjlB,KAAK,UAAUhC,KAAK,QAAOtC,SACvCF,EAAE,0DAGGG,cAACspB,IAAK,CAACjlB,KAAK,UAAUhC,KAAK,cAAatC,SAC7CF,EAAE,+DAMLS,eAACszE,GAAmC,CAAChC,YAAattE,EAAKgf,SAASvjB,SAAA,CAC7D8zE,EACDvzE,eAACwG,IAAI,CAACV,MAAO9F,eAAA,QAAAP,SAAA,CAAOF,EAAE,mBAAmB,KAAG0zE,EAAQtwD,iBAAsBljB,SAAA,CACxEO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNwzE,EAAQtxE,MAAM8G,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjC1L,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SAAA,CACbmJ,EAAKkb,YAAY,IAACpkB,cAAA,SACnBA,cAAA,SAAOE,UAAU,aAAYH,SAC1BmJ,EAAKV,iBAGVxI,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAA,QAAME,UAAU,cAAaH,SAC1BmJ,EAAKua,mBAGD,IAGbnjB,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,EAAGxG,UAAU,OAAMH,SAAA,CAC/BC,cAAA,SACCH,EAAE,oBAELG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdO,eAAA,QAAMJ,UAAU,mBAAkBH,SAAA,CAChCC,cAAA,SACCuzE,EAAQ9vD,wBAKjBzjB,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAACyE,IAAI,CAACrC,GAAG,yBAAwBrC,SAC/BO,eAACoE,IAAM,CACLG,MAAM,UACN3E,UAAU,cAAaH,SAAA,CAEtBF,EAAE,kDAAkD,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAO/E,KC/GO,MAAM4tE,GAAyBp6E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC0B3BiG,qBAAkB4C,aAjBjC,SAAgC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC9E,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGlB5yE,QAKd,KC0KeJ,qBAAkB4C,aA1KjC,SAA4B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC9C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBg7D,EAA0B1hD,EAAY0hD,yBAGpCnyE,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASwwE,GAAwB,CAC3E7oE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,kBAERkL,GAAkBjE,YAAY5Y,GAErC,GAAIiI,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAACg0E,GAAuB,CAAAj0E,SACtBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAACg0E,GAAuB,CAAAj0E,SACrBF,EAAE,8CAIPnH,QAAQC,IAAI,kBACZD,QAAQC,IAAImJ,GACZ,MAAMwC,EAAO0G,EAAS1G,KAChBue,EAAW/gB,EAAK+hB,gBAGtB,OAAKhB,EAAS9Z,MAAM3J,OAkBlBY,cAACg0E,GAAuB,CAACpC,YAAattE,EAAKgf,SAASvjB,SAClDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfO,eAAC8kD,GACC,CACA72C,SAAUsU,EAAStU,SACnBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAOyS,EAAStU,SAAS8B,WAE3BC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBqT,gBAAgB9a,MAC3CwF,EAAWiC,EAAgBqT,gBAAgBtV,SAEjD,OAAOkC,EAASrR,OACZ,CAGEykB,gBAAiB,CACfnT,WAAYH,EAAesT,gBAAgBnT,WAC3C3H,MAAO,IAAKwH,EAAesT,gBAAgB9a,SAAU0H,GACrDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAAA,CAEFC,cAAA,MAAAD,SAAKF,EAAE,iCACPG,cAACI,IAAKC,IAAG,CAAAN,SACN8iB,EAAS9Z,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3BvM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACwG,IAAI,CAAA/G,SAAA,CACHO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAACyE,IAAI,CAACrC,GAAK,yBAAwB8G,EAAK0M,KAAK7V,SAC3CC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEmJ,EAAK+Z,kBAEpBjjB,cAAC8G,IAAKyO,QAAO,CAAAxV,SACXC,cAACmiB,GAAqB,CAAC9Z,OAAQa,EAAKb,cAGtCa,EAAK8Z,UACL1iB,eAACwG,IAAKwiB,MAAK,CAACzkB,MAAM,UAAS9E,SAAA,CACxBF,EAAE,sCAAsC,KAAEG,cAAA,KAAAD,SAAImJ,EAAK8Z,SAAS9c,UAGjElG,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,QAAME,UAAU,YAAWH,SACxBmJ,EAAKgQ,YAGRlZ,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVO,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACTO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOlC,EAAKqa,UAAUlY,OAAO0N,QAE3CzY,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0BACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOlC,EAAKsa,SAASnY,OAAO0N,QAE1CzY,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEmJ,EAAKua,kBAEnBnjB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAACC,cAAA,KAAAD,SAAIF,EAAE,wCACvBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAAA,KAAAD,SAAImJ,EAAKwa,2BAI5BpjB,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACS,SAAhBmJ,EAAKb,QAAqC,YAAhBa,EAAKb,SAAyB0rE,EASvD,GARF/zE,cAACyE,IAAI,CAACrC,GAAI,iCAAmC8G,EAAK0M,GAAG7V,SACnDO,eAACoE,IAAM,CACLxE,UAAU,cACV2E,MAAM,UAAS9E,SAAA,CAEdF,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAKzDlG,cAAC0E,IAAM,CACLC,SAAO,EACPE,MAAM,UACNxC,KAAK,UACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAAU,yBAAwB6F,EAAK0M,MAC1D7V,SAEDF,EAAE,iBAELG,cAACyE,IAAI,CAACrC,GAAK,yBAAwB8G,EAAK0M,KAAK7V,SAC3CC,cAAC0E,IAAM,CACLC,SAAO,EACPE,MAAM,UACNxC,KAAK,YACLnC,UAAU,OAAMH,SAEfF,EAAE,8BAKF,eA5HrBG,cAACg0E,GAAuB,CAACpC,YAAattE,EAAKgf,SAASvjB,SAClDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,+BAA+BE,SAChDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,6CA+HnB,KC/LO,MAAMo0E,GAAwBv6E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC2B1BiG,qBAAkB4C,aAlBjC,SAA+B3C,GAAyE,IAAxE,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,qBAAE87B,EAAoB,YAAE+1C,EAAY,IAAIhyE,EACnG,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC2yE,GAAe,CAACxsE,UAAU,2BAC1B01B,OAGH97B,QAKd,KC6HeJ,qBAAkB4C,aAjIjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBg7D,EAA0B1hD,EAAY0hD,wBAEtCzlD,EAAYlrB,EAAMmK,OAAOqI,IAGzB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS2wE,GAAuB,CAC/D/oE,UAAW,CACT0K,GAAI0Y,GAENhjB,YAAa,iBAIf,GAAI1J,EAAS,OACX5B,cAACk0E,GAAsB,CAAAn0E,SACrBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACk0E,GAAsB,CAAAn0E,SACpBF,EAAE,6CAIP,MAAMyE,EAAOxC,EAAKwC,KACZivE,EAAUzxE,EAAKoiB,eAEf2X,EAA4C,SAAnB03C,EAAQlrE,QAAwC,YAAnBkrE,EAAQlrE,SAAyB0rE,EASzF,GARF/zE,cAACyE,IAAI,CAACrC,GAAI,iCAAmCmxE,EAAQ39D,GAAG7V,SACtDO,eAACoE,IAAM,CACLxE,UAAU,mBACV2E,MAAM,UAAS9E,SAAA,CAEdF,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAMzD,OACElG,cAACk0E,GAAsB,CAACtC,YAAattE,EAAKgf,SAAUuY,qBAAsBA,EAAqB97B,SAC7FC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,OAAKE,UAAU,cAAaH,SAC1BC,cAACmiB,GAAqB,CAAC9Z,OAAQkrE,EAAQlrE,WAEzC/H,eAAA,MAAAP,SAAA,CAAKF,EAAE,8BAA8B,IAAE0zE,EAAQtwD,iBAC7CswD,EAAQvwD,UACN1iB,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CAClBF,EAAE,sCAAsC,KAAEG,cAAA,KAAAD,SAAIwzE,EAAQvwD,SAAS9c,UAGtE5F,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPwzE,EAAQr6D,UAEXlZ,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVO,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACTO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOmoE,EAAQhwD,UAAUlY,OAAO0N,KAC5C/Y,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,0BACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEqL,IAAOmoE,EAAQ/vD,SAASnY,OAAO0N,QAE7CzY,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,mBACpBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEwzE,EAAQ9vD,eACpBzjB,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAACC,cAAA,KAAAD,SAAIF,EAAE,wCACvBG,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAAA,KAAAD,SAAIwzE,EAAQ7vD,8BAK/B1jB,cAAA,MAAAD,SAAKF,EAAE,mBACN0zE,EAAQtxE,MAAM8G,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAChChM,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAAA,CAC9BC,cAAA,MAAAD,SAAKmJ,EAAKkb,cACTlb,EAAKV,eAERxI,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC5Bo0E,WAAWjrE,EAAKqb,UAAY,EAAQjkB,eAAA,OAAAP,SAAA,CACpCO,eAAA,KAAAP,SAAA,CAAImJ,EAAKqb,SAAS,IAAE1kB,EAAE,+BAA+B,OAAKG,cAAA,SACzDkJ,EAAK+rB,aAAa,IAAEp1B,EAAE,mBAChB,KAEXG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,KAAAD,SAAImJ,EAAKua,eAAiBzjB,cAAA,oBAK7B,IAEPuzE,EAAQppD,SAASphB,MAAM3J,OACvBkB,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAAA,MAAAD,SAAKF,EAAE,sBACN0zE,EAAQppD,SAASphB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACrCvM,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAAA,CAC9BC,cAAA,MAAAD,SAAKqL,IAAOlC,EAAKsD,MAAMnB,OAAO0N,KAC7B7P,EAAKyf,sBAAwBzf,EAAKyf,qBAAqBziB,QAE1DlG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,KAAAD,SAAImJ,EAAK+gB,gBAAkBjqB,cAAA,oBAK9B,OAGT,SAKZ,KCnJO,MAAMo0E,GAA+B16E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAwCnC26E,GAA4C36E,GAAI;;;;;;ECd9CiG,qBAAkB4C,aAjBjC,SAAoC3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAClF,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACjEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGpB5yE,QAKZ,KCgEeJ,qBAAkB4C,aAzEjC,SAAmC3C,GAA6C,IAA5C,EAAEC,EAAC,YAAEy0E,EAAW,QAAEC,EAAO,OAAExzE,GAAO,GAAOnB,GACtE8R,EAAcoB,GAAiBqC,oBAAS,GAC7C,MAAQq/D,GAA6BjiE,YAAY8hE,IAEjD,SAASI,EAA2B7H,GAClC95D,GAAc,GAEd0hE,EAAyB,CAAEtpE,UAAW,CACpC6H,MAAO,CACL65D,gBAAiBA,IAElB15D,eAAgB,CACjB,CAACC,MAAOihE,OAEThhE,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QAASzT,EAAE,uEAAyE,CACxF0T,SAAUF,IAAMG,SAASC,eAE3BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GAExB,CAEF,OACE9S,cAAC8iC,IAAW,CAAA/iC,SACVO,eAACwiC,IAAYG,QAAO,CAAAljC,SAAA,CAClBO,eAAA,OAAAP,SAAA,CACAC,cAAA,QAAME,UAAU,cAAaH,SAC3Bu0E,EAAYI,WAAc10E,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAC,eAAqB,KAExEC,cAAA,MAAAD,SAAKu0E,EAAYpuE,UAGjBlG,cAAA,MAAAD,SAAKu0E,EAAYvH,YACjB/sE,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASkoE,EAAY9rE,gBAErE8rE,EAAYI,WACR10E,cAAC0E,IAAM,CACLG,MAAM,YACNyI,OAAK,EACL3I,SAAO,EACPyN,SAAUV,EACVnC,QAASA,IAAMklE,EAA2BH,EAAY1H,iBAAiB7sE,SAGrEF,EADC6R,EACC,2CACA,4CAGN1R,cAAC0E,IAAM,CACLG,MAAM,UACNyI,OAAK,EACL3I,SAAO,EACPyN,SAAUV,EACVnC,QAASA,IAAMklE,EAA2BH,EAAY1H,iBAAiB7sE,SAGrEF,EADC6R,EACC,yCACA,8CAOpB,KCVe/R,qBAAkB4C,aA/DjC,SAAgC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClD,MAAQgC,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS8wE,GAA8B,CACtEnpE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,QAInE,GAAIvJ,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC20E,GAA2B,CAAA50E,SAC1BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC20E,GAA2B,CAAA50E,SACzBF,EAAE,mDAIP,MAAMyE,EAAOxC,EAAKwC,KACZswE,EAAe9yE,EAAK4qE,qBAG1B,OAAKkI,EAAa7rE,MAAM3J,OAkBtBkB,eAACq0E,GAA2B,CAAC/C,YAAattE,EAAKgf,SAASvjB,SAAA,CACtDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAA,MAAAD,SAAKF,EAAE,0CAGXG,cAACI,IAAKC,IAAG,CAAAN,SACN60E,EAAa7rE,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC/BhM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC60E,GAA0B,CACzBP,YAAaprE,KAGN,SA7BflJ,cAAC20E,GAA2B,CAAC/C,YAAattE,EAAKgf,SAASvjB,SACtDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,oCAAoCE,SACrDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kDA6BnB,KCzEO,MAAMi1E,GAAuBp7E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmE3Bg7B,GAAeh7B,GAAI;;;;;;;;;ECvCjBiG,qBAAkB4C,aAjBjC,SAA8B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC5E,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGlB5yE,QAKd,KC7BO,SAASg1E,GAA4B1sE,GACxC,OAAOA,GACH,IAAM,WAEN,IAAM,mBACJ,MAAO,OACT,IAAM,OAEN,IAAM,YACJ,MAAO,QACT,IAAK,YACH,MAAO,SACT,QACE,MAAO,GAEjB,CCqLe1I,qBAAkB4C,aAzKjC,SAA0B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAMyyB,EAAc7uB,qBAAWvC,GAGzBgvB,EAFaoC,EAAYtZ,WAEK,IADjBsZ,EAAYxnB,iBAEzBkpE,EAA0B1hD,EAAY0hD,yBAGpCnyE,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASwxE,GAAsB,CACzE7pE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,kBAEPqpB,GAAgBpiB,YAAYmiB,IAEpC,GAAI9yB,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAACg1E,GAAqB,CAAAj1E,SACpBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAACg1E,GAAqB,CAAAj1E,SACnBF,EAAE,iDAIPnH,QAAQC,IAAI,kBACZD,QAAQC,IAAImJ,GACZ,MAAMwC,EAAO0G,EAAS1G,KAChB6rB,EAASruB,EAAKsuB,cAGpB,OAAKD,EAAOpnB,MAAM3J,OAkBhBY,cAACg1E,GAAqB,CAACpD,YAAattE,EAAKgf,SAASvjB,SAChDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfO,eAAC8kD,GACC,CACA72C,SAAU4hB,EAAO5hB,SACjBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO+f,EAAO5hB,SAAS8B,WAEzBC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB4f,cAAcrnB,MACzCwF,EAAWiC,EAAgB4f,cAAc7hB,SAE/C,OAAOkC,EAASrR,OACZ,CAGEgxB,cAAe,CACb1f,WAAYH,EAAe6f,cAAc1f,WACzC3H,MAAO,IAAKwH,EAAe6f,cAAcrnB,SAAU0H,GACnDlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAAA,CACFC,cAAA,MAAAD,SAAKF,EAAE,+BACNswB,EAAOpnB,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACzBjM,eAAA,OAAAP,SAAA,CACEC,cAAA,QAAME,UAAU,aAAYH,SAC1BC,cAAC4vB,GAAkB,CAACvnB,OAAQa,EAAKb,WAEnCrI,cAAA,SAAOE,UAAU,aAAYH,SAC1BqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO4kB,KAEjC3vB,eAACwG,IAAI,CAACmf,YAAa8uD,GAA4B7rE,EAAKb,QAAQtI,SAAA,CAC1DO,eAACwG,IAAKN,OAAM,CAAAzG,SAAA,CACVC,cAAC8G,IAAKuI,MAAK,CAAAtP,SAAEF,EAAE,iBAAmB,KAAOqJ,EAAK8mB,cAC9C1vB,eAACwG,IAAKyO,QAAO,CAAAxV,SAAA,CACO,aAAhBmJ,EAAKb,QAAyC,qBAAhBa,EAAKb,OACnCrI,cAAC0E,IAAM,CACLC,SAAO,EACPE,MAAM,UACND,KAAK,KACL2K,QAASA,ICzH5B,SAAoB3P,GAAkF,IAAjF,EAACC,EAAC,WAAEwX,EAAU,eAAEC,EAAc,WAAEC,EAAU,eAAE09D,EAAc,kBAAEx9D,GAAkB7X,EACxG,OACE8X,wBAAa,CACXC,SAAU3L,IAAkB,IAAjB,QAAE4L,GAAS5L,EACpB,OACE1L,eAAA,OAAgBJ,UAAU,YAAWH,SAAA,CACnCC,cAAA,MAAAD,SAAKF,EAAE,wCACNwX,EACAC,EACDtX,cAAA,UAAQE,UAAU,0BAA0BqP,QAASqI,EAAQ7X,SAAEF,EAAE,2CACjEG,cAAA,UACEE,UAAU,iCACVqP,QAASA,KACP0lE,EAAex9D,GACZrE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBuR,IAAMC,QACJiE,EAAY,CACVhE,SAAUF,IAAMG,SAASC,cACzB,IACHC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IAE9D+V,GAAS,EACT7X,SAEDF,EAAE,8CAxBGyM,eA0BJ,GAKhB,CDqFyC4oE,CAAY,CACzBr1E,EAAGA,EACHwX,WAAYxX,EAAE,0CACdyX,eAAgBtX,cAAA,KAAAD,SAAIF,EAAE,iBAAmB,KAAOqJ,EAAK8mB,cACrDzY,WAAY1X,EAAE,uCACdo1E,eAAgBtgD,EAChBld,kBAAmB,CACjBvM,UAAW,CACT6H,MAAO,CACL6C,GAAI1M,EAAK0M,GACTvN,OAAQ,iBAIbtI,SAEFF,EAAE,oBAEL,GACgB,qBAAhBqJ,EAAKb,QAAiC0rE,EACtC/zE,cAACyE,IAAI,CAACrC,GAAI,0BAA4B8G,EAAK0M,GAAG7V,SAC5CO,eAACoE,IAAM,CACLxE,UAAU,OACV2E,MAAM,UACND,KAAK,KAAI7E,SAAA,CAERF,EAAE,kCAAkC,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAGrD,GACgB,mBAAhBgD,EAAKb,QAA+Ba,EAAK6rB,qBAC1C/0B,cAAA,QAAAD,SAAOmJ,EAAK6rB,uBACX,SAGNz0B,eAACqQ,IAAK,CAAC9E,OAAK,EAAA9L,SAAA,CACVC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,qBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,yBACpBG,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAACC,cAAA,QAAME,UAAU,cAAaH,SAAEF,EAAE,0BAGtDS,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACRmJ,EAAKjH,MAAM8G,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OAC7BnM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEmJ,EAAKkb,cACjBpkB,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAAEmJ,EAAKV,cACjBxI,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAAA,QAAME,UAAU,cAAaH,SAAEmJ,EAAKua,mBACrC,IAEdnjB,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMnL,IAAG,IACVxF,cAAC2Q,IAAMnL,IAAG,IACVxF,cAAC2Q,IAAMnL,IAAG,CAAAzF,SAACC,cAAA,QAAME,UAAU,mBAAkBH,SAAEmJ,EAAKua,+BAKxD,aA1HdzjB,cAACg1E,GAAqB,CAACpD,YAAattE,EAAKgf,SAASvjB,SAChDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,6BAA6BE,SAC9CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,2CA4HnB,KE9LO,MAAMs1E,GAAiBz7E,GAAI;;;;;;;;;;;EC6BnBiG,sBApBf,SAA0CC,GAAkB,IAAjB,EAAEC,EAAC,QAAEwD,GAASzD,EACvD,MACO4W,GAAkBjE,YAAY5Y,GAIrC,OACEqG,cAAC0E,IAAM,CACLG,MAAM,YACNxC,KAAK,WACLnC,UAAU,OACVqP,QAASA,IAAMgH,GACb1W,EAAG2W,EAAgBnT,EAXN,0BAYbtD,SAEDF,EAAE,0CAGT,ICSeF,qBAAkB4C,aAxBjC,SAA+B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAEzEuG,EAAY7H,aAAayE,QAAQvE,EAAKb,2BAK1C,OAJKwI,IACHA,EAAY,iBAIZnG,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEO,eAAA,OAAKJ,UAAU,sBAAqBH,SAAA,CAClCC,cAAC2yE,GAAe,CAACxsE,UAAWA,IAC5BnG,cAACo1E,GAAiC,SAGpCr1E,QAKZ,KC4IeJ,qBAAkB4C,aA3JF3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OACrHI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACV,MAAOvG,EAAE,8BAA8BE,SAAA,CAC3CO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,YACLhG,UAAYyR,EAAOpH,UAAa,0BAA4B,eAC5D0H,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,0BAG9DF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qBAAqBE,SAAA,CACxCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,WACLhG,UAAYyR,EAAOnH,SAAY,0BAA4B,eAC3DyH,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACRC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACpCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yBAAyBE,SAAA,CAC5CC,cAACob,GAAY,CACXzB,SAAU9G,EAAOgmC,YACjBj/B,SAAWpN,GAAS6Q,EAAc,cAAe7Q,GACjDqN,OAAQA,IAAMuD,EAAgB,eAAe,KAE/Cpd,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,0BAGhEF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCO,eAAC0R,KAAK,CAACG,UAAU,SACXjM,KAAK,SACLhG,UAAYyR,EAAO2iC,uBAA0B,0BAA4B,eACzEriC,aAAa,MAAKlS,SAAA,CACtBC,cAAA,UAAQmC,MAAM,KACdnC,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,oBACrBG,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,kBACrBG,cAAA,UAAQmC,MAAM,IAAGpC,SAAEF,EAAE,sBAEvBG,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOsX,MAAS,0BAA4B,eACxDhX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gCAAgCE,SAAA,CACnDC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,YACLhG,UAAYyR,EAAOmnC,UAAa,0BAA4B,eAC5D7mC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,6BAIhEI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,iBAAiBE,SAAA,CACpCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLhG,UAAYyR,EAAOqX,MAAS,0BAA4B,eACxD/W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,0BAG1DF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,kBAAkBE,SAAA,CACrCC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,SACLhG,UAAYyR,EAAO0mC,OAAU,0BAA4B,eACzDpmC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,6BAI7DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,UACLhG,UAAYyR,EAAOoX,QAAW,0BAA4B,eAC1D9W,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,0BAG5DF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACL6B,KAAK,WACLhG,UAAYyR,EAAOonC,SAAY,0BAA4B,eAC3D9mC,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,6BAI/DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,gBAAgBE,SAAA,CACnCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,OACLhG,UAAYyR,EAAOqnC,KAAQ,0BAA4B,eACvD/mC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,OAAOiM,UAAU,OAAOjS,UAAU,0BAGzDF,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,mBAAmBE,SAAA,CACtCO,eAAC0R,KAAK,CAACG,UAAU,SACVjM,KAAK,UACLhG,UAAYyR,EAAOsnC,QAAW,0BAA4B,eAC1DhnC,aAAa,MAAKlS,SAAA,CACvBC,cAAA,UAAQmC,MAAM,KACZy2C,GAAkB7sC,KAChBktC,GAAWj5C,cAAA,UAAQmC,MAAO82C,EAAQC,KAAKn5C,SAAak5C,EAAQE,MAAf7sC,qBAGnDtM,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,gCAK/DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,6BAKR,KC3KJ,MAAMw1E,GAAyBnkE,OAAaC,MAAM,CACrD5G,UAAW2G,OACRK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2K,SAAU0G,OACPK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdopB,MAAO/X,OACJ+X,MAAMppB,YAAE,cACRwR,SAASxR,YAAE,yBAGLy1E,GAAyBpkE,OAAaC,MAAM,CACrD5G,UAAW2G,OACRK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACd2K,SAAU0G,OACPK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdopB,MAAO/X,OACJ+X,MAAMppB,YAAE,cACRwR,SAASxR,YAAE,uBACdkpB,QAAS7X,OACNK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdk5C,SAAU7nC,OACPK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdm5C,KAAM9nC,OACHK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdo5C,QAAS/nC,OACNK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACdmpB,MAAO9X,OACJK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBCmGHF,qBAAkB4C,aArHjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4G,KAClCqrE,GAAkBhjE,YAAY4iE,IAChCK,EAAoBl3E,aAAayE,QAAQvE,EAAKb,2BAEpD,GAAIiE,EAAS,OACX5B,cAAC6yE,GAAsB,CAAA9yE,SACrBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAAC6yE,GAAsB,CAAA9yE,SACpBF,EAAE,6CAMP,MAAMyE,EAAOxC,EAAKwC,KAElB,IAAIqO,EAAmB0iE,GACI,YAAvB/wE,EAAKmxE,gBACP9iE,EAAmB2iE,IAGrB,IAAIz8B,EAAc,KAKlB,OAJIv0C,EAAKu0C,cACPA,EAAc,IAAI31C,KAAKoB,EAAKu0C,cAI5B74C,cAAC6yE,GAAsB,CAACjB,YAAattE,EAAKgf,SAASvjB,SACjDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAACwS,KAAM,CACLC,cAAe,CACblI,UAAWjG,EAAKiG,UAChBC,SAAUlG,EAAKkG,SACfye,MAAO3kB,EAAK2kB,MACZ4vB,YAAaA,EACbkC,OAAQz2C,EAAKy2C,OACbjC,UAAWx0C,EAAKw0C,UAChB9vB,MAAO1kB,EAAK0kB,MACZqvB,OAAQ/zC,EAAK+zC,OACbtvB,QAASzkB,EAAKykB,QACdgwB,SAAUz0C,EAAKy0C,SACfC,KAAM10C,EAAK00C,KACXC,QAAS30C,EAAK20C,SAEhBtmC,iBAAkBA,EAClBC,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAItR,EAAK6G,UACTZ,UAAWsI,EAAOtI,UAClBC,SAAUqI,EAAOrI,SACjBye,MAAOpW,EAAOoW,MACd8xB,OAAQloC,EAAOkoC,OACfjC,UAAWjmC,EAAOimC,UAClB9vB,MAAOnW,EAAOmW,MACdqvB,OAAQxlC,EAAOwlC,OACftvB,QAASlW,EAAOkW,QAChBgwB,SAAUlmC,EAAOkmC,SACjBC,KAAMnmC,EAAOmmC,KACbC,QAASpmC,EAAOomC,SAGdpmC,EAAOgmC,cACTmC,EAAwB,YAAIl/B,GAAejJ,EAAOgmC,cAGpD08B,EAAc,CAAErqE,UAAW,CACzB6H,MAAOioC,GACN9nC,eAAgB,KAMlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACpB0zE,GACFnyE,EAAQnB,KAAKszE,GAEfniE,IAAMC,QAASzT,EAAE,2CAA6C,CAC1D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAAC01E,GAAsB,CACrBhkE,aAAcA,EACd0L,gBAAiBA,EACjBC,cAAeA,EACf1L,OAAQA,EACRkB,OAAQA,EACR1M,UAAW,iBACX,SAOhB,KCpIO,MAAMwvE,GAA8Bj8E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC0BhCiG,qBAAkB4C,aAjBjC,SAA+B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC7E,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACjEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGpB5yE,QAKZ,KCqHeJ,qBAAkB4C,aAxHjC,SAAiC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACnD,MACMmZ,EADcvV,qBAAWvC,GACA8X,YAGvBnX,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASqyE,GAA6B,CAChF1qE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,iBAIf,GAAI1J,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC41E,GAA4B,CAAA71E,SAC3BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC41E,GAA4B,CAAA71E,SAC1BF,EAAE,mDAIP,MAAMyE,EAAOxC,EAAKwC,KACZ5B,EAAgBZ,EAAKo9B,qBAG3B,OAAKx8B,EAAcqG,MAAM3J,OAkBvBY,cAAC41E,GAA4B,CAAChE,YAAattE,EAAKgf,SAASvjB,SACvDC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,MAAAD,SAAKF,EAAE,sCACPG,cAAColD,GACC,CACA72C,SAAU7L,EAAc6L,SACxBG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO1N,EAAc6L,SAAS8B,WAEhCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB0uB,qBAAqBn2B,MAChDwF,EAAWiC,EAAgB0uB,qBAAqB3wB,SAEtD,OAAOkC,EAASrR,OACZ,CAGE8/B,qBAAsB,CACpBxuB,WAAYH,EAAe2uB,qBAAqBxuB,WAChD3H,MAAO,IAAKwH,EAAe2uB,qBAAqBn2B,SAAU0H,GAC1DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAGA2C,EAAcqG,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACjCvM,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,GAAG3G,SACvBO,eAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,cAAA,MAAAD,SACImJ,EAAKi2B,yBAAyBj5B,OAGlClG,cAACiG,IAAI,CAACC,KAAK,aAAa,IAAGkF,IAAOlC,EAAKkW,WAAW/T,OAAO0N,GACtD7P,EAAKmW,SAAY/e,eAAA,QAAAP,SAAA,CAAM,MAAIqL,IAAOlC,EAAKmW,SAAShU,OAAO0N,WAG9D/Y,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,EAAE3G,SACtBC,cAACyE,IAAI,CAACrC,GAAK,+BAA8B8G,EAAK0M,aAAa7V,SACzDO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,OACND,KAAK,KAAI7E,SAAA,CAEPmJ,EAAKi2B,yBAAyB6G,UAC9BnmC,EAAE,qBAAuBqJ,EAAK+/C,YAAa,IAAE,IAC9CppD,EAAE,gCAvBJyM,eA6BJ,aA9EftM,cAAC41E,GAA4B,CAAChE,YAAattE,EAAKgf,SAASvjB,SACvDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,oCAAoCE,SACrDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,kDAgFnB,KC1IO,MAAMg2E,GAAqCn8E,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC0BvCiG,qBAAkB4C,aAjBjC,SAA2C3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EACzF,OACEI,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACjEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAACyG,GAAU,CAACN,UAAY,oCAG5BpG,QAKZ,KCoKeJ,qBAAkB4C,aAzKjC,SAAuC3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACzD,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAGzB8qC,EAAiBvyC,EAAMmK,OAAOqoC,iBAC5Bh0C,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASuyE,GAAoC,CACvF5qE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTo2C,oBAAqB3L,GAEvBrqC,YAAa,iBAGf,GAAI1J,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC81E,GAAkC,CAAA/1E,SACjCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC81E,GAAkC,CAAA/1E,SAChCF,EAAE,mDAIP,MAAMyE,EAAO0G,EAAS1G,KAChByxE,EAAsBj0E,EAAKoqD,2BAIjC,OAHiCpqD,EAAKw/C,oBAAoBniB,yBAG7B6G,UAEzBhmC,cAAC81E,GAAkC,CAAClE,YAAattE,EAAKgf,SAASvjB,SAC7DC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,4CAA4CE,SAC7DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACwG,IAAKwiB,MAAK,CAACzkB,MAAM,UAAS9E,SAAA,CAACC,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAErG,EAAE,6DAU9Dk2E,EAAoBhtE,MAAM3J,OAoB7BY,cAAC81E,GAAkC,CAAClE,YAAattE,EAAKgf,SAASvjB,SAC7DC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,MAAAD,SAAKF,EAAE,8CACPG,cAAColD,GACC,CACA72C,SAAUwnE,EAAoBxnE,SAC9BG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO2lE,EAAoBxnE,SAAS8B,WAEtCC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgB07C,2BAA2BnjD,MACtDwF,EAAWiC,EAAgB07C,2BAA2B39C,SAE5D,OAAOkC,EAASrR,OACZ,CAGE8sD,2BAA4B,CAC1Bx7C,WAAYH,EAAe27C,2BAA2Bx7C,WACtD3H,MAAO,IAAKwH,EAAe27C,2BAA2BnjD,SAAU0H,GAChElC,aAGJgC,CAAc,GAEpB,EACFxQ,SAGAg2E,EAAoBhtE,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OACvCvM,cAAC8G,IAAI,CAAYmf,YAAe/c,EAAKojD,uBAAsC,UAAZ,UAAsBvsD,SACnFC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,EAAE3G,SACtBO,eAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,cAAA,SAAOE,UAAU,aAAYH,SAC1BF,EAAE,iDAELS,eAAA,MAAAP,SAAA,CACIqL,IAAOlC,EAAKmnB,WAAWhlB,OAAO0N,GAChC/Y,cAAA,OAAAD,SAAKO,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAAC,IAAEmJ,EAAKV,iBAEvCU,EAAKijD,YAAensD,cAAA,OAAAD,SACrBO,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BF,EAAE,oDAAoD,IAAGuL,IAAOlC,EAAKijD,YAAY9gD,OAAO0N,gBAMnG/Y,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,EAAE3G,SACtBO,eAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,cAAA,SAAOE,UAAU,aAAYH,SAC1BF,EAAE,mDAELG,cAAA,MAAAD,SACIqL,IAAOlC,EAAKkjD,YAAY/gD,OAAO0N,UAIvC/Y,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,EAAE3G,SACtBO,eAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBC,cAAA,SAAOE,UAAU,aAAYH,SAC1BF,EAAE,+CAEFqJ,EAAKojD,uBAMNtsD,cAAA,MAAAD,SAAIC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,+CAJ5BuL,MAAWA,IAAOlC,EAAKkjD,YACzBpsD,cAAA,MAAAD,SAAIC,cAACkI,IAAK,CAACrD,MAAM,SAAQ9E,SAAEF,EAAE,kDAC7BG,cAAA,MAAAD,SAAIC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,oDAK9BqJ,EAAKojD,wBAA2BhsD,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC7DC,cAAA,OAAAD,SACI,GAAEqL,IAAOlC,EAAKojD,uBAAuB9/C,MAAMnB,OAAO0N,oCAClD3N,IAAOlC,EAAKojD,uBAAuB9/C,KAAO,IAAMtD,EAAKojD,uBAAuBxO,aAAajxC,WAAWxB,OAAOT,qCACzG1B,EAAKojD,uBAAuBxO,aAAar2C,sBAAsBvB,SAEpEgD,EAAKojD,uBAAuBxO,aAAalxC,yBAAyBjF,qBAAqBzB,mBAlDzFoG,eAwDJ,aA3GftM,cAAC81E,GAAkC,CAAClE,YAAattE,EAAKgf,SAASvjB,SAC7DC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,4CAA4CE,SAC7DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,0DA6GnB,KCrKeF,qBAAkB4C,aARP3C,IAAA,IAAC,EAAEC,GAAGD,EAAA,OAC9BI,cAACyE,IAAI,CAACrC,GAAI,gBAAgBrC,SACxBO,eAACoE,IAAM,CAACG,MAAM,yBAAwB9E,SAAA,CACpCC,cAACiG,IAAI,CAAC4P,OAAO,KAAK3P,KAAK,kBAAkB,IAAErG,EAAE,oBAE1C,KCHMF,qBAAkB4C,aAVjC,SAA0B3C,GAAyD,IAAxD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,kBAAEuG,EAAkB,IAAI1G,EAE9E,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,2BAA4ByG,kBAAmBA,EAAkBvG,SAC/EA,GAGT,KCyDeJ,qBAAkB4C,aAxDjC,SAAkC3C,GAAkC,IAAjC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAE20C,GAAUp4C,EAC/D,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAE1B4sD,EAAc,CAClB,aAAgBnb,EAChB,iBAAoBjG,EAAUgL,iBAAiBptC,GAC/C,KAAQ4oC,EACR,eAAkB,YAClB,eAAiB,EACjB,cAAiB,WAGZ6a,GAAc,QAAEz3D,EAAO,MAAEC,IAAW0Q,YAAY0mD,IAEvD,OAAIr3D,EACK/B,EAAE,uBAGPgC,EACKhC,EAAE,4BAITS,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACN0K,QAASA,IAAM8pD,EAAa,CAC1BnuD,UAAW,CAAE,MAASkuD,GACtBlmD,eAAgB,KAGfE,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GAExBpJ,QAAQC,IAAI,oBACZ0K,EAAQnB,KAAM,wBAAuB+7C,KAAoBO,IAAa,IAMrE9qC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IACzD9B,SAAA,CAENF,EAAE,gBAAgB,IAACG,cAACiG,IAAI,CAACC,KAAK,oBAGrC,KCvBevG,qBAAkB4C,aA7BjC,SAAiC3C,GAAsC,IAArC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,YAAEV,GAAa/C,EAIlE,OAHAlH,QAAQC,IAAI,eACZD,QAAQC,IAAIgK,GAGVA,EAAYoJ,KAAKisC,GACfh4C,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAGsvE,GAAI,EAAEj2E,SACpCO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,qBAAqBE,SAAA,CAChCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIi4C,EAAUgL,iBAAiB9gB,sBAAsBh8B,OAASlG,cAAA,SAC9DM,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CACzBF,EAAE,6BAA6B,KAAGm4C,EAAUgL,iBAAiB/K,wBAAwB,IAACj4C,cAAA,SACtFH,EAAE,uBAAuB,KAAGuL,IAAO4sC,EAAUgL,iBAAiB3jC,SAAShU,OAAO,MAAM,IAACrL,cAAA,eAG1FA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACPi4C,EAAU+c,QACX/0D,cAACi2E,GAAyB,CAACj+B,UAAWA,IADhBn4C,EAAE,6DAQpC,KC6BeF,qBAAkB4C,aAxDjC,SAAqC3C,GAAqC,IAApC,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,aAAEy0C,GAAal4C,EACrE,MAAMq+C,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,KAE1B4sD,EAAc,CAClB,aAAgBnb,EAChB,oBAAuBnG,EAAawJ,oBAAoB1rC,GACxD,KAAQ4oC,EACR,eAAkB,eAClB,eAAiB,EACjB,cAAiB,WAGZ6a,GAAc,QAAEz3D,EAAO,MAAEC,IAAW0Q,YAAY0mD,IAEvD,OAAIr3D,EACK/B,EAAE,uBAGPgC,EACKhC,EAAE,4BAITS,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACN0K,QAASA,IAAM8pD,EAAa,CAC1BnuD,UAAW,CAAE,MAASkuD,GACtBlmD,eAAgB,KAGfE,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACXtT,QAAQC,IAAI,WAAYmJ,GAExBpJ,QAAQC,IAAI,oBACZ0K,EAAQnB,KAAM,wBAAuB+7C,KAAoBO,IAAa,IAMrE9qC,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,IACzD9B,SAAA,CAENF,EAAE,gBAAgB,IAACG,cAACiG,IAAI,CAACC,KAAK,oBAGrC,KC5BevG,qBAAkB4C,aA3BjC,SAAmC3C,GAAwC,IAAvC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,cAAEX,GAAe9C,EAEtE,OACE8C,EAAcqJ,KAAK+rC,GACjB93C,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAGsvE,GAAI,EAAEj2E,SACpCO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,wBAAwBE,SAAA,CACnCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAI+3C,EAAawJ,oBAAoBniB,yBAAyBj5B,OAASlG,cAAA,SACvEA,cAAA,QAAME,UAAU,aAAYH,SACxB+3C,EAAawJ,oBAAoBniB,yBAAyB6G,UAAanmC,EAAE,qBAC3ES,eAAA,QAAAP,SAAA,CAAOF,EAAE,mCAAmC,KAAGi4C,EAAa4hB,sBAGhE15D,cAAC8G,IAAKwI,OAAM,CAAAvP,SACP+3C,EAAaid,QACd/0D,cAACk2E,GAA4B,CAACp+B,aAAcA,IADnBj4C,EAAE,gEAQvC,KCJeF,qBAAkB4C,aAnBjC,SAA8B3C,GAA8B,IAA7B,EAACC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,MAAEmhB,GAAM5kB,EACvDlH,QAAQC,IAAI6rB,GACZ,MAAMu+B,EAAcv+B,EAAM5O,GACpBlJ,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,KAE/B,OACExM,cAACyE,IAAI,CAACrC,GAAK,mBAAkB2gD,KAAer2C,KAAkB2yC,IAAYt/C,SAC1EO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UAAS9E,SAAA,CAEdF,EAAE,kCAAkC,IAACG,cAACiG,IAAI,CAACC,KAAK,sBAIvD,KCQevG,qBAAkB4C,aAzBjC,SAAiC3C,GAK7B,IAL8B,EAChCC,EAAC,MACDuD,EAAK,QACLC,EAAO,YACPu2D,GACDh6D,EAEC,OACEI,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAGsvE,GAAI,EAAEj2E,SACpCO,eAACwG,IAAI,CACHmf,YAAY,OACZ7f,MAAOvG,EAAE,kBAAkBE,SAAA,CAC7BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAI65D,EAAY3kC,eAAiBj1B,cAAA,SAChCH,EAAE,yCAAyC,IAACG,cAAA,YAE/CA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAACm2E,GAAqB,CAAC3xD,MAAOo1C,UAKtC,KCGej6D,qBAAkB4C,aAzBjC,SAAgC3C,GAK5B,IAL6B,EAC/BC,EAAC,MACDuD,EAAK,QACLC,EAAO,WACP02D,GACDn6D,EAEC,OACEI,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,EAAGxG,GAAI,EAAGsvE,GAAI,EAAEj2E,SACpCO,eAACwG,IAAI,CACHmf,YAAY,QACZ7f,MAAOvG,EAAE,iBAAiBE,SAAA,CAC5BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,KAAAD,SAAIg6D,EAAW9kC,eAAiBj1B,cAAA,SAC/BH,EAAE,wCAAwC,IAACG,cAAA,YAE9CA,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAACm2E,GAAqB,CAAC3xD,MAAOu1C,UAKtC,KChCO,MAAMf,GAA4Bt/D,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgM9BiG,qBAAkB4C,aAvKjC,SAAsB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBozC,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MAC1B,QAAE5K,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAC/B01D,GAA2B,CACzB9tD,UAAW,CACT4yC,aAAcG,EACdzxC,KAAMgyC,EACNwb,SAAU,aAEZ1uD,YAAa,iBAKjB,GAAI1J,EAAS,OACX5B,cAACo2E,GAAiB,CAAC9vE,kBAAmBtG,cAACq2E,GAAiB,IAAIt2E,SAC1DC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAIlC,GAAIa,EAGF,OAFAnJ,QAAQC,IAAIkJ,GACZnJ,QAAQC,IAAIkJ,EAAMu5D,eACdv5D,EAAMu5D,eAAiBv5D,EAAMu5D,cAAc,GAAGkb,YACD,oCAA3Cz0E,EAAMu5D,cAAc,GAAGkb,WAAW3gE,KAElC3V,cAACo2E,GAAiB,CAAC9vE,kBAAmBtG,cAACq2E,GAAiB,IAAIt2E,SAC1DC,cAAA,KAAAD,SACEC,cAACspB,IAAK,CAACjlB,KAAK,UAAStE,SACnBC,cAAA,UAAAD,SAAUF,EAAE,kEAStBG,cAACo2E,GAAiB,CAAC9vE,kBAAmBtG,cAACq2E,GAAiB,IAAIt2E,SAC1DC,cAAA,KAAAD,SAAIF,EAAE,gCAKZnH,QAAQC,IAAImJ,GACZ,MAAMm2D,EAAgBn2D,EAAKm2D,cAErBse,EAAgBz0E,EAAKm4D,4BAA4Bsc,cACjDlzD,EAAUvhB,EAAKm4D,4BAA4B52C,QAC3C1gB,EAAcb,EAAKm4D,4BAA4Bt3D,YAC/CD,EAAgBZ,EAAKm4D,4BAA4Bv3D,cACjDw3D,EAASp4D,EAAKm4D,4BAA4BE,mBAC1Crc,EAAeh8C,EAAKm4D,4BAA4Bnc,aAEhDtiC,EAAWsiC,EAAalxC,yBAAyBjF,qBAAqBzB,KACtEswE,EAAY14B,EAAar2C,sBAAsBvB,KAC/C2G,EAAYzB,IAAO8Q,GAAsB4hC,EAAajxC,YAAYxB,OAAOT,GACzEkC,EAAU1B,IAAO8Q,GAAsB4hC,EAAahxC,UAAUzB,OAAOT,GAUrE6rE,EATerrE,IAAOozC,GAAYnzC,OAAO0N,GASb,IAAMlM,EAAY,MAAQC,EAAU,IAAM0pE,EAAY,IAAM32E,EAAE,cAAgB,IAAM2b,EAMtH,IAAInP,EAEJ,OANA3T,QAAQC,IAAIuhE,GACZxhE,QAAQC,IAAI,mBAAqB49E,GACjC79E,QAAQC,IAAIs/D,EAAcxZ,eAInBwZ,EAAcxZ,eACnB,IAAK,eACH,MAAMi4B,EAAgBze,EAAcye,cACpCrqE,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,kDAAoD,IAAMuL,IAAOsrE,GAAerrE,OAAO0N,MAE9F,MACF,IAAK,YACH1M,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,uDAEP,MACF,IAAK,UACHwM,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,+DAEP,MACF,IAAK,WACHwM,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,sDAEP,MACF,IAAK,UACHwM,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,qDAEP,MACF,IAAK,OACHwM,EAAU/L,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACzCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,kDAEP,MACF,IAAK,KACHwM,EAAU/L,eAACF,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAAA,CAC5BC,cAAC22E,GAA0B,CAACj0E,cAAeA,IAC3C1C,cAAC42E,GAAwB,CAACj0E,YAAaA,IACrCu3D,GACCA,EAAOI,4BACNt6D,cAAC62E,GAAwB,CAACjd,YAAaM,EAAOI,8BAChD,GACAJ,GACEA,EAAOM,6BAAiCn3C,EAAQo3C,qBAChDz6D,cAAC82E,GAAuB,CAAC/c,WAAYG,EAAOM,6BAC5C,MAEN,MACF,QACEnuD,EAAU,GAGd,OACErM,cAACo2E,GAAiB,CAAC9vE,kBAAmBtG,cAACq2E,GAAiB,IAAIt2E,SAC1DC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAACF,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SAAA,CACfC,cAAA,MAAAD,SAAM02E,IACNz2E,cAAA,OAAKE,UAAU,OAAMH,SAEjBw2E,EACAj2E,eAACgpB,IAAK,CAACjlB,KAAK,UAAUqjC,eAAa,EAAA3nC,SAAA,CACjCC,cAAA,MAAAD,SAAKF,EAAE,sDACNA,EAAE,oCAAoC,IAACG,cAAA,SAAMA,cAAA,SAC9CA,cAACyE,IAAI,CAACrC,GAAG,wBAAuBrC,SAC9BO,eAACoE,IAAM,CACLG,MAAM,UACNF,SAAO,EAAA5E,SAAA,CAENF,EAAE,8BAA8B,IAACG,cAACiG,IAAI,CAACC,KAAK,0BAKjDmG,UAOhB,KChLe1M,qBAAkB4C,aAVjC,SAA4B3C,GAAyD,IAAxD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,kBAAEuG,EAAkB,IAAI1G,EAEhF,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,6BAA8ByG,kBAAmBA,EAAkBvG,SACjFA,GAGT,KCVO,MAAMy/C,GAAkB9lD,GAAI;;;;;;;;;;;;;;;;;EAoBtBq9E,GAAer9E,GAAI;;;;;;;;ECmEjBiG,qBAAkB4C,aAtEjC,SAAsB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzBozC,EAAmB76C,EAAMmK,OAAOgxC,SAChCC,EAAap7C,EAAMmK,OAAOf,MAC1B,QAAE5K,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAC/Bk8C,GAAiB,CACft0C,UAAW,CACTwB,eAAgBuxC,EAChBzxC,KAAMgyC,KAMZ,OAAI58C,EACF5B,cAACg3E,GAAmB,CAAAj3E,SAClBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAI9Ba,GACFnJ,QAAQC,IAAIkJ,GAEV7B,cAACg3E,GAAmB,CAAAj3E,SAClBC,cAAA,KAAAD,SAAIF,EAAE,kCAKZnH,QAAQC,IAAImJ,GAKV9B,cAACg3E,GAAmB,CAAAj3E,SAClBC,cAACI,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAClBC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACwG,IAAI,CAACV,MAAOvG,EAAE,6BAA6BE,SAAA,CAC1CO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,yCAAyC,IAACG,cAAA,SAAMA,cAAA,SACnDA,cAACwxE,GAAgB,CACf3xE,EAAGA,EACHw/C,UAAWb,EACXizB,UAAW3vE,EAAKm2D,cAChBl/C,WAAYA,EACZnO,WAAYA,OAGhB5K,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAACyE,IAAI,CAACrC,GAAI,gBAAgBrC,SACxBO,eAACoE,IAAM,CACLC,SAAO,EACP2I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdF,EAAE,kCAAkC,IAACG,cAACiG,IAAI,CAACC,KAAK,kCASnE,KCzEevG,qBAAkB4C,aARjC,SAAgC3C,GAAyD,IAAxD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,kBAAEuG,EAAkB,IAAI1G,EACpF,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,sBAAuByG,kBAAmBA,EAAkBvG,SAC5EA,GAGP,KCVO,SAASwH,KAEZ,IAAIE,EACAlD,EACAmD,EACAC,EAEAC,EAAY,CACdC,SAAUvJ,aAAayE,QAAQvE,EAAKZ,wBACpCkK,UAAWxJ,aAAayE,QAAQvE,EAAKX,0BAsCvC,OA9BA4J,EAAwBnJ,aAAayE,QAAQvE,EAAKT,+BAEhD6J,EAAUH,sBADRA,GAGgC,GAGpClD,EAAajG,aAAayE,QAAQvE,EAAKR,gCAErC4J,EAAUrD,WADRA,GAGqB,GAGzBmD,EAAoBpJ,aAAayE,QAAQvE,EAAKP,2BAE5C2J,EAAUF,kBADRA,GAG4B,GAGhCC,EAAuBrJ,aAAayE,QAAQvE,EAAKN,8BAE/C0J,EAAUD,qBADRA,GAG+B,GAGnCjP,QAAQC,IAAIiP,GAELA,CACT,CCpCF,SAASqa,GAAgB9f,GACvB,IAAI6f,EAAe1jB,aAAayE,QAAQZ,GACxC,OAAI6f,GAGK,EAEX,CAGA,SAASrH,GAA6BC,EAAKzY,EAAOiT,GAChD9W,aAAaC,QAAQqc,EAAKzY,GAC1BiT,EAAQ7N,KAEV,CAEA,MAAMypD,GAAc,kCAmFLrxD,qBAAkB4C,aAjFC3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,KAAEvB,EAAI,QAAEsT,GAASxV,EAAA,OAC9DU,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAE9BO,eAAA,UACEJ,UAAW8wD,GACXhvC,aAAcC,GAAgBzjB,EAAKN,8BACnC0b,SAAYsB,IACVP,GACEnc,EAAKN,6BACLgd,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,sCAATyM,gBACrBxK,EAAK6qC,sBAAsB5jC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC7ChM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,SAI7DtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAE9BO,eAAA,UACEJ,UAAW8wD,GACXhvC,aAAcC,GAAgBzjB,EAAKT,+BACnC6b,SAAYsB,IACVP,GACEnc,EAAKT,8BACLmd,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,uCAATyM,gBACrBxK,EAAK+mC,uBAAuB9/B,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC9CvM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,SAI7DtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAE1BO,eAAA,UACEJ,UAAW8wD,GACXhvC,aAAcC,GAAgBzjB,EAAKR,gCACnC4b,SAAYsB,IACVP,GACEnc,EAAKR,+BACLkd,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,wCAATyM,gBACrBxK,EAAKo+B,YAAYn3B,MAAMgD,KAAIU,IAAA,IAAC,KAAEvD,GAAMuD,EAAA,OACnCzM,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKoa,UAAZhX,eAA8B,SAIrEtM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAE9BO,eAAA,UACEJ,UAAW8wD,GACXhvC,aAAcC,GAAgBzjB,EAAKP,2BACnC2b,SAAYsB,IACVP,GACEnc,EAAKP,0BACLid,EAAM9V,OAAOjD,MACbiT,EACD,EACDrV,SAAA,CAEFC,cAAA,UAAQmC,MAAM,GAAEpC,SAAaF,EAAE,mCAATyM,gBACrBxK,EAAKyuC,mBAAmBxnC,MAAMgD,KAAIic,IAAA,IAAC,KAAE9e,GAAM8e,EAAA,OAC1ChoB,cAAA,UAAQmC,MAAO+G,EAAK0M,GAAG7V,SAAamJ,EAAKhD,MAAZoG,eAA0B,WAIpD,KCzCE3M,qBAAkB4C,aAvDjC,SAAsC3C,GAAkF,IAAjF,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,eAAEqJ,EAAc,UAAE2yC,EAAS,cAAEq3B,EAAa,cAAEj4B,GAAe7+C,EACnH,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAE/B,IAAIk+D,EAIJ,OAAOx4B,GACL,IAAK,eACHw4B,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,6CAA+C,IAAMuL,IAAOsrE,GAAerrE,OAAO0N,KAEzF,MACF,IAAK,YACHk+D,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,iDAEP,MACF,IAAK,UACHo3E,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,yDAEP,MACF,IAAK,WACHo3E,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,gDAEP,MACF,IAAK,UACHo3E,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,+CAEP,MACF,IAAK,OACHo3E,EAAaj3E,cAAA,QAAME,UAAU,aAAYH,SACpCF,EAAE,4CAEP,MACF,IAAK,KACHo3E,EAAaj3E,cAACyE,IAAI,CAACrC,GAAK,sBAAqBsK,KAAkB2yC,IAAYt/C,SACvEO,eAACoE,IAAM,CAACxE,UAAU,aAAa2E,MAAM,UAAUF,SAAO,EAAA5E,SAAA,CACnDF,EAAE,gBAAgB,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAGrC,MAEF,QACE+wE,EAAa,GAGjB,OAAOA,CACT,KCpCA,GAAK34E,aAAayE,QAAQvE,EAAKZ,wBAIxB,CACcwN,IAAO9M,aAAayE,QAAQvE,EAAKZ,yBACtCs5E,SAAS9rE,MAAU,SAC/B9M,aAAaC,QAAQC,EAAKZ,uBAAwBwN,MAASC,OAAO,eAClE/M,aAAaC,QAAQC,EAAKX,wBAAyBuN,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,eAEtF,MATE3S,QAAQC,IAAI,iDACZ2F,aAAaC,QAAQC,EAAKZ,uBAAwBwN,MAASC,OAAO,eAClE/M,aAAaC,QAAQC,EAAKX,wBAAyBuN,MAAS1B,IAAI,EAAG,QAAQ2B,OAAO,eA+KrE1L,qBAAkB4C,aArKjC,SAA4B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAChD,MACMgL,EADcpH,qBAAWvC,GACA4J,iBAEzBzE,EAAQvG,EAAE,oBACV,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,EAAI,QAAEsT,GAAY9R,YAASi8C,GAAmB,CACpEr0C,UAAW3D,KAGX4vE,6BAA6B,IAG/Bz+E,QAAQC,IAAIiJ,GAEZ,MAAM0E,EAAoBhG,eAACoE,IAAOqB,KAAI,CAAC7F,UAAU,sCAAqCH,SAAA,CACpFC,cAAC0E,IAAM,CACLrC,KAAK,eACLwC,MAAM,YACNuN,SAAYhH,IAAO9M,aAAayE,QAAQvE,EAAKZ,yBAAyB89B,SAAS,EAAG,QAAQw7C,SAAS9rE,MAAU,OAC7GmE,QAAUA,KACR,IAAI6nE,EAAehsE,IAAO9M,aAAayE,QAAQvE,EAAKZ,yBAAyB89B,SAAS,EAAG,QACrF27C,EAAgBjsE,IAAOgsE,GAAc1tE,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKZ,uBAAwBw5E,EAAa/rE,OAAO,eACtE/M,aAAaC,QAAQC,EAAKX,wBAAyBw5E,EAAchsE,OAAO,eAExE+J,EAAQ7N,KAA2B,IAEvCvH,cAAC0E,IAAM,CACLG,MAAM,YACN0K,QAAUA,KACR,IAAIoiD,EAAkBvmD,MAClBwmD,EAAmBxmD,IAAOumD,GAAiBjoD,IAAI,EAAG,QAEtDpL,aAAaC,QAAQC,EAAKZ,uBAAwB+zD,EAAgBtmD,OAAO,eACzE/M,aAAaC,QAAQC,EAAKX,wBAAyB+zD,EAAiBvmD,OAAO,eAE3E+J,EAAQ7N,KAA2B,EACrCxH,SACCF,EAAE,mBAELG,cAAC0E,IAAM,CACLrC,KAAK,gBACLwC,MAAM,YACN0K,QAAUA,KACR,IAAIiiD,EAAepmD,IAAO9M,aAAayE,QAAQvE,EAAKZ,yBAAyB8L,IAAI,EAAG,QAChF+nD,EAAgBrmD,IAAOomD,GAAc9nD,IAAI,EAAG,QAEhDpL,aAAaC,QAAQC,EAAKZ,uBAAwB4zD,EAAanmD,OAAO,eACtE/M,aAAaC,QAAQC,EAAKX,wBAAyB4zD,EAAcpmD,OAAO,eAExE+J,EAAQ7N,KAA2B,OAIzC,OAAI3F,EACFtB,eAACg3E,GAAuB,CAAClxE,MAAOA,EAAOE,kBAAmBA,EAAkBvG,SAAA,CAC1EC,cAAA,SAAMA,cAAA,SAAMA,cAAA,SAAMA,cAAA,SAClBA,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,OAG9Ba,EACF7B,cAACs3E,GAAuB,CAAClxE,MAAOA,EAAOE,kBAAmBA,EAAkBvG,SACzEF,EAAE,iCAIPnH,QAAQC,IAAImJ,GACZpJ,QAAQC,IAAImJ,EAAK8J,iBAIftL,eAACg3E,GAAuB,CACtBlxE,MAAOA,EACPE,kBAAmBA,EAAkBvG,SAAA,CAErCC,cAACu3E,GAAyB,CAACz1E,KAAMA,EAAMsT,QAASA,IAC/CtT,EAAK8J,gBAAgBG,KAAIC,IAAA,IAAC,KAAEQ,EAAI,cAAEkqE,EAAa,QAAE9zE,GAASoJ,EAAA,OACzDhM,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACbO,eAACwG,IAAI,CAAA/G,SAAA,CACHC,cAAC8G,IAAKN,OAAM,CAAAzG,SACVO,eAACwG,IAAKuI,MAAK,CAAAtP,SAAA,CACTC,cAAA,KAAAD,SAAIiH,GAAWoE,IAAOoB,GAAMnB,OAAO,WAAa,IAAE,IAClDrL,cAAA,QAAME,UAAU,aAAYH,SACzBqL,IAAOoB,GAAMnB,OAAO,aAIxBzI,EAAQxD,OAITY,cAAC2Q,IAAK,CAAC9E,OAAK,EAAA9L,SACVC,cAAC2Q,IAAM5J,KAAI,CAAAhH,SACR6C,EAAQmJ,KAAIQ,IAAA,IAAC,eACZG,EAAc,cACdC,EAAa,KACbH,EAAI,OACJnE,EAAM,QACNI,EAAO,YACPC,EAAW,YACXF,EAAW,QACX6a,EAAO,KACPrb,EAAI,SACJq4C,EAAQ,MACRC,EAAK,yBACL1zC,EAAwB,sBACxBnF,EAAqB,kBACrBC,EAAiB,UACjBmF,EAAS,QACTC,EAAO,OACPC,EAAM,sBACNyqE,EAAqB,cACrBvqD,EAAa,cACbwxB,GAAelyC,EAAA,OACbjM,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACVO,eAAA,MAAAP,SAAA,CACI0H,EAAsBvB,KAAM,IAAG,IAChCkF,IAAOoB,EAAO,IAAMK,GAAWxB,OAAOT,GAAY,IAAE,MACpDQ,IAAOoB,EAAO,IAAMM,GAASzB,OAAOT,GAAY,IAAG,OAGrD5K,cAAA,QAAME,UAAU,OAAMH,SAAIsjB,EAAWA,EAAQC,SAAW,KACxDtjB,cAAA,QAAME,UAAU,aAAYH,SAAE2H,GAAqBA,EAAkBxB,OACrElG,cAAA,SACDA,cAAA,QAAME,UAAU,aAAYH,SAAG6M,EAAyBjF,qBAAqBzB,UAE7E5F,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACRC,cAACy3E,GAA6B,CAC5B/qE,eAAgBA,EAChB2yC,UAAW7yC,EACXkqE,cAAeA,EACfj4B,cAAeA,IAEG,aAAlBA,GAA2C,cAAXp2C,EAChC/H,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACbC,cAAA,OAAK2d,MAAO,CAAC+5D,MAAO,UAClBp3E,eAAA,OAAKJ,UAAU,mDAAkDH,SAAA,CAC/DC,cAAA,OAAKE,UAAU,cAAaH,SAACC,cAAA,SAAAD,SAAOC,cAACiG,IAAI,CAACC,KAAK,QAAQhG,UAAU,mBACjEF,cAAC23E,IAAQ,CAAC/yE,KAAK,KAAK1E,UAAU,8CAA6CH,SAEzEC,cAAC23E,IAASr4C,IAAG,CAACz6B,MAAM,UAAUg5B,OAAS9wB,EAAOyqE,GAAuBzqE,EAAU,cAIrF,QAGI,QA5DpB/M,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,KAAAD,SAAIF,EAAE,yCAbHyM,eAgFJ,OAInB,KC3Le3M,qBAAkB4C,aAVjC,SAAwB3C,GAAyD,IAAxD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,kBAAEuG,EAAkB,IAAI1G,EAE5E,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,sBAAuByG,kBAAmBA,EAAkBvG,SAC5EA,GAGP,KC8CeJ,qBAAkB4C,aAhDjC,SAAoB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAExC,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS7D,EAAwB,CAChEyL,UAAW,CAAE0K,GAAI,kCAGnB,GAAIhU,EAAS,OACX5B,cAAC43E,GAAe,CAAA73E,SACbF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAAC43E,GAAe,CAAA73E,SACbF,EAAE,oCAIP,MAAM0D,EAAezB,EAAKyB,aAE1B,OACEvD,cAAC43E,GAAe,CAAA73E,SACdO,eAACwG,IAAI,CAACV,MAAO7C,EAAa2C,KAAKnG,SAAA,CAC7BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS7I,EAAawlB,YACxEzoB,eAAA,KAAAP,SAAA,CAAIwD,EAAa0lB,MAAM,IAACjpB,cAAA,SAAM,IAAEuD,EAAaylB,SAC7C1oB,eAAA,KAAAP,SAAA,CAAIwD,EAAa2lB,aAAa,IAAClpB,cAAA,SAAM,IAAEuD,EAAa4lB,sBAEtDnpB,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SACfC,cAAA,KAAGiE,KAAK,iCAAiCmB,OAAO,SAAQrF,SACrDF,EAAE,oCAGPG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAGlN,SACfC,cAAA,KAAGE,UAAU,8DACX+D,KAAK,2BAA2BmB,OAAO,SAAQrF,SAC9CF,EAAE,uCAQnB,KC3CeF,qBAAkB4C,aATjC,SAAuB3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EACrD,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,qBAAqBE,SACrCA,GAGP,KCVO,MAAMs8D,GAA4B3iE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC2F9BiG,qBAAkB4C,aApEjC,SAAmB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACvC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB3S,EAAQvG,EAAE,oBACV,QAAE+B,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+4D,IAE1C,GAAIz6D,EAAS,OACX5B,cAAC63E,GAAc,CAACzxE,MAAOA,EAAMrG,SAC3BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAAC63E,GAAc,CAACzxE,MAAOA,EAAMrG,SAC1BF,EAAE,+BAIPnH,QAAQC,IAAImJ,GACZ,MAAM+6D,EAAiB/6D,EAAK+6D,eAG5B,OAFAnkE,QAAQC,IAAIkkE,GAGV78D,cAAC63E,GAAc,CAACzxE,MAAOA,EAAMrG,SACzBC,cAACI,IAAKC,IAAG,CAAAN,SACN88D,EAAe9zD,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACjChM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACwiC,IAAW,CAAA/iC,SAAA,CACRmJ,EAAK4uE,MAAM/uE,MAAM3J,OACjBY,cAAC8iC,IAAYC,MAAK,CAChBxiC,IAAM2I,EAAK4uE,MAAM/uE,MAAM3J,OAAU8J,EAAK4uE,MAAM/uE,MAAM,GAAGG,KAAKs+C,uBAAwB,GAClFvjD,KAAO,iBAAgBiF,EAAK0M,OACzB,GACP5V,cAAC8iC,IAAYxzB,OAAM,CAAAvP,SACjBC,cAAA,MAAAD,SAAKmJ,EAAKhD,SAEZ5F,eAACwiC,IAAYxzB,OAAM,CAAAvP,SAAA,CACjBC,cAAC8iC,IAAYG,QAAO,CAClB3f,SAAUtjB,cAAA,QAAME,UAAU,GAAEH,SAAGmJ,EAAK3E,WAAc2E,EAAK3E,WAAW+e,SAAU,KAC5Ey0D,WAAY7uE,EAAKvB,qBAAqBzB,OAExClG,cAAC8iC,IAAYk1C,UAAS,CAAAj4E,SACtBC,cAAC8iC,IAAYm1C,SAAQ,CACnB/xE,KAAK,WACL6L,MAAO3G,IAAOlC,EAAKkW,WAAW/T,OAAO0N,GACrColB,OAAO,EACPhnB,cAAc,cAIlBnX,cAACyE,IAAI,CAACrC,GAAK,gBAAe8G,EAAK0M,KAAK7V,SAClCC,cAAC8iC,IAAYxzB,OAAM,CAAC4oE,GAAI,GAAGn4E,SACzBO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,OAAM9E,SAAA,CAEXF,EAAE,4BAA4B,IAACG,cAACiG,IAAI,CAACC,KAAK,6BA9BRoG,eAmClC,OAKvB,KCpEe3M,qBAAkB4C,aAdjC,SAAsB3C,GAA6C,IAA5C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,MAAEqG,EAAM,IAAIxG,EAE9D,OACEI,cAAC4G,GAAQ,CACPR,MAAOA,EACPD,UAAU,eACVpG,SAECA,GAGP,KCsEeJ,qBAAkB4C,aAtEjC,SAAmC3C,GAA4D,IAA3D,EAAEC,EAAC,MAAEuD,EAAK,YAAE+0E,EAAW,WAAEC,GAAW,EAAI,OAAEr3E,GAAO,GAAOnB,EAG1F,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAC/BnS,QAAQC,IAAIw/E,GACZ,MAAME,EAAsBF,EAAYE,oBAElC7a,EAAUp6D,EAAMmK,OAAOkwD,SAE7B,OACEn9D,eAACg4E,IAAW,CAACv3E,OAAQA,EAAOhB,SAAA,CAC1BC,cAACs4E,IAAYC,SAAQ,CAAAx4E,SAClBo4E,EAAYjyE,OAEflG,cAACs4E,IAAYE,MAAK,CAAAz4E,SACS,IAAtBo4E,EAAY3zD,MACb3kB,EAAE,0BACFs4E,EAAYM,oBAGhBn4E,eAACg4E,IAAYI,cAAa,CAAA34E,SAAA,CACxBO,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACtBo4E,EAAYS,iBAAoB54E,cAAA,QAAAD,SAChCC,cAACkI,IAAK,CAAChI,UAAU,OAAO2E,MAAM,UAAS9E,SAAEF,EAAE,yCACnC,GACRs4E,EAAYU,4BAA+B74E,cAAA,QAAAD,SAC3CC,cAACkI,IAAK,CAACrD,MAAM,UAAS9E,SAAEF,EAAE,+CAClB,MAEVs4E,EAAYS,kBAAoBT,EAAYU,4BAC5Cv4E,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACvBF,EAAE,mCAAmC,IAAEs4E,EAAYljD,gBAEpD,GAEHojD,EAAoBtvE,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACtC1L,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACtBC,cAACiG,IAAI,CAACC,KAAK,aAAa,IAAG,IAC1BkF,IAAOlC,EAAK40C,aAAa1+B,WAAW/T,OAAO0N,GAAY,IAAE,IAEzD3N,IAAOlC,EAAK40C,aAAa1+B,UAAY,IAAMlW,EAAK40C,aAAajxC,WAAWxB,OAAOT,GAAY,IAAE,MAC7FQ,IAAOlC,EAAK40C,aAAa1+B,UAAY,IAAMlW,EAAK40C,aAAahxC,SAASzB,OAAOT,GAAY,IAAG,IAC/F5K,cAAA,SACAM,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BmJ,EAAK40C,aAAa53C,KAAK,IAAClG,cAACiG,IAAI,CAACC,KAAK,YAAY,IAAEgD,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,UAE1F,OAG9BkyE,IAAeD,EAAYhV,UAC3BnjE,cAACyE,IAAI,CAACrC,GAAK,gBAAeo7D,YAAkB2a,EAAYviE,KAAK7V,SAC3DO,eAACg4E,IAAY5zE,OAAM,CAAA3E,SAAA,CAChBF,EAAE,4BAA4B,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAG7C,GAEFkyE,GAAcD,EAAYhV,UAC1BnjE,cAACs4E,IAAY5zE,OAAM,CACjBxE,UAAU,WAAUH,SAEnBF,EAAE,sBACmB,KAGhC,KCnFO,MAAMy8D,GAA2B5iE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC+G7BiG,qBAAkB4C,aA5FjC,SAAkB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACtC,MACMmZ,EADcvV,qBAAWvC,GACA8X,WAE/B,IAAI+/D,EAAYj5E,EAAE,mBAClB,MAAM29D,EAAUp6D,EAAMmK,OAAOkwD,SAIvB36D,EAAkBxE,aAAayE,QAAQvE,EAAKlE,wBAClD,IAAIy+E,GAAsB,GACtB,IAAI71E,KAAS,KAAQJ,GAAsC,MAAnBA,KAC1Ci2E,GAAsB,GAGxB,MAAM,QAAEn3E,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg5D,GAA0B,CAClEpxD,UAAW,CAAE0K,GAAI4nD,GACjBlyD,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACg5E,GAAa,CAAC5yE,MAAO0yE,EAAU/4E,SAC9BC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACg5E,GAAa,CAAC5yE,MAAO0yE,EAAU/4E,SAC7BF,EAAE,8BAIP,MAAMqb,EAAQpZ,EAAK0mD,cACbywB,EAAU/9D,EAAM+9D,QAGtB,OACE34E,eAAC04E,GAAa,CAAC5yE,MAAO8U,EAAMhV,KAAKnG,SAAA,CAC/BC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,GAAI4N,GAAI,GAAGvU,SACvCC,cAAA,MAAAD,SAAKmb,EAAMgiD,cAGf58D,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPO,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SAAA,CAClCmb,EAAM48D,MAAM/uE,MAAM3J,OACnBkB,eAACwiC,IAAW,CAAA/iC,SAAA,CACVC,cAAC8iC,IAAYC,MAAK,CAACxiC,IAAM2a,EAAM48D,MAAM/uE,MAAM3J,OAAU8b,EAAM48D,MAAM/uE,MAAM,GAAGG,KAAKs+C,uBAAyB,KACxGxnD,cAAC8iC,IAAYG,QAAO,CAAAljC,SAChBmb,EAAM48D,MAAM/uE,MAAM3J,OAAU8b,EAAM48D,MAAM/uE,MAAM,GAAGG,KAAKV,YAAc,QAG1E,GACFxI,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,gBAAgBE,SAC7BO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRO,eAAA,MAAAP,SAAA,CAAKF,EAAE,sBAAsB,KAAIqb,EAAM3W,WAAc2W,EAAM3W,WAAW+e,SAAU,MAChFhjB,eAAA,MAAAP,SAAA,CAAKF,EAAE,iBAAiB,KAAIqb,EAAMkE,UAAahU,IAAO8P,EAAMkE,WAAW/T,OAAO0N,GAAa,MAC3FzY,eAAA,MAAAP,SAAA,CAAKF,EAAE,eAAe,KAAIqb,EAAMmE,QAAWjU,IAAO8P,EAAMmE,SAAShU,OAAO0N,GAAa,cAI3F/Y,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,yBACPG,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS8O,EAAM1S,0BAKzElI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,GAAI4N,GAAI,GAAGvU,SACvCC,cAAA,MAAAD,SAAKF,EAAE,0BAETG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,GAAI4N,GAAI,GAAGvU,SACpCg5E,EAKC,GALsBz4E,eAACgpB,IAAK,CAACjlB,KAAK,UAAStE,SAAA,CAC3CC,cAACyE,IAAI,CAACrC,GAAG,cAAarC,SACpBC,cAAA,KAAAD,SAAIF,EAAE,uBACD,IAAEA,EAAE,6CAIhBo5E,EAAQlwE,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC1BhM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAACk5E,GAA0B,CAACC,QAAS3b,EAAS2a,YAAajvE,KAClD,SAKrB,KC1FevJ,qBAAkB4C,aAfjC,SAA4B3C,GAA6C,IAA5C,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,SAAEsG,GAAUzG,EACpE,MAAM49D,EAAUp6D,EAAMmK,OAAOkwD,SAE7B,OACEz9D,cAAC4G,GAAQ,CACPR,MAAOvG,EAAE,4BACTwG,SAAUA,EACVF,UAAY,gBAAeq3D,IAC3B93D,iBAAiB,QAAO3F,SAEvBA,GAGP,KCdeq5E,OALS,CACpBC,4BAA6B,iCAC7BC,sBAAuB,4BCiDZ35E,qBAAkB4C,aAnCR3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,GAAQ/R,EAAA,OACjDU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,sBAAsBE,SAAA,CACzCC,cAACgS,KAAK,CAAC3N,KAAK,OACL8N,UAAU,WACVjM,KAAK,UACLhG,UAAYyR,EAAOujB,QAAW,0BAA4B,eAC1DjjB,aAAa,QACpBjS,cAACkS,KAAY,CAAChM,KAAK,UAAUiM,UAAU,OAAOjS,UAAU,wBAE1DI,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BF,EAAE,oCAAoC,IAACG,cAAA,SACxCM,eAAA,MAAAP,SAAA,CACEO,eAAA,MAAAP,SAAA,CAAKF,EAAE,0BAA0B,IAAE,IACjCG,cAAA,KAAGoF,OAAO,SACRC,IAAI,aACJpB,KAAMm1E,GAAgBC,4BAA4Bt5E,SAAEF,EAAE,qCAE1DS,eAAA,MAAAP,SAAA,CAAKF,EAAE,4BAA4B,IAAE,IACnCG,cAAA,KAAGoF,OAAO,SAASC,IAAI,aAAapB,KAAMm1E,GAAgBE,sBAAsBv5E,SAAEF,EAAE,qCAI1FS,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAAA,CAEtBF,EAAE,oBAAoB,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAE9B,KC7CN,MAAM68D,GAAkCrpE,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECwHpCiG,qBAAkB4C,aAtGjC,SAAwB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACxCwG,EAAQvG,EAAE,mBACd,MAAM05E,EAAwBn2E,EAAMmK,OAAOqI,GACrC4nD,EAAUp6D,EAAMmK,OAAOkwD,UAEvB,QAAE77D,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASy/D,GAAiC,CACzE73D,UAAW,CAAE0K,GAAI2jE,GACjBjuE,YAAa,kBAGRkuE,GAAejnE,YAAYwkE,IAGlC,GAAIn1E,EAAS,OACX5B,cAACy5E,GAAmB,CAACrzE,MAAOA,EAAMrG,SAChCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACy5E,GAAmB,CAACrzE,MAAOA,EAAMrG,SAC/BF,EAAE,sCAIP,MAAMs4E,EAAcr2E,EAAKymD,oBACnBliD,EAAW8xE,EAAY3vB,cAActiD,KAG3C,OAAIiyE,EAAYhV,UAEZnjE,cAACy5E,GAAmB,CAACrzE,MAAOA,EAAOC,SAAUA,EAAStG,SACpDC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,qCAAqCE,SAClDC,cAAC8G,IAAKC,KAAI,CAAAhH,SAAEF,EAAE,qCAOpBG,cAACy5E,GAAmB,CAACrzE,MAAOA,EAAOC,SAAUA,EAAStG,SACpDO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAACk5E,GAA0B,CAAC1b,QAASA,EAAS2a,YAAaA,EAAaC,YAAY,EAAOr3E,QAAQ,MAErGf,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,sCAAsCE,SACnDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACNo4E,EAAY3vE,YACZxI,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS+rE,EAAY3vE,gBACvE3I,EAAE,+CAIVG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CAAEyiB,QAAS,IAE1BtiB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAE5B0tE,EAAmB,CACrBxkD,QAASriB,EAAOqiB,QAChBqzB,oBAAqBnlD,EAAMmK,OAAOqI,IAGpC4jE,EAAY,CAAEtuE,UAAW,CACvB6H,MAAO2mE,GAENxmE,eAAgB,KAGlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX,MAAMotE,EAAU73E,EAAK83E,mBAAmB9kD,aAAalf,GACrDvS,EAAQnB,KAAK,0BAA4By3E,EAAQ,IAChDjmE,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC65E,GAAgB,CACfnoE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,GACR,cAWpB,KCvHO,MAAMinE,GAA+BpgF,GAAI;;;;;;;;;;;;;;;;;;;;;;;ECajCiG,qBAAkB4C,aARjC,SAAqB3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EACnD,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,mBAAmBE,SACjCA,GAGT,KCsCeJ,qBAAkB4C,aApCjC,SAAiB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAErC,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASw2E,IAE1C,GAAIl4E,EAAS,OACX5B,cAAC+5E,GAAY,CAAAh6E,SACVF,EAAE,+BAGP,GAAIgC,EAAO,OACT7B,cAAC+5E,GAAY,CAAAh6E,SACVF,EAAE,2CAIP,MAAM2L,EAAgB1J,EAAK2J,0BAE3B,OACEzL,cAAC+5E,GAAY,CAAC3zE,MAAOvG,EAAE,mBAAmBE,SACxCC,cAACI,IAAKC,IAAG,CAACwL,OAAK,EAACC,MAAI,EAAA/L,SAChByL,EAAczC,MAAM3J,OAAUoM,EAAczC,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC/DhM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC8G,IAAI,CAACV,MAAO8C,EAAK9C,MAAMrG,SACtBC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAASlD,EAAKmD,iBAHhCC,eAM3B,IACR,MAKb,KC3Be3M,qBAAkB4C,aAbjC,SAAgC3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAE9D,OACEI,cAAC4G,GACC,CACAlB,iBAAiB,UAAS3F,SAEzBA,GAGP,KCfO,MAAMi6E,GAAkBtgF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECqGpBiG,qBAAkB4C,aAvFjC,SAAiC3C,GAA6B,IAA5B,EAAEC,EAAC,GAAE+V,EAAE,SAAE28D,GAAS,GAAO3yE,EACzD,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS02E,GAAiB,CACzD9uE,UAAW,CAAE0K,GAAIA,KAGnB,GAAIhU,EAAS,OACX5B,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,IAEhC,GAAIa,EAAO,OACPhC,EAAE,6CAGN,MAAMg1B,EAAQ/yB,EAAKgzB,aACbmlD,EAAaplD,EAAM5yB,MAAM8G,MAE/B,IAAIs2C,EACA3yC,EACAgxB,EACJ,IAAKA,KAAQu8C,EAAY,CACvB,IAAI/wE,EAAOw0B,EAAKx0B,KACZA,EAAK40C,eACPuB,EAAYn2C,EAAKgxE,eACjBxtE,EAAiBxD,EAAK40C,aAAaloC,GAEvC,CAGA,OACEtV,eAACwG,IAAI,CAACV,MAAOvG,EAAE,uCAAuCE,SAAA,CACpDC,cAAA,OAAKE,UAAU,mBAAkBH,SAC/BO,eAACqQ,IAAK,CAAC9E,OAAO,EAAK9L,SAAA,CACjBC,cAAC2Q,IAAMnK,OAAM,CAAAzG,SACXO,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRC,cAAC2Q,IAAMC,UAAS,CAAA7Q,SAAEF,EAAE,kBACpBG,cAAC2Q,IAAMC,UAAS,CAAC1Q,UAAU,aAAYH,SAAEF,EAAE,wBAG/CS,eAACqQ,IAAM5J,KAAI,CAAAhH,SAAA,CACRk6E,EAAWluE,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OACvB1L,eAACqQ,IAAMtQ,IAAG,CAAAN,SAAA,CACRO,eAACqQ,IAAMnL,IAAG,CAAAzF,SAAA,CACPmJ,EAAKkb,YAAY,IAACpkB,cAAA,SACnBA,cAAA,QAAME,UAAU,aAAYH,SACzBmJ,EAAKV,iBAGVxI,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAAEmJ,EAAKua,iBAP1BnX,eAQJ,IAEdhM,eAACqQ,IAAMtQ,IAAG,CAACH,UAAU,OAAMH,SAAA,CACzBC,cAAC2Q,IAAMnL,IAAG,CAAAzF,SACPF,EAAE,mBAELG,cAAC2Q,IAAMnL,IAAG,CAACtF,UAAU,aAAYH,SAC5B80B,EAAMpR,0BAMjBoR,EAAMK,SAAaxoB,GAAkB2yC,EACrC/+C,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACN80B,EAAMK,QACN50B,eAAA,QAAMJ,UAAU,aAAYH,SAAA,CAC1BO,eAAA,MAAAP,SAAA,CAAIC,cAACiG,IAAI,CAACC,KAAK,mBAAmB,IAAErG,EAAE,0CAErCg1B,EAAMK,QACPl1B,cAAA,SAAMA,cAAA,YAEN,GAEF0M,GAAkB2yC,EAClBr/C,cAACyyE,GAAqB,CACpB/lE,eAAgBA,EAChBF,KAAM6yC,EACNkzB,SAAUA,IAEV,MAGJ,KAIV,KClGO,MAAMQ,GAAsBr5E,GAAI;;;;;;;;ECgJxBiG,qBAAkB4C,aAvHjC,SAA4B3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEmY,GAAU5b,EAC1D,MACMm0E,EADcvwE,qBAAWvC,GACa8yE,wBACtCd,EAAYh1D,iBAAO,MACnBi1D,EAAiB5yE,eAAA,QAAAP,SAAA,CAAMC,cAACiG,IAAI,CAACC,KAAK,gBAAgB,IAAErG,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,sBACrGitE,EAAUC,GAAcj+D,mBAAS+9D,GAClC9sE,EAAQvG,EAAE,mBACV+V,EAAKxS,EAAMmK,OAAOqI,IAClB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS02E,GAAiB,CACzD9uE,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,kBAGR+nE,GAAqB9gE,YAAYwgE,IAIxC,GAFAz0E,aAAaC,QAAQC,EAAKb,0BAA2B6d,EAASmI,UAE1D/hB,EAAS,OACX5B,cAACm6E,GAAuB,CAAC/zE,MAAOA,EAAMrG,SACpCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACm6E,GAAuB,CAAC/zE,MAAOA,EAAMrG,SACnCF,EAAE,kCAIP,MAAMg1B,EAAQ/yB,EAAKgzB,aACbzR,EAAUvhB,EAAKgzB,aAAazR,QAqBlC,IAAI+2D,EACAC,EA6CJ,MAzCoB,SAAhBxlD,EAAMylD,OACRj3E,EAAQnB,KAAM,2BAA0B0T,KAKrCyN,EAAQk3D,yBAaFxG,GACTqG,EAAcv6E,EAAE,wDAChBw6E,EAAar6E,cAAA,UACXE,UAAU,4BACVwd,IAAKu1D,EACL1jE,QA/CJ,WACE0jE,EAAUt0D,QAAQ60D,aAAa,WAAY,YAC3CJ,EAAWvzE,EAAE,sCAIbwzE,EAAkB,CAAEnoE,UAAW,CAAE0K,GAAIA,KAAQxC,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EACzDtT,QAAQC,IAAI,WAAYmJ,GACxB,MAAM2xE,EAAc3xE,EAAK04E,8BAA8BC,wBAAwBhH,YAC/EtlE,OAAOqN,SAASvX,KAAOwvE,CAAW,IACjC//D,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,EAAM,GAE9D,EA+B0B9B,SAErBozE,MAGHiH,EAAcv6E,EAAE,wDAChBw6E,EAAar6E,cAACyE,IAAI,CAACrC,GAAG,IAAGrC,SACvBO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdF,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,yBA3BvDk0E,EAAcp6E,cAACspB,IAAK,CAACjlB,KAAK,UAAStE,SAChCF,EAAE,uDAELw6E,EAAar6E,cAACyE,IAAI,CAACrC,GAAG,wBAAuBrC,SAC3CO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdF,EAAE,wCAAwC,IAACG,cAACiG,IAAI,CAACC,KAAK,wBA0B3DlG,cAACm6E,GAAuB,CAAC/zE,MAAOA,EAAMrG,SAClCO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACwG,IAAI,CAACV,MAAOvG,EAAE,wCAAwCE,SAAA,CACrDO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAIE,UAAW,OAAOH,SAAEF,EAAE,oDACzBA,EAAE,+DAA+D,IAACG,cAAA,SAAMA,cAAA,SACxEo6E,KAEHp6E,cAAC8G,IAAKwI,OAAM,CAAAvP,SACTs6E,SAIPr6E,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC06E,GAAwB,CAAC9kE,GAAIA,UAK1C,KC5HejW,qBAAkB4C,aAbjC,SAAiC3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAE/D,OACEI,cAAC4G,GAAQ,CACPR,MAAO,GACPV,iBAAiB,WAAU3F,SAE1BA,GAGP,KCwGeJ,qBAAkB4C,aAvGjC,SAA6B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAIjD,MAAMwG,EAAQvG,EAAE,mBACV+V,EAAKxS,EAAMmK,OAAOqI,IAClB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS02E,GAAiB,CACzD9uE,UAAW,CAAE0K,GAAIA,KAGnB,GAAIhU,EAAS,OACX5B,cAAC26E,GAAwB,CAACv0E,MAAOA,EAAMrG,SACrCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAAC26E,GAAwB,CAACv0E,MAAOA,EAAMrG,SACpCF,EAAE,kCAIPnH,QAAQC,IAAImJ,GACZ,MAAM+yB,EAAQ/yB,EAAKgzB,aACnBp8B,QAAQC,IAAIk8B,GACZ,MAAMolD,EAAaplD,EAAM5yB,MAAM8G,MAI/B,GAHArQ,QAAQC,IAAIshF,IAGPplD,EACH,OACE70B,cAAC26E,GAAwB,CAACv0E,MAAOA,EAAMrG,SACpCF,EAAE,4CAKT,IAAI+6E,EAAY,GACZC,EAAc,GACdC,EAAc,GACdvI,GAAW,EAkCf,MA/BqB,cAAjB19C,EAAMxsB,QAGY,SAAhBwsB,EAAMylD,OACRM,EAAY/6E,EAAE,uDACdg7E,EAAch7E,EAAE,4DAEhB+6E,EAAY/6E,EAAE,4CACdg7E,EAAch7E,EAAE,gDAGlB0yE,GAAW,EAGS,SAAhB19C,EAAMylD,QACRQ,EAAcj7E,EAAE,kDAKlB+6E,EAAY/6E,EAAE,yCAEdg7E,EAAch7E,EAAE,4CAGI,SAAhBg1B,EAAMylD,QACRQ,EAAcj7E,EAAE,8CAMlBG,cAAC26E,GAAwB,CAACv0E,MAAOA,EAAMrG,SACnCO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCO,eAACwG,IAAI,CAACV,MAAOvG,EAAE,gCAAgCE,SAAA,CAC7CO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAIE,UAAW,OAAOH,SAAE66E,IACvBE,EAAY,IAAC96E,cAAA,SACb66E,KAEH76E,cAAC8G,IAAKwI,OAAM,CAAAvP,SACVC,cAACyE,IAAI,CAACrC,GAAG,iBAAgBrC,SACvBO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UAAS9E,SAAA,CAEdF,EAAE,4BAA4B,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAMrDlG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAG4N,GAAI,EAAEvU,SACrCC,cAAC06E,GAAwB,CAAC9kE,GAAIA,EAAI28D,SAAUA,UAKxD,KCrHO,MAAMh1B,GAA4B7jD,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC0B9BiG,qBAAkB4C,aAjBjC,SAA+B3C,GAAmD,IAAlD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,EAAQ,YAAE6xE,EAAY,IAAIhyE,EAC7E,OACII,cAACuG,GAAe,CAAAxG,SACdC,cAAA,OAAKE,UAAU,eAAcH,SAC3BO,eAACH,IAAS,CAAAJ,SAAA,CACRC,cAACC,IAAKuG,OAAM,CAACJ,MAAOvG,EAAE,sBAAuBwG,SAAWurE,EAAa7xE,SACnEC,cAAA,OAAKE,UAAU,sBAAqBH,SAClCC,cAAC2yE,GAAe,QAGlB5yE,QAKd,KCuJeJ,qBAAkB4C,aAxJjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,kBAGvBjJ,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,EAAI,UAAEgO,GAAcxM,YAASi6C,GAA2B,CAC9EtyC,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,iBAKf,GAAI1J,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC+6E,GAAsB,CAAAh7E,SACrBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC+6E,GAAsB,CAAAh7E,SACpBF,EAAE,6CAIP,MAAMyE,EAAO0G,EAAS1G,KAChBw6C,EAA0Bh9C,EAAKg9C,wBAGrC,OAAKA,EAAwB/1C,MAAM3J,OAmBjCkB,eAACy6E,GAAsB,CAACnJ,YAAattE,EAAKgf,SAASvjB,SAAA,CACjDC,cAAA,MAAAD,SAAKF,EAAE,gCACPG,cAAColD,GACC,CACA72C,SAAUuwC,EAAwBvwC,SAClCG,WAAYA,KACVoB,EAAU,CACR5E,UAAW,CACTkF,MAAO0uC,EAAwBvwC,SAAS8B,WAE1CC,YAAaA,CAACC,EAAcvE,KAA2B,IAAzB,gBAAEwE,GAAiBxE,EAC/C,MAAMyE,EAAWD,EAAgBsuC,wBAAwB/1C,MACnDwF,EAAWiC,EAAgBsuC,wBAAwBvwC,SAEzD,OAAOkC,EAASrR,OACZ,CAGE0/C,wBAAyB,CACvBpuC,WAAYH,EAAeuuC,wBAAwBpuC,WACnD3H,MAAO,IAAKwH,EAAeuuC,wBAAwB/1C,SAAU0H,GAC7DlC,aAGJgC,CAAc,GAEpB,EACFxQ,SAEE++C,EAAwB/1C,MAAMgD,KAAIQ,IAAA,IAAC,KAAErD,GAAMqD,EAAA,OAC3CvM,cAAC8G,IAAI,CAAA/G,SACHC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,GAAG3G,SACvBO,eAAA,OAAKJ,UAAU,UAASH,SAAA,CACtBO,eAAA,MAAAP,SAAA,CACImJ,EAAK40C,aAAar2C,sBAAsBvB,KAC1C5F,eAAA,QAAMJ,UAAU,iBAAgBH,SAAA,CAAC,IAACC,cAAC++C,GAAkB,CAAC12C,OAAQa,EAAKu1C,sBAErEz+C,cAACiG,IAAI,CAACC,KAAK,UAAU,IAAGkF,IAAOlC,EAAKsD,MAAMnB,OAAO0N,GAAa,IAAG,IACjE/Y,cAAA,QAAME,UAAU,aAAYH,SACzBqL,IAAOlC,EAAKsD,KAAO,IAAMtD,EAAK40C,aAAajxC,WAAWxB,OAAOT,KACzD5K,cAAA,SACPA,cAACiG,IAAI,CAACC,KAAK,SAAS,IAAGgD,EAAK40C,aAAalxC,yBAAyBjF,qBAAqBzB,KAAM,IAAG,IAChGlG,cAAA,QAAME,UAAU,aAAYH,SACxBmJ,EAAK40C,aAAalxC,yBAAyB1G,YAInD5F,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIvG,GAAI,EAAE3G,SAAA,CACG,cAAvBmJ,EAAKu1C,cACLz+C,cAACyE,IAAI,CAACrC,GAAK,4BAA2B8G,EAAK40C,aAAaloC,MAAM1M,EAAKsD,OAAOzM,SACxEC,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,OACND,KAAK,KACL1E,UAAU,GAAEH,SAEXF,EAAE,oBAGL,GAEsB,cAAvBqJ,EAAKu1C,eAAkCv1C,EAAKkpE,qBAC7CpyE,cAACyE,IAAI,CAACrC,GAAK,8BAA6B8G,EAAK40C,aAAaloC,MAAM1M,EAAKsD,QAAQtD,EAAK0M,KAAK7V,SACrFC,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACND,KAAK,KACL1E,UAAU,OAAMH,SAEfF,EAAE,sBAGJqJ,EAAKopE,uBACNtyE,cAACyE,IAAI,CAACrC,GAAK,gCAA+B8G,EAAK40C,aAAaloC,MAAM1M,EAAKsD,QAAQtD,EAAK0M,KAAK7V,SACvFC,cAAC0E,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UACND,KAAK,KACL1E,UAAU,OAAMH,SAEfF,EAAE,oBAGP,YA1DDyM,eA+DJ,SA9GbtM,cAAC+6E,GAAsB,CAACnJ,YAAattE,EAAKgf,SAASvjB,SACjDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAAC8G,IAAI,CAACkI,UAAWnP,EAAE,8BAA8BE,SAC/CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,4CA8GnB,KChKeF,qBAAkB4C,aATjC,SAA4B3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAC1D,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,0BAA0BE,SAC1CA,GAGP,KCmCeJ,qBAAkB4C,aAjCjC,SAAiC3C,GAA2C,IAA1C,EAAEC,EAAC,UAAEm4C,EAAS,QAAEu8B,EAAO,OAAExzE,GAAO,GAAOnB,EAGvE,OACEU,eAACg4E,IAAW,CAACv3E,OAAQA,EAAOhB,SAAA,CAC1BC,cAACs4E,IAAYC,SAAQ,CAAAx4E,SAClBi4C,EAAU9xC,OAEblG,cAACs4E,IAAYE,MAAK,CAAAz4E,SACfi4C,EAAU/iB,eAEb30B,eAACg4E,IAAYI,cAAa,CAAA34E,SAAA,CACxBO,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACxBC,cAAA,KAAAD,SAAKi4C,EAAUhS,UAAanmC,EAAE,qBAAuBm4C,EAAUp1C,UAAa,IAAG,IACtD,IAAtBo1C,EAAUp1C,SAAmBo1C,EAAUhS,UAAanmC,EAAE,mBAAoBA,EAAE,oBAEjFS,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACvBF,EAAE,qBAAqB,IAAG,IAC3BS,eAAA,KAAAP,SAAA,CAAIi4C,EAAU/R,SAAS,IAAE,IAAI,IAAE+R,EAAU9R,6BAG3CquC,EACAv0E,cAACyE,IAAI,CAACrC,GAAImyE,EAAQx0E,SAChBO,eAACg4E,IAAY5zE,OAAM,CAAA3E,SAAA,CAChBF,EAAE,2BAA2B,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAG5C,KAIV,KC3CO,MAAM80E,GAAqCthF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgDvCiG,qBAAkB4C,aAhCjC,SAAwB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC5C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS03E,IAE1C,GAAIp5E,EAAS,OACX5B,cAACi7E,GAAmB,CAAAl7E,SAClBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACi7E,GAAmB,CAAAl7E,SACjBF,EAAE,oCAIP,MAAM8C,EAAcb,EAAKgkC,wBAEzB,OACE9lC,cAACi7E,GAAmB,CAAAl7E,SAClBC,cAACI,IAAKC,IAAG,CAAAN,SACN4C,EAAYoG,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAC9BhM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAACk7E,GAAwB,CACvBljC,UAAW9uC,EACXqrE,QAAS,mBAAqBrrE,EAAK0M,MAE5B,OAKrB,KCzBejW,qBAAkB4C,aAfjC,SAA0B3C,GAA4D,IAA3D,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEqoB,EAAS,aAAEisC,EAAY,SAAE53D,GAAUH,EAEjF,OACEI,cAAC4G,GAAQ,CACPR,MAAOslB,EACPrlB,SAAUsxD,EACVxxD,UAAU,oBACVT,iBAAiB,QAAO3F,SAEvBA,GAGP,KCjBO,MAAMylC,GAAsB9rC,GAAI;;;;;;;;;;;;;;;;;;;;;;;EC+JxBiG,qBAAkB4C,aAvIjC,SAAsB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC1C,MAAMyyB,EAAc7uB,qBAAWvC,GACzB8X,EAAasZ,EAAYtZ,WACzBnO,EAAaynB,EAAYxnB,iBAEzB6gB,EAAY7rB,EAAE,qBACd+V,EAAKxS,EAAMmK,OAAOqI,GAClBlJ,EAAiBtJ,EAAMmK,OAAOgxC,SAC9Bc,EAAYj8C,EAAMmK,OAAOf,MAEzB,QAAE5K,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASkiC,GAAqB,CAC7Dt6B,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,kBAGP1J,QAASu5E,EAAct5E,MAAOu5E,EAAYt5E,KAAMu5E,GAAc/3E,YAASk8C,GAAiB,CAC9Ft0C,UAAW,CAAEwB,eAAgBA,EAAgBF,KAAM6yC,GACnDp0C,MAAQyB,IAAmB2yC,KAGtBm6B,GAAejnE,YAAYwkE,IAGlC,GAAIn1E,EAAS,OACX5B,cAACs7E,GAAiB,CAAC5vD,UAAWA,EAAU3rB,SACtCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACs7E,GAAiB,CAAC5vD,UAAWA,EAAU3rB,SACrCF,EAAE,kCAIP,MAAMm4C,EAAYl2C,EAAKogC,sBACjB59B,EAAOxC,EAAKwC,KACZqzD,EAAe3f,EAAU9xC,KAE/B,OAAI5B,EAAKm2D,sBAAwBziB,EAAUjS,UAEvC/lC,cAACs7E,GAAiB,CAAC5vD,UAAWA,EAAU3rB,SACtCC,cAAC8G,IAAI,CAAC4kB,UAAW7rB,EAAE,sCAAsCE,SACvDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,wDAQXG,cAACs7E,GAAiB,CAAC5vD,UAAWA,EAAWisC,aAAcA,EAAa53D,SAClEO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAACu7E,GAA0B,CAACvjC,UAAWA,EAAWj3C,QAAQ,MAE5DT,eAACF,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAAA,EAC5Bs7E,GAAcF,GAAiBC,EAc7B,GAbFp7E,cAAC8G,IAAI,CAAC4kB,UAAW7rB,EAAE,yCAAyCE,SAC1DO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,yCAAyC,IAACG,cAAA,SAAMA,cAAA,SACnDM,eAAA,KAAAP,SAAA,CACGqL,IAAOi0C,GAAWh0C,OAAO0N,GAAY,IAAE,IACvC3N,IAAO8Q,GAAsBm/D,EAAUpjB,cAAcprD,YAAYxB,OAAOT,GAAY,IAAE,MACtFQ,IAAO8Q,GAAsBm/D,EAAUpjB,cAAcnrD,UAAUzB,OAAOT,GAAY,IAAC5K,cAAA,YAErFq7E,EAAUpjB,cAAcxwD,sBAAsBvB,KAAO,IAAMrG,EAAE,cAAgB,IAC5Ew7E,EAAUpjB,cAAcrrD,yBAAyBjF,qBAAqBzB,UAM9ElG,cAAC8G,IAAI,CAAC4kB,UAAW7rB,EAAE,yCAAyCE,SAC1DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAAS4rC,EAAUxvC,uBAI1ExI,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC8G,IAAI,CAAC4kB,UAAW7rB,EAAE,2BAA2BE,SAC5CC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CAAEyiB,QAAS,IAE1BtiB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAE5B0tE,EAAmB,CACrBxkD,QAASriB,EAAOqiB,QAChBgN,sBAAuB9+B,EAAMmK,OAAOqI,IAGlClJ,GAAkB2yC,IACpBq6B,EAAiBQ,eAAiB76B,EAClCq6B,EAAiB57B,aAAepxC,GAGlC8sE,EAAY,CAAEtuE,UAAW,CACvB6H,MAAO2mE,GAENxmE,eAAgB,KAGlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBpJ,QAAQC,IAAI,6CACZ,MAAMghF,EAAU73E,EAAK83E,mBAAmB9kD,aAAalf,GACrDvS,EAAQnB,KAAK,0BAA4By3E,EAAQ,IAChDjmE,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC65E,GAAgB,CACfnoE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,GACR,cAWpB,KCjJelT,qBAAkB4C,aARjC,SAA8B3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAC5D,OACEI,cAAC4G,GAAQ,CAACR,MAAOvG,EAAE,4BAA4BE,SAC5CA,GAGP,KCoDeJ,qBAAkB4C,aAlDjC,SAAoC3C,GAAyE,IAAxE,EAAEC,EAAC,aAAEi4C,EAAY,QAAEy8B,EAAO,OAAExzE,GAAO,EAAK,oBAAEy6E,GAAoB,GAAO57E,EAKpG67E,EAAO57E,EAAE,iBAKb,OAJKi4C,EAAa9R,WAA+C,SAAlC8R,EAAa7D,mBAC1CwnC,EAAO57E,EAAE,iBAITS,eAACg4E,IAAW,CAACv3E,OAAQA,EAAOhB,SAAA,CAC1BC,cAACs4E,IAAYC,SAAQ,CAAAx4E,SAClB+3C,EAAa5xC,OAEhBlG,cAACs4E,IAAYE,MAAK,CAAAz4E,SACf+3C,EAAajE,oBAEhBvzC,eAACg4E,IAAYI,cAAa,CAAA34E,SAAA,CACxBO,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACxBC,cAAA,KAAAD,SAAK+3C,EAAa9R,UAAanmC,EAAE,qBAAuBi4C,EAAal1C,UAAa,IAAG,IACpF/C,EAAE,mBAAmB,MAAI47E,IAFInvE,gBAIhChM,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACvBF,EAAE,wBAAwB,IAAG,IAC9BS,eAAA,KAAAP,SAAA,CAAI+3C,EAAa9D,YAAY,IAAgC,IAA7B8D,EAAa9D,YAAqBn0C,EAAE,iBAAmBA,EAAE,uBAF3DyM,gBAI9BkvE,EACAl7E,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACvBF,EAAE,uBAAuB,KAAEG,cAAA,KAAAD,SAAI+3C,EAAa4jC,2BADfpvE,gBAGhC,GACAkvE,GAAuB1jC,EAAa6jC,uBAAyB,EAC7Dr7E,eAACg4E,IAAYK,cAAa,CAAA54E,SAAA,CACvBF,EAAE,4BAA4B,KAAEG,cAAA,KAAAD,SAAI+3C,EAAa8jC,kCADpBtvE,gBAGhC,MAEFioE,EACAv0E,cAACyE,IAAI,CAACrC,GAAImyE,EAAQx0E,SAChBO,eAACg4E,IAAY5zE,OAAM,CAACm3E,cAAe,SAAS97E,SAAA,CACzCF,EAAE,6BAA6B,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAG9C,KAIV,KC7DO,MAAM41E,GAAuCpiF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECoDzCiG,qBAAkB4C,aAnCjC,SAA0B3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC9C,MAAM,QAAEgC,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASw4E,IAE1C,GAAIl6E,EAAS,OACX5B,cAAC+7E,GAAqB,CAAAh8E,SACpBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAAC+7E,GAAqB,CAAAh8E,SACnBF,EAAE,sCAIP,MAAM6C,EAAgBZ,EAAK6xC,0BAE3B,OACE3zC,cAAC+7E,GAAqB,CAAAh8E,SAClBC,cAACI,IAAKC,IAAG,CAAAN,SACN2C,EAAcqG,MAAMgD,KAAIC,IAAA,IAAC,KAAE9C,GAAM8C,EAAA,OAChChM,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAACg8E,GAA2B,CAC1BlkC,aAAc5uC,EACdqrE,QAAS,sBAAwBrrE,EAAK0M,MAHJtJ,eAK3B,OAOvB,KCce3M,qBAAkB4C,aAlDjC,SAA2B3C,GAAqD,IAApD,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,2BAAE44E,GAA4Br8E,EAC3E,MAAO45E,GAAejnE,YAAYwkE,IAElC,OACE/2E,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACwS,KAAM,CACLC,cAAe,CAAEyiB,QAAS,IAE1BtiB,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAE5B0tE,EAAmB,CACrBxkD,QAASriB,EAAOqiB,QAChBiK,yBAA0B88C,GAG5BzC,EAAY,CAAEtuE,UAAW,CACvB6H,MAAO2mE,GAENxmE,eAAgB,KAGlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBpJ,QAAQC,IAAI,6CACZ,MAAMghF,EAAU73E,EAAK83E,mBAAmB9kD,aAAalf,GACrDvS,EAAQnB,KAAK,0BAA4By3E,EAAQ,IAChDjmE,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC65E,GAAgB,CACfnoE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,GACR,OAMd,KCpBelT,qBAAkB4C,aA1BjC,SAAmD3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAEvE,OACEU,eAACwG,IAAI,CAACV,MAAOvG,EAAE,2CAA2CE,SAAA,CACxDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAACspB,IAAK,CAACjlB,KAAK,UAAStE,SAClBF,EAAE,yDAGPG,cAAC8G,IAAKwI,OAAM,CAAAvP,SACZC,cAACyE,IAAI,CAACrC,GAAG,wBAAuBrC,SAC9BO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,aACVmE,KAAK,SAAQtE,SAAA,CAEZF,EAAE,wCAAwC,IAACG,cAACiG,IAAI,CAACC,KAAK,2BAMjE,KCHevG,qBAAkB4C,aAxBjC,SAAwC3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAE5D,OACEU,eAACwG,IAAI,CAACV,MAAOvG,EAAE,2CAA2CE,SAAA,CACxDC,cAAC8G,IAAKC,KAAI,CAAAhH,SACPF,EAAE,yDAELG,cAAC8G,IAAKwI,OAAM,CAAAvP,SACZC,cAACyE,IAAI,CAACrC,GAAG,6BAA4BrC,SACnCO,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,aACVmE,KAAK,SAAQtE,SAAA,CAEZF,EAAE,qCAAqC,IAACG,cAACiG,IAAI,CAACC,KAAK,2BAM9D,KC6BevG,qBAAkB4C,aA/CP3C,IAAA,IAAC,EAAEC,EAAC,aAAE6R,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAezd,EAAA,OAC1FU,eAACsR,KAAM,CAAA7R,SAAA,CACLO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,8BAA8BE,SAAA,CACjDC,cAACob,GAAY,CACXzB,SAAU9G,EAAOuM,UACjBxF,SAAWpN,GAAS6Q,EAAc,YAAa7Q,GAC/CqN,OAAQA,IAAMuD,EAAgB,aAAa,KAE7Cpd,cAACkS,KAAY,CAAChM,KAAK,YAAYiM,UAAU,OAAOjS,UAAU,wBAE5DI,eAAA,SAAOJ,UAAU,aAAYH,SAAA,CAC1BF,EAAE,oCAAoC,IAACG,cAAA,SACxCM,eAAA,MAAAP,SAAA,CACEO,eAAA,MAAAP,SAAA,CAAKF,EAAE,0BAA0B,IAAE,IACjCG,cAAA,KAAGoF,OAAO,SACRC,IAAI,aACJpB,KAAMm1E,GAAgBC,4BAA4Bt5E,SAEjDF,EAAE,qCAGPS,eAAA,MAAAP,SAAA,CAAKF,EAAE,4BAA4B,IAAE,IACnCG,cAAA,KAAGoF,OAAO,SACRC,IAAI,aACJpB,KAAMm1E,GAAgBE,sBAAsBv5E,SAE3CF,EAAE,+BAGPG,cAAA,MAAAD,SACGF,EAAE,8CAITS,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,IAAiBmB,EAAOuM,UAAUrf,SAAA,CAEzC8S,EAAOuM,UAAyDvf,EAAE,mBAA9CA,EAAE,wCACxB,IAAI,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAEZ,KCxDN,MAAMg2E,GAA8BhrE,OAAaC,MAAM,CAC1DiO,UAAWlO,OACR2xC,WACAxxC,SAASxR,YAAE,yBCkEHF,qBAAkB4C,aApDjC,SAA4B3C,GAA8D,IAA7D,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAE8H,EAAS,yBAAEg0B,GAA0Bv/B,EACrF,MAAOy0C,GAAsB9hC,YAAYq2C,IAEzC,OACE5oD,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,uBAAuBE,SACpCO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CAERC,cAAA,OAAKiM,wBAAyB,CAAEC,OAAQC,KAAUC,SAAS+yB,EAAyBiV,uBACpFp0C,cAACwS,KAAM,CACLC,cAAe,CAAEyiB,QAAS,IAC1BviB,iBAAkBupE,GAClBtpE,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCqoC,EAAmB,CAAEnpC,UAAW,CAC9B6H,MAAO,CACLosB,yBAA0BA,EAAyBvpB,GACnDyN,QAASlY,EACTiU,UAAWtD,GAAejJ,EAAOuM,aAGlClM,eAAgB,KAGlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACxBpJ,QAAQC,IAAI,4DACZ,MAAM87D,EAAwB3yD,EAAKqnD,0BAA0B7H,oBAAoB1rC,GACjFvS,EAAQnB,KAAM,6CAA4CuyD,IAAwB,IACjF/gD,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACm8E,GAA2B,CAC1BzqE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACRuK,gBAAiBA,EACjBC,cAAeA,GACf,QAMd,KC9Ce1d,qBAAkB4C,aAfjC,SAA6B3C,GAA4D,IAA3D,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,UAAEqoB,EAAS,aAAEisC,EAAY,SAAE53D,GAAUH,EAEpF,OACEI,cAAC4G,GAAQ,CACPR,MAAOslB,EACPrlB,SAAUsxD,EACVxxD,UAAU,sBACVT,iBAAiB,QAAO3F,SAEvBA,GAGP,KCjBO,MAAMszC,GAAyB35C,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EC2F3BiG,qBAAkB4C,aAzEjC,SAAyB3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EAC7C,MAAM8rB,EAAY7rB,EAAE,wBACd+V,EAAKxS,EAAMmK,OAAOqI,IAGlB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS+vC,GAAwB,CAChEnoC,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACo8E,GAAoB,CAAC1wD,UAAWA,EAAU3rB,SACzCC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACo8E,GAAoB,CAAC1wD,UAAWA,EAAU3rB,SACxCF,EAAE,qCAIP,MAAMi4C,EAAeh2C,EAAKq9B,yBACpB9b,EAAUvhB,EAAKwC,KACfqzD,EAAe7f,EAAa5xC,KAElC,IAAIm2E,EA0BJ,MAvBuC,gBAAnCvkC,EAAawkC,kBAEVj5D,EAAQk3D,yBAMNl3D,EAAQk5D,mBAOXF,EAAer8E,cAACw8E,GAAuB,CAACrxE,UAAWkY,EAAQlY,UAAWg0B,yBAA0B2Y,KALhGx5C,aAAaC,QAAQC,EAAKd,+BAAiC,sBAAqBkY,KAEhFymE,EAAer8E,cAACy8E,GAA+B,MATjDn+E,aAAaC,QAAQC,EAAKb,0BAA4B,sBAAqBiY,KAE3EymE,EAAer8E,cAAC08E,GAA0C,KAc5DL,EAAer8E,cAAC28E,GAAkB,CAACV,2BAA4BrmE,IAK/D5V,cAACo8E,GAAoB,CAAC1wD,UAAWA,EAAWisC,aAAcA,EAAa53D,SACrEO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAACg8E,GAA2B,CAAClkC,aAAcA,EAAc/2C,QAAQ,EAAMy6E,qBAAqB,MAE9Fx7E,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC8G,IAAI,CAAC4kB,UAAW7rB,EAAE,4CAA4CE,SAC7DC,cAAC8G,IAAKC,KAAI,CAAAhH,SACRC,cAAA,OAAKiM,wBAAyB,CAACC,OAAQC,KAAUC,SAAS0rC,EAAatvC,sBAI7ExI,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC7Bs8E,QAKX,KCtEe18E,qBAAkB4C,aAbjC,SAAiD3C,GAAmC,IAAlC,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,EAAO,SAAEtD,GAAUH,EAE/E,OACEI,cAAC4G,GAAQ,CACPR,MAAOvG,EAAE,cACT6F,iBAAiB,WAAU3F,SAE1BA,GAGP,KChBO,MAAM8gD,GAAiCnnD,GAAI;;;;;;;;;;;;;;;;;;;;ECmFnCiG,qBAAkB4C,aAlEjC,SAA6C3C,GAAyB,IAAxB,EAAEC,EAAC,MAAEuD,EAAK,QAAEC,GAASzD,EACjE,MACMmZ,EADcvV,qBAAWvC,GACA8X,WACzB3S,EAAQvG,EAAE,mBACV+V,EAAKxS,EAAMmK,OAAOqI,IAGlB,QAAEhU,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASu9C,GAAgC,CACxE31C,UAAW,CAAE0K,GAAIA,GACjBtK,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAAC48E,GAAwC,CAACx2E,MAAOA,EAAMrG,SACrDC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAAC48E,GAAwC,CAACx2E,MAAOA,EAAMrG,SACpDF,EAAE,qCAIPnH,QAAQC,IAAImJ,GACZ,MAAMg2C,EAAeh2C,EAAKw/C,oBACpBj+B,EAAUvhB,EAAKwC,KAIrB,OAHA5L,QAAQC,IAAIm/C,GACZp/C,QAAQC,IAAI0qB,GAGVrjB,cAAC48E,GAAwC,CAACx2E,MAAOA,EAAMrG,SACrDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,GAAI4N,GAAI,GAAGvU,SACvCC,cAAC8G,IAAI,CAACV,MAAOvG,EAAE,qDAAqDE,SAClEO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACPF,EAAE,6DAA6D,IAACG,cAAA,SAEjEA,cAAA,KAAAD,SAAI+3C,EAAa3Y,yBAAyBj5B,OAAS,IAAErG,EAAE,uDAAuD,IAAE,IAChHG,cAAA,KAAAD,SAAIqL,IAAO0sC,EAAa14B,WAAW/T,OAAO0N,KAAgB,IAC1D/Y,cAAA,SAAMA,cAAA,SACNA,cAAA,KAAAD,SAAIF,EAAE,gEACNS,eAACyF,IAAK+L,MAAK,CAAA/R,SAAA,CACTC,cAACyE,IAAI,CAACrC,GAAG,gBAAgBlC,UAAU,OAAMH,SACvCO,eAACyF,IAAKw0C,UAAS,CAAAx6C,SAAA,CACZF,EAAE,2DAA2D,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAG9ElG,cAACyE,IAAI,CAACrC,GAAG,gBAAgBlC,UAAU,OAAMH,SACvCO,eAACyF,IAAKw0C,UAAS,CAAAx6C,SAAA,CACZF,EAAE,wDAAwD,IAACG,cAACiG,IAAI,CAACC,KAAK,uBAG3ElG,cAACyE,IAAI,CAACrC,GAAG,IAAGrC,SACVO,eAACyF,IAAKw0C,UAAS,CAAAx6C,SAAA,CACZF,EAAE,kEAAkE,IAACG,cAACiG,IAAI,CAACC,KAAK,oCAUrG,KChFO,MAAM22E,GAAyB3rE,OAAaC,MAAM,CACrD2rE,gBAAiB5rE,OACdG,SAASxR,YAAE,uBACdsiD,YAAajxC,OACVG,SAASxR,YAAE,uBACX0R,IAAI,EAAG1R,YAAE,kBACZk9E,aAAc7rE,OACX8rE,MAAM,CAAC9rE,KAAQ,eAAgB,MAAOrR,YAAE,+BC2ChCF,qBAAkB4C,aA1CF3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,OAAEkB,EAAM,UAAE1M,EAAS,gBAAEiX,EAAe,cAAEC,GAAezd,EAAA,OACrHI,cAAC4R,KAAM,CAAC1R,UAAU,OAAO+R,aAAa,MAAKlS,SACzCO,eAACwG,IAAKC,KAAI,CAAC7G,UAAU,MAAKH,SAAA,CACxBC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,gCAELS,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,yCAAyCE,SAAA,CAC5DC,cAACgS,KAAK,CAAC3N,KAAK,WACJ6B,KAAK,kBACLhG,UAAYyR,EAAOmrE,gBAAmB,0BAA4B,eAClE7qE,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,kBAAkBiM,UAAU,OAAOjS,UAAU,wBAElEI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,qCAAqCE,SAAA,CACxDC,cAACgS,KAAK,CAAC3N,KAAK,WACJ6B,KAAK,cACLhG,UAAYyR,EAAOwwC,YAAe,0BAA4B,eAC9DlwC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,cAAciM,UAAU,OAAOjS,UAAU,wBAE9DI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,4CAA4CE,SAAA,CAC/DC,cAACgS,KAAK,CAAC3N,KAAK,WACJ6B,KAAK,eACLhG,UAAYyR,EAAOorE,aAAgB,0BAA4B,eAC/D9qE,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,eAAeiM,UAAU,OAAOjS,UAAU,wBAE/DF,cAAC6R,IAAKvC,OAAM,CAAAvP,SACVC,cAAC0E,IAAM,CACL4I,OAAK,EACL1L,QAAS8P,EACT7M,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,sCAIF,KCfIF,sBAxBf,SAAyBC,GAA8B,IAA7B,EAAEC,EAAC,QAAEC,EAAQ,GAAE,SAAEC,GAASH,EAElD,OACEI,cAACC,IAAI,CAAAF,SACHC,cAAA,OAAKE,UAAU,cAAaH,SAC1BC,cAACG,IAAS,CAAAJ,SACRC,cAACI,IAAKC,IAAG,CAAAN,SACPO,eAAA,OAAKJ,UAAU,wBAAuBH,SAAA,CACpCC,cAAA,OAAKE,UAAU,mBAAkBH,SAC5BD,EAAWE,cAAA,OAAKO,IAAKT,EAASI,UAAU,MAAMM,IAAI,SAAY,KAElET,EACDC,cAACS,IAAc,CACbC,UAAW,IACXC,WAAYC,gBAQ5B,ICiFejB,qBAAkB4C,aA9FjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC7C,MAAM2D,EAAeC,qBAAWjC,IACzB07E,GAAkB1qE,YAAYzY,GAErC,OACEwG,eAAC48E,GAAoB,CAACp9E,QAASyD,EAAay/B,aAAajjC,SAAA,CAEvDC,cAACwS,KAAM,CACLC,cAAe,CACbqqE,gBAAiB,GACjB36B,YAAa,GACb46B,aAAc,IAEhBpqE,iBAAkBkqE,GAClBjqE,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAI+I,EAAO,CACT7I,MAAO,CACL+pE,gBAAiBjqE,EAAOiqE,gBACxB36B,YAAatvC,EAAOsvC,cAIxB86B,EAAe,CAAE/xE,UAAW0Q,IACzBxI,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAI,WAAYmJ,GACxBwf,YAAW,IAAMjO,IAAMC,QAASzT,EAAE,gCAAkC,CAClE0T,SAAUF,IAAMG,SAASC,gBACvB,KACJtF,OAAO9K,QAAQm3C,MAAM,IACpB9mC,OAAO7R,IAMR,GALAnJ,QAAQC,IAAI,iBACZD,QAAQC,IAAIkJ,EAAMs7E,UAClBzkF,QAAQC,IAAIkJ,EAAMu5D,eAClB1iE,QAAQC,IAAIisB,OAAOC,KAAKhjB,IAEpBA,EAAMu5D,cAAe,CACvB,IAAIzvD,EACJ,IAAKA,EAAI,EAAGA,EAAI9J,EAAMu5D,cAAch8D,OAAQuM,IAC1C0H,IAAMxR,MAAMA,EAAMu5D,cAAc,GAAGlmC,QAC9BmvB,QAAQ,KAAM,IACdA,QAAQ,KAAM,IACdA,QAAQ,MAAO,IACfA,QAAQ,MAAO,IAAK,CACvB9wC,SAAUF,IAAMG,SAASC,cAG/B,MAEEJ,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACtD0R,SAAUF,IAAMG,SAASC,eAI7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,EAAM,gBAAEuK,EAAe,cAAEC,GAAe5Q,EAAA,OAChEzM,cAACo9E,GAAsB,CACrB1rE,aAAcA,EACd2rE,aAAchgE,EACdigE,iBAAkBlgE,EAClBzL,OAAQA,EACRkB,OAAQA,GACR,IAGN7S,cAAA,MAAAD,SAAKF,EAAE,uCACPS,eAACyF,IAAI,CAAAhG,SAAA,CACHC,cAAC+F,IAAK3B,KAAI,CAAArE,SAAEF,EAAE,kDACdG,cAAC+F,IAAK3B,KAAI,CAAArE,SAAEF,EAAE,iDACdG,cAAC+F,IAAK3B,KAAI,CAAArE,SAAEF,EAAE,iDACdG,cAAC+F,IAAK3B,KAAI,CAAArE,SAAEF,EAAE,6DAGhBG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,OACN0K,QAAU2L,IACRA,EAAMqiE,iBACNpvE,OAAO9K,QAAQm3C,MAAM,EACrBz6C,SAEDF,EAAE,sBAIX,KCxCeF,qBAAkB4C,aArDX3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,GAAQ/R,EAAA,OACzDI,cAAC4R,KAAM,CAAC1R,UAAU,OAAO+R,aAAa,MAAKlS,SACzCO,eAACwG,IAAKC,KAAI,CAAC7G,UAAU,MAAKH,SAAA,CACxBC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,sBAELS,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,QACLub,YAAa5hB,EAAE,gCACfK,UAAYyR,EAAOsX,MAAS,0BAA4B,eACxDhX,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,QAAQiM,UAAU,OAAOjS,UAAU,wBAExDI,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,oBAAoBE,SAAA,CACvCC,cAACgS,KAAK,CAAC3N,KAAK,WACJ6B,KAAK,WACLub,YAAa5hB,EAAE,mCACfK,UAAYyR,EAAO6rE,SAAY,0BAA4B,eAC3DvrE,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,WAAWiM,UAAU,OAAOjS,UAAU,wBAE3DF,cAAC6R,IAAKvC,OAAM,CAAAvP,SACVO,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC0E,IAAM,CACL4I,OAAK,EACL1L,QAAS8P,EACT7M,MAAM,UACNR,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,qBAGPG,cAACI,IAAKoF,IAAG,CAACkB,GAAI,EAAE3G,SACdC,cAAC0E,IAAM,CACLG,MAAM,OACNsS,cAAc,IACdlT,KAAoC,cAA7BkK,OAAOqN,SAAS4vD,UAAyD,cAA7Bj9D,OAAOqN,SAAS4vD,SACjE,mDACA,8BACDrrE,SAEAF,EAAE,6CAMN,KCmCIF,qBAAkB4C,aAjFjC,SAAkB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACpC,MAAM2D,EAAeC,qBAAWjC,GAE1Bk8E,EADcj6E,qBAAWvC,GACUw8E,sBAEjCC,GAAgBnrE,YAAY9Y,GAKpC,OAFA0E,EAAOa,UAGLsB,eAAC48E,GAAoB,CAACp9E,QAASyD,EAAay/B,aAAajjC,SAAA,CACvDC,cAAA,OAAKE,UAAU,8BAA6BH,SACzCwD,EAAeA,EAAa2C,KAAO,KAEtClG,cAACwS,KAAM,CACLC,cAAe,CACbwW,MAAO,GACPu0D,SAAU,IAGZ5qE,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAC5B4P,EAAO,CACT+hE,SAAU9qE,EAAOoW,MACjBu0D,SAAU3qE,EAAO2qE,UAGnBE,EAAY,CAAExyE,UAAW0Q,EACvB1I,eAAgB,KAMjBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GAExB,MAAM87E,EAAOt/E,aAAayE,QAAQvE,EAAKjE,kBAAoB,gBAC3D4D,EAAOC,MAAM0D,EAAK+7E,WAClBv8D,YAAW,IAAMje,EAAQnB,KAAK07E,IAAO,IAAI,IAC1ClqE,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAIkJ,GACZiR,GAAc,EAAM,GACpB,EACJ/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,GAAQlF,EAAA,OACxBzM,cAAC89E,GAAa,CACZpsE,aAAcA,EACdC,OAAQA,GACR,IAIH8rE,GAAyBn9E,eAACY,IAAMiH,SAAQ,CAAApI,SAAA,CACvCO,eAAA,OAAKJ,UAAU,cAAaH,SAAA,CAC1BC,cAAA,MAAAD,SAAKF,EAAE,kCACNA,EAAE,oCAAoC,IAACG,cAAA,SACvCH,EAAE,gDAAgD,IAACG,cAAA,YAEtDM,eAACoE,IAAM,CACL4I,OAAK,EACLzI,MAAM,OACNsS,cAAc,IACdlT,KAAoC,cAA7BkK,OAAOqN,SAAS4vD,UAAyD,wBAA7Bj9D,OAAOqN,SAAS4vD,SACjE,2CACA,sBACDrrE,SAAA,CAEAF,EAAE,gCAAgC,IAACG,cAACiG,IAAI,CAACC,KAAK,0BAM3D,KCpDevG,qBAAkB4C,aAnCjC,SAA0B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAC5C,MAAOmB,EAAQg9E,GAAa5oE,oBAAS,GAErC,OACE7U,eAAC48E,GAAoB,CAAAn9E,SAAA,CAEnBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,+BAEJA,EAAE,+BAA+B,IAACG,cAAA,SAAMA,cAAA,SACzCM,eAACoE,IAAM,CACL4I,OAAK,EACL1L,QAASb,EACTqR,SAAUrR,EACV8D,MAAM,UACNR,KAAK,SACLkL,QAASA,KACPwuE,GAAU,GACVz8D,YAAW,IAAMje,EAAQnB,KAAK,gBAAgB,IAAI,EAClDnC,SAAA,CAEDF,EAAE,mCAAmC,IAACG,cAACiG,IAAI,CAACC,KAAK,0BAIxDlG,cAACS,IAAc,CACXC,UAAW,IACXC,WAAYC,QAItB,KCgCejB,qBAAkB4C,aA9DjC,SAAmB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EACrC,MAAQo+E,GAAiBzrE,YAAY3Y,IAC7BqkF,GAAwB1rE,YAAY1Y,IACrCkH,EAAQg9E,GAAa5oE,oBAAS,GAE/B5R,EAAeC,qBAAWjC,GAGhC,OAFA7I,QAAQC,IAAI4K,GAGVjD,eAAC48E,GAAoB,CAACp9E,QAASyD,EAAay/B,aAAajjC,SAAA,CAEvDC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,uBAEJA,EAAE,oCAAoC,IAACG,cAAA,SAAMA,cAAA,SAC9CA,cAAC0E,IAAM,CACL4I,OAAK,EACL1L,QAASb,EACTqR,SAAUrR,EACV8D,MAAM,UACNR,KAAK,SACLkL,QAASA,KACPwuE,GAAU,GACV5/E,EAAOe,SACP8+E,IAAe5qE,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EAC3BtT,QAAQC,IAAI,WAAYmJ,EAAK,IAE9B4R,OAAO7R,IACNnJ,QAAQC,IAAIkJ,EAAM,IAEpBo8E,IAAsB7qE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EAClC7T,QAAQC,IAAI,WAAYmJ,EAAK,IAE9B4R,OAAO7R,IACNnJ,QAAQC,IAAIkJ,EAAM,IAEpByf,YAAW,IAAMjO,IAAM6qE,KAAKr+E,EAAE,uBAAwB,CACpD0T,SAAUF,IAAMG,SAASC,gBACvB,KACJ6N,YAAW,IAAMje,EAAQnB,KAAK,MAAM,IAAI,EACxCnC,SAEDF,EAAE,yBAITG,cAAC0E,IAAM,CACL4I,OAAK,EACLzI,MAAM,OACN0K,QAAU2L,IACRA,EAAMqiE,iBACNpvE,OAAO9K,QAAQm3C,MAAM,EACrBz6C,SAEDF,EAAE,sBAIX,KC5BeF,qBAAkB4C,aAnCjC,SAA2B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAI7C,MAAOmB,EAAQg9E,GAAa5oE,oBAAS,GAErC,OACE7U,eAAC48E,GAAoB,CAAAn9E,SAAA,CAEnBC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAC8G,IAAKuI,MAAK,CAAAtP,SACRF,EAAE,gCAEJA,EAAE,gCAAgC,IAACG,cAAA,SAAMA,cAAA,SAC1CM,eAACoE,IAAM,CACL4I,OAAK,EACL1L,QAASb,EACTqR,SAAUrR,EACV8D,MAAM,UACNR,KAAK,SACLkL,QAASA,KACPwuE,GAAU,GACVz8D,YAAW,IAAMje,EAAQnB,KAAK,gBAAgB,IAAI,EAClDnC,SAAA,CAEDF,EAAE,oCAAoC,IAACG,cAACiG,IAAI,CAACC,KAAK,0BAIzDlG,cAACS,IAAc,CAACC,UAAW,QAGjC,KCmEef,qBAAkB4C,aA1FjC,SAAgB3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAClC,MAAM2D,EAAeC,qBAAWjC,IAC1B,QAAEK,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAAS4G,GAAkB,CAC1DoB,YAAa,iBAGf,GAAI1J,EAAS,OACX5B,cAACa,EAAoB,CAACf,QAASyD,EAAay/B,aAAajjC,SACvDC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,EAAO,OACT7B,cAACa,EAAoB,CAACf,QAASyD,EAAay/B,aAAajjC,SACtDF,EAAE,gDAIP,MAAMyE,EAAOxC,EAAKwC,KAQlB,OALKA,EAAKE,UAAaF,EAAKC,YAC1BlB,EAAQnB,KAAK,iBAKb5B,eAACO,EAAoB,CAACf,QAASyD,EAAay/B,aAAajjC,SAAA,CACvDO,eAAA,OAAKJ,UAAU,mBAAkBH,SAAA,CAC/BO,eAAA,MAAAP,SAAA,CAAKF,EAAE,mBAAmB,IAAEyE,EAAKiG,aACjCvK,cAAA,MAAAD,SAAKF,EAAE,yCAETS,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAGy3E,SAAU,EAAEp+E,SAC3CC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,gBACNA,EAAE,iCAAiC,IAACG,cAAA,SAAMA,cAAA,SAC3CA,cAACyE,IAAI,CAACrC,GAAG,IAAGrC,SACVO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UAAS9E,SAAA,CAEdF,EAAE,wBAAwB,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAMjDlG,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAE3G,SAC9BC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,qBACNA,EAAE,mCAAmC,IAACG,cAAA,SAAMA,cAAA,SAC7CA,cAACyE,IAAI,CAACrC,GAAG,WAAUrC,SACjBO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UAAS9E,SAAA,CAEdF,EAAE,2BAA2B,IAACG,cAACiG,IAAI,CAACC,KAAK,8BAMpDlG,cAACmN,GAAoB,CAACtD,SAAS,cAAcD,WAAW,OAAOI,aAAa,EAAKjK,SAC/EC,cAACI,IAAKoF,IAAG,CAACyH,GAAI,GAAIC,GAAI,GAAIxG,GAAI,EAAGy3E,SAAU,EAAEp+E,SAC3CC,cAAC8G,IAAI,CAAA/G,SACHO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACRC,cAAA,MAAAD,SAAKF,EAAE,4BACNA,EAAE,uCAAuC,IAACG,cAAA,SAAMA,cAAA,SACjDA,cAACyE,IAAI,CAACrC,GAAG,eAAcrC,SACrBO,eAACoE,IAAM,CACL4I,OAAK,EACL3I,SAAO,EACPE,MAAM,UAAS9E,SAAA,CAEdF,EAAE,+BAA+B,IAACG,cAACiG,IAAI,CAACC,KAAK,qCAUlE,KCjGek4E,OAJf,WACE,OAAOp+E,cAACq+E,IAAY,GACtB,ECVO,MAAMC,GAA4B5kF,GAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA2ChC6kF,GAAsB7kF,GAAI;;;;;;;;EC2BxBiG,qBAAkB4C,aAvDE3C,IAAA,IAAC,EAAEC,EAAC,QAAEwD,EAAO,aAAEqO,EAAY,OAAEC,EAAM,UAAExL,GAAWvG,EAAA,OACjFI,cAAC4R,KAAM,CAAA7R,SACLO,eAACwG,IAAI,CAACV,MAAOvG,EAAE,mCAAmCE,SAAA,CAClDO,eAACwG,IAAKC,KAAI,CAAAhH,SAAA,CACNC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOuqC,OAAU,0BAA4B,eACzDjqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,4BAI1DI,eAACF,IAAKC,IAAG,CAAAN,SAAA,CACPC,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,0CAA0CE,SAAA,CAC7DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,SACLhG,UAAYyR,EAAOwqC,OAAU,0BAA4B,eACzDlqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,SAASiM,UAAU,OAAOjS,UAAU,0BAG3DF,cAACI,IAAKoF,IAAG,CAAAzF,SACPO,eAACuR,IAAKC,MAAK,CAACC,MAAOlS,EAAE,uCAAuCE,SAAA,CAC1DC,cAACgS,KAAK,CAAC3N,KAAK,OACJ6B,KAAK,MACLhG,UAAYyR,EAAOyqC,IAAO,0BAA4B,eACtDnqC,aAAa,QACrBjS,cAACkS,KAAY,CAAChM,KAAK,MAAMiM,UAAU,OAAOjS,UAAU,gCAK5DI,eAACwG,IAAKwI,OAAM,CAAAvP,SAAA,CACRC,cAAC0E,IAAM,CACLG,MAAM,UACN3E,UAAU,aACVmE,KAAK,SACL+N,SAAUV,EAAa3R,SAEtBF,EAAE,oBAELG,cAACyE,IAAI,CAACrC,GAAI+D,EAAUpG,SAClBC,cAAC0E,IAAM,CAACG,MAAM,OAAM9E,SACfF,EAAE,6BAKR,KClEJ,MAAM2+E,GAA8BttE,OAAaC,MAAM,CAC1D+qC,OAAQhrC,OACLK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,uBACds8C,OAAQjrC,OACLK,IAAI,EAAG1R,YAAE,kBACTwR,SAASxR,YAAE,yBC0GHF,qBAAkB4C,aA9FjC,SAA+B3C,GAAuB,IAAtB,EAACC,EAAC,MAAEuD,EAAK,QAAEC,GAAQzD,EAEjD,MAAM+0D,EAAUr2D,aAAayE,QAAQvE,EAAKd,iCAGlCkE,QAASkJ,EAAajJ,MAAOkJ,EAAWjJ,KAAMkJ,GAAa1H,YAAS4G,KACtE,QAAEtI,EAAO,MAAEC,EAAK,KAAEC,GAASwB,YAASg7E,GAA2B,CACnErzE,KAAMH,GAAeC,IAAcC,EACnCE,UAAW,CACTmY,QAASrY,GAAYA,EAAS1G,KAAO0G,EAAS1G,KAAK6G,UAAY,MAEjEG,YAAa,kBAEPmzE,GAAsBlsE,YAAYgsE,IAE1C,GAAI38E,GAAWkJ,IAAgBhJ,EAAM,OACnC9B,cAAC6yE,GAAsB,CAAA9yE,SACrBC,cAACc,IAAM,CAACC,QAAQ,EAAMC,QAAQ,MAGlC,GAAIa,GAASkJ,EAAW,OACtB/K,cAAC6yE,GAAsB,CAAA9yE,SACpBF,EAAE,kDAIP,MAAMyE,EAAO0G,EAAS1G,KAChBo6E,EAAc58E,EAAK26C,oBAAoB1zC,MAAM,GAAGG,KAEtD,OACElJ,cAAC6yE,GAAsB,CAACjB,YAAattE,EAAKgf,SAASvjB,SACjDC,cAACI,IAAKC,IAAG,CAAAN,SACPC,cAACI,IAAKoF,IAAG,CAACkB,GAAI,GAAG3G,SACfC,cAACwS,KAAM,CACLC,cAAe,CACb0pC,OAAQuiC,EAAYviC,OACpBD,OAAQwiC,EAAYxiC,OACpBE,IAAKsiC,EAAYtiC,KAEnBzpC,iBAAkB6rE,GAClB5rE,SAAUA,CAACC,EAAM7G,KAAyB,IAAvB,cAAE8G,GAAe9G,EAChCtT,QAAQC,IAAI,kBACZD,QAAQC,IAAIka,GAEZ,IAAImoC,EAAa,CACfplC,GAAI8oE,EAAY9oE,GAChBumC,OAAQtpC,EAAOspC,OACfD,OAAQrpC,EAAOqpC,OACfE,IAAKvpC,EAAOupC,KAGdqiC,EAAkB,CAAEvzE,UAAW,CAC7B6H,MAAOioC,GACN9nC,eAAgB,KAMlBE,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACX7T,QAAQC,IAAI,WAAYmJ,GACpB6yD,GACFtxD,EAAQnB,KAAKyyD,GAGfthD,IAAMC,QAASzT,EAAE,gDAAkD,CAC/D0T,SAAUF,IAAMG,SAASC,eAE7BX,GAAc,EAAM,IACnBY,OAAO7R,IACRwR,IAAMxR,MAAOhC,EAAE,8BAAkCgC,EAAO,CACpD0R,SAAUF,IAAMG,SAASC,eAE7B/a,QAAQC,IAAI,uCAAwCkJ,GACpDiR,GAAc,EAAM,GACpB,EACN/S,SAED0M,IAAA,IAAC,aAAEiF,EAAY,OAAEC,EAAM,OAAEkB,GAAQpG,EAAA,OAChCzM,cAAC2+E,GAA0B,CACzBjtE,aAAcA,EACdC,OAAQA,EACRkB,OAAQA,EACR1M,UAAW,iBACX,SAOhB,KC4QA,MAAMy4E,GAAeh/E,IAAwC,IAArCuS,UAAWzE,KAAcmxE,GAAMj/E,EACrD,MAAQk/E,EAAiBC,GAAuB5pE,oBAAS,IAClDqB,GAAkBjE,YAAY5Y,GACrC,IAAIqlF,GAAmB,EACvBtmF,QAAQC,IAAIkmF,EAAKI,MAEjB,MAAMC,EAAmBl/E,cAACm/E,IAAK,IAAKN,EAAM9vE,OAASP,GAAYxO,cAAC0N,EAAS,IAAKc,MACxE4wE,EAAep/E,cAACm/E,IAAK,IAAKN,EAAM9vE,OAASP,GAC7ClO,eAACQ,IAAM,CAACC,QAAQ,EAAMC,QAAQ,EAAKjB,SAAA,CAACC,cAAC0N,EAAS,IAAKc,IAAS,SACxD6wE,EAAgBr/E,cAACm/E,IAAK,IAAKN,EAAM9vE,OAASP,GAAYxO,cAACs/E,IAAQ,CAACl9E,GAAG,2BAInEm9E,EAAWjhF,aAAayE,QAAQvE,EAAKrE,gBAK3C,GAJK,IAAI+I,KAAS,KAASq8E,IACzBP,GAAmB,GAGjBF,EAEF,OADApmF,QAAQC,IAAI,mCACLymF,EAGT,IAAIJ,EA2CF,OAAOE,EA3Cc,CAErBH,GAAmB,GACnB,MAAMj8E,EAAkBxE,aAAayE,QAAQvE,EAAKlE,wBAiBlD5B,QAAQC,IAAI,yCACZD,QAAQC,IAAI,IAAIuK,KAAS,KACzBxK,QAAQC,IAAImK,GAEZ0T,IAAiBpD,MAAKpH,IAAe,IAAd,KAAElK,GAAMkK,EAM7B,OALAtT,QAAQC,IAAI,mBAAoBmJ,GAChC3D,EAAOW,gBAAgBgD,EAAK4U,cAC5B4K,YAAW,WACTy9D,GAAmB,EACrB,GAAG,KACIG,CAAgB,IACtBxrE,OAAO7R,IAxEd,WACEnJ,QAAQC,IAAI,qDACZ,MACMilF,EADazvE,OAAOqN,SAASvX,KACXuF,MAAM,KAAK,GACnC9Q,QAAQC,IAAIilF,GACE,gBAATA,GAAqC,0BAATA,GAA+C,yBAATA,GAAqCA,EAK1Gt/E,aAAaC,QAAQC,EAAKjE,gBAAiBqjF,GAE3Ct/E,aAAaC,QAAQC,EAAKjE,gBAAiB,gBAE/C,CA2DMilF,GACAnsE,IAAMxR,MAAMA,EAAO,CACjB0R,SAAUF,IAAMG,SAASC,eAE3B/a,QAAQC,IAAI,0CAA2CkJ,GAEvD1D,EAAOa,UACAqgF,IAGX,CAEA,EAuaa1/E,sBAlaf,SAAgB4M,GAAS,IAAR,EAAE1M,GAAG0M,EACpB,MAAQ3K,QAAS69E,EAAoB59E,MAAO69E,EAAkB59E,KAAM69E,GAAoBr8E,YAAS/D,IACzFqC,QAASg+E,EAAqB/9E,MAAOg+E,EAAmB/9E,KAAMg+E,GAAqBx8E,YAAS7D,EAAwB,CAC1HyL,UAAW,CAAC0K,GAAI,kCAKlB,GAAI6pE,GAAsBG,EACxB,OACE5/E,cAACyD,EAAsB,IAG3B,GAAIi8E,GAAoBG,EACtB,MAAiC,0BAA7BH,EAAiBxqD,QACZ,GAGL50B,eAAA,OAAAP,SAAA,CACIF,EAAE,0BAA2B,IAACG,cAAA,SAC9B0/E,EAAiBxqD,QAAS,IAACl1B,cAAA,SAC3B6/E,EAAkB3qD,WAQ5B,IAAI7C,EAAcstD,EAAgBttD,YAC9B9uB,EAAeu8E,EAAiBv8E,aAEpC,OACEvD,cAACoB,EAAmB,CAACe,MAAOkwB,EAAYtyB,SACtCC,cAACwB,EAAoB,CAACW,MAAOoB,EAAaxD,SACxCC,cAAC+/E,IAAU,CAAAhgF,SACTO,eAAC0/E,IAAM,CAAAjgF,SAAA,CAELC,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,iBAAiB9sE,UAAW+tE,KAE9ClgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,WAAW9sE,UAAWguE,KAG/CngF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,cAAc9sE,UAAWiuE,KAClDpgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CACL9sE,UAAWkuE,KAC/BrgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDACL9sE,UAAWmuE,KAC/BtgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CACL9sE,UAAWouE,KAC/BvgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDACL9sE,UAAWquE,KAC/BxgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDACL9sE,UAAWsuE,KAC/BzgF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2DACL9sE,UAAWuuE,KAI/B1gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,WAAW9sE,UAAWgC,KAC/CnU,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAWwuE,KAC3D3gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWyuE,KAC/D5gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAW0uE,KACpE7gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oBAAoB9sE,UAAW2uE,KACxD9gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wBAAwB9sE,UAAW4uE,KAC5D/gF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAW6uE,KACjEhhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAW8uE,KAC/DjhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oBAAoB9sE,UAAW+uE,KACxDlhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWgvE,KAC/DnhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWivE,KACjEphF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAWiZ,KACpEprB,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWkvE,KAC/DrhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+BAA+B9sE,UAAWmvE,KACnEthF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oCAAoC9sE,UAAWovE,KACxEvhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oCAAoC9sE,UAAWqvE,KACxExhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWsvE,KAChFzhF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAWuvE,KACrF1hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sBAAsB9sE,UAAWwvE,KAC1D3hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWyvE,KAC9D5hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+BAA+B9sE,UAAW0vE,KACnE7hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kBAAkB9sE,UAAW2vE,KACtD9hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAW4vE,KAC/D/hF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sCAAsC9sE,UAAW6vE,KAC1EhiF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAW8vE,KACnFjiF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAW+vE,KACnFliF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yDAAyD9sE,UAAWgwE,KAC7FniF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWiwE,KACnFpiF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWkwE,KACtEriF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sCAAsC9sE,UAAWmwE,KAC1EtiF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAWowE,KAC/EviF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWqwE,KAC9DxiF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAWswE,KAClEziF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAWuwE,KACvE1iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kBAAkB9sE,UAAWwwE,KACtD3iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWywE,KAC7D5iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAW0wE,KAC/D7iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAWimB,KAClEp4B,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAW2wE,KAC7D9iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAW4wE,KACjE/iF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAW6wE,KACtEhjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oBAAoB9sE,UAAW8wE,KACxDjjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wBAAwB9sE,UAAW+wE,KAC5DljF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWgxE,KACjEnjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4BAA4B9sE,UAAWixE,KAGhEpjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gBAAgB9sE,UAAWgwB,KACpDniC,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWkxE,KAC7DrjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWmxE,KACtEtjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWoxE,KACpFvjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAWqxE,KAC/ExjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0DAA0D9sE,UAAWsxE,KAC9FzjF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8DAA8D9sE,UAAWuxE,KAClG1jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mEAAmE9sE,UAAWwxE,KACvG3jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAWyxE,KAClE5jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAW0xE,KACtE7jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAW2xE,KAC3E9jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAW4xE,OAC3E/jF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAW6xE,OAC/EhkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAW8xE,OACpFjkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iEAAiE9sE,UAAW+xE,OACrGlkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sEAAsE9sE,UAAWgyE,OAC1GnkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0EAA0E9sE,UAAWiyE,OAC9GpkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wFACnB9sE,UAAWkyE,OACjBrkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4FACnB9sE,UAAWmyE,OACjBtkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iGACnB9sE,UAAWoyE,OACjBvkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4BAA4B9sE,UAAWqyE,KAChExkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAWsyE,KACpEzkF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qCAAqC9sE,UAAWuyE,KACzE1kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAWwyE,KACvE3kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAWyyE,KAC3E5kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAW0yE,KAChF7kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mDAAmD9sE,UAAW2yE,KACvF9kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAW4yE,KAC/D/kF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+BAA+B9sE,UAAW6yE,KACnEhlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oCAAoC9sE,UAAW8yE,KACxEjlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAW+yE,KAC9EllF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4BAA4B9sE,UAAWgzE,KAChEnlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAWizE,KACpEplF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qCAAqC9sE,UAAWkzE,KACzErlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWmzE,KAC7DtlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWozE,KACjEvlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWqzE,KACtExlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWszE,KAChFzlF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWuzE,KAC9D1lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAWwzE,KAClE3lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAWyzE,KACvE5lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAW0zE,KAC3D7lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAW2zE,KAC/D9lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAW4zE,KACpE/lF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAW6zE,KAC9DhmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAW8zE,KAClEjmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAW+zE,KACvElmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CAA6C9sE,UAAWg0E,KACjFnmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAWi0E,KACrFpmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sDAAsD9sE,UAAWk0E,KAC1FrmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWm0E,KAC7DtmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWo0E,KACjEvmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWq0E,KACtExmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAWs0E,KAC3DzmF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWu0E,KAC/D1mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gCAAgC9sE,UAAWw0E,KAIpE3mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8BAA8B9sE,UAAWy0E,KAClE5mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAW00E,KACtE7mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAW20E,KAC3E9mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qCAAqC9sE,UAAW40E,KACzE/mF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yCAAyC9sE,UAAW60E,KAC7EhnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAW80E,KAClFjnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4DAA4D9sE,UAAW+0E,KAChGlnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sDAAsD9sE,UAAWg1E,KAC1FnnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0DAA0D9sE,UAAWi1E,KAC9FpnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+DAA+D9sE,UAAWk1E,KAGnGrnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,aAAa9sE,UAAWykC,KACjD52C,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sBAAsB9sE,UAAWm1E,KAC1DtnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWo1E,KAC9DvnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAWq1E,KAC9ExnF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWs1E,KACpFznF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAWu1E,KACzF1nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWw1E,KACpF3nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8EACX9sE,UAAWy1E,KACzB5nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mFACX9sE,UAAW01E,KACzB7nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAW21E,KAC9E9nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAW41E,KACzF/nF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAW61E,KAClFhoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kDAAkD9sE,UAAW81E,KACtFjoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDAAuD9sE,UAAW+1E,KAC3FloF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0DAA0D9sE,UAAWg2E,KAC9FnoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWi2E,KAChFpoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWk2E,KACpFroF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAWm2E,KACzFtoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAWo2E,KAClFvoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDAAuD9sE,UAAWq2E,KAC3FxoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wDAAwD9sE,UAAWs2E,KAC5FzoF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uEACX9sE,UAAWu2E,KACzB1oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2EACX9sE,UAAWw2E,KACzB3oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gFACX9sE,UAAWy2E,KACzB5oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAW02E,KAC/E7oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAW22E,KACnF9oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAW42E,OAClF/oF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kDAAkD9sE,UAAW62E,OACtFhpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDAAuD9sE,UAAW82E,OAC3FjpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wCAAwC9sE,UAAW+2E,KAC5ElpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWg3E,KAChFnpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAWi3E,KACrFppF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yCAAyC9sE,UAAWk3E,KAC7ErpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAWm3E,KAC/EtpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWo3E,KACnFvpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yCAAyC9sE,UAAWq3E,KAC7ExpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CAA6C9sE,UAAWs3E,KACjFzpF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWu3E,KACpF1pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,gDAAgD9sE,UAAWw3E,KACpF3pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oDAAoD9sE,UAAWy3E,KACxF5pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sEACX9sE,UAAW03E,KACzB7pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iFACX9sE,UAAW23E,KACzB9pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qFACX9sE,UAAW43E,KACzB/pF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0FACX9sE,UAAW63E,KACzBhqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6EAA6E9sE,UAAW83E,KACjHjqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iFAAiF9sE,UAAW+3E,KACrHlqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sFACX9sE,UAAWg4E,KACzBnqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8EAA8E9sE,UAAWi4E,KAClHpqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kFAAkF9sE,UAAWk4E,KACtHrqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uFACX9sE,UAAWm4E,KACzBtqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+EACvB9sE,UAAWo4E,KACbvqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mFACvB9sE,UAAWq4E,KACbxqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6EAA6E9sE,UAAWs4E,KACjHzqF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iFAAiF9sE,UAAWu4E,KACrH1qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sFACX9sE,UAAWw4E,KACzB3qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wCAAwC9sE,UAAWy4E,KAC5E5qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAW04E,KACzF7qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iBAAiB9sE,UAAW24E,KACrD9qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qBAAqB9sE,UAAW44E,KACzD/qF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAW64E,KACvEhrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAW84E,KAC3EjrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2CAA2C9sE,UAAW+4E,KAG/ElrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,YAAY9sE,UAAWw+C,KAChD3wD,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWg5E,OAC7DnrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWi5E,OACjEprF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kDAAkD9sE,UAAWk5E,OACtFrrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oBAAoB9sE,UAAWm5E,KACxDtrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAWo5E,KAC7DvrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wCAAwC9sE,UAAWq5E,KAC5ExrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWs5E,KACnFzrF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWu5E,KACnF1rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAWw5E,KACzF3rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uFACX9sE,UAAWy5E,KACzB5rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDACX9sE,UAAW05E,KACzB7rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kEAAkE9sE,UAAW25E,KACtG9rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAW45E,KAC9E/rF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CAA6C9sE,UAAW65E,KACjFhsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kDAAkD9sE,UAAW85E,KACtFjsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAW+5E,KACrFlsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWg6E,KACnFnsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kDAAkD9sE,UAAWi6E,KACtFpsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uDAAuD9sE,UAAWk6E,KAC3FrsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qDAAqD9sE,UAAWm6E,KACzFtsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2DACX9sE,UAAWo6E,KACzBvsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2DAA2D9sE,UAAWq6E,KAC/FxsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWs6E,KACnFzsF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mBAAmB9sE,UAAWu6E,KACvD1sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAWw6E,KAC3D3sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWy6E,KACtE5sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CAA6C9sE,UAAW06E,KACjF7sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAW26E,KACrF9sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sDAAsD9sE,UAAW46E,KAC1F/sF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iEACX9sE,UAAW66E,KACzBhtF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6CAA6C9sE,UAAW86E,KACjFjtF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAW+6E,KACrFltF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sDAAsD9sE,UAAWg7E,KAC1FntF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wCAAwC9sE,UAAWi7E,KAC5EptF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWk7E,KAChFrtF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iDAAiD9sE,UAAWm7E,KACrFttF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+DACX9sE,UAAWo7E,KACzBvtF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mEACX9sE,UAAWq7E,KACzBxtF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wEACX9sE,UAAWs7E,KACzBztF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAWu7E,KAC9E1tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAWw7E,KAClF3tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mDAAmD9sE,UAAWy7E,KACvF5tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8DAA8D9sE,UAAW07E,KAClG7tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6DAA6D9sE,UAAW27E,KACjG9tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oEACX9sE,UAAW47E,KACzB/tF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mBAAmB9sE,UAAW67E,KACvDhuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAW87E,KAC3DjuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uCAAuC9sE,UAAW+7E,KAC3EluF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,8CAA8C9sE,UAAWg8E,KAClFnuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,4CAA4C9sE,UAAWi8E,KAChFpuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAWk8E,KACnFruF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oDAAoD9sE,UAAWm8E,KAIxFtuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,WAAW9sE,UAAWyoB,KAC/C56B,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWo8E,KACjEvuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iCAAiC9sE,UAAWq8E,KACrExuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sCAAsC9sE,UAAWs8E,KAC1EzuF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAWu8E,KAC3D1uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oCAAoC9sE,UAAWw8E,KACxE3uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iCAAiC9sE,UAAWy8E,KACrE5uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,sCAAsC9sE,UAAW08E,KAC1E7uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mBAAmB9sE,UAAW28E,KACvD9uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yBAAyB9sE,UAAW48E,KAC7D/uF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAW68E,KAG3DhvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oDAAoD9sE,UAAW88E,KACxFjvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6DACL9sE,UAAW+8E,KAC/BlvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,eAAe9sE,UAAWg9E,KACnDnvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qCAAqC9sE,UAAWi9E,KAGzEpvF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,IAAI9sE,UAAWk9E,KACnCrvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,gBAAgB9sE,UAAWm9E,KACtDtvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,6BAA6B9sE,UAAWo9E,KACnEvvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,4DACP9sE,UAAWq9E,KAC/BxvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,8DACP9sE,UAAWs9E,KAC/BzvF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,2CAA2C9sE,UAAWu9E,KACjF1vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,wBAAwB9sE,UAAWw9E,KAC9D3vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,4BAA4B9sE,UAAWy9E,KAClE5vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,8BAA8B9sE,UAAW09E,KACpE7vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,oCAAoC9sE,UAAW29E,KAC1E9vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,2CAA2C9sE,UAAW49E,KACjF/vF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,yBAAyB9sE,UAAW69E,KAC/DhwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,4BAA4B9sE,UAAW89E,KAClEjwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,8BAA8B9sE,UAAW+9E,KACpElwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,uBAAuB9sE,UAAWg+E,KAC7DnwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,wBAAwB9sE,UAAWi+E,KAC9DpwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,8BAA8B9sE,UAAWk+E,KACpErwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,uDAAuD9sE,UAAWm+E,KAC7FtwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,6BAA6B9sE,UAAWo+E,KACnEvwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,8BAA8B9sE,UAAWq+E,KACpExwF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,gBAAgB9sE,UAAWs+E,KAC/CzwF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,qCAAqC9sE,UAAWu+E,KAC3E1wF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,uCAAuC9sE,UAAWw+E,KAC7E3wF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,oBAAoB9sE,UAAWy+E,KACnD5wF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,sBAAsB9sE,UAAW0+E,KAC5D7wF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,sCAAsC9sE,UAAW0+E,KAC5E7wF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,gBAAgB9sE,UAAW2+E,KAC/C9wF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,eAAe9sE,UAAW4+E,KAC9C/wF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,yBAAyB9sE,UAAW6+E,KACxDhxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,oCAAoC9sE,UAAW8+E,KAC1EjxF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAO,sBAAsB9sE,UAAW++E,KACrDlxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,yBAAyB9sE,UAAWg/E,KAC/DnxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAO,gDAAgD9sE,UAAWi/E,KAGtFpxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,YAAY9sE,UAAWk/E,KAChDrxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kBAAkB9sE,UAAWm/E,KACtDtxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wBAAwB9sE,UAAWo/E,KAC5DvxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWq/E,KACtExxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWs/E,KACjEzxF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,6BAA6B9sE,UAAWu/E,KACjE1xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWw/E,KAC/D3xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWy/E,KACtE5xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+BAA+B9sE,UAAW0/E,KACnE7xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,iCAAiC9sE,UAAW2/E,KACrE9xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,qCAAqC9sE,UAAW4/E,KACzE/xF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0CAA0C9sE,UAAW6/E,KAC9EhyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+BAA+B9sE,UAAW8/E,KACnEjyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,+CAA+C9sE,UAAW+/E,KACnFlyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWggF,KAC/DnyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,oCAAoC9sE,UAAWigF,KACxEpyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,kCAAkC9sE,UAAWkgF,KACtEryF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWmgF,KAC9DtyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,mCAAmC9sE,UAAWogF,KACvEvyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,0BAA0B9sE,UAAWqgF,KAC9DxyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,yCAAyC9sE,UAAWsgF,KAC7EzyF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,2BAA2B9sE,UAAWugF,KAG/D1yF,cAAC4+E,GAAY,CAACqB,OAAK,EAAChB,KAAK,wBAAwB9sE,UAAWwgF,KAC5D3yF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,cAAc9sE,UAAWygF,KAC3C5yF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,uBAAuB9sE,UAAW0gF,KACpD7yF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,eAAe9sE,UAAW2gF,KAC5C9yF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,wBAAwB9sE,UAAW4gF,KACrD/yF,cAACm/E,IAAK,CAACc,OAAK,EAAChB,KAAK,gBAAgB9sE,UAAW6gF,KAE7ChzF,cAACm/E,IAAK,CAAChtE,UAAWisE,aAM9B,I,qBC1zBA6U,OAAOC,UAAU9vE,MACf,SAAS+vE,GACL,OAAO7zF,KAAK8zF,OAAO,EAAGD,EAAE,IAAM7zF,KAAKF,OAAS+zF,EAAI,MAAQ,GAC5D,EAkBF,IAAIrU,IAAkB,EAEtB,MAAMuU,GAAY77C,aAAQ53C,IAAoE,IAAnE,cAAEw7D,EAAa,aAAEk4B,EAAY,UAAEC,EAAS,QAAEC,EAAO,SAAEC,GAAU7zF,EACtFlH,QAAQC,IAAI46F,GACZ76F,QAAQC,IAAI86F,GAEZ,IACIC,GAA4C,EAmChD,GAjCIt4B,GACFA,EAAcu4B,SAAQ3nF,IAAmC,IAAlC,QAAEkpB,EAAO,UAAEkY,EAAS,KAAE6xC,GAAMjzE,EACjDtT,QAAQC,IACL,6BAA4Bu8B,gBAAsBkY,YAAoB6xC,IACxE,IAQDqU,GAAc56F,QAAQC,IAAK,oBAAmB26F,KAG9Cl4B,GAA8C,gEAA7BA,EAAc,GAAGlmC,SACpCx8B,QAAQmJ,MAAM,kCAIZu5D,GAA8C,8BAA7BA,EAAc,GAAGlmC,UACpCx8B,QAAQmJ,MAAM,6BACd1D,EAAOa,UA/CX,WACEtG,QAAQC,IAAI,qDACZ,MACMilF,EADazvE,OAAOqN,SAASvX,KACXuF,MAAM,KAAK,GACnC9Q,QAAQC,IAAIilF,GACE,gBAATA,GAAqC,0BAATA,GAA+C,yBAATA,GAAqCA,EAK1Gt/E,aAAaC,QAAQC,EAAKjE,gBAAiBqjF,GAE3Ct/E,aAAaC,QAAQC,EAAKjE,gBAAiB,gBAE/C,CAkCIilF,GAEAV,IAAkB,EAClB3wE,OAAOqN,SAASvX,KAAO,gBACvBqd,YAAW,WACTnT,OAAOqN,SAASo4E,QAClB,GAAG,MAIDH,EAAU,CACZ,IAAI9nF,EACJ,IAAKA,EAAI,EAAGA,EAAI8nF,EAAS9hF,OAAOvS,OAAQuM,IAClC8nF,EAAS9hF,OAAOhG,GAAG2qE,YAAcmd,EAAS9hF,OAAOhG,GAAG2qE,WAAW3gE,OAASk+E,EAAK75F,qBAC/E05F,GAA4C,EAGlD,CAGA,GAAIA,EAAuF,CAEzF,GADAh7F,QAAQC,IAAI,8BACRmmF,GAGF,OAQN,SAAsB0U,EAASD,GAC7B,IAAIzU,GAMF,OAHAA,IAAkB,EAClBpmF,QAAQC,IAAI,0BAEL,IAAIm7F,KAAWC,KAmC1Bn8C,iBAKE,aAJsCo8C,GAAOC,OAAO,CAClDC,SAAUv6F,GAId,EAxCM6c,GACGpD,MAAK7G,IAAe,IAAd,KAAEzK,GAAMyK,EACb7T,QAAQC,IAAImJ,GACZ3D,EAAOW,gBAAgBgD,EAAK4U,cAE5BooE,IAAkB,CAAK,IAExB1rE,MAAK,KACJ,MAAM+gF,EAAa,CACjBvW,KAAMmW,EAASnW,KAAKj8D,KAAKoyE,GACzBlyF,MAAOkyF,EAASlyF,MAAM8f,KAAKoyE,GAC3BxhB,SAAUwhB,EAASxhB,SAAS5wD,KAAKoyE,IAInCP,EAAQD,GAAWa,UAAUD,EAAW,IAEzCzgF,OAAM7R,IAELnJ,QAAQmJ,MAAM,2BACdnJ,QAAQmJ,MAAMA,GACdkyF,EAASlyF,MAAMA,GAEfi9E,IAAkB,CAAK,GAMvB,IAnCNpmF,QAAQC,IAAI,8BAsChB,CAhDa+d,CAAa88E,EAASD,GAF7B76F,QAAQC,IAAI,8BAKhB,KAqEF,IAAI07F,GAiBJ,MAAMC,GAAWC,YAAe,CAC9BC,IAAK,cACLC,YAAa,gBAaTC,GAAiB,IAAIC,KAAW/8C,MAAO27C,EAAWC,KACtD,MAAMa,QAhCRz8C,iBACE,OAAIy8C,WAEEO,MAAM,YACTxhF,MAAKqgF,GAAYA,EAASoB,SAO7BR,GAAYS,IAAQC,IAAI,mBAEXV,GACf,CAkB0BW,GAUxB,OATAF,IAAQG,IAAI,YAAaZ,GAEzBd,EAAU2B,WAAW,CAEnBC,QAAS,CACL,cAAed,KAIdb,EAAQD,EAAU,IA6CrBS,GAAS,IAAIoB,IAAa,CAC9BhoF,KAAMioF,YAAK,CAACX,GAAgBrB,GAAWiB,KACvCgB,MAAO,IAAIC,IAAc,CACvBC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACNx5D,SAAUy5D,qBAmBLC,OAXf,WAIE,OAFAxqF,IAAOyqF,OAAO,SAGZ71F,cAAC81F,IAAc,CAAC9B,OAAQA,GAAOj0F,SAC7BC,cAAC+1F,GAAO,KAGd,ECnSoBC,QACW,cAA7B7nF,OAAOqN,SAAS4vD,UAEe,UAA7Bj9D,OAAOqN,SAAS4vD,UAEhBj9D,OAAOqN,SAAS4vD,SAAShoE,MACvB,2DCVN6yF,IAASlnF,OAAO/O,cAAC41F,GAAG,IAAK9nF,SAASooF,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjjF,MAAK8V,IACjCA,EAAaotE,YAAY,G","file":"static/js/main.7fcb892b.chunk.js","sourcesContent":["import i18n from \"i18next\"\nimport { initReactI18next } from \"react-i18next\"\n// import Backend from 'i18next-xhr-backend'\nimport LanguageDetector from 'i18next-browser-languagedetector'\n\n// the translations\n// (tip move them in a JSON file and import them)\n// const resources = {\n//   en: {\n//     translations: {\n//         school: \"School\"\n//     }\n//   }\n// }\n\nimport en_US_common from \"./i18n/en_US/common\"\nconst resources = {\n    en_US: {\n        common: en_US_common\n    },\n}\n\nconsole.log(resources)\n\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  //   .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    resources,\n    lng: \"en_US\",\n    fallbackLng: \"en_US\",\n    ns: [\"common\"],\n    defaultNS: \"common\",\n    debug: true,\n\n    // keySeparator: false, // we do not use keys in form messages.welcome\n    keySeparator: '.', // we use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    }\n  })\n\n  export default i18n","import { gql } from \"@apollo/client\"\n\n\nexport const TOKEN_AUTH = gql`\n  mutation TokenAuth($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      payload\n      refreshToken\n      refreshExpiresIn\n    }\n  } \n`\n\n\nexport const TOKEN_VERIFY = gql`\n  mutation VerifyToken($token: String!) {\n    verifyToken(token: $token) {\n      payload\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH = gql`\n  mutation RefreshToken {\n    refreshToken {\n      token\n      payload\n      refreshExpiresIn\n      refreshToken\n    }\n  }\n`\n\n\nexport const TOKEN_REVOKE = gql`\n  mutation RevokeToken($refreshToken: String!) {\n    revokeToken(refreshToken: $refreshToken) {\n      revoked\n    }\n  }\n`\n\n\nexport const TOKEN_COOKIE_DELETE = gql`\n  mutation {\n    deleteTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const TOKEN_REFRESH_COOKIE_DELETE = gql`\n  mutation {\n    deleteRefreshTokenCookie {\n      deleted\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input: UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","const cs_error_codes = {\n    USER_NOT_LOGGED_IN: \"USER_NOT_LOGGED_IN\"\n}\n\nexport default cs_error_codes\n","const cs_local_storage_keys = {\n    AUTH_TOKEN: 'costasiella:authToken',\n    AUTH_TOKEN_EXP: 'costasiella:authTokenExp',\n    AUTH_TOKEN_ORIGIAT: 'costasiella:authTokenorigIat',\n    AUTH_REFRESH_TOKEN: 'costasiella:authRefreshToken', \n    AUTH_REFRESH_TOKEN_EXP: 'costasiella:refreshTokenExp',\n    AUTH_LOGIN_NEXT: 'costasiella:authLoginNext',\n    FINANCE_EXPENSES_FILTER_DATE_FROM: 'costasiella:financeExpensesFilterDateFrom',\n    FINANCE_EXPENSES_FILTER_DATE_UNTIL: 'costasiella:financeExpensesFilterDateUntil',\n    FINANCE_EXPENSES_FILTER_SUPPLIER: 'costasiella:financeExpensesFilterSupplier',\n    FINANCE_INVOICES_FILTER_DATE_FROM: 'costasiella:financeInvoicesFilterDateFrom',\n    FINANCE_INVOICES_FILTER_DATE_UNTIL: 'costasiella:financeInvoicesFilterDateUntil',\n    FINANCE_INVOICES_FILTER_SEARCH: 'costasiella:financeInvoicesFilterSearch',\n    FINANCE_INVOICES_FILTER_STATUS: 'costasiella:financeInvoicesFilterStatus',\n    FINANCE_INVOICES_EDIT_RETURN: 'costasiella:financeInvoicesEditReturn',\n    FINANCE_ORDERS_FILTER_STATUS: 'costasiella:financeOrdersFilterStatus',\n    FINANCE_QUOTES_EDIT_RETURN: 'costasiella:financeQuotesEditReturn',\n    FINANCE_QUOTES_FILTER_STATUS: 'costasiella:financeQuotesFilterStatus',\n    FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE: 'costasiella:financePaymentBatchCategoriesShowArchive',\n    INSIGHT_CLASSPASSES_YEAR: 'costasiella:insightClasspassesYear',\n    INSIGHT_REVENUE_YEAR: 'costasiella:insightRevenueYear',\n    INSIGHT_SUBSCRIPTIONS_YEAR: 'costasiella:insightSubscriptionsYear',\n    INSIGHT_TRIALPASSES_YEAR: 'costasiella:insightTrialpassesYear',\n    INSIGHT_TRIALPASSES_MONTH: 'costasiella:insightTrialpassesMonth',\n    ORGANIZATION_CLASSTYPES_ARCHIVED: 'costasiella:organizationClasstypesArchived',\n    RELATIONS_ACCOUNTS_FILTER_TYPE: 'costasiella:relationsAccountsFilterType',\n    RELATIONS_ACCOUNTS_SEARCH: 'costasiella:relationsAccountsSearch',\n    RELATIONS_ACCOUNTS_IS_ACTIVE: 'costasiella:relationsAccountsIsActive',\n    RELATIONS_ACCOUNT_NOTES_NOTE_TYPE: 'costasiella:relationsAccountNotesNoteType',\n    RELATIONS_ACCOUNT_PROFILE_RETURN: 'costasiella:relationsAccountProfileReturn',\n    RELATIONS_BUSINESSES_EDIT_RETURN: 'costasiella:relationsBusinessEditReturn',\n    RELATIONS_BUSINESSES_SHOW_ARCHIVE: 'costasiella:relationsBusinessesShowArchive',\n    RELATIONS_BUSINESSES_SEARCH: 'costasiella:relationsBusinessesSeach',\n    SCHEDULE_APPOINTMENTS_DATE_FROM: 'costasiella:scheduleAppointmentsDateFrom',\n    SCHEDULE_APPOINTMENTS_DATE_UNTIL: 'costasiella:scheduleAppointmentsDateUntil',\n    SCHEDULE_APPOINTMENTS_ORDER_BY: 'costasiella:scheduleAppointmentsOrderBy',\n    SCHEDULE_APPOINTMENTS_FILTER_CLASSTYPE: 'costasiella:scheduleAppointmentsFilterClasstype',\n    SCHEDULE_APPOINTMENTS_FILTER_LOCATION: 'costasiella:scheduleAppointmentsFilterLocation',\n    SCHEDULE_CLASSES_BOOK_RETURN: \"costasiella:scheduleClassesBookReturn\",\n    SCHEDULE_CLASSES_DATE_FROM: 'costasiella:scheduleClassesDateFrom',\n    SCHEDULE_CLASSES_DATE_UNTIL: 'costasiella:scheduleClassesDateUntil',\n    SCHEDULE_CLASSES_ORDER_BY: 'costasiella:scheduleClassesOrderBy',\n    SCHEDULE_CLASSES_FILTER_CLASSTYPE: 'costasiella:scheduleClassesFilterClasstype',\n    SCHEDULE_CLASSES_FILTER_INSTRUCTOR: 'costasiella:scheduleClassesFilterInstructor',\n    SCHEDULE_CLASSES_FILTER_LEVEL: 'costasiella:scheduleClassesFilterLevel',\n    SCHEDULE_CLASSES_FILTER_LOCATION: 'costasiella:scheduleClassesFilterLocation',\n    SCHEDULE_CLASSES_ENROLLMENT_SEARCH: 'costasiella:scheduleClassesEnrollmentSearch',\n    SCHEDULE_CLASSES_ENROLLMENT_RETURN: 'costasiella:scheduleClassesEnrollmentReturn',\n    SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH: 'costasiella:scheduleClassesClassAttendanceSearch',\n    SCHEDULE_EVENTS_ARCHIVED: 'costasiella:scheduleEventsArchived',\n    SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH: 'costasiella:scheduleEventsTicketsCustomersSearch',\n    SCHEDULE_SHIFTS_DATE_FROM: 'costasiella:scheduleShiftsDateFrom',\n    SCHEDULE_SHIFTS_DATE_UNTIL: 'costasiella:scheduleShiftsDateUntil',\n    SCHEDULE_SHIFTS_ORDER_BY: 'costasiella:scheduleShiftsOrderBy',\n    SCHEDULE_SHIFTS_FILTER_SHIFT: 'costasiella:scheduleShitsFilterShift',\n    SCHEDULE_SHIFTS_FILTER_LOCATION: 'costasiella:scheduleShiftsFilterLocation',\n    SELFCHECKIN_CHECKIN_SEARCH: 'costasiella:SelfcheckinCheckinSearch',\n    SHOP_ACCOUNT_BANK_ACCOUNT_NEXT: 'costasiella:ShopAccountBankAccountNext',\n    SHOP_ACCOUNT_PROFILE_NEXT: 'costasiella:ShopAccountProfileNext',\n    SHOP_CLASSES_DATE_FROM: 'costasiella:shopClassesDateFrom',\n    SHOP_CLASSES_DATE_UNTIL: 'costasiella:shopClassesDateUntil',\n    SHOP_CLASSES_ORDER_BY: 'costasiella:shopClassesOrderBy',\n    SHOP_CLASSES_FILTER_CLASSTYPE: 'costasiella:shopClassesFilterClasstype',\n    SHOP_CLASSES_FILTER_INSTRUCTOR: 'costasiella:shopClassesFilterInstructor',\n    SHOP_CLASSES_FILTER_LEVEL: 'costasiella:shopClassesFilterLevel',\n    SHOP_CLASSES_FILTER_LOCATION: 'costasiella:shopClassesFilterLocation',\n}\n\nexport default cs_local_storage_keys\n","import CSLS from \"./cs_local_storage\"\n\n\nexport const CSAuth = {\n    login(tokenData) {\n        // localStorage.setItem(CSLS.AUTH_TOKEN, tokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, tokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, tokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, tokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, tokenData.refreshExpiresIn)\n        localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n    },\n    updateTokenInfo(refreshTokenData) {\n        console.log(\"Token payload:\")\n        console.log(refreshTokenData)\n        // localStorage.setItem(CSLS.AUTH_TOKEN, refreshTokenData.token)\n        localStorage.setItem(CSLS.AUTH_TOKEN_EXP, refreshTokenData.payload.exp)\n        localStorage.setItem(CSLS.AUTH_TOKEN_ORIGIAT, refreshTokenData.payload.origIat)\n        // localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN, refreshTokenData.refreshToken)\n        localStorage.setItem(CSLS.AUTH_REFRESH_TOKEN_EXP, refreshTokenData.refreshExpiresIn)\n    },\n    cleanup() {\n        console.warn(\"csauth cleanup called!\")\n        // Like logging out, but don't unset next url. \n        // This function is used when a refreshToken has expired\n        // localStorage.removeItem(CSLS.AUTH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_EXP)\n        localStorage.removeItem(CSLS.AUTH_TOKEN_ORIGIAT)\n        // localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN)\n        localStorage.removeItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    },\n    logout(expired=false) {\n        if (!expired) {\n            // Manual logout, remove everything\n            this.cleanup()\n            localStorage.removeItem(CSLS.AUTH_LOGIN_NEXT)\n        }        \n    }\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_APP_SETTINGS_QUERY = gql`\n  query AppSettings {\n    appSettings(id: \"QXBwU2V0dGluZ3NOb2RlOjE=\") {\n      dateFormat\n      timeFormat\n      timeFormatMoment\n      dateTimeFormatMoment\n      onlinePaymentsAvailable\n      accountSignupEnabled\n    }\n  }\n`\n\n\nexport const UPDATE_APP_SETTINGS = gql`\n  mutation UpdateAppSettings($input: UpdateAppSettingsInput!) {\n    updateAppSettings(input: $input) {\n      appSettings {\n        id\n      }\n    }\n  }\n`","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_QUERY = gql`\n  query Organization($id: ID!) {\n    organization(id:$id) {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n      urlLogoLogin\n      urlLogoInvoice\n      urlLogoEmail\n      urlLogoShopHeader\n      urlLogoSelfCheckin\n      brandingColorBackground\n      brandingColorText\n      brandingColorAccent\n      brandingColorSecondary\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION = gql`\nmutation UpdateOrganization($input: UpdateOrganizationInput!) {\n  updateOrganization(input: $input) {\n    organization {\n      id\n    }\n  }\n}\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePageWide({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageWide)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport CSStandalonePageWide from './CSStandalonePageWide'\n\n\nfunction CSStandalonePageLoader() {\n  return (\n    <CSStandalonePageWide>\n      <div className='text-center'>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(CSStandalonePageLoader)\n\n\n\n","import React from 'react'\n\nconst AppSettingsContext = React.createContext({})\n\nexport const AppSettingsProvider = AppSettingsContext.Provider\nexport const AppSettingsConsumer = AppSettingsContext.Consumer\n\nexport default AppSettingsContext","import React from 'react'\n\nconst OrganizationContext = React.createContext({})\n\nexport const OrganizationProvider = OrganizationContext.Provider\nexport const OrganizationConsumer = OrganizationContext.Consumer\n\nexport default OrganizationContext","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SHOP_FEATURES_QUERY = gql`\n  query SystemFeatureShop {\n    systemFeatureShop(id: \"U3lzdGVtRmVhdHVyZVNob3BOb2RlOjE=\") {\n      memberships\n      subscriptions\n      classpasses\n      classes\n      events\n    }\n  }\n`\n\n\nexport const UPDATE_SHOP_FEATURES = gql`\n  mutation UpdateSystemFeatureShop($input: UpdateSystemFeatureShopInput!) {\n    updateSystemFeatureShop(input: $input) {\n      systemFeatureShop {\n        id\n      }\n    }\n  }\n`","import * as React from \"react\"\nimport { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport { GET_SHOP_FEATURES_QUERY } from \"../components/settings/shop/features/queries\"\nimport OrganizationContext from './context/OrganizationContext'\nimport CSLS from \"../tools/cs_local_storage\"\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\n\nconst getNavBarItems = (t, loading, error, data) => {\n  const shopFeatures = data.systemFeatureShop\n\n  let items = []\n  // let permissions = get_all_permissions(user)\n\n  if (loading) {\n    items.push({\n      value: t(\"general.loading_with_dots\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  if (error) {\n    items.push({\n      value: t(\"general.error_sad_smiley\"),\n      to: \"/\",\n      icon: \"\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true, \n    })\n\n    return items\n  }\n\n  items.push({\n    value: t(\"shop.home.title\"),\n    to: \"/\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n\n  if (shopFeatures.subscriptions) {\n    items.push({\n      value: t(\"shop.subscriptions.title\"),\n      to: \"/shop/subscriptions\",\n      icon: \"edit\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classpasses) {\n    items.push({\n      value: t(\"shop.classpasses.title\"),\n      to: \"/shop/classpasses\",\n      icon: \"credit-card\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.classes) {\n    items.push({\n      value: t(\"shop.classes.title\"),\n      to: \"/shop/classes\",\n      icon: \"book\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  if (shopFeatures.events) {\n    items.push({\n      value: t(\"shop.events.title\"),\n      to: \"/shop/events\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n      useExact: true,\n    })\n  }\n\n  items.push({\n    value: t(\"shop.contact.title\"),\n    to: \"/shop/contact\",\n    icon: \"message-square\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Check if refresh token is present and if so, hasn't expired\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let accountTitle = t(\"shop.account.title\")\n  let accountLink = \"/shop/account\"\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    accountTitle = t(\"general.sign_in\")\n    accountLink = \"/user/login\"\n  }\n\n  items.push({\n    value: accountTitle,\n    to: accountLink,\n    icon: \"user\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  return items\n}\n\nfunction getHeaderImageUrl(organization) {\n  let imageURL = \"/d/static/logos/stock/logo_stock_backend.png\"\n\n  if (organization) {\n    if (organization.urlLogoShopHeader) {\n      imageURL = organization.urlLogoShopHeader\n    }\n  }\n\n  return imageURL\n}\n\nconst now = new Date()\n\nfunction SiteWrapperShop({t, match, history, children}) {\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const organization = useContext(OrganizationContext)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  const headerImageUrl = getHeaderImageUrl(organization)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: headerImageUrl, // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              {(data.user) ? (data.user.instructor || data.user.employee) ? <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link> : \"\" : \"\"}\n            </Nav.Item>\n          ),\n          \n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n        //   accountDropdown: {\n        //   avatarURL: \"#\",\n        //   name: data.user.firstName + ' ' + data.user.lastName,\n        //   description: \"\",\n        //   options: [\n        //     // { icon: \"user\", value: \"Profile\" },\n        //     { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n        //     { isDivider: true },\n        //     { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        //   ],\n        // },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, loading, error, data) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Peacefully powered by\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Costasiella\n                </a>{\". \"}\n                All rights reserved © {now.getFullYear()}.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                <Link to=\"/cookie_policy\">\n                  {t(\"cookie_policy.title\")}\n                </Link>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper>    \n  )\n}\n\n\nexport default withTranslation()(SiteWrapperShop)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Tag,\n} from \"tabler-react\";\n\n\nfunction ShopCheckoutProgress({ t, match, history, checkoutProgress=\"\" }) {\n  let color_order = \"\" \n  let color_payment = \"\"\n  let color_complete = \"\"\n\n  switch(checkoutProgress) {\n    case \"order\":\n      color_order = \"info\"\n      break\n    case \"payment\":\n      color_order = \"success\"\n      color_payment = \"info\"\n      break      \n    case \"complete\":\n      color_order = \"success\"\n      color_payment = \"success\"\n      color_complete = \"success\"\n      break\n    default:\n      break\n  }\n\n  return (\n    <div className=\"d-flex justify-content-center mb-4\">\n    <Tag.List>\n      <Tag color={color_order} addOn={<Icon name=\"shopping-cart\"/>}>\n        {t(\"shop.checkout_progress.order\")} \n      </Tag>\n      <Tag color={color_payment} addOn={<Icon name=\"credit-card\" />}>\n        {t(\"shop.checkout_progress.payment\")} \n      </Tag>\n      <Tag color={color_complete} addOn={<Icon name=\"check\" />}>\n        {t(\"shop.checkout_progress.complete\")}\n      </Tag>\n    </Tag.List>\n    </div>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutProgress))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonBack = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      className={className}\n      color=\"secondary\"\n      icon=\"arrow-left\">\n        {t(\"general.back\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../SiteWrapperShop\"\nimport ShopCheckoutProgress from \"./ShopCheckoutProgress\"\nimport ButtonBack from '../ui/ButtonBack';\n\nfunction ShopBase({ t, match, history, children, title, subTitle, returnUrl, pageHeaderOptions=\"\", checkoutProgress=false }) {\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              { (returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n              { pageHeaderOptions }\n            </div>\n          </Page.Header>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                {(checkoutProgress) ?\n                  <ShopCheckoutProgress checkoutProgress={checkoutProgress} />\n                  : \"\" }\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperShop>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction CookiePolicyBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"cookie_policy.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicyBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card, \n} from \"tabler-react\";\nimport CookiePolicyBase from \"./CookiePolicyBase\"\n\n\nfunction CookiePolicy({ t, match, history }) {\n  return (\n    <CookiePolicyBase>\n      <Card>\n        <Card.Body>\n          {t(\"cookie_policy.policy_text\")}\n        </Card.Body>\n      </Card>\n    </CookiePolicyBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CookiePolicy))\n","export function capitalize(word) {\n    const lower = word.toLowerCase();\n    return word.charAt(0).toUpperCase() + lower.slice(1);\n  }\n  ","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nfunction StatusIcon({color=\"\"}) {\n  let className\n\n  switch (color) {\n    case \"success\":\n      className=\"bg-success\"\n      break\n    case \"warning\":\n      className=\"bg-warning\"\n      break\n    case \"danger\":\n      className=\"bg-danger\"\n      break\n    case \"primary\":\n      className=\"bg-primary\"\n      break\n    default:\n      className=\"bg-secondary\"\n  }\n\n  return <span className={\"status-icon \" + className} />\n}\n\n\nexport default withTranslation()(StatusIcon)\n\n\n\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport {\n  Badge,\n  Icon\n} from \"tabler-react\";\n\nimport StatusIcon from \"../../ui/StatusIcon\"\nimport { t } from \"i18next\";\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationClasstype\n  let instructor\n  let organizationLevel\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationClasstype = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE)\n  if (organizationClasstype) {\n    queryVars.organizationClasstype = organizationClasstype\n  } else {\n    queryVars.organizationClasstype = \"\"\n  }\n\n  instructor = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR)\n  if (instructor) {\n    queryVars.instructor = instructor\n  } else {\n    queryVars.instructor = \"\"\n  }\n\n  organizationLevel = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL)\n  if (organizationLevel) {\n    queryVars.organizationLevel = organizationLevel\n  } else {\n    queryVars.organizationLevel = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let badge\n\n  switch (role) {\n    case \"SUB\":\n      badge = <Badge color=\"primary\">{t(\"schedule.classes.instructor_roles.sub\")}</Badge>\n      break\n    case \"ASSISTANT\":\n      badge = <Badge color=\"success\">{t(\"schedule.classes.instructor_roles.assistant\")}</Badge>\n      break\n    case \"KARMA\":\n      badge = <Badge color=\"warning\">{t(\"schedule.classes.instructor_roles.karma\")}</Badge>\n      break\n    default:\n      break\n  }\n\n  return <React.Fragment><Icon name=\"user\"/> {name} {badge}</React.Fragment>\n}\n\n\nexport function represent_class_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELLED') {\n    return description\n  }\n}","import { gql } from \"@apollo/client\"\n\nconst GET_USER = gql`\n  query User($before: String, $after: String)  {\n    user {\n      id\n      isActive\n      email\n      firstName\n      lastName\n      employee\n      instructor\n      urlImageThumbnailSmall\n      groups {\n        edges {\n          node {\n            id\n            name\n            permissions(first: 1000, before: $before, after: $after) {\n              pageInfo {\n                hasNextPage\n                hasPreviousPage\n                startCursor\n                endCursor                \n              }\n              edges {\n                node {\n                  id\n                  name\n                  codename\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default GET_USER","export function get_all_permissions(user) {\n    const permissions = {}\n    const groups = user.groups\n    if (groups.edges) {\n      for (let edge_index in groups.edges) {\n        let group_edge = groups.edges[edge_index]\n        if (group_edge.node) {\n          let group_node = group_edge.node \n          if (group_node.permissions.edges) {\n            for (let permission_index in group_node.permissions.edges) {\n              let permission_edge = group_node.permissions.edges[permission_index] \n              if (permission_edge.node) {\n                  let permission_node = permission_edge.node\n                  let codename = permission_node.codename\n                  let codename_split = codename.split('_')\n                  // If code name is not in permissions, create a new set\n                  if (!(codename_split[1] in permissions)) {\n                  permissions[codename_split[1]] = new Set()\n                  }\n                  // Add permission name to set\n                  permissions[codename_split[1]].add(codename_split[0])\n              }\n            }\n          }\n        }\n      }\n    }\n    \n    return permissions\n}\n\n\nexport const has_permission = (permissions, permission, resource) => {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\n\nimport GET_USER from '../queries/system/get_user'\nimport { get_all_permissions } from \"../tools/user_tools\"\n\n\nfunction check_permission(permissions, permission, resource) {\n  let you_shall_not_pass = true\n\n  if (resource in permissions) {\n    if (permissions[resource].has(permission)) {\n      you_shall_not_pass = false\n    }\n  }\n  \n  return !you_shall_not_pass\n}\n\nfunction HasPermissionWrapper({t, permission, resource, children, hideLoading=false}) {\n  const {loading, error, data} = useQuery(GET_USER)\n\n  if (loading) {\n    if (!hideLoading) {\n      return <p>{t(\"general.loading_with_dots\")}</p>\n    } else {\n      return \"\"\n    }\n  } \n  if (error) return <p>Error loading user... :(</p>\n\n  const permissions = get_all_permissions(data.user)\n\n  if (check_permission(permissions, permission, resource)) {\n    return children\n  } else {\n    return ''\n  }\n}\n  \nexport default withTranslation()(HasPermissionWrapper)","import { gql } from \"@apollo/client\"\n\nconst GET_USER_PROFILE = gql`\n  query User {\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      profilePolicy\n    }\n  }\n`\n\nexport default GET_USER_PROFILE","import { gql } from \"@apollo/client\"\n\nexport const GET_BACKEND_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $instructor: ID!\n  ) {\n    organizationAnnouncements(first: 100 displayPublic: true, displayBackend: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n  }\n`\n\n\n// Example vars:\n// {\n//   \"dateFrom\": \"2022-08-17\",\n//   \"dateUntil\": \"2022-08-20\",\n//   \"orderBy\": \"starttime\",\n//   \"instructor\": \"QWNjb3VudE5vZGU6Mg==\",\n// }","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { NavLink, withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport { Link } from 'react-router-dom'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\nimport { get_all_permissions, has_permission } from \"../tools/user_tools\"\n\nimport {\n  Site,\n  Nav,\n  Grid,\n  Button,\n  // Page,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\n\nconst getNavBarItems = (t, user) => {\n  let items = []\n  let permissions = get_all_permissions(user)\n\n  items.push({\n    value: t(\"home.title\"),\n    to: \"/backend\",\n    icon: \"home\",\n    LinkComponent: withRouter(NavLink),\n    useExact: true,\n  })\n\n  // Relations\n  if (\n    (has_permission(permissions, 'view', 'account'))\n  ){\n    items.push({\n      value: t(\"relations.title\"),\n      to: \"/relations\",\n      icon: \"users\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Schedule\n  if (\n    (has_permission(permissions, 'view', 'scheduleclass')) ||\n    (has_permission(permissions, 'view', 'scheduleevent'))\n  ){\n    items.push({\n      value: t(\"schedule.title\"),\n      to: \"/schedule\",\n      icon: \"calendar\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Finance\n  if (\n    (has_permission(permissions, 'view', 'financecostcenter')) ||\n    (has_permission(permissions, 'view', 'financeglaccount')) ||\n    (has_permission(permissions, 'view', 'financetaxrate')) \n  ){\n    items.push({\n      value: t(\"finance.title\"),\n      to: \"/finance\",\n      icon: \"dollar-sign\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Organization\n  if (\n    (has_permission(permissions, 'view', 'organizationclasspass')) || \n    (has_permission(permissions, 'view', 'organizationclasstype')) ||\n    (has_permission(permissions, 'view', 'organizationdiscovery')) ||\n    (has_permission(permissions, 'view', 'organizationlocation')) ||\n    (has_permission(permissions, 'view', 'organizationmembership')) ||  \n    (has_permission(permissions, 'view', 'organization')) \n   ){\n   items.push({\n      value: t(\"organization.title\"),\n      to: \"/organization\",\n      icon: \"feather\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Insight\n  if (\n    (has_permission(permissions, 'view', 'insight'))\n   ){\n    items.push({\n      value: t(\"insight.title\"),\n      to: \"/insight\",\n      icon: \"bar-chart-2\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // Automation\n  if (\n    (has_permission(permissions, 'view', 'automation'))\n   ){\n    items.push({\n      value: t(\"automation.title\"),\n      to: \"/automation\",\n      icon: \"loader\",\n      LinkComponent: withRouter(NavLink),\n    })\n  }\n\n  // let goToSubItems = []\n  // if (has_permission(permissions, 'view', 'selfcheckin')) {\n  //   goToSubItems.push(\n  //     { value: t(\"selfcheckin.home.title\"), to: \"/selfcheckin\", LinkComponent: withRouter(NavLink) }\n  //   )\n  // }\n  // goToSubItems.push(\n  //   { value: t(\"shop.title\"), to: \"/shop\", LinkComponent: withRouter(NavLink) }\n  // )\n\n  // // Go to\n  // if (\n  //   (has_permission(permissions, 'view', 'selfcheckin'))\n  //  ){\n  //   items.push({\n  //     value: t(\"goto.title\"),\n  //     icon: \"link\",\n  //     subItems: goToSubItems,\n  //   })\n  // }\n\n\n  return items\n\n}\n\nconst now = new Date()\n\nfunction SiteWrapper({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader/>;\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  let avatarURL = \"#\"\n  if (data.user.urlImageThumbnailSmall) {\n    avatarURL = data.user.urlImageThumbnailSmall\n  }\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n          href: \"/\",\n          alt: \"Costasiella\",\n          imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n          navItems: (\n            <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n              <Link to=\"/settings\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"settings\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('general.settings')}\n                </Button>\n              </Link>\n              <Link to=\"/user/welcome\">\n                <Button\n                  className=\"mr-2\"\n                  icon=\"link\"\n                  outline\n                  size=\"sm\"\n                  color=\"primary\"\n                >\n                  {t('goto.title')}\n                </Button>\n              </Link>\n            </Nav.Item>\n          ),\n          // notificationsTray: {\n          //   notificationsObjects,\n          //   markAllAsRead: () =>\n          //     this.setState(\n          //       () => ({\n          //         notificationsObjects: this.state.notificationsObjects.map(\n          //           v => ({ ...v, unread: false })\n          //         ),\n          //       }),\n          //       () =>\n          //         setTimeout(\n          //           () =>\n          //             this.setState({\n          //               notificationsObjects: this.state.notificationsObjects.map(\n          //                 v => ({ ...v, unread: true })\n          //               ),\n          //             }),\n          //           5000\n          //         )\n          //     ),\n          //   unread: unreadCount,\n          // },\n          accountDropdown: {\n          avatarURL: avatarURL,\n          name: data.user.firstName + ' ' + data.user.lastName,\n          description: \"\",\n          options: [\n            // { icon: \"user\", value: \"Profile\" },\n            { icon: \"lock\", value: t(\"user.change_password.title\"), to: \"/#/user/password/change/\" },\n            { isDivider: true },\n            { icon: \"user\", value: t(\"shop.account.title\"), to: \"/#/shop/account/\" },\n            { isDivider: true },\n            { icon: \"log-out\", value: t(\"user.logout.title\"), to: \"/#/user/logout/\" },\n          ],\n        },\n        }}\n        // navProps={{ itemsObjects: navBarItems }}\n        navProps={{ itemsObjects: getNavBarItems(t, data.user) }}\n        routerContextComponentType={withRouter(RouterContextProvider)}\n        footerProps={{\n          // links: [\n          //   <a href=\"#\">First Link</a>,\n          //   <a href=\"#\">Second Link</a>,\n          //   <a href=\"#\">Third Link</a>,\n          //   <a href=\"#\">Fourth Link</a>,\n          //   <a href=\"#\">Five Link</a>,\n          //   <a href=\"#\">Sixth Link</a>,\n          //   <a href=\"#\">Seventh Link</a>,\n          //   <a href=\"#\">Eigth Link</a>,\n          // ],\n          // note:\n          //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n          copyright: (\n            <React.Fragment>\n              <small>\n                Copyleft © {now.getFullYear()}.\n                <a\n                  href=\"https://costasiella.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {\" \"}\n                  Edwin van de Ven\n                </a>{\". \"}\n                All rights reserved.\n              </small>\n            </React.Fragment>\n          ),\n          nav: (\n            <React.Fragment>\n              <Grid.Col auto={true}>\n                {/* <List className=\"list-inline list-inline-dots mb-0\">\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./docs/index.html\">Documentation</a>\n                  </List.Item>\n                  <List.Item className=\"list-inline-item\">\n                    <a href=\"./faq.html\">FAQ</a>\n                  </List.Item>\n                </List> */}\n              </Grid.Col>\n              <Grid.Col auto={true}>\n                {/* <Button\n                  href=\"https://github.com/tabler/tabler-react\"\n                  size=\"sm\"\n                  outline\n                  color=\"primary\"\n                  RootComponent=\"a\"\n                >\n                  Source code\n                </Button> */}\n              </Grid.Col>\n            </React.Fragment>\n          ),\n        }}\n      >\n        {children}\n        <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n        />\n      </Site.Wrapper>\n  )\n}\n\nexport default withTranslation()(SiteWrapper)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction HomeHomeBase({ t, match, history, children }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.home.title\")} />\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(HomeHomeBase))","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\nimport {\n  Badge,\n  Button,\n  Card,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { capitalize } from \"../../../tools/string_tools\"\nimport { represent_class_status, get_class_messages } from '../../schedule/classes/tools'\nimport HasPermissionWrapper from '../../HasPermissionWrapper'\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\nimport { GET_BACKEND_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport HomeHomeBase from './HomeHomeBase';\n\n\nfunction HomeHome({ t, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_BACKEND_ANNOUNCEMENTS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      instructor: dataUser && dataUser.user ? dataUser.user.accountId : null,\n      dateFrom: moment().format('YYYY-MM-DD'),\n      dateUntil: moment().add(2, 'days').format('YYYY-MM-DD'),\n      orderBy: \"starttime\"\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading || loadingUser ) return (\n    <HomeHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </HomeHomeBase>\n  )\n  if (error || errorUser ) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements.error_loading\")}\n    </HomeHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  // Empty list\n  if (!announcements.edges.length) return (\n    <HomeHomeBase>\n      {t(\"home.home.announcements_empty_list\")}\n    </HomeHomeBase>\n  )\n\n  console.log(data)\n  let upcomingClasses = false\n  for ( let i=0; i<data.scheduleClasses.length; i++ ) {\n    if (data.scheduleClasses[i]['classes'].length) {\n      upcomingClasses = true\n    }\n  }\n    \n\n  // Data\n  return (\n    <HomeHomeBase>\n      <h4>{t(\"organization.announcements.title\")}</h4>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n      \n      { upcomingClasses && <React.Fragment>\n        <h4>{t(\"organization.home.upcoming_classes.title\")}</h4>\n          { data.scheduleClasses.map(({ date, classes }) => (\n            !classes.length ? \"\" : <React.Fragment key={v4()}>\n              <h5>\n                {capitalize(moment(date).format(\"dddd\"))} {' '}\n                <small className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                </small>\n              </h5>\n              {classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  holiday,\n                  holidayName,\n                  description,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  spaces,\n                  countAttendingAndBooked }) => (\n                    <Card key={v4()}>\n                      <Card.Body>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                <h5>\n                                  {represent_class_status(status)}\n                                  <span className='mr-2'>\n                                  {/* Class type */}\n                                  {organizationClasstype.name} { ' ' }\n                                  {/* Start & end time */}\n                                  {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                  {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                  </span>\n                                  {organizationLevel && <small className=\"text-muted\">\n                                    {organizationLevel.name}\n                                  </small>}\n                                </h5>\n                              </Grid.Col>\n                            </Grid.Row>\n                            <Grid.Row>\n                              <Grid.Col xs={12}>\n                                {/* Location */}\n                                <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                                <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                              </Grid.Col>\n                            </Grid.Row>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                              <Link className=\"float-right\" to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                <Button\n                                  size=\"sm\"\n                                  color=\"secondary\"\n                                  icon=\"check-circle\"\n                                >\n                                    {t(\"general.attendance\")}\n                                </Button>\n                              </Link>\n                            </HasPermissionWrapper>\n                          </Grid.Col>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Grid.Col xs={9} sm={9} md={10}>\n                            <div className=\"mt-1\">\n                              {/* <BadgePublic className=\"mr-2\" isPublic={displayPublic} /> */}\n                              {(frequencyType === 'SPECIFIC') ? \n                                <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                                null } \n                              {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                                <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                                null } \n                              {(status === \"CANCELLED\") ? \n                                <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                                null } \n                                <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                            </div>\n                          </Grid.Col>\n                          <Grid.Col xs={3} sm={3} md={2}>\n                            {/* Attendance */}\n                            <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                          </Grid.Col>\n                        </Grid.Row>\n                      </Card.Body>\n                    </Card>\n                  )\n                )}\n            </React.Fragment >\n          ))}\n        </React.Fragment> \n      }  {/* End upcoming classes check */}\n    </HomeHomeBase>\n  )\n}\n\n\n// class HomeHome extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Home home props:\")\n//     console.log(props)\n//   }\n\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title={t(\"home.title\")} />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('home.title')}</Card.Title>\n//                 </Card.Header>\n//                 <Card.Body>\n//                     Hello world!\n//                 </Card.Body>\n//               </Card>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(HomeHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction SettingsHomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"automation.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHomeItemButton))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport AutomationHomeItemButton from \"./AutomationHomeItemButton\"\n\n\nfunction AutomationHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"automation.account.subscriptions.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.invoices.title\")}</h5>\n                  {t(\"automation.account.subscriptions.invoices.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/invoices\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.credits.title\")}</h5>\n                  {t(\"automation.account.subscriptions.credits.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/credits\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"automation.account.subscriptions.mollie_collection.title\")}</h5>\n                  {t(\"automation.account.subscriptions.mollie_collection.explanation\")}\n                  <br /><br />\n                  <AutomationHomeItemButton link=\"/automation/account/subscriptions/mollie_collections\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationHome))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Dimmer,\n  } from \"tabler-react\"\n\n\nclass ContentCard extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const cardTitle = this.props.cardTitle\n      const headerContent = this.props.headerContent\n      const onLoadMore = this.props.onLoadMore \n      const isLoadingMore = this.props.isLoadingMore\n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n      const cardTabs = this.props.cardTabs\n      const hasCardBody = this.props.hasCardBody \n\n\n      return(\n        <Card>\n          <Card.Header>\n            <Card.Title>{cardTitle}</Card.Title>\n            {headerContent}\n          </Card.Header>\n          {cardTabs}\n          {(hasCardBody) ? \n            <Card.Body>{children}</Card.Body> :\n            children\n          }\n          <Card.Footer>\n            {(isLoadingMore) ? <Dimmer active={true} loader={true}>loading</Dimmer> :\n              (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Button \n                    link\n                    onClick={onLoadMore} \n                    >\n                    {t('general.load_more')}\n                  </Button>\n                : t('general.loaded_all')\n            }\n          </Card.Footer>\n        </Card>\n      )\n    }\n}\n\nContentCard.defaultProps = {\n  onLoadMore: f=>f,\n  hasCardBody: true,\n  isLoadingMore: false\n}\n  \nexport default withTranslation()(ContentCard)\n","import { gql } from \"@apollo/client\"\n\nexport const GET_TASK_RESULT_QUERY = gql`\nquery TaskResults($before: String, $after: String, $taskName:String) {\n  djangoCeleryResultTaskResults(first: 100, before: $before, after: $after, taskName: $taskName) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        taskId\n        taskName\n        taskArgs\n        taskKwargs\n        status\n        contentType\n        contentEncoding\n        result\n        dateDone\n        traceback\n        meta\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction AutomationBack({ t, returnUrl=\"/automation\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(AutomationBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionCreditsBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/credits/add\"}>\n                  <Button color=\"primary\" className=\"ml-2\" >\n                    {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditsBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge,\n} from \"tabler-react\";\n\n// Status reference\n// https://docs.celeryproject.org/en/stable/userguide/tasks.html\n\nfunction AutomationTaskResultStatus({t, history, match, status}) {\n  switch(status) {\n    case \"PENDING\":\n      return <Badge color=\"secondary\">{t(\"automation.tasks.result_statuses.pending\")}</Badge>\n    case \"STARTED\":\n      return <Badge color=\"primary\">{t(\"automation.tasks.result_statuses.started\")}</Badge>\n    case \"SUCCESS\":\n      return <Badge color=\"success\">{t(\"automation.tasks.result_statuses.success\")}</Badge>\n    case \"FAILURE\":\n      return <Badge color=\"danger\">{t(\"automation.tasks.result_statuses.failure\")}</Badge>\n    case \"RETRY\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.retry\")}</Badge>\n    case \"REVOKED\":\n      return <Badge color=\"warning\">{t(\"automation.tasks.result_statuses.revoked\")}</Badge>\n    default:\n      return \"status unknown\"\n  }\n}\n\nexport default withTranslation()(withRouter(AutomationTaskResultStatus))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionCredits({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionCreditsBase>\n    )\n  }\n\n  const taskResults = data.djangoCeleryResultTaskResults\n  \n\n  return (\n    <AutomationAccountSubscriptionCreditsBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.credits.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.credits.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCredits))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionCreditForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionCreditForm from './AutomationAccountSubscriptionCreditForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionCreditsBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionCreditForMonth($input:CreateAccountSubscriptionCreditForMonthInput!) {\n    createAccountSubscriptionCreditForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/credits\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.credits.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_CREDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.credits.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.credits.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionCreditForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionInvoicesBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/invoices/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionInvoices({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n    },\n    pollInterval: 5000\n  })\n\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionInvoicesBase>\n    )\n  }\n\n  console.log(\"Automation invoices data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.invoices.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          { (!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.invoices.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoices))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  invoiceDate: Yup.string()\n    .required(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionInvoicesForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('automation.account.subscriptions.invoices.invoice_date')}>\n              <Field component=\"select\" \n                    name=\"invoiceDate\" \n                    className={(errors.invoiceDate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"today\" key={v4()}>{t('automation.account.subscriptions.invoices.today')}</option>\n                <option value=\"first_of_month\" key={v4()}>{t('automation.account.subscriptions.invoices.invoice_date_first_day_month')}</option>                \n              </Field>\n              <ErrorMessage name=\"invoiceDate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionInvoicesForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionInvoicesForm from './AutomationAccountSubscriptionInvoicesForm'\nimport AutomationAccountSubscriptionInvoicesBase from './AutomationAccountSubscriptionInvoicesBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesForMonth($input:CreateAccountSubscriptionInvoicesForMonthInput!) {\n    createAccountSubscriptionInvoicesForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionCreditAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/invoices\"\n\n  return (\n    <AutomationAccountSubscriptionInvoicesBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.invoices.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 ,\n            description: '',\n            invoiceDate: 'today'\n          }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_INVOICES_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear,\n                  description: values.description,\n                  invoiceDate: values.invoiceDate\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.invoices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionInvoicesForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionInvoicesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AutomationBack from \"../../../AutomationBack\"\n\nfunction AutomationAccountSubscriptionMollieCollectionBase({t, history, match, children, showNewTask=false, returnUrl=\"/automation\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('automation.title')} >\n            <div className=\"page-options d-flex\">\n              <AutomationBack returnUrl={returnUrl} />\n              {(showNewTask) ?\n                <Link to={\"/automation/account/subscriptions/mollie_collections/add\"}>\n                  <Button color=\"primary\" className='ml-2' >\n                  {t('general.new_task')}\n                  </Button>\n                </Link>\n                : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport AutomationAccountSubscriptionMollieCollectionBase from './AutomationAccountSubscriptionMollieCollectionBase'\nimport AutomationTaskResultStatus from \"../../../AutomationTaskResultStatus\"\n\n\nfunction AutomationAccountSubscriptionMollieCollections({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const { error, loading, data, fetchMore } = useQuery(GET_TASK_RESULT_QUERY, {\n    variables: {\n      taskName: \"costasiella.tasks.account.subscription.invoices.tasks.account_subscription_invoices_add_for_month_mollie_collection\"\n    },\n    pollInterval: 5000\n  })\n\n  // Loading\n  if (loading) return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <p>{t('general.loading_with_dots')}</p>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AutomationAccountSubscriptionMollieCollectionBase>\n    )\n  }\n\n  console.log(\"Automation mollie collection data:\")\n  console.log(data)\n  const taskResults = data.djangoCeleryResultTaskResults\n  // const account = data.account\n  // const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  return (\n    <AutomationAccountSubscriptionMollieCollectionBase showNewTask={true}>\n      <ContentCard \n        cardTitle={t('automation.account.subscriptions.mollie_collection.title_card')}\n        pageInfo={taskResults.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: taskResults.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.djangoCeleryResultTaskResults.edges\n              const pageInfo = fetchMoreResult.djangoCeleryResultTaskResults.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    djangoCeleryResultTaskResults: {\n                      __typename: previousResult.djangoCeleryResultTaskResults.__typename,\n                      edges: [ ...previousResult.djangoCeleryResultTaskResults.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n              }\n            })\n          }} \n        >\n          {(!taskResults.edges.length) ? \n            // Empty list\n            <Card.Body>\n              <p>{t('automation.account.subscriptions.mollie_collection.empty_list')}</p>\n            </Card.Body>\n            :\n            // Content\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('automation.general.status.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.time_completed')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_kwargs')}</Table.ColHeader>\n                  <Table.ColHeader>{t('automation.general.task_result')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {taskResults.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      <AutomationTaskResultStatus status={node.status} />\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateDone).format(dateTimeFormatMoment)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.taskKwargs}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.result}\n                    </Table.Col>\n                    <Table.Col>\n\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n    </AutomationAccountSubscriptionMollieCollectionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollections))","import * as Yup from 'yup'\n\nexport const AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n    Icon\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nfunction AutomationAccountSubscriptionMollieCollectionForm({ t, history, isSubmitting, errors, returnUrl}) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n         color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.run_task')} <Icon name=\"chevron-right\" />\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n            {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_TASK_RESULT_QUERY } from \"../../../queries\"\nimport { AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA } from './yupSchema'\nimport AutomationAccountSubscriptionMollieCollectionForm from './AutomationAccountSubscriptionMollieCollectionForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n// import SiteWrapper from \"../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport AutomationAccountSubscriptionCreditsBase from './AutomationAccountSubscriptionMollieCollectionBase'\n\n\nconst ADD_TASK = gql`\n  mutation CreateAccountSubscriptionInvoicesMollieCollectionForMonth(\n    $input:CreateAccountSubscriptionInvoicesMollieCollectionForMonthInput!\n  ) {\n    createAccountSubscriptionInvoicesMollieCollectionForMonth(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction AutomationAccountSubscriptionMollieCollectionAdd({ t, history }) {\n  const [addTask] = useMutation(ADD_TASK)\n  const returnUrl = \"/automation/account/subscriptions/mollie_collections\"\n\n  return (\n    <AutomationAccountSubscriptionCreditsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('automation.account.subscriptions.mollie_collection.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            subscriptionYear: new Date().getFullYear(), \n            subscriptionMonth: new Date().getMonth() + 1 }}\n          validationSchema={AUTOMATION_ACCOUNT_SUBSCRIPTION_MOLLIE_COLLECTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addTask({ variables: {\n                input: {\n                  month: values.subscriptionMonth,\n                  year: values.subscriptionYear\n                }\n              }, refetchQueries: [\n                  {query: GET_TASK_RESULT_QUERY, \n                    variables: {\n                      taskName: \"costasiella.tasks.account.subscription.mollie_collection.tasks.account_subscription_credits_add_for_month\"\n                  }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('automation.account.subscriptions.mollie_collection.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <AutomationAccountSubscriptionMollieCollectionForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </AutomationAccountSubscriptionCreditsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AutomationAccountSubscriptionMollieCollectionAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\nfunction HomeItemButton({ t, link, linkTitle=null }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {linkTitle ? linkTitle: t(\"settings.home.link_edit\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(HomeItemButton))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass FinanceHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Finance home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n    const linkTitleView = t(\"general.view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"finance.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.general.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financequote\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.quotes.title\")}</h5>\n                      {t(\"finance.quotes.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/quotes\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.invoices.title\")}</h5>\n                    {t(\"finance.invoices.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/invoices\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.orders.title\")}</h5>\n                    {t(\"finance.orders.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/orders\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financeexpense\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.expenses.title\")}</h5>\n                      {t(\"finance.expenses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/expenses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.structure.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.glaccounts.title\")}</h5>\n                    {t(\"finance.glaccounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/glaccounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.costcenters.title\")}</h5>\n                    {t(\"finance.costcenters.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/costcenters\"/>\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.payment_methods.title\")}</h5>\n                    {t(\"finance.payment_methods.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentmethods\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.taxes.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"finance.taxrates.title\")}</h5>\n                    {t(\"finance.taxrates.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/finance/taxrates\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"insightfinancetaxratesummary\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.taxrates_summary.title\")}</h5>\n                      {t(\"finance.taxrates_summary.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitleView} link=\"/finance/taxrates_summary\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"finance.home.batches.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_collections.title\")}</h5>\n                      {t(\"finance.payment_batch_collections.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/collection\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatch\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_payments.title\")}</h5>\n                      {t(\"finance.payment_batch_payments.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatches/payment\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                          resource=\"financepaymentbatchcategory\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"finance.payment_batch_categories.title\")}</h5>\n                      {t(\"finance.payment_batch_categories.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/finance/paymentbatchcategories\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(FinanceHome))","import { gql } from \"@apollo/client\"\n\nexport const GET_COSTCENTERS_QUERY = gql`\n  query FinanceCostCenters($after: String, $before: String, $archived: Boolean) {\n    financeCostcenters(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_COSTCENTER_QUERY = gql`\n  query FinanceCostcenter($id: ID!) {\n    financeCostcenter(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_COSTCENTER = gql`\nmutation CreateFinanceCostCenter($input:CreateFinanceCostCenterInput!) {\n  createFinanceCostcenter(input: $input) {\n    financeCostcenter{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_COSTCENTER = gql`\nmutation UpdateFinanceCostCenter($input: UpdateFinanceCostCenterInput!) {\n  updateFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_COSTCENTER = gql`\nmutation ArchiveFinanceCostCenter($input: ArchiveFinanceCostCenterInput!) {\n  archiveFinanceCostcenter(input: $input) {\n    financeCostcenter {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonAdd({ t, addUrl, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.add\")\n  }\n\n  return (\n    <Link to={addUrl}>\n      <Button\n        className={className}\n        color=\"primary\"\n        icon=\"plus-circle\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonAdd)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceCostCentersBase({t, history, children, showBack=false, returnUrl=\"/finance/costcenters\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl={\"/finance/costcenters/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCentersBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_COSTCENTERS_QUERY, ARCHIVE_COSTCENTER } from \"./queries\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase'\n\n\nfunction FinanceCostCenters({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.costcenters.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_COSTCENTERS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveCostcenter ] = useMutation(ARCHIVE_COSTCENTER)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.costcenters.error_loading')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const costcenters = data.financeCostcenters\n\n  // Empty list\n  if (!costcenters.edges.length) { return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.costcenters.empty_list') : t(\"finance.costcenters.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )}\n\n  return (\n    <FinanceCostCentersBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={costcenters.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: costcenters.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeCostcenters.edges\n                        const pageInfo = fetchMoreResult.financeCostcenters.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new costcenters at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeCostcenters: {\n                                __typename: previousResult.financeCostcenters.__typename,\n                                edges: [ ...previousResult.financeCostcenters.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {costcenters.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/costcenters/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveCostcenter({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenters))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const COSTCENTER_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\nimport { GET_COSTCENTERS_QUERY, ADD_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\n\nfunction FinanceCostCenterAdd({ t, history }) {\n  const returnUrl = \"/finance/costcenters\"\n  const [ addCostcenter ] = useMutation(ADD_COSTCENTER)\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={t('finance.costcenters.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addCostcenter({ variables: {\n                  input: {\n                    name: values.name, \n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('finance.code')}>\n                          <Field type=\"text\" \n                                  name=\"code\" \n                                  className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                            {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_COSTCENTERS_QUERY, GET_COSTCENTER_QUERY, UPDATE_COSTCENTER } from './queries'\nimport { COSTCENTER_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceCostCentersBase from './FinanceCostCentersBase';\n\n\nfunction FinanceCostCenterEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.costcenters.title_edit')\n  const returnUrl = \"/finance/costcenters\"\n  const { loading, error, data } = useQuery(GET_COSTCENTER_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateCostcenter ] = useMutation(UPDATE_COSTCENTER)\n\n  if (loading) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  if (error) return (\n    <FinanceCostCentersBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceCostCentersBase>\n  )\n\n  const initialData = data.financeCostcenter;\n\n  return (\n    <FinanceCostCentersBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              code: initialData.code\n            }}\n            validationSchema={COSTCENTER_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateCostcenter({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    code: parseInt(values.code)\n                  }\n                }, refetchQueries: [\n                    {query: GET_COSTCENTERS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.costcenters.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceCostCentersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceCostCenterEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nfunction ButtonExport({ t, url, className=\"\", buttonText=\"\" }) {\n  if (!buttonText) {\n    buttonText = t(\"general.export\")\n  }\n\n  return (\n    <Link to={url}>\n      <Button\n        className={className}\n        color=\"secondary\"\n        icon=\"download-cloud\">\n          {buttonText}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(ButtonExport)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { Link } from \"react-router-dom\"\n\nimport {\n  // Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonBack from '../../ui/ButtonBack';\nimport ButtonExport from '../../ui/ButtonExport';\n\n\nfunction FinanceExpensesBase ({ t, history, children, refetch, returnUrl, showListButtons=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {returnUrl && <ButtonBack returnUrl={returnUrl} />}\n              {/* <FinanceInvoicesFilter refetch={refetch}/> */}\n              {(showListButtons) ?\n              <React.Fragment>\n                <ButtonExport url=\"/finance/expenses/export\" className='mr-2' />\n                <ButtonAdd addUrl=\"/finance/expenses/add\" className='mr-2' />\n              </React.Fragment> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesBase))","import { CSAuth } from './authentication';\nimport { toast } from 'react-toastify'\n\n// Create a link element and simulate a click. This prevents having to redirect creating a pop up that might be blocked.\nfunction download(dataurl) {\n  let link = document.createElement(\"a\");\n  link.href = dataurl\n  link.target = \"_blank\"\n  // Put the link in the DOM and click it\n  document.body.appendChild(link);\n  link.click();\n  // Cleanup the DOM\n  document.body.removeChild(link);\n}\n\nexport function refreshTokenAndOpenExportLinkInNewTab(t, doTokenRefresh, history, exportUrl) {  \n  doTokenRefresh()\n    .then(({data}) => {\n      console.log(data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n\n      // window.open(url, \"_blank\")\n      download(exportUrl);\n    }).catch((error) => {\n      console.log(error)\n      // history.push(\"/user/login\")\n      // Because safari doesn't deal with double clicks well, let the user refresh.\n      // If there is no valid session, the user will be redirected to the sign-in.\n      toast.error(t(\"general.error_try_refreshing\"), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    })\n}\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from \"../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../tools/refresh_token_and_open_export_link\"\n\n\nfunction FileProtectedDownloadTableButton({ t, history, protectedMediaUrl, showLabel=true, className=\"\" }) {\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <Button \n      color={\"secondary \" + className}\n      size=\"sm\"\n      icon=\"download-cloud\"\n      RootComponent=\"a\" \n      title=\"download\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, protectedMediaUrl\n    )}\n    >\n      { showLabel && t('general.download')}\n    </Button>\n  )\n}\n\nexport default withTranslation()(withRouter(FileProtectedDownloadTableButton))\n\n\n\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_action = ({t, title, history, msgConfirm, msgDescription, msgSuccess, actionFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{title}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_action_no')}</button>\n            <button\n              className=\"btn btn-success\"\n              onClick={() => {\n                actionFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    // Redirect to edit finance expense edit\n                    if (data.duplicateFinanceExpense) {\n                      console.log(\"GOT DUPLICATE EXPENSE DATA\")\n                      const financeExpenseId = data.duplicateFinanceExpense.financeExpense.id\n                      history.push(`/finance/expenses/edit/${financeExpenseId}`)\n                    }\n                    \n                    // Show success toast\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"check\" /> {t('general.confirm_action_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_action\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_action from \"../../tools/confirm_action\"\n\n// import {\n//   Icon\n// } from \"tabler-react\"\n\n\nfunction ButtonConfirmAction({\n  t, \n  match, \n  history, \n  title,\n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  actionFunction, \n  actionFunctionVariables, \n  buttonClass=\"btn-link\",\n  buttonIcon=\"\",\n  buttonText=\"\",\n  buttonTextColor=\"\"\n}) {\n  return (\n    <button className={`btn ${buttonClass} btn-sm`}\n      // title={t('')} \n      onClick={() => {\n        confirm_action({\n          t: t,\n          title: title,\n          history: history,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          actionFunction: actionFunction,\n          functionVariables: actionFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        {buttonIcon} {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonConfirmAction))","import { gql } from \"@apollo/client\"\n\nexport const GET_EXPENSES_QUERY = gql`\nquery FinanceExpenses($after: String, $before: String, $supplier: ID, $dateFrom: Date, $dateUntil: Date) {\n  financeExpenses(first: 25, before: $before, after: $after, supplier: $supplier, date_Gte:$dateFrom, date_Lte:$dateUntil) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          date\n          summary\n          description\n          amountDisplay\n          taxDisplay\n          percentageDisplay\n          totalAmountDisplay\n          totalTaxDisplay\n          totalDisplay\n          supplier {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n            code\n          }\n          financeCostcenter {\n            id\n            name\n            code\n          }\n          urlProtectedDocument\n        }\n      }\n    }\n    businesses(first: 1000, archived: false, supplier: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_EXPENSE_QUERY = gql`\n  query FinanceExpense($id: ID!) {\n    financeExpense(id:$id) {\n      id\n      date\n      summary\n      description\n      amount\n      tax\n      percentage\n      total\n      supplier {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n        code\n      }\n      financeCostcenter {\n        id\n        name\n        code\n      }\n      document\n    }\n    businesses(first: 100, archived: false, supplier: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ExpenseInputValues {\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          code\n        }\n      }\n    }\n    businesses(first: 100, supplier: true, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    \n  }\n`\n\nexport const CREATE_FINANCE_EXPENSE = gql`\n  mutation CreateFinanceExpense($input: CreateFinanceExpenseInput!) {\n    createFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_FINANCE_EXPENSE = gql`\n  mutation UpdateFinanceExpense($input: UpdateFinanceExpenseInput!) {\n    updateFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const DUPLICATE_FINANCE_EXPENSE = gql`\n  mutation DuplicateFinanceExpense($input: DuplicateFinanceExpenseInput!) {\n    duplicateFinanceExpense(input: $input) {\n      financeExpense {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_EXPENSE = gql`\n  mutation DeleteFinanceExpense($input: DeleteFinanceExpenseInput!) {\n    deleteFinanceExpense(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_delete')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n            <button\n              className=\"btn btn-danger\"\n              onClick={() => {\n                deleteFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_delete\n","\nimport React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Badge,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from '../../HasPermissionWrapper'\nimport FileProtectedDownloadTableButton from '../../ui/FileProtectedDownloadTableButton'\nimport ButtonConfirm from '../../ui/ButtonConfirm'\n// import { get_list_query_variables } from \"./tools\"\n// import FinanceExpensesStatus from \"../../ui/FinanceExpenseStatus\"\nimport { GET_EXPENSES_QUERY, DUPLICATE_FINANCE_EXPENSE, DELETE_FINANCE_EXPENSE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceExpensesList({t, history, match, expenses, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ duplicateFinanceExpense ] = useMutation(DUPLICATE_FINANCE_EXPENSE)\n  const [ deleteFinanceExpense ] = useMutation(DELETE_FINANCE_EXPENSE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n            <Table.ColHeader className=\"cs-finance-expenses-col-summary\">{t('general.summary')} & {t('general.description')}</Table.ColHeader>\n            {/* {showColRelation && <Table.ColHeader>{t('general.supplier')}</Table.ColHeader>} */}\n            <Table.ColHeader>{t('general.amount')} & {t(\"general.tax\")}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount_short')} & {t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {expenses.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                {moment(node.date).format(dateFormat)} <br />\n                {node.supplier && <Badge color=\"default\">{node.supplier.name}</Badge>}\n              </Table.Col>\n              <Table.Col>\n                {node.summary} <br />\n                <small className='text-muted'>{node.description}</small>\n              </Table.Col>\n              {/* <Table.Col>\n                {node.supplier && node.supplier.name}\n              </Table.Col> */}\n              <Table.Col>\n                {node.totalAmountDisplay} <Badge color=\"default\">{node.percentageDisplay}</Badge><br />\n                <small className=\"text-small\">{node.totalTaxDisplay} <Badge color=\"default\">{node.percentageDisplay}</Badge></small>\n              </Table.Col>\n              <Table.Col>\n                {node.financeGlaccount && <span>\n                  <Badge color=\"default\">{node.financeGlaccount.name} {node.financeGlaccount.code && <span>({node.financeGlaccount.code})</span>}</Badge>\n                </span>} <br />\n                <small className=\"text-small\">\n                  {node.financeCostcenter && <span>\n                    <Badge color=\"default\">{node.financeCostcenter.name} {node.financeCostcenter.code && <span>({node.financeCostcenter.code})</span>}</Badge>\n                  </span>}\n                </small>\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                {/* Download */}\n                <FileProtectedDownloadTableButton \n                  protectedMediaUrl={node.urlProtectedDocument} \n                  showLabel={false}\n                />\n                {/* Duplicate */}\n                <HasPermissionWrapper key={v4()} permission=\"add\" resource=\"financeexpense\">\n                    <ButtonConfirm\n                      title={t(\"finance.expenses.confirm_duplicate\")}\n                      msgConfirm={<p><b>{moment(node.date).format(dateFormat)} - {node.summary}</b><br/> {node.description}</p>}\n                      msgSuccess={(t(\"finance.expenses.toast_duplicate_success\"))}\n                      actionFunction={duplicateFinanceExpense} \n                      actionFunctionVariables={{\n                        variables: {input: {id: node.id}},\n                        refetchQueries: [\n                          { query: GET_EXPENSES_QUERY }\n                        ]\n                      }}\n                      buttonClass=\"btn-secondary\"\n                      buttonIcon={<Icon name=\"copy\" />}\n                      buttonText={t(\"general.duplicate\")}\n                      buttonTextColor=\"\"\n                    />\n                  </HasPermissionWrapper>\n                {/* Edit */}\n                <Link to={\"/finance/expenses/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.expenses.delete_confirm_msg\"),\n                      msgDescription: <p>{node.expenseNumber}</p>,\n                      msgSuccess: t('finance.expenses.deleted'),\n                      deleteFunction: deleteFinanceExpense,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_EXPENSES_QUERY } \n                          // {query: GET_EXPENSES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesList))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  // Supplier\n  let supplier = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER)\n  if (supplier) {\n    queryVars.supplier = supplier\n  } else {\n    queryVars.supplier = undefined\n  }\n\n  // Date from\n  let dateFrom = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM)\n  if (dateFrom) {\n    queryVars.dateFrom = dateFrom\n  } else {\n    queryVars.dateFrom = undefined\n  }\n\n  // Date until\n  let dateUntil = localStorage.getItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL)\n  if (dateUntil) {\n    queryVars.dateUntil = dateUntil\n  } else {\n    queryVars.dateUntil = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from \"../context/AppSettingsContext\"\n\n\nfunction CSDatePicker ({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", isClearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const sysDateFormat = appSettings.dateFormat\n  let dateFormat\n\n  switch (sysDateFormat) {\n    case \"MM-DD-YYYY\":\n      dateFormat = \"MM-dd-yyyy\"\n      break\n    case \"DD-MM-YYYY\":\n      dateFormat = \"dd-MM-yyyy\"\n      break\n    default:\n      dateFormat = \"yyyy-MM-dd\"\n  }\n\n\n  return (\n    <DatePicker \n        todayButton={t('general.today')}\n        dateFormat={dateFormat}\n        selected={selected}\n        placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder')}\n        isClearable={isClearable}\n        className={className}\n        showMonthDropdown\n        showYearDropdown\n        dropdownMode=\"select\"\n        onChange={(date) => onChange(date)}\n        onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSDatePicker)","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\nimport CSDatePicker from '../../ui/CSDatePicker';\n\n\nfunction getDefaultValue(lsKey) {\n  let defaultValue = localStorage.getItem(lsKey)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\nfunction getDefaultValueDate(lsKey) {\n  let dateValue\n  if (lsKey === CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM) {\n    dateValue = new Date(moment().startOf('quarter'))  \n  } else {\n    dateValue = new Date(moment().endOf('quarter'))  \n  }\n  \n  const lsValue = localStorage.getItem(lsKey)\n  if (lsValue) {\n    dateValue = new Date(lsValue)\n  }\n\n  // TODO: Add a sanity check here. Date until can't be smaller then date from\n\n  return dateValue\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction FinanceExpensesFilter({ t, history, data, refetch }) {\n  let [supplier, setSupplier] = useState(getDefaultValue(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER))\n  let [dateFrom, setDateFrom] = useState(getDefaultValueDate(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM))\n  let [dateUntil, setDateUntil] = useState(getDefaultValueDate(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL))\n\n  return (\n    <div className=\"mb-4\">\n      {/* Filter */}\n      <Grid.Row>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          {/* Supplier */}\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_supplier\")}</label>\n          <select \n            className={selectClass}\n            value={supplier}\n            onChange={ (event) => {\n              setSupplier(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"finance.expenes.filter_all_suppliers\")}</option>\n            {data.businesses.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_date_from\")}</label>\n          <CSDatePicker \n            className=\"form-control mr-2\"\n            selected={dateFrom}\n            isClearable={false}\n            onChange={(date) => {\n              let dateStr = moment(date).format('YYYY-MM-DD')\n              setDateFrom(date)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM,\n                dateStr,\n                refetch\n              )\n            }}\n            placeholderText={t('finance.expenses.filter_label_date_from')}\n          />\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <label class=\"bold\">{t(\"finance.expenses.filter_label_date_until\")}</label>\n          <CSDatePicker \n            className=\"form-control mr-2\"\n            selected={dateUntil}\n            isClearable={false}\n            onChange={(date) => {\n              let dateStr = moment(date).format('YYYY-MM-DD')\n              setDateUntil(date)\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL,\n                dateStr,\n                refetch\n              )\n            }}\n            placeholderText={t('finance.expenses.filter_label_date_until')}\n          />\n        </Grid.Col>\n        <Grid.Col lg={3} md={4} s={6} xs={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              // Supplier\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_SUPPLIER, \"\")\n              setSupplier(\"\")\n              // Date from\n              const dateFromDefault = moment().startOf('quarter')\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_FROM, \n                dateFromDefault.format(\"YYYY-MM-DD\"))\n              setDateFrom(new Date(dateFromDefault))\n              // Date until\n              const dateUntilDefault = moment().endOf('quarter')\n              localStorage.setItem(CSLS.FINANCE_EXPENSES_FILTER_DATE_UNTIL, \n                dateUntilDefault.format(\"YYYY-MM-DD\"))\n              setDateUntil(new Date(dateUntilDefault))\n              // Refetch\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesFilter))","\nimport React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceExpensesBase from \"./FinanceExpensesBase\"\nimport FinanceExpensesList from './FinanceExpensesList'\nimport FinanceExpensesFilter from './FinanceExpensesFilter';\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_EXPENSES_QUERY } from \"./queries\"\n\n\nfunction FinanceExpenses({ t, location, history }) {\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_EXPENSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n  function test(vars) {\n    refetch(get_list_query_variables())\n    console.log(vars)\n  }\n\n\n  if (loading) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceExpensesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>{t('finance.expenses.error_loading')}</p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n\n  const expenses = data.financeExpenses\n\n  // Empty list\n  if (!expenses.edges.length) { return (\n    <FinanceExpensesBase refetch={refetch} showListButtons={true}>\n      <FinanceExpensesFilter data={data} refetch={refetch} />\n      <ContentCard cardTitle={t('finance.expenses.title')}>\n        <p>\n          {t('finance.expenses.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceExpensesBase>\n  )}\n\n  return (\n    <FinanceExpensesBase refetch={refetch} showListButtons={true}>\n      <FinanceExpensesFilter data={data} refetch={test} />\n      <ContentCard \n        cardTitle={t('finance.expenses.title')}\n        hasCardBody={false}\n        pageInfo={expenses.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: expenses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeExpenses.edges\n              const pageInfo = fetchMoreResult.financeExpenses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new expenses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeExpenses: {\n                      __typename: previousResult.financeExpenses.__typename,\n                      edges: [ ...previousResult.financeExpenses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceExpensesList \n          expenses={expenses} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceExpensesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceExpenses))","import moment from 'moment'\n\nexport function dateToLocalISO(date) {\n    return moment(date).format(\"YYYY-MM-DD\")\n    // if (date instanceof Date) {\n    //     return date.getFullYear() + '-' + \n    //            (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' +\n    //            (\"0\" + date.getDate()).slice(-2)\n    // } else {\n    //     return date\n    // }\n}\n\nexport function dateToLocalISOTime(date) {\n    if (date instanceof Date) {\n        return date.getHours() + ':' + \n               ('0' + date.getMinutes()).slice(-2)\n    } else {\n        return date\n    }\n}\n\n\nexport function TimeStringToJSDateOBJ(time_string) {\n    // time_string is Expected to be \"HH:MM:SS\"\n    let date_obj = new Date()\n    let time_split = time_string.split(':')\n    date_obj.setHours(time_split[0])\n    date_obj.setMinutes(time_split[1])\n\n    return date_obj\n}\n\n\nexport function getFirstDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).startOf('month')\n    return new Date(firstDayMonth)\n}\n\n\nexport function getLastDayMonth(year, month) {\n    const firstDayMonth = moment(`${year}-${month}-01`).endOf('month')\n    return new Date(firstDayMonth)\n}\n\nexport function getWeekdayNames(t) {\n    return [\n        t(\"datetime.isoweekdays.monday\"),\n        t(\"datetime.isoweekdays.tuesday\"),\n        t(\"datetime.isoweekdays.wednesday\"),\n        t(\"datetime.isoweekdays.thursday\"),\n        t(\"datetime.isoweekdays.friday\"),\n        t(\"datetime.isoweekdays.saturday\"),\n        t(\"datetime.isoweekdays.sunday\"),\n    ]\n}\n\nexport function getMonthNamesShort(t) {\n    return [\n        t(\"datetime.months.short_january\"),\n        t(\"datetime.months.short_february\"),\n        t(\"datetime.months.short_march\"),\n        t(\"datetime.months.short_april\"),\n        t(\"datetime.months.short_may\"),\n        t(\"datetime.months.short_june\"),\n        t(\"datetime.months.short_july\"),\n        t(\"datetime.months.short_august\"),\n        t(\"datetime.months.short_september\"),\n        t(\"datetime.months.short_october\"),\n        t(\"datetime.months.short_november\"),\n        t(\"datetime.months.short_decemer\"),\n      ]\n}\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSE_SCHEMA = Yup.object().shape({\n  date: Yup.date()\n  .required(t('yup.field_required')),\n  summary: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  tax: Yup.number()\n    .required(t('yup.field_required')),\n  percentage: Yup.number()\n    .min(0)\n    .max(100)\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})\n","export const customFileInputLabelStyle = {\n    whiteSpace: \"nowrap\",\n    display: \"block\",\n    overflow: \"hidden\"\n  }  \n  ","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormSubmit = ({ t, disabled, className=\"\" }) => (\n  <Button\n    type=\"submit\"\n    disabled={disabled}\n    className={`pull-right ${className}`}\n    color=\"primary\"\n  >\n      {t(\"general.submit\")}\n  </Button>\n)\n\nexport default withTranslation()(ButtonFormSubmit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonFormCancel = ({ t, returnUrl, className=\"\" }) => (\n  <Link to={returnUrl}>\n    <Button\n      role=\"button\"\n      className={className}\n      color=\"link\"\n    >\n        {t(\"general.cancel\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonFormCancel)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"  \nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\n\nfunction FinanceExpenseForm({ \n  t, \n  history, \n  errors, \n  values, \n  inputData,\n  isSubmitting, \n  setFieldTouched,\n  setFieldValue,\n  returnUrl, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f, \n}) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.date) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.date}\n                onChange={(date) => {\n                  setFieldValue(\"date\", date)\n                  setFieldTouched(\"date\", true)\n                }}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.summary')}>\n              <Field type=\"text\" \n                    name=\"summary\" \n                    className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.tax')}>\n                <Field type=\"text\" \n                    name=\"tax\" \n                    className={(errors.tax) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"tax\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.percentage')}>\n                <Field type=\"text\" \n                    name=\"percentage\" \n                    className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.supplier')}>\n              <Field component=\"select\" \n                      name=\"supplier\" \n                      className={(errors.supplier) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"supplier\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpenseForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseAdd({t, match, history}) {\n  const cardTitle = t('finance.expenses.title_add')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createFinanceExpense] = useMutation(CREATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n  \n  const inputData = data\n\n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\",\n            percentage: 100\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              percentage: values.percentage,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              createFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseAdd))\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_EXPENSES_QUERY, GET_EXPENSE_QUERY, UPDATE_FINANCE_EXPENSE } from './queries'\nimport { EXPENSE_SCHEMA } from './yupSchema'\nimport FinanceExpenseForm from './FinanceExpenseForm'\nimport FinanceExpensesBase from './FinanceExpensesBase';\n\n\nfunction FinanceExpenseEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('finance.expenses.title_edit')\n  const returnUrl = `/finance/expenses`\n  \n  const { loading, error, data } = useQuery(GET_EXPENSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateFinanceExpense ] = useMutation(UPDATE_FINANCE_EXPENSE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  if (error) return (\n    <FinanceExpensesBase returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </FinanceExpensesBase>\n  )\n\n  const financeExpense = data.financeExpense\n\n  let initialSupplier\n  let initialGlaccount\n  let initialCostcenter\n\n  if ( financeExpense.supplier ) { \n    initialSupplier = financeExpense.supplier.id\n  }\n\n  if ( financeExpense.financeGlaccount ) { \n    initialGlaccount = financeExpense.financeGlaccount.id\n  }\n\n  if ( financeExpense.financeCostcenter ) { \n    initialCostcenter = financeExpense.financeCostcenter.id\n  }\n  \n  return (\n    <FinanceExpensesBase\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            // DatePicker doesn't like a string as an initial value\n            // This makes it a happy DatePicker :)\n            date: new Date(financeExpense.date),\n            summary: financeExpense.summary,\n            description: financeExpense.description,\n            amount: financeExpense.amount,\n            tax: financeExpense.tax,\n            percentage: financeExpense.percentage,\n            supplier: initialSupplier,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={EXPENSE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: id,\n              date: dateToLocalISO(values.date),\n              summary: values.summary,\n              description: values.description,\n              amount: values.amount,\n              tax: values.tax,\n              percentage: values.percentage,\n              supplier: values.supplier,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter,\n            }\n\n            function doUpdate() {\n              updateFinanceExpense({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_EXPENSES_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.expenses.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n              inputVars.documentFileName = fileName\n              \n              doUpdate()              \n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              doUpdate()\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceExpenseForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </FinanceExpenseForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceExpensesBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceExpenseEdit))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const EXPENSES_EXPORT_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n// import { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\n// import { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceExpensesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceExpensesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { EXPENSES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceExpensesExportForm from './FinanceExpensesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceExpensesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.expenses.export.title\")\n  const returnUrl = \"/finance/expenses\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd\n            }}\n            validationSchema={EXPENSES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/finance_expenses/excel/${isoDateStart}/${isoDateEnd}`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceExpensesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.expenses.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.expenses.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceExpensesExport))","import { gql } from \"@apollo/client\"\n\nexport const GET_GLACCOUNTS_QUERY = gql`\n  query FinanceGLAccounts($after: String, $before: String, $archived: Boolean) {\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          name,\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_GLACCOUNT_QUERY = gql`\n  query FinanceGLAccount($id: ID!) {\n    financeGlaccount(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_GLACCOUNT = gql`\nmutation CreateFinanceGLAccount($input:CreateFinanceGLAccountInput!) {\n  createFinanceGlaccount(input: $input) {\n    financeGlaccount{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_GLACCOUNT = gql`\nmutation UpdateFinanceGLAccount($input: UpdateFinanceGLAccountInput!) {\n  updateFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_GLACCOUNT = gql`\nmutation ArchiveFinanceGLAccount($input: ArchiveFinanceGLAccountInput!) {\n  archiveFinanceGlaccount(input: $input) {\n    financeGlaccount {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceGLAccountsBase({ t, history, children, showBack=false, returnUrl=\"/finance/glaccounts\" }) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeglaccount\">\n                  <ButtonAdd addUrl=\"/finance/glaccounts/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccountsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_GLACCOUNTS_QUERY, ARCHIVE_GLACCOUNT } from \"./queries\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccounts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t(\"finance.glaccounts.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_GLACCOUNTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveGlaccount ] = useMutation(ARCHIVE_GLACCOUNT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const glaccounts = data.financeGlaccounts\n   \n  // Empty list\n  if (!glaccounts.edges.length) { return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.glaccounts.empty_list') : t(\"finance.glaccounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )} \n\n  return (\n    <FinanceGLAccountsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                pageInfo={glaccounts.pageInfo}\n                hasCardBody={false}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: glaccounts.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.financeGlaccounts.edges\n                    const pageInfo = fetchMoreResult.financeGlaccounts.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new glaccounts at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          financeGlaccounts: {\n                            __typename: previousResult.financeGlaccounts.__typename,\n                            edges: [ ...previousResult.financeGlaccounts.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {glaccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/glaccounts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveGlaccount({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceGLAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const GLACCOUNT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    code: Yup.number()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_GLACCOUNTS_QUERY, ADD_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountAdd({t, history}) {\n  const returnUrl = \"/finance/glaccounts\"\n  const [ addGlaccount ] = useMutation(ADD_GLACCOUNT)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={t('finance.glaccounts.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addGlaccount({ variables: {\n                input: {\n                  name: values.name, \n                  code: parseInt(values.code)\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('finance.code')}>\n                      <Field type=\"text\" \n                              name=\"code\" \n                              className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_GLACCOUNTS_QUERY, GET_GLACCOUNT_QUERY, UPDATE_GLACCOUNT } from './queries'\nimport { GLACCOUNT_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceGLAccountsBase from './FinanceGLAccountsBase'\n\n\nfunction FinanceGLAccountEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/glaccounts\"\n  const cardTitle = t('finance.glaccounts.title_edit')\n  const { loading, error, data } = useQuery(GET_GLACCOUNT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateGlaccount ] = useMutation(UPDATE_GLACCOUNT)\n\n  if (loading) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  if (error) return (\n    <FinanceGLAccountsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinanceGLAccountsBase>\n  )\n\n  const initialData = data.financeGlaccount;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceGLAccountsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: parseInt(initialData.code)\n          }}\n          validationSchema={GLACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateGlaccount({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: parseInt(values.code)\n                }\n              }, refetchQueries: [\n                  {query: GET_GLACCOUNTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.glaccounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                  <Form.Group label={t('general.name')}>\n                    <Field type=\"text\" \n                            name=\"name\" \n                            className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                  <Form.Group label={t('finance.code')}>\n                    <Field type=\"text\" \n                            name=\"code\" \n                            className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      className=\"pull-right\"\n                      color=\"primary\"\n                      disabled={isSubmitting}\n                      type=\"submit\"\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button\n                        type=\"button\" \n                        color=\"link\" \n                      >\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceGLAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceGLAccountEdit))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Icon\n  } from \"tabler-react\"\n\n\nclass InputSearch extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Input search props:\")\n    console.log(props)\n    this.input = React.createRef()\n    let inputValue\n    const initialValue = localStorage.getItem(this.props.initialValueKey)\n    if (initialValue) {\n      inputValue = initialValue \n    } else {\n      inputValue = \"\"\n    }\n\n    this.state = {\n      inputValue: inputValue,\n      submitValue: \"\",\n      doneTypingInterval: 500\n    }\n  }\n  \n  componentDidMount() {\n    this.typingTimer = null\n    this.input.current.focus()\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.typingTimer)\n  }\n\n\n  onInputKeyUp() {\n    // Clear timeout\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer)\n    }\n    \n    this.typingTimer = setTimeout(() => {\n      // console.log(this.input.current.value)  \n      this.setState({submitValue: this.input.current.value})\n      // Trigger onChange after typing timer timeout\n      this.props.onChange(this.state.submitValue)\n    }, this.state.doneTypingInterval)\n  }\n\n\n  onInputChange(event) {\n    this.setState({inputValue: event.target.value})\n  }\n\n\n  render() {\n    // const t = this.props.t\n    const placeholder = this.props.placeholder\n\n    return(\n        <div className=\"row row gutters-xs\">\n          <div className=\"col\">\n            <div className=\"input-icon\">\n              <span className=\"input-icon-addon\">\n                <Icon name=\"search\" />\n              </span>\n              <input \n                ref={this.input}\n                className={`form-control ${this.props.className}`}\n                type=\"text\" \n                placeholder={placeholder} \n                value={this.state.inputValue}\n                onKeyUp={this.onInputKeyUp.bind(this)}\n                onChange={this.onInputChange.bind(this)}\n              />\n            </div>\n          </div>\n          {(this.state.inputValue) ?\n            <div className=\"col col-auto\">\n              <Button\n                color=\"secondary\"\n                // icon=\"x\"\n                disabled={!(this.state.inputValue)}\n                onClick={() => {\n                  this.setState({inputValue: \"\", submitValue: \"\"}, () => {\n                    // setState callback, this makes sure the onChange function is calles with new values\n                    console.log(this.state)\n                    this.props.onChange(this.state.submitValue) \n                  })\n                }}\n              >\n                {this.props.t(\"general.clear_search\")}\n              </Button>\n            </div>\n          : \"\" }\n        </div>\n    )\n  }\n}\n\nInputSearch.defaultProps = {\n  onChange: f=>f,\n  onClear: f=>f,\n}\n  \nexport default withTranslation()(InputSearch)","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n\n  let search = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_SEARCH)\n  if (search) {\n    queryVars.invoiceNumberSearch = search\n  } else {\n    queryVars.invoiceNumberSearch = undefined\n  }\n\n  // Date from\n  let dateFrom = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_DATE_FROM)\n  if (dateFrom) {\n    queryVars.dateFrom = dateFrom\n  } else {\n    queryVars.dateFrom = undefined\n  }\n\n  // Date until\n  let dateUntil = localStorage.getItem(CSLS.FINANCE_INVOICES_FILTER_DATE_UNTIL)\n  if (dateUntil) {\n    queryVars.dateUntil = dateUntil\n  } else {\n    queryVars.dateUntil = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\nimport {\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CSDatePicker from '../../ui/CSDatePicker'\nimport InputSearch from '../../general/InputSearch'\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction getDefaultValueDate(lsKey) {\n  let dateValue = \"\"\n  // if (lsKey === CSLS.FINANCE_INVOICES_FILTER_DATE_FROM) {\n  //   dateValue = new Date(moment().startOf('quarter'))  \n  // } else {\n  //   dateValue = new Date(moment().endOf('quarter'))  \n  // }\n  \n  const lsValue = localStorage.getItem(lsKey)\n  if (lsValue) {\n    dateValue = new Date(lsValue)\n  }\n\n  // TODO: Add a sanity check here. Date until can't be smaller then date from\n\n  return dateValue\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nfunction FinanceInvoicesFilter({ t, history, data, refetch }) {\n  let [status, setStatus] = useState(getDefaultValue(CSLS.FINANCE_INVOICES_FILTER_STATUS))\n  let [dateFrom, setDateFrom] = useState(getDefaultValueDate(CSLS.FINANCE_INVOICES_FILTER_DATE_FROM))\n  let [dateUntil, setDateUntil] = useState(getDefaultValueDate(CSLS.FINANCE_INVOICES_FILTER_DATE_UNTIL))\n\n  return (\n    <Grid.Row>\n      <Grid.Col lg={5} md={5} s={6} xs={12}>\n        {/* Search */}\n        <label class=\"bold\">{t(\"finance.invoices.filter_label_search\")}</label>\n        <InputSearch \n          initialValueKey={CSLS.FINANCE_INVOICES_FILTER_SEARCH}\n          placeholder=\"Search...\"\n          onChange={(value) => {\n            updateLocalStorageAndRefetch(\n              CSLS.FINANCE_INVOICES_FILTER_SEARCH,\n              value,\n              refetch\n            )\n          }}\n        />\n      </Grid.Col>\n      <Grid.Col lg={3} md={4} s={6} xs={12}>\n        {/* Status */}\n        <label class=\"bold\">{t(\"finance.invoices.filter_label_status\")}</label>\n        <select \n          className={`${selectClass}`}\n          value={status}\n          onChange={ (event) => {\n            setStatus(event.target.value)\n            updateLocalStorageAndRefetch(\n              CSLS.FINANCE_INVOICES_FILTER_STATUS,\n              event.target.value,\n              refetch\n            )\n          }}\n        >\n          <option value=\"\" key={v4()}>{t(\"finance.invoices.statuses.all\")}</option>\n          <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.statuses.draft')}</option>\n          <option value=\"SENT\" key={v4()}>{t('finance.invoices.statuses.sent')}</option>\n          <option value=\"PAID\" key={v4()}>{t('finance.invoices.statuses.paid')}</option>\n          <option value=\"OVERDUE\" key={v4()}>{t('finance.invoices.statuses.overdue')}</option>\n          <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.statuses.cancelled')}</option>\n        </select>\n      </Grid.Col>\n      <Grid.Col lg={2} md={2} s={6} xs={12}>\n        <label class=\"bold\">{t(\"finance.invoices.filter_label_date_from\")}</label>\n        <CSDatePicker \n          className=\"form-control mr-2\"\n          selected={dateFrom}\n          isClearable={true}\n          onChange={(date) => {\n            setDateFrom(date)\n            let dateStr\n            if (date) {\n              dateStr = moment(date).format('YYYY-MM-DD')\n            } else {\n              dateStr = \"\"\n            }\n            updateLocalStorageAndRefetch(\n              CSLS.FINANCE_INVOICES_FILTER_DATE_FROM,\n              dateStr,\n              refetch\n            )\n          }}\n          placeholderText={t('finance.invoices.filter_label_date_from')}\n        />\n      </Grid.Col>\n      <Grid.Col lg={2} md={2} s={6} xs={12}>\n          <label class=\"bold\">{t(\"finance.invoices.filter_label_date_until\")}</label>\n          <CSDatePicker \n            className=\"form-control mr-2\"\n            selected={dateUntil}\n            isClearable={true}\n            onChange={(date) => {\n              console.log(date)\n              setDateUntil(date)\n              let dateStr\n              if (date) {\n                dateStr = moment(date).format('YYYY-MM-DD')\n              } else {\n                dateStr = \"\"\n              }\n              updateLocalStorageAndRefetch(\n                CSLS.FINANCE_INVOICES_FILTER_DATE_UNTIL,\n                dateStr,\n                refetch\n              )\n            }}\n            placeholderText={t('finance.invoices.filter_label_date_until')}\n          />\n        </Grid.Col>\n    </Grid.Row>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoicesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceInvoicesFilter from \"./FinanceInvoicesFilter\"\n\n\nfunction FinanceInvoicesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonExport url=\"/finance/invoices/export\" className='mr-2' />\n              <Link to=\"/finance/invoices/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <FinanceInvoicesFilter refetch={refetch}/>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceInvoicesStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance costcenter edit props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.invoices.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.invoices.status.SENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.invoices.status.PAID')}</Badge>\n      case \"OVERDUE\":\n        return <Badge color=\"danger\">{t('finance.invoices.status.OVERDUE')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.invoices.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.invoices.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicesStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices(\n    $after: String, \n    $before: String, \n    $invoiceNumberSearch: String,\n    $status: CostasiellaFinanceInvoiceStatusChoices,\n    $dateFrom: Date,\n    $dateUntil: Date\n  ) {\n    financeInvoices(\n      first: 15, \n      before: $before, \n      after: $after, \n      invoiceNumber_Icontains: $invoiceNumberSearch,\n      status: $status\n      dateSent_Gte: $dateFrom,\n      dateSent_Lte: $dateUntil\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!, $before: String, $after: String) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      creditInvoiceId\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE = gql`\n  mutation UpdateFinanceInvoice($input: UpdateFinanceInvoiceInput!) {\n    updateFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n        summary\n      }\n    }\n  }\n`\n\n\nexport const CANCEL_AND_CREATE_CREDIT_INVOICE = gql`\n  mutation CancelAndCreateCreditFinanceInvoice($input: CancelAndCreateCreditFinanceInvoiceInput!) {\n    cancelAndCreateCreditFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_INVOICE = gql`\n  mutation DeleteFinanceInvoice($input: DeleteFinanceInvoiceInput!) {\n    deleteFinanceInvoice(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_INVOICE_ITEM = gql`\n  mutation CreateFinanceInvoiceItem($input: CreateFinanceInvoiceItemInput!) {\n    createFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_ITEM = gql`\n  mutation DeleteFinanceInvoiceItem($input: DeleteFinanceInvoiceItemInput!) {\n    deleteFinanceInvoiceItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const DELETE_INVOICE_PAYMENT = gql`\n  mutation DeleteFinanceInvoicePayment($input: DeleteFinanceInvoicePaymentInput!) {\n    deleteFinanceInvoicePayment(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceInvoicesStatus from \"../../ui/FinanceInvoiceStatus\"\nimport { GET_INVOICES_QUERY, DELETE_FINANCE_INVOICE } from \"./queries\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceInvoicesList({\n  t, \n  history, \n  match, \n  invoices, \n  showBtnPDF=false,\n  showColRelation=false,\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [ deleteFinanceInvoice ] = useMutation(DELETE_FINANCE_INVOICE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.invoices.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {invoices.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceInvoicesStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  {node.invoiceNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateDue).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.balanceDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                {(showBtnPDF) && <Button\n                  color=\"secondary\"\n                  icon=\"printer\"\n                  className=\"mr-2\"\n                  size=\"sm\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                  )}\n                >\n                  {t('general.pdf')} \n                </Button>}\n                <Link to={\"/finance/invoices/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n                      msgDescription: <p>{node.invoiceNumber}</p>,\n                      msgSuccess: t('finance.invoices.deleted'),\n                      deleteFunction: deleteFinanceInvoice,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_INVOICES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoicesBase from \"./FinanceInvoicesBase\"\nimport FinanceInvoicesList from './FinanceInvoicesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_INVOICES_QUERY } from \"./queries\"\n\n\nfunction FinanceInvoices({ t, location, history }) {\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>{t('finance.invoices.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) { return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.invoices.title')}>\n        <p>\n          {t('finance.invoices.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )}\n\n  return (\n    <FinanceInvoicesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.invoices.title')}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showBtnPDF={true}\n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceInvoicesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceInvoices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.invoices.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.invoices.status.SENT')}</option>\n                <option value=\"PAID\" key={v4()}>{t('finance.invoices.status.PAID')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.invoices.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.invoices.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { INVOICES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceInvoicesExportForm from './FinanceInvoicesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceInvoicesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.invoices.export.title\")\n  const returnUrl = \"/finance/invoices\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={INVOICES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/invoices/${isoDateStart}/${isoDateEnd}/${status}`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceInvoicesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.invoices.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.invoices.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.invoices.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoicesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceItemAdd({t, match}) {\n  const [ addInvoiceItem ] = useMutation(CREATE_INVOICE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addInvoiceItem({ variables: {\n            input: {\n              financeInvoice: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.invoice.item_add')}\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_ITEM, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction FinanceInvoiceItemDelete({t, match, node}) {\n  const [deleteInvoiceItem] = useMutation(DELETE_INVOICE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.invoices.item_deleted'),\n            deleteFunction: deleteInvoiceItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceInvoiceItemDelete from './FinanceInvoiceItemDelete'\n\n\nconst FinanceInvoiceItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell finance-invoice-item-description\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceInvoiceItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_INVOICE_ITEM, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceItemEditForm from './FinanceInvoiceItemEditForm'\n\n\nfunction FinanceInvoiceItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateInvoiceItem] = useMutation(UPDATE_INVOICE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={INVOICE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateInvoiceItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_INVOICE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.invoice.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceInvoiceItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceInvoiceItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceInvoiceItemAdd from \"./FinanceInvoiceItemAdd\"\nimport { GET_INVOICE_QUERY } from '../queries'\n\nimport FinanceInvoiceItemEdit from './FinanceInvoiceItemEdit'\n\n\nexport const UPDATE_INVOICE_ITEM = gql`\n  mutation UpdateFinanceInvoiceItem($input: UpdateFinanceInvoiceItemInput!) {\n    updateFinanceInvoiceItem(input: $input) {\n      financeInvoiceItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceInvoiceEditItems ({ t, history, match, refetchInvoice, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_INVOICE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_INVOICE_QUERY, variables: { id: inputData.financeInvoice.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.invoice.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceInvoiceItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"invoice_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeInvoice.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceInvoiceItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditItems))","export const tinymceBasicConf = {\n    resize: true,\n    menubar: false,\n    plugins: 'link image code lists paste fullscreen',\n    statusbar: false,\n    toolbar: ' undo redo | formatselect | bold italic strikethrough | bullist numlist | alignleft aligncenter alignright | link image | pastetext code | fullscreen',    \n}\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceInvoiceEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditTermsForm from \"./FinanceInvoiceEditTermsForm\"\nimport FinanceInvoiceEditFooterForm from \"./FinanceInvoiceEditFooterForm\"\nimport FinanceInvoiceEditNoteForm from \"./FinanceInvoiceEditNoteForm\"\n\n\nfunction FinanceInvoiceEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeInvoice.terms, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeInvoice.footer, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeInvoice.note, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_INVOICE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceInvoiceEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditAdditional))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditBalance = ({ t, history, financeInvoice }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.totalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.paid')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.paidDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.balance')}\n        </span>\n        <span className=\"pull-right\">\n          {financeInvoice.balanceDisplay}\n        </span>\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditBalance))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceInvoiceEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.invoices.invoice_number')}>\n        <Field type=\"text\" \n                name=\"invoiceNumber\" \n                className={(errors.invoiceNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"invoiceNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"invoiceNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.invoices.due')}>\n        <CSDatePicker \n          className={(errors.dateDue) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateDue}\n          onChange={(date) => {\n            setFieldValue(\"dateDue\", date)\n            setFieldTouched(\"dateDue\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.invoices.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.invoices.status.SENT')}</option>\n          <option value=\"PAID\">{t('finance.invoices.status.PAID')}</option>\n          <option value=\"CANCELLED\">{t('finance.invoices.status.CANCELLED')}</option>\n          <option value=\"OVERDUE\">{t('finance.invoices.status.OVERDUE')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.payment_method')}>\n        <Field component=\"select\" \n              name=\"financePaymentMethod\" \n              className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"financePaymentMethod\", true, true)\n              }}\n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}></option>\n          {inputData.financePaymentMethods.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  \n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptionsForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditOptionsForm from \"./FinanceInvoiceEditOptionsForm\"\n\n\nfunction FinanceInvoiceEditOptions({t, match, initialData}) {\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n  \n  let initialPaymentMethod = \"\"\n  if (initialData.financeInvoice.financePaymentMethod) {\n    initialPaymentMethod = initialData.financeInvoice.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeInvoice.dateSent) {\n    dateSent = new Date(initialData.financeInvoice.dateSent)\n  }\n  let dateDue = null\n  if (initialData.financeInvoice.dateDue) {\n    dateDue = new Date(initialData.financeInvoice.dateDue)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            invoiceNumber: initialData.financeInvoice.invoiceNumber, \n            dateSent: dateSent,\n            dateDue: dateDue,\n            status: initialData.financeInvoice.status,\n            financePaymentMethod: initialPaymentMethod\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                invoiceNumber: values.invoiceNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateDue: dateToLocalISO(values.dateDue),\n                status: values.status,\n                financePaymentMethod: values.financePaymentMethod,\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceInvoiceEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceInvoiceEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditSummaryForm from \"./FinanceInvoiceEditSummaryForm\"\n\n\nfunction FinanceInvoiceEditSummary({t, history, match, location, initialData}) {  \n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeInvoice.summary, \n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.invoice.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceInvoiceEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceInvoiceEditSummaryForm>\n          )}\n        </Formik>\n        {(initialData.financeInvoice.creditInvoiceId) ?\n          <Alert type=\"warning\">\n            {t(\"finance.invoice.credit_invoice_for\")} { \" \" }\n            <Link to={`/finance/invoices/edit/${initialData.financeInvoice.creditInvoiceId}`}>\n              <Alert.Link>{initialData.financeInvoice.creditInvoiceNumber}</Alert.Link>\n            </Link>\n          </Alert>\n        : \"\"}\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditSummary))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match, financeInvoice }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/invoices/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeInvoice.relationCompany}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeInvoice.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeInvoice.relationContactName}\n          </div>\n          <div>\n            {financeInvoice.relationAddress}\n          </div>\n          <div>\n            {financeInvoice.relationPostcode} {financeInvoice.relationCity}\n          </div>\n          <div>\n            {financeInvoice.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeInvoice.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeInvoice.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeInvoice.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeInvoice.account) && <Link to={`/relations/accounts/${financeInvoice.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeInvoice.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n// import { get_list_query_variables } from \"../tools\"\nimport { DELETE_INVOICE_PAYMENT, GET_INVOICES_QUERY, GET_INVOICE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport moment from 'moment'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { get_list_query_variables } from \"../tools\"\n\n\nfunction FinanceInvoiceEditPaymentDelete({t, match, node}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [deleteInvoicePayment] = useMutation(DELETE_INVOICE_PAYMENT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.invoices.payment_delete_confirm_msg\"),\n            msgDescription: <p>{ moment(node.date).format(dateFormat) } - {node.amountDisplay}</p>,\n            msgSuccess: t('finance.invoices.payment_deleted'),\n            deleteFunction: deleteInvoicePayment,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPaymentDelete))\n","// @flow\n\nimport React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Icon, \n  Table\n} from \"tabler-react\"\n\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoiceEditPaymentDelete from \"./FinanceInvoiceEditPaymentDelete\"\n\n\nfunction FinanceInvoiceEditPayments ({ t, history, match, refetchInvoice, inputData }) {\n  const id = match.params.id\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const paymentAddUrl = `/finance/invoices/${id}/payment/add`\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.payments')}</Card.Title>\n        <Card.Options>\n          {/* <FinanceInvoiceItemAdd /> */}\n          <Link to={paymentAddUrl}>\n            <Button className=\"btn-sm\" color=\"primary\">\n              <Icon prefix=\"fe\" name=\"plus\" /> {t('finance.invoice.payments.add')} \n            </Button>\n          </Link>\n        </Card.Options>\n      </Card.Header>\n      {(!inputData.financeInvoice.payments.edges.length) ?\n        <Card.Body>\n          <p>{t('finance.invoice.payments.empty_list')}</p>\n        </Card.Body> :\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.amount\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.payment_method\")}</Table.ColHeader>\n              <Table.ColHeader>{t(\"general.note\")}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {inputData.financeInvoice.payments.edges.map(({ node }) => (\n              <Table.Row key={\"payment_\" + node.id}>\n                <Table.Col>\n                  { moment(node.date).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.amountDisplay }\n                </Table.Col>\n                <Table.Col>\n                  { (node.financePaymentMethod) ? node.financePaymentMethod.name : \"\" }\n                  { (node.onlinePaymentId) ? <div><small className=\"text-muted\">{node.onlinePaymentId}</small></div> : \"\" }\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.note) }}></div>\n                </Table.Col>\n                <Table.Col>\n                  <span className=\"pull-right\">\n                    <Link to={ \"/finance/invoices/\" + inputData.financeInvoice.id + \"/payment/edit/\" + node.id } \n                          className='btn btn-secondary btn-sm mr-2'\n                    >\n                      {t('general.edit')}\n                    </Link>\n                    <FinanceInvoiceEditPaymentDelete node={node} />\n                  </span>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditPayments))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport { toast } from 'react-toastify'\nimport {\n  Alert,\n  Dropdown,\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport { GET_INVOICE_QUERY, CANCEL_AND_CREATE_CREDIT_INVOICE } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceInvoiceEditBase from \"./FinanceInvoiceEditBase\"\nimport FinanceInvoiceEditItems from \"./FinanceInvoiceEditItems\"\nimport FinanceInvoiceEditAdditional from \"./FinanceInvoiceEditAdditional\"\nimport FinanceInvoiceEditBalance from \"./FinanceInvoiceEditBalance\"\nimport FinanceInvoiceEditOptions from \"./FinanceInvoiceEditOptions\"\nimport FinanceInvoiceEditOrganization from \"./FinanceInvoiceEditOrganization\"\nimport FinanceInvoiceEditSummary from \"./FinanceInvoiceEditSummary\"\nimport FinanceInvoiceEditTo from \"./FinanceInvoiceEditTo\"\nimport FinanceInvoiceEditPayments from \"./FinanceInvoiceEditPayments\"\n\nfunction FinanceInvoiceEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [cancelAndCreateCreditInvoice] = useMutation(CANCEL_AND_CREATE_CREDIT_INVOICE)\n\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceInvoiceEditBase>{t('general.loading_with_dots')}</FinanceInvoiceEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_INVOICES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/invoices\"\n  }\n  const export_url = \"/d/export/invoice/pdf/\" + id\n  const payment_add_url = `/finance/invoices/${id}/payment/add`\n  const shopAccountInvoiceUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/invoice/${id}`\n\n  return (\n    <FinanceInvoiceEditBase>\n      <Page.Header title={t('finance.invoice.title') + ' #' + data.financeInvoice.invoiceNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Add payment */}\n          <Link to={payment_add_url} \n              className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"dollar-sign\" /> {t('finance.invoice.payments.add')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n          <Dropdown\n            className=\"\"\n            type=\"button\"\n            toggle\n            icon=\"tool\"\n            color=\"secondary\"\n            triggerContent={t(\"general.tools\")}\n            items={[\n              <HasPermissionWrapper permission=\"change\" resource=\"financeinvoice\">\n                <Dropdown.Item\n                  key={v4()}\n                  icon=\"slash\"\n                  onClick={() => {\n                    cancelAndCreateCreditInvoice({ variables: {\n                      input: {\n                        id: id,\n                      }\n                    }, refetchQueries: []\n                    })\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        const creditInvoiceId = data.cancelAndCreateCreditFinanceInvoice.financeInvoice.id\n                        history.push(`/finance/invoices/edit/${creditInvoiceId}`)\n                        toast.success((t('finance.invoice.now_editing_credit_invoice')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}>\n                    {t('finance.invoice.cancel_and_create_credit_invoice')}\n                </Dropdown.Item>\n              </HasPermissionWrapper>\n            ]}>\n          </Dropdown>\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceInvoiceEditSummary \n            initialData={data}\n          />\n        <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.invoice.account_profile_link\")}</b></div>\n          {shopAccountInvoiceUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.invoice.account_profile_link_explanation\")}</small></div>\n        </Alert>\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceInvoiceEditTo financeInvoice={data.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceInvoiceEditBalance financeInvoice={data.financeInvoice} />\n          <FinanceInvoiceEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceInvoiceEditItems inputData={data} refetchInvoice={refetch} />\n          <FinanceInvoiceEditAdditional initialData={data} />\n          <FinanceInvoiceEditPayments inputData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceInvoiceEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceInvoiceEditToBase({t, match, history, children, invoiceNumber}) {\n  const pageTitle = t('finance.invoice.edit_to.title') + ' #' + invoiceNumber && invoiceNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceInvoiceEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.invoices.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.invoice_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              {(inputData.financeInvoice.account) &&\n                <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}: {inputData.financeInvoice.account.fullName}</option>\n              }\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.invoices.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.invoices.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.invoices.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_INVOICE, GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport FinanceInvoiceEditToBase from \"./FinanceInvoiceEditToBase\"\nimport FinanceInvoiceEditToForm from \"./FinanceInvoiceEditToForm\"\n\n\nfunction FinanceInvoiceEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/invoices/edit/${id}`\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateInvoice ] = useMutation(UPDATE_INVOICE)\n\n  // Loading\n  if (loading) return <FinanceInvoiceEditToBase>{t('general.loading_with_dots')}</FinanceInvoiceEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceInvoiceEditToBase>{t('general.error_sad_smiley')}</FinanceInvoiceEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeInvoice.business) {\n    initialBusiness = data.financeInvoice.business.id\n  }\n\n  return (\n    <FinanceInvoiceEditToBase invoiceNumber={data.financeInvoice.invoiceNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeInvoice.customTo,\n            relationCompany: data.financeInvoice.relationCompany, \n            relationCompanyRegistration: data.financeInvoice.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeInvoice.relationCompanyTaxRegistration, \n            relationContactName: data.financeInvoice.relationContactName, \n            relationAddress: data.financeInvoice.relationAddress, \n            relationPostcode: data.financeInvoice.relationPostcode, \n            relationCity: data.financeInvoice.relationCity, \n            relationCountry: data.financeInvoice.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateInvoice({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICE_QUERY, variables: {id:id}},\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.invoice.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceInvoiceEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceEditToBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceEditTo))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgeBoolean = ({ t, value }) => (\n    (value) ?\n        <Badge color=\"success\">{t('general.yes')}</Badge> :\n        <Badge color=\"danger\">{t('general.no')}</Badge> \n)\n\nexport default withTranslation()(BadgeBoolean)","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_QUERY = gql`\n  query FinanceInvoiceGroupsQuery($archived: Boolean!) {\n    financeInvoiceGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          dueAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP = gql`\nmutation UpdateFinanceInvoiceGroup($input: UpdateFinanceInvoiceGroupInput!) {\n  updateFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_INVOICE_GROUP = gql`\nmutation CreateFinanceInvoiceGroup($input:CreateFinanceInvoiceGroupInput!) {\n  createFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup{\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_INVOICE_GROUP = gql`\nmutation ArchiveFinanceInvoiceGroup($input: ArchiveFinanceInvoiceGroupInput!) {\n  archiveFinanceInvoiceGroup(input: $input) {\n    financeInvoiceGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceInvoiceGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/invoices/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/invoices\" className=\"mr-2\" />\n              }\n              <Link to=\"/finance/invoices/groups/defaults\" \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"settings\" /> {t('finance.invoice_groups_defaults.title')}\n              </Link> \n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financeinvoicegroup\">\n                <ButtonAdd addUrl=\"/finance/invoices/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_INVOICE_GROUPS_QUERY, ARCHIVE_INVOICE_GROUP } from \"./queries\"\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase'\n\n\nfunction FinanceInvoiceGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.invoice_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_INVOICE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveInvoiceGroup ] = useMutation(ARCHIVE_INVOICE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  const invoiceGroups = data.financeInvoiceGroups\n\n  return (\n    <FinanceInvoiceGroupsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={invoiceGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: invoiceGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoiceGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups.due_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {invoiceGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dueAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.invoice_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/invoices/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveInvoiceGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INVOICE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dueAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.invoice_groups.due_after_days')}>\n            <Field type=\"text\" \n                    name=\"dueAfterDays\" \n                    className={(errors.dueAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"dueAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.invoice_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, ADD_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\n\n\nfunction FinanceInvoiceGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/invoices/groups\"\n  const [addInvoiceGroup] = useMutation(ADD_INVOICE_GROUP)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={t('finance.invoice_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            dueAfterDays: 30,\n            prefix: 'INV',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInvoiceGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceInvoiceGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INVOICE_GROUPS_QUERY, GET_INVOICE_GROUP_QUERY, UPDATE_INVOICE_GROUP } from './queries'\nimport { INVOICE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoiceGroupForm from './FinanceInvoiceGroupForm'\nimport FinanceInvoiceGroupsBase from './FinanceInvoiceGroupsBase';\n\n\nfunction FinanceInvoiceGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/invoices/groups\"\n  const cardTitle = t('finance.invoice_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_INVOICE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateInvoiceGroup ] = useMutation(UPDATE_INVOICE_GROUP)\n\n  if (loading) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.invoice_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupsBase>\n  )\n                    \n  const initialData = data.financeInvoiceGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceInvoiceGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            dueAfterDays: initialData.dueAfterDays,\n            nextId: parseInt(initialData.nextId),\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateInvoiceGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: values.nextId,\n                  dueAfterDays: values.dueAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceInvoiceGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceInvoiceGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction FinanceInvoiceGroupsDefaultsBase({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl=\"/finance/invoices/groups\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaultsBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nfunction FinanceInvoiceGroupDefaultForm({ t, history, inputData, isSubmitting, setFieldTouched, setFieldValue, errors, values, submitForm }) {\n  return (\n    <FoForm>\n      <Dimmer active={isSubmitting} loader={isSubmitting} >\n        <Form.Group>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                onChange={(e) => {\n                  setFieldValue('financeInvoiceGroup', e.target.value)\n                  setFieldTouched('financeInvoiceGroup', true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                autoComplete=\"off\">\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>  \n      </Dimmer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupDefaultForm))","import * as Yup from 'yup'\n\nexport const INVOICE_GROUP_DEFAULT_SCHEMA = Yup.object().shape({\n    financeInvoiceGroup: Yup.string(),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICE_GROUPS_DEFAULTS_QUERY = gql`\nquery FinanceInvoiceGroupDefaults($archived: Boolean!) {\n  financeInvoiceGroupDefaults(first: 100) {\n    edges {\n      node {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n  financeInvoiceGroups(archived: $archived) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        nextId\n        dueAfterDays\n        prefix\n        prefixYear\n        autoResetPrefixYear\n        terms\n        footer\n        code\n      }\n    }\n  }\n}\n`\n\nexport const GET_INVOICE_GROUP_QUERY = gql`\n  query FinanceInvoiceGroup($id: ID!) {\n    financeInvoiceGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      dueAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_INVOICE_GROUP_DEFAULT = gql`\n  mutation UpdateFinanceInvoiceGroupDefault($input: UpdateFinanceInvoiceGroupDefaultInput!) {\n    updateFinanceInvoiceGroupDefault(input: $input) {\n      financeInvoiceGroupDefault {\n        id\n        itemType\n        financeInvoiceGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { Formik } from 'formik'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport FinanceInvoiceGroupDefaultsBase from './FinanceInvoiceGroupDefaultsBase'\nimport FinanceInvoiceGroupDefaultForm from './FinanceInvoiceGroupDefaultForm'\n\nimport { INVOICE_GROUP_DEFAULT_SCHEMA } from \"./yupSchema\"\nimport { GET_INVOICE_GROUPS_DEFAULTS_QUERY, UPDATE_INVOICE_GROUP_DEFAULT } from \"./queries\"\n\n\nconst fetch_default_type_name = (t, itemType) => {\n  switch(itemType) {\n    case \"MEMBERSHIPS\":\n      return t('finance.invoice_groups_defaults.MEMBERSHIPS')\n    case \"SUBSCRIPTIONS\":\n      return t('finance.invoice_groups_defaults.SUBSCRIPTIONS')\n    case \"CLASSPASSES\":\n      return t('finance.invoice_groups_defaults.CLASSPASSES')\n    case \"DROPINCLASSES\":\n      return t('finance.invoice_groups_defaults.DROPINCLASSES')\n    case \"TRIALCLASSES\":\n      return t('finance.invoice_groups_defaults.TRIALCLASSES')\n    case \"EVENT_TICKETS\":\n      return t('finance.invoice_groups_defaults.EVENT_TICKETS')\n    case \"SHOP_SALES\":\n      return t('finance.invoice_groups_defaults.SHOP_SALES')\n    case \"INSTRUCTOR_PAYMENTS\":\n      return t('finance.invoice_groups_defaults.INSTRUCTOR_PAYMENTS')\n    case \"EMPLOYEE_EXPENSES\":\n      return t('finance.invoice_groups_defaults.EMPLOYEE_EXPENSES')\n    default:\n      return t('finance.invoice_groups_defaults.TYPE_NOT_FOUND')\n  }\n}\n\n\nfunction FinanceInvoiceGroupsDefaults({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICE_GROUPS_DEFAULTS_QUERY, {\n    variables: { archived: false }\n  })\n\n  const [updateDefaultGroup] = useMutation(UPDATE_INVOICE_GROUP_DEFAULT)\n\n  // Loading\n  if (loading) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>{t('finance.invoice_groups_defaults.error_loading')}</p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n\n  const financeInvoiceGroupDefaults = data.financeInvoiceGroupDefaults\n  \n  // Empty list\n  if (!financeInvoiceGroupDefaults.edges.length) { return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}>\n        <p>\n          {t('finance.invoice_groups_defaults.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )} \n\n  return (\n    <FinanceInvoiceGroupDefaultsBase>\n      <ContentCard cardTitle={t('finance.invoice_groups_defaults.title')}\n                  pageInfo={financeInvoiceGroupDefaults.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: financeInvoiceGroupDefaults.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeInvoiceGroups.edges\n                        const pageInfo = fetchMoreResult.financeInvoiceGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new invoice_groups_defaults at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeInvoiceGroups: {\n                                __typename: previousResult.financeInvoiceGroups.__typename,\n                                edges: [ ...previousResult.financeInvoiceGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.item_type')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoice_groups_defaults.invoice_group')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeInvoiceGroupDefaults.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    { fetch_default_type_name(t, node.itemType) }\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{ \n                        financeInvoiceGroup:node.financeInvoiceGroup.id\n                      }}\n                      validationSchema={INVOICE_GROUP_DEFAULT_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log('submit values:')\n                          console.log(values)\n\n                          updateDefaultGroup({ variables: {\n                            input: {\n                              id: node.id,\n                              financeInvoiceGroup: values.financeInvoiceGroup\n                            }\n                          }, refetchQueries: [\n                              // {query: GET_INVOICE_GROUPS_QUERY, variables: {\"archived\": false }}\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data)\n                              toast.success((t('finance.invoice_groups.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <FinanceInvoiceGroupDefaultForm\n                          inputData={data}\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          values={values}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          submitForm={submitForm}\n                        />\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceInvoiceGroupDefaultsBase>\n  )\n};\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupsDefaults))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_PAYMENT_QUERY = gql`\n  query FinanceInvoicePayment($id: ID!) {\n    financeInvoicePayment(id:$id) {\n      id\n      date\n      amount\n      financePaymentMethod {\n        id\n        name\n      }\n      note\n      onlinePaymentId\n    }\n  }\n`\n\nexport const ADD_FINANCE_INVOICE_PAYMENT = gql`\nmutation CreateFinanceInvoicePayment($input:CreateFinanceInvoicePaymentInput!) {\n  createFinanceInvoicePayment(input:$input) {\n    financeInvoicePayment {\n      id\n    } \n  }\n}\n`\n\nexport const UPDATE_FINANCE_INVOICE_PAYMENT = gql`\n  mutation UpdateFinanceInvoicePayment($input:UpdateFinanceInvoicePaymentInput!) {\n    updateFinanceInvoicePayment(input:$input) {\n      financeInvoicePayment {\n        id\n      } \n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Page,\n  Grid,\n  Icon,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport { GET_INVOICE_QUERY } from \"../queries\"\nimport FinanceInvoiceEditBalance from \"../edit/FinanceInvoiceEditBalance\"\n\n\nfunction FinanceInvoicePaymentBase({ t, history, match, children, form_type=\"create\" }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const invoice_number = inputData.financeInvoice.invoiceNumber\n\n  let title\n  if ( form_type === \"create\" ) {\n    title = t('finance.invoice.payments.add')\n  } else {\n    title = t('finance.invoice.payments.edit')\n  }\n\n  title = title + \" #\" + invoice_number\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={ title }>\n            <div className=\"page-options d-flex\">\n              {/* Back */}\n              <Link to={returnUrl} \n                    className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {/* Form can go here */}\n              {children} \n            </Grid.Col>\n            <Grid.Col md={4}>\n            <Card statusColor=\"blue\">\n              <Card.Header>\n                <Card.Title>{t('general.info')}</Card.Title>\n              </Card.Header>\n              <Card.Body padding={0}>\n                <h4> #{ invoice_number } </h4>\n                { (inputData.financeInvoice.relationCompany) && <span>{inputData.financeInvoice.relationCompany}<br /></span> } \n                { (inputData.financeInvoice.relationName) && <span>{inputData.financeInvoice.relationName}<br /></span> } \n                { inputData.financeInvoice.summary }\n              </Card.Body>\n            </Card>\n            <FinanceInvoiceEditBalance financeInvoice={inputData.financeInvoice} />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nconst FinanceInvoicePaymentForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.details')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                selected={values.date}\n                onChange={(date) => setFieldValue(\"date\", date)}\n                onBlur={() => setFieldTouched(\"date\", true)}\n              />\n              <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n              <Field type=\"text\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.payment_method')}>\n              <Field component=\"select\" \n                      name=\"financePaymentMethod\" \n                      className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in finance payment form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.financePaymentMethods.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { ADD_FINANCE_INVOICE_PAYMENT } from \"./queries\"\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\nfunction FinanceInvoicePaymentAdd({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: queryLoading, error: queryError, data, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const [addInvoicePayment] = useMutation(ADD_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (queryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (queryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(queryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"create\"}>\n      <Formik\n        initialValues={{ \n          date: new Date() ,\n          amount: inputData.financeInvoice.balance,\n          financePaymentMethod: \"\",\n          note: \"\"\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            addInvoicePayment({ variables: {\n              input: {\n                financeInvoice: invoiceId,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"../tools\"\n\nimport { GET_INVOICE_QUERY, GET_INVOICES_QUERY } from \"../queries\"\nimport { GET_INVOICE_PAYMENT_QUERY, UPDATE_FINANCE_INVOICE_PAYMENT } from './queries'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport FinanceInvoicePaymentBase from \"./FinanceInvoicePaymentBase\"\nimport FinanceInvoicePaymentForm from \"./FinanceInvoicePaymentForm\"\n\n\n\nfunction FinanceInvoicePaymentEdit({ t, history, match }) {\n  const invoiceId = match.params.invoice_id\n  const id = match.params.id\n  console.log(invoiceId)\n  console.log(id)\n\n  const returnUrl = \"/finance/invoices/edit/\" + invoiceId\n  const { loading: invoiceQueryLoading, error: invoiceQueryError, data: invoiceData, } = useQuery(GET_INVOICE_QUERY, {\n    variables: {\n      id: invoiceId\n    }\n  })\n  const { loading: paymentQueryLoading, error: paymentQueryError, data: paymentData, } = useQuery(GET_INVOICE_PAYMENT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [updateInvoicePayment] = useMutation(UPDATE_FINANCE_INVOICE_PAYMENT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (invoiceQueryLoading || paymentQueryLoading) return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <p>{t('general.loading_with_dots')}</p>\n      </div>\n    </SiteWrapper>\n  )\n  // Error\n  if (invoiceQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(invoiceQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n  // Error\n  if (paymentQueryError) {\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          { console.log(paymentQueryError) }\n          <p>{t('general.error_sad_smiley')}</p>\n        </div>\n      </SiteWrapper>\n    )\n  }\n\n  console.log('query data')\n  console.log(invoiceData)\n  console.log(paymentData)\n  const inputData = invoiceData\n  const initialValues = paymentData.financeInvoicePayment\n\n  let initialPaymentMethod\n  if (initialValues.financePaymentMethod) {\n    initialPaymentMethod = initialValues.financePaymentMethod.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDate = null\n  if (initialValues.date) {\n    initialDate = new Date(initialValues.date)\n  }\n\n  return (\n    <FinanceInvoicePaymentBase form_type={\"update\"}>\n      <Formik\n        initialValues={{ \n          date: initialDate,\n          amount: initialValues.amount,\n          financePaymentMethod: initialPaymentMethod,\n          note: initialValues.note\n        }}\n        // validationSchema={FINANCE_INVOICE_PAYMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            updateInvoicePayment({ variables: {\n              input: {\n                id: id,\n                date: dateToLocalISO(values.date),\n                amount: values.amount,\n                financePaymentMethod: values.financePaymentMethod,\n                note: values.note\n              }\n            }, refetchQueries: [\n                {query: GET_INVOICES_QUERY, variables: get_list_query_variables() },\n                {query: GET_INVOICE_QUERY, variables: { id: invoiceId }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.invoice.payments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n        }\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <FinanceInvoicePaymentForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </FinanceInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceInvoicePaymentEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_ORDERS_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n\n","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceOrdersFilter = ({ t, history, data, refetch }) => (\n  <div>\n    {/* Status */}\n    <select \n      className={selectClass}\n      value={getDefaultValue(CSLS.FINANCE_ORDERS_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_ORDERS_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t('finance.orders.statuses.all')}</option>\n      <option value=\"RECEIVED\" key={v4()}>{t('finance.orders.statuses.RECEIVED')}</option>\n      <option value=\"AWAITING_PAYMENT\" key={v4()}>{t('finance.orders.statuses.AWAITING_PAYMENT')}</option>\n      <option value=\"PAID\" key={v4()}>{t('finance.orders.statuses.PAID')}</option>\n      <option value=\"DELIVERED\" key={v4()}>{t('finance.orders.statuses.DELIVERED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.orders.statuses.CANCELLED')}</option>\n      <option value=\"DEVIERY_ERROR\" key={v4()}>{t('finance.orders.statuses.DELIVERY_ERROR')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceOrdersFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport FinanceOrdersFilter from \"./FinanceOrdersFilter\"\n\n\nconst FinanceOrdersBase = ({ t, history, children, refetch }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")}>\n          <div className=\"page-options d-flex\">\n            <FinanceOrdersFilter refetch={refetch}/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\nexport default withTranslation()(withRouter(FinanceOrdersBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceOrderStatus extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"finance order status props:\")\n    console.log(props)\n  }\n\n  // ('RECEIVED', _(\"Received\")),\n  // ('AWAITING_PAYMENT', _(\"Awaiting payment\")),\n  // ('PAID', _(\"Paid\")),\n  // ('DELIVERED', _(\"Delivered\")),\n  // ('CANCELLED', _(\"Cancelled\")),\n\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"RECEIVED\":\n        return <Badge color=\"secondary\">{t('finance.orders.statuses.RECEIVED')}</Badge>\n      case \"AWAITING_PAYMENT\":\n        return <Badge color=\"primary\">{t('finance.orders.statuses.AWAITING_PAYMENT')}</Badge>\n      case \"PAID\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.PAID')}</Badge>\n      case \"DELIVERED\":\n        return <Badge color=\"success\">{t('finance.orders.statuses.DELIVERED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.orders.statuses.CANCELLED')}</Badge>\n      case \"DELIVERY_ERROR\":\n        return <Badge color=\"danger\">{t('finance.orders.statuses.DELIVERY_ERROR')}</Badge>\n      default:\n        return t('finance.orders.statuses.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          financeInvoice {\n            id\n            invoiceNumber\n          }\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          total\n          totalDisplay\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      account {\n        id\n        fullName\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n          }\n        }\n      }\n      \n    }\n  }\n`\n\n\nexport const UPDATE_FINANCE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_ORDER = gql`\n  mutation DeleteFinanceOrder($input: DeleteFinanceOrderInput!) {\n    deleteFinanceOrder(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\nimport { DELETE_FINANCE_ORDER, GET_ORDERS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinanceOrderDelete({t, match, node}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.orders.delete_confirm_msg\"),\n            msgDescription: <p>{t(\"general.order\")} # { node.orderNumber }</p>,\n            msgSuccess: t('finance.orders.deleted'),\n            deleteFunction: deleteOrder,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_ORDERS_QUERY, variables: get_list_query_variables() },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport { get_list_query_variables } from \"./tools\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceOrdersBase from './FinanceOrdersBase'\nimport FinanceOrderStatus from \"./FinanceOrderStatus\"\nimport FinanceOrderDelete from \"./FinanceOrderDelete\"\n\nimport { GET_ORDERS_QUERY } from \"./queries\"\nimport moment from 'moment'\n\n\n\nfunction FinanceOrders({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_ORDERS_QUERY, {\n    variables: {get_list_query_variables},\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"general.loading_with_dots\")}\n    </FinanceOrdersBase>\n  )\n\n  if (error) return (\n    <FinanceOrdersBase title={title}>\n      {t(\"finance.orders.error_loading\")}\n    </FinanceOrdersBase>\n  )\n\n  const orders = data.financeOrders\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  // Empty list\n  if (!orders.edges.length) { return (\n    <FinanceOrdersBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.orders.title')}>\n        <p>\n          {t('finance.orders.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )}\n\n  return (\n    <FinanceOrdersBase title={title} refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.orders.title')} \n        pageInfo={orders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: orders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              {/* <Table.ColHeader>{t('general.status')}</Table.ColHeader> */}\n              <Table.ColHeader>{t('general.order')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {orders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      # {node.orderNumber} <br />\n                    </Link>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    \n                  </Table.Col> */}\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.account && node.account.fullName}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.financeInvoice) && \n                      <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                        {node.financeInvoice.invoiceNumber}\n                      </Link>}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderDelete node={node}/>\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrders))","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nexport function get_list_query_variables(batchType) {\n  let queryVars = {\n    batchType: batchType.toUpperCase()\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function get_add_options_collection(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/invoices`}>\n          <b>{t(\"finance.payment_batch_collections.invoices_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.invoices_batch_description\")}</p>\n      </List.Item>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_collections.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_collections.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}\n\n\nexport function get_add_options_payment(t, batchType) {\n  return (\n    <List unstyled>\n      <List.Item>\n        <Link to={`/finance/paymentbatches/${batchType}/add/category`}>\n          <b>{t(\"finance.payment_batch_payments.category_batch\")} <Icon name=\"chevron-right\" /></b>\n        </Link><br />\n        <p>{t(\"finance.payment_batch_payments.category_batch_description\")}</p>\n      </List.Item>\n    </List>\n  )\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeFinancePaymentBatchStatus({ t, status }) {\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.SENT_TO_BANK')}</Badge> \n    case \"APPROVED\":\n      return <Badge color=\"success\">{t('finance.payment_batches.status.APPROVED')}</Badge> \n    case \"AWAITING_APPROVAL\":\n      return <Badge color=\"primary\">{t('finance.payment_batches.status.AWAITING_APPROVAL')}</Badge> \n    case \"REJECTED\":\n      return <Badge color=\"danger\">{t('finance.payment_batches.status.REJECTED')}</Badge> \n    default:\n      return t(\"finance.payment_batches.status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeFinancePaymentBatchStatus)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchesBase({t, history, match, children, showAdd=false, showBack=false, returnUrl=\"\"}) {\n  const batchType = match.params.batch_type\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonAdd addUrl={`/finance/paymentbatches/${batchType}/add_what`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatch\">\n                  <ButtonBack returnUrl={returnUrl} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCHES_QUERY = gql`\n  query FinancePaymentBatches($after: String, $before: String, $batchType: CostasiellaFinancePaymentBatchBatchTypeChoices!) {\n    financePaymentBatches(first: 15, before: $before, after: $after, batchType: $batchType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          status\n          executionDate\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          description\n          batchType\n          year\n          month\n          includeZeroAmounts\n          note\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_QUERY = gql`\n  query FinancePaymentBatch($id: ID!) {\n    financePaymentBatch(id:$id) {\n      id\n      name\n      status\n      executionDate\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      description\n      batchType\n      year\n      month\n      includeZeroAmounts\n      note\n      totalDisplay\n      countItems\n      items {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            financeInvoice {\n              id\n              invoiceNumber\n            }\n            accountHolder\n            accountNumber\n            accountBic\n            mandateReference\n            mandateSignatureDate\n            amount\n            amountDisplay\n            currency\n            description\n          }\n        }\n      }\n      exports {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id\n            account {\n              id\n              fullName\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES = gql`\n  query InputValues($after: String, $before: String, $batchCategoryType: CostasiellaFinancePaymentBatchCategoryBatchCategoryTypeChoices!) {\n    financePaymentBatchCategories(first: 1000, before:$before, after:$after, archived:false, batchCategoryType: $batchCategoryType) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_PAYMENT_BATCH = gql`\n  mutation CreateFinancePaymentBatch($input:CreateFinancePaymentBatchInput!) {\n    createFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_PAYMENT_BATCH = gql`\n  mutation UpdateFinancePaymentBatch($input:UpdateFinancePaymentBatchInput!) {\n    updateFinancePaymentBatch(input: $input) {\n      financePaymentBatch {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_PAYMENT_BATCH = gql`\n  mutation DeleteFinancePaymentBatch($input: DeleteFinancePaymentBatchInput!) {\n    deleteFinancePaymentBatch(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport BadgeFinancePaymentBatchStatus from \"../../ui/BadgeFinancePaymentBatchStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_PAYMENT_BATCHES_QUERY, DELETE_PAYMENT_BATCH } from \"./queries\"\n\n\nfunction FinancePaymentBatches({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const batchType = match.params.batch_type\n\n  const { loading, error, data, fetchMore } = useQuery(GET_PAYMENT_BATCHES_QUERY, {\n    variables: get_list_query_variables(batchType),\n  })\n  const [deletePaymentBatch] = useMutation(DELETE_PAYMENT_BATCH)\n\n  let cardTitle\n  let msgEmptyList\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title')\n    msgEmptyList = t('finance.payment_batch_collections.empty_list')\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title')\n    msgEmptyList = t('finance.payment_batch_payments.empty_list')\n  }\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchesBase>\n  )\n\n  let financePaymentBatches = data.financePaymentBatches\n  // Empty list\n  if (!financePaymentBatches.edges.length) { return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{msgEmptyList}</p>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={financePaymentBatches.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: financePaymentBatches.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatches.edges\n            const pageInfo = fetchMoreResult.financePaymentBatches.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatches: {\n                    __typename: previousResult.financePaymentBatches.__typename,\n                    edges: [ ...previousResult.financePaymentBatches.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.execution_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batches.batch_category')}</Table.ColHeader>             \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {financePaymentBatches.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <BadgeFinancePaymentBatchStatus status={node.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.executionDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {(node.financePaymentBatchCategory) ? node.financePaymentBatchCategory.name : t(\"general.invoices\")}\n                  {(node.year) ? <div><small className=\"text-muted\">{node.year} - {node.month}</small></div> : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatches/${batchType}/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.view')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"finance.payment_batches.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('finance.payment_batches.deleted'),\n                        deleteFunction: deletePaymentBatch,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType) } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatches))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card\n} from \"tabler-react\";\n\nimport FinancePaymentBatchesBase from \"./FinancePaymentBatchesBase\"\nimport { get_add_options_collection, get_add_options_payment } from './tools'\n\n\nfunction FinancePaymentBatchAddWhat({t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n\n  let cardTitle\n  let options\n  if (batchType === \"collection\") {\n    cardTitle = t('finance.payment_batch_collections.title_add_what')\n    options = get_add_options_collection(t, batchType)\n  } else {\n    cardTitle = t('finance.payment_batch_payments.title_add_what')\n    options = get_add_options_payment(t, batchType)\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          {options}\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchAddWhat))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinancePaymentBatchCategory extends Component {\n  render() {\n    const t = this.props.t\n    const categoryType = this.props.categoryType\n\n    switch (categoryType) {\n      case \"COLLECTION\":\n        return <Badge color=\"success\">{t('finance.payment_batch_categories.payment_batch_category_type.COLLECTION')}</Badge>\n      case \"PAYMENT\":\n        return <Badge color=\"warning\">{t('finance.payment_batch_categories.payment_batch_category_type.PAYMENT')}</Badge>\n      default:\n        return t('finance.payment_batch_categories.payment_batch_category_type.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategory))","import React, {useState} from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { useMutation } from \"@apollo/client\"\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction FinancePaymentBatchViewBase({t, history, match, children, status}) {\n  const batchId = match.params.id\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}`\n  const exportUrl = `/d/export/finance_payment_batch/csv/${batchId}`\n  const [disabled, setDisabled] = useState(false)\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  let sentToBankColor = \"secondary\"\n  let approvedColor = \"secondary\"\n  let awaitingApprovalColor = \"secondary\"\n  let rejectedColor = \"secondary\"\n\n  switch (status) {\n    case \"SENT_TO_BANK\":\n      sentToBankColor = \"success\"\n      break\n    case \"APPROVED\":\n      approvedColor = \"success\"\n      break\n    case \"AWAITING_APPROVAL\":\n      awaitingApprovalColor = \"primary\"\n      break\n    case \"REJECTED\":\n      rejectedColor = \"danger\"\n      break\n    default:\n      break\n  }\n\n  function onClickStatusButton(newStatus) {\n    setDisabled(true)\n\n    updateFinancePaymentBatch({ \n      variables: { input: {id: batchId, status: newStatus} }, \n      refetchQueries: [\n        {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data);\n        toast.success((t('finance.payment_batches.toast_edit_status_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        if (status !== \"SENT_TO_BANK\") {\n          console.log(status)\n          setDisabled(false)\n        }\n      })\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.payment_batch.title_view')}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary mr-2'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {/* Export as sold as excel sheet */}\n                <Button\n                  className='mr-2'\n                  color=\"secondary\"\n                  RootComponent=\"a\"\n                  icon=\"download-cloud\"\n                  onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                    t, doTokenRefresh, history, exportUrl\n                  )}\n                >\n                  {t(\"general.export\")}\n                </Button>\n                <Link to={`/finance/paymentbatches/${batchType}/edit/${batchId}`} \n                      className='btn btn-secondary'>\n                  <Icon name=\"edit-2\" /> {t('general.edit')}\n                </Link>\n            </div>\n          </Page.Header>\n            {(status) ? \n              (status === \"SENT_TO_BANK\") ?\n                <Button.List>\n                  <Button \n                    icon=\"mail\"\n                    disabled={true}\n                    color={sentToBankColor}\n                    onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                  >\n                    {t('finance.payment_batch.status.SENT_TO_BANK')}\n                  </Button>\n                </Button.List>\n              :\n                <Grid.Row>\n                  <Grid.Col md={12} className=\"mb-2 \">\n                    \n\n                    <Button.List className=\"float-right\">\n                      <Button \n                        icon=\"mail\"\n                        disabled={disabled}\n                        color={sentToBankColor}\n                        onClick={() => onClickStatusButton(\"SENT_TO_BANK\")}\n                      >\n                        {t('finance.payment_batch.status.SENT_TO_BANK')}\n                      </Button>\n                      <Button \n                        icon=\"check\"\n                        disabled={disabled}\n                        color={approvedColor}\n                        onClick={() => onClickStatusButton(\"APPROVED\")}\n                      >\n                        {t('finance.payment_batch.status.APPROVED')}\n                      </Button>\n                      <Button \n                        icon=\"clock\"\n                        disabled={disabled}\n                        color={awaitingApprovalColor}\n                        onClick={() => onClickStatusButton(\"AWAITING_APPROVAL\")}\n                      >\n                        {t('finance.payment_batch.status.AWAITING_APPROVAL')}\n                      </Button>\n                      <Button \n                        icon=\"x\"\n                        disabled={disabled}\n                        color={rejectedColor}\n                        onClick={() => onClickStatusButton(\"REJECTED\")}\n                      >\n                        {t('finance.payment_batch.status.REJECTED')}\n                      </Button>\n                    </Button.List>\n                    <h6 className=\"float-right mr-2\">{t(\"general.status\")}</h6>\n                  </Grid.Col>\n                </Grid.Row>\n              : \"\"\n            }\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchViewBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n  Table,\n  List,\n} from \"tabler-react\"\n\nimport { GET_PAYMENT_BATCH_QUERY } from './queries'\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport FinancePaymentBatchViewBase from './FinancePaymentBatchViewBase'\nimport BadgeBoolean from '../../ui/BadgeBoolean';\n\n\nfunction FinancePaymentBatchView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const batchId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId },\n    pollInterval: 5000,\n  })\n  // const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t(\"general.loading_with_dots\")}</p>\n    </FinancePaymentBatchViewBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchViewBase>\n      <p>{t('finance.payment_batch.error_loading')}</p>\n    </FinancePaymentBatchViewBase>\n  )\n\n  const financePaymentBatch = data.financePaymentBatch\n  console.log(financePaymentBatch)\n\n  return (\n    <FinancePaymentBatchViewBase status={financePaymentBatch.status}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_info\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.Col>\n                    {t(\"general.name\")}\n                  </Table.Col>\n                  <Table.Col>\n                    {financePaymentBatch.name}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batch_categories.batch_category_type')}\n                  </Table.Col>\n                  <Table.Col>\n                    <FinancePaymentBatchCategory categoryType={financePaymentBatch.batchType} />\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.batch_category')}\n                  </Table.Col>\n                  <Table.Col>\n                    {\n                      (financePaymentBatch.financePaymentBatchCategory) ? \n                        <div>\n                          {financePaymentBatch.financePaymentBatchCategory.name}\n                          <div><small className=\"text-muted\">{financePaymentBatch.year} - {financePaymentBatch.month}</small></div>\n                        </div> : \n                        t(\"general.invoices\")\n                    }\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.execution_date')}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(financePaymentBatch.executionDate).format(dateFormat)}\n                  </Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Col>\n                    {t('finance.payment_batches.include_zero_amounts')}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBoolean value={financePaymentBatch.includeZeroAmounts} />\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_totals\")}>\n            <Table cards>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.total')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.totalDisplay}\n                </Table.Col>\n              </Table.Row>\n              <Table.Row>\n                <Table.Col>\n                  {t('general.items')}\n                </Table.Col>\n                <Table.Col>\n                  {financePaymentBatch.countItems}\n                </Table.Col>\n              </Table.Row>\n            </Table>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"finance.payment_batch.title_batch_exports\")}>\n            <Card.Body>\n              <List unstyled>\n              {financePaymentBatch.exports.edges.map(({ node }) => (\n                <List.Item>\n                  {moment(node.createdAt).format(dateTimeFormat)} <br /> \n                  <small>{node.account && node.account.fullName}</small>\n                </List.Item>\n              ))}\n              </List>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {(financePaymentBatch.note) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n              <Card title={t(\"finance.payment_batch.title_batch_note\")}>\n                <Card.Body>\n                  {financePaymentBatch.note}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n      : \"\" }\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={t(\"finance.payment_batch.title_batch_items\")}>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.line\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.account\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.holder\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"relations.account.bank_accounts.number\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.description\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"settings.finance.currency.title\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.amount\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"finance.invoices.invoice_number\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {financePaymentBatch.items.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>{index + 1}</Table.Col>\n                      <Table.Col>\n                        {node.account && \n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountHolder}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.accountNumber} {(node.accountBic) ? <div>{node.accountBic}</div> : \"\"}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.description}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.currency}\n                      </Table.Col>\n                      <Table.Col>\n                        {node.amountDisplay}\n                      </Table.Col>\n                      <Table.Col>\n                        {(node.financeInvoice) ?\n                          <Link to={`/finance/invoices/edit/${node.financeInvoice.id}`}>\n                            {node.financeInvoice.invoiceNumber}\n                          </Link> : \"\" }\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </FinancePaymentBatchViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_INVOICES_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    executionDate: Yup.date()\n      .required(t('yup.field_required')),\n    note: Yup.string(),\n    includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n  executionDate: Yup.date()\n    .required(t('yup.field_required')),\n  financePaymentBatchCategory: Yup.string()\n  .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  note: Yup.string(),\n  includeZeroAmounts: Yup.boolean()\n  })\n\nexport const PAYMENT_BATCH_EDIT_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n    .min(3, t('yup.min_len_3'))\n    .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst FinancePaymentCollectionBatchForm = (\n  { t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, inputData, returnUrl, create=false, category=false }\n  ) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          {(create) ? \n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batches.execution_date')}>\n                <CSDatePicker \n                  selected={values.executionDate}\n                  onChange={(executionDate) => {\n                    setFieldValue(\"executionDate\", executionDate)\n                    setFieldTouched(\"executionDate\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"executionDate\", true)}\n                  placeholderText={t('')}\n                />\n                <ErrorMessage name=\"executionDate\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            : \"\" \n          }\n        </Grid.Row>\n        {(create && category) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.category')}>\n                <Field component=\"select\" \n                        name=\"financePaymentBatchCategory\" \n                        className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                  {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name}</option>\n                  )}\n                </Field>\n                <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.year')} >\n                <Field type=\"text\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.month')} >\n                <Field type=\"text\" \n                      name=\"month\" \n                      className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.note')}>\n              <Field type=\"textarea\"\n                     component=\"textarea\" \n                     name=\"note\" \n                     className={(errors.note) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ? \n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"includeZeroAmounts\" \n                  checked={values.includeZeroAmounts} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('finance.payment_batches.include_zero_amounts')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"includeZeroAmounts\" component=\"div\" />   \n              </Form.Group>  \n            </Grid.Col>\n          </Grid.Row>\n          : \"\" \n        }\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { ADD_PAYMENT_BATCH, GET_PAYMENT_BATCHES_QUERY, GET_INPUT_VALUES } from './queries'\nimport { PAYMENT_BATCH_INVOICES_SCHEMA, PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchAdd({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const returnUrl = `/finance/paymentbatches/${batchType}/add_what`\n  const categoryType = match.params.category_type\n  const cardTitle = t('finance.payment_batch.title_add')\n\n\n  let invoices = false\n  let category = false\n  switch (categoryType) {\n    case \"invoices\":\n      invoices = true\n      break\n    case \"category\":\n      category = true\n      break\n    default:\n      break\n  }\n\n  let batchCategoryType\n  switch (batchType) {\n    case \"collection\":\n      batchCategoryType = \"COLLECTION\"\n      break\n    case \"payment\":\n      batchCategoryType = \"PAYMENT\"\n      break\n    default:\n      break\n  }\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES, { variables: {\n    batchCategoryType: batchCategoryType\n  }})\n  const [addFinancePaymentBatch] = useMutation(ADD_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card cardTitle={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputData = data\n\n  let initialValues = { name: '', description: '', executionDate: new Date() }\n  let yupSchema\n  if (categoryType === \"category\") {\n    initialValues.year = new Date().getFullYear()\n    initialValues.month = new Date().getMonth() + 1\n    yupSchema = PAYMENT_BATCH_CATEGORY_SCHEMA\n  } else {\n    yupSchema = PAYMENT_BATCH_INVOICES_SCHEMA\n  }\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          validationSchema={yupSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType === \"category\") {\n              input.year = parseInt(values.year)\n              input.month = parseInt(values.month)\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                const id = data.createFinancePaymentBatch.financePaymentBatch.id\n                history.push(`/finance/paymentbatches/${batchType}/view/${id}`)\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputData={inputData}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { UPDATE_PAYMENT_BATCH, GET_PAYMENT_BATCH_QUERY, GET_PAYMENT_BATCHES_QUERY } from './queries'\nimport { PAYMENT_BATCH_EDIT_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\nimport FinancePaymentBatchesBase from './FinancePaymentBatchesBase'\nimport FinancePaymentCollectionBatchForm from './FinancePaymentCollectionBatchForm'\n\n\nfunction FinancePaymentCollectionBatchEdit({ t, history, match }) {\n  const batchType = match.params.batch_type\n  const batchId = match.params.id\n  const returnUrl = `/finance/paymentbatches/${batchType}/view/${batchId}`\n  const cardTitle = t('finance.payment_batch.title_edit')\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_QUERY, {\n    variables: { id: batchId }\n  })\n  const [updateFinancePaymentBatch] = useMutation(UPDATE_PAYMENT_BATCH)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchesBase showAdd={false} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchesBase showAdd={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <p>{t('finance.payment_batches.error_loading_input_values')}</p>\n      </Card>\n      </FinancePaymentBatchesBase>\n  )\n\n  const inputValues = data.financePaymentBatch\n\n  return (\n    <FinancePaymentBatchesBase showBack={true} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: inputValues.name , note: inputValues.note }}\n          validationSchema={PAYMENT_BATCH_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                id: batchId,\n                name: values.name, \n                note: values.note,\n            }\n\n            updateFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                create={false}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentCollectionBatchEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let showArchive = localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE)\n  if (showArchive === null) {\n    showArchive = \"false\"\n  }\n\n  let queryVars = {\n    archived: (showArchive === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinancePaymentBatchCategoriesBase({t, history, children, showAdd=false, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className={'page-options d-flex'}>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonAdd addUrl={'/finance/paymentbatchcategories/add'} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"financepaymentbatchcategory\">\n                  <ButtonBack returnUrl=\"/finance/paymentbatchcategories\" />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoriesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_BATCH_CATEGORIES_QUERY = gql`\n  query FinancePaymentBatchCategories($after: String, $before: String, $archived: Boolean) {\n    financePaymentBatchCategories(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          description\n          batchCategoryType\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_BATCH_CATEGORY_QUERY = gql`\n  query FinancePaymentBatchCategory($id: ID!) {\n    financePaymentBatchCategory(id:$id) {\n      id\n      name\n      description\n      archived\n    }\n  }\n`\n\n\nexport const ARCHIVE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation ArchiveFinancePaymentBatchCategory($input: ArchiveFinancePaymentBatchCategoryInput!) {\n    archiveFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n        archived\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport FinancePaymentBatchCategory from \"../../ui/FinancePaymentBatchCategory\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentBatchCategoriesBase from \"./FinancePaymentBatchCategoriesBase\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, ARCHIVE_PAYMENT_BATCH_CATEGORY } from \"./queries\"\n\nfunction FinancePaymentBatchCategories({t, history}) {\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_PAYMENT_BATCH_CATEGORIES_QUERY, {\n    variables: get_list_query_variables(),\n  })\n  const [archivePaymentBatchCategory] = useMutation(ARCHIVE_PAYMENT_BATCH_CATEGORY)\n\n  // TODO: use local storage for archive buttons\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) !== \"true\") ? \n      'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}>\n        <p>{t('finance.payment_batch_categories.error_loading')}</p>\n      </ContentCard>\n      </FinancePaymentBatchCategoriesBase>\n  )\n\n  let payment_batch_categories = data.financePaymentBatchCategories\n  // Empty list\n  if (!payment_batch_categories.edges.length) { return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n                    headerContent={headerOptions}>\n        <p>\n          { (localStorage.getItem(CSLS.FINANCE_PAYMENT_BATCH_CATEGORIES_SHOW_ARCHIVE === \"true\")) ? \n              t(\"finance.payment_batch_categories.empty_archive\") :\n              t('finance.payment_batch_categories.empty_list')\n          }\n        </p>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )}\n\n  return (\n    <FinancePaymentBatchCategoriesBase showAdd={true}>\n      <ContentCard cardTitle={t('finance.payment_batch_categories.title')}\n        headerContent={headerOptions}\n        pageInfo={payment_batch_categories.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: payment_batch_categories.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.financePaymentBatchCategories.edges\n            const pageInfo = fetchMoreResult.financePaymentBatchCategories.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  financePaymentBatchCategories: {\n                    __typename: previousResult.financePaymentBatchCategories.__typename,\n                    edges: [ ...previousResult.financePaymentBatchCategories.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.payment_batch_categories.batch_category_type')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {payment_batch_categories.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <FinancePaymentBatchCategory categoryType={node.batchCategoryType} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/finance/paymentbatchcategories/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archivePaymentBatchCategory({ variables: {\n                          input: {\n                          id,\n                          archived: !node.archived\n                        }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                        })\n                      }}>\n                    <Icon prefix=\"fa\" name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\n\n\n// const FinancePaymentMethods = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"finance.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_PAYMENT_METHODS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {financePaymentMethods: payment_methods}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}>\n//                     <p>{t('finance.payment_methods.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!payment_methods.edges.length) { return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('finance.payment_methods.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={payment_methods.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: payment_methods.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.financePaymentMethods.edges\n//                                     const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new payment_methods at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           financePaymentMethods: {\n//                                             __typename: previousResult.financePaymentMethods.__typename,\n//                                             edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                               <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {payment_methods.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col key={v4()}>\n//                                     {node.code}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/finance/paymentmethods/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   {(node.systemMethod) ? \n//                                     <Table.Col></Table.Col> :\n//                                     <Mutation mutation={ARCHIVE_PAYMENT_METHOD} key={v4()}>\n//                                       {(archivePaymentMethod, { data }) => (\n//                                         <Table.Col className=\"text-right\" key={v4()}>\n//                                           <button className=\"icon btn btn-link btn-sm\" \n//                                             title={t('general.archive')} \n//                                             href=\"\"\n//                                             onClick={() => {\n//                                               console.log(\"clicked archived\")\n//                                               let id = node.id\n//                                               archivePaymentMethod({ variables: {\n//                                                 input: {\n//                                                   id,\n//                                                   archived: !archived\n//                                                 }\n//                                           }, refetchQueries: [\n//                                               {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n//                                           ]}).then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success(\n//                                               (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error);\n//                                           })\n//                                           }}>\n//                                             <Icon prefix=\"fa\" name=\"inbox\" />\n//                                           </button>\n//                                         </Table.Col>\n//                                       )}\n//                                     </Mutation>\n//                                   }\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"financepaymentmethod\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/finance/paymentmethods/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('finance.payment_methods.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategories))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\n\nconst FinancePaymentBatchCategoryForm = ({ t, history, isSubmitting, errors, values, returnUrl, create=false }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {(create) ?\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('finance.payment_batch_categories.batch_category_type')}>\n                <Field component=\"select\" \n                        name=\"batchCategoryType\" \n                        className={(errors.batchCategoryType) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                  <option value=\"COLLECTION\" key={v4()}>{t('general.collection')}</option>\n                  <option value=\"PAYMENT\" key={v4()}>{t('general.payment')}</option>\n                </Field>\n                <ErrorMessage name=\"batchCategoryType\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row> \n          : \"\"\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_BATCH_CATEGORY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY } from './queries'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport { get_list_query_variables } from \"./tools\"\n\n\nconst ADD_PAYMENT_BATCH_CATEGORY = gql`\n  mutation CreateFinancePaymentBatchCategory($input:CreateFinancePaymentBatchCategoryInput!) {\n    createFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const [addFinancePaymentBatchCategory] = useMutation(ADD_PAYMENT_BATCH_CATEGORY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', batchCategoryType: \"COLLECTION\", description: '' }}\n          validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addFinancePaymentBatchCategory({ variables: {\n              input: {\n                name: values.name, \n                batchCategoryType: values.batchCategoryType,\n                description: values.description\n              }\n            }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batch_categories.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentBatchCategoryForm\n                create={true}\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryAdd))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_PAYMENT_BATCH_CATEGORIES_QUERY, GET_PAYMENT_BATCH_CATEGORY_QUERY } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { PAYMENT_BATCH_CATEGORY_SCHEMA } from './yupSchema'\nimport FinancePaymentBatchCategoriesBase from './FinancePaymentBatchCategoriesBase'\nimport FinancePaymentBatchCategoryForm from './FinancePaymentBatchCategoryForm'\n\n\nconst UPDATE_PAYMENT_BATCH_CATEGORY = gql`\n  mutation UpdateFinancePaymentBatchCategory($input: UpdateFinancePaymentBatchCategoryInput!) {\n    updateFinancePaymentBatchCategory(input: $input) {\n      financePaymentBatchCategory {\n        id\n      }\n    }\n  }\n`\n\nfunction FinancePaymentBatchCategoryEdit({ t, history, match }) {\n  const returnUrl = \"/finance/paymentbatchcategories\"\n  const paymentBatchCategoryId = match.params.id\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_BATCH_CATEGORY_QUERY, {\n    variables: {'id': paymentBatchCategoryId},\n  })\n  const [updateFinancePaymentBatchCategory] = useMutation(UPDATE_PAYMENT_BATCH_CATEGORY)\n\n  // Loading\n  if (loading) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true} />\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n  // Error\n  if (error) return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card cardTitle={t('finance.payment_batch_categories.title')}>\n        <Card.Body>\n          <p>{t('finance.payment_batch_categories.error_loading')}</p>\n        </Card.Body>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n\n  const initialData = data.financePaymentBatchCategory\n\n  return (\n    <FinancePaymentBatchCategoriesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('finance.payment_batch_categories.title_edit')}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              name: initialData.name, \n              batchCategoryType: initialData.batchCategoryType,\n              description: initialData.description,\n            }}\n            validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateFinancePaymentBatchCategory({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  batchCategoryType: values.batchCategoryType,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_PAYMENT_BATCH_CATEGORIES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('finance.payment_batch_categories.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n              }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FinancePaymentBatchCategoryForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n               \n            )}\n          </Formik>\n      </Card>\n    </FinancePaymentBatchCategoriesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinancePaymentBatchCategoryEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financeInvoice {\n        id\n        invoiceNumber\n      }\n      orderNumber\n      status\n      message\n      createdAt\n      total\n      totalDisplay\n      balanceDisplay\n      deliveryErrorMessage\n      items(first: 100) {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            organizationClasspass {\n              id\n              name\n            }\n            productName \n            description\n            quantity\n            price\n            priceDisplay\n            financeTaxRate {\n              name\n            }\n            subtotalDisplay\n            taxDisplay\n            totalDisplay\n            financeGlaccount {\n              name\n            }\n          \tfinanceCostcenter {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateFinanceOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\n\nconst FinanceOrderEditForm = ({ t, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card title={t('general.status')}>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col md={10}>\n            <Form.Group>\n              <Field component=\"select\" \n                     name=\"status\" \n                     className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value={\"RECEIVED\"} key={v4()}>{t(\"finance.orders.statuses.RECEIVED\")}</option>\n                <option value={\"AWAITING_PAYMENT\"} key={v4()}>{t(\"finance.orders.statuses.AWAITING_PAYMENT\")}</option>\n                <option value={\"PAID\"} key={v4()}>{t(\"finance.orders.statuses.PAID\")}</option>\n                <option value={\"DELIVERED\"} key={v4()}>{t(\"finance.orders.statuses.DELIVERED\")}</option>\n                <option value={\"CANCELLED\"} key={v4()}>{t(\"finance.orders.statuses.CANCELLED\")}</option>\n                <option value={\"NOT_FOUND\"} key={v4()}>{t(\"finance.orders.statuses.NOT_FOUND\")}</option>\n                {/* <option value={\"DELIVERY_ERROR\"} key={v4()}>{t('finance.orders.statuses.DELIVERY_ERROR')}</option> */}\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <span className=\"text-muted\">\n              <Icon name=\"info\" /> {' '}\n              {t(\"finance.orders.set_status_to_delivered_to_deliver_manually\")}\n            </span>\n          </Grid.Col>\n          <Grid.Col md={2}>\n          <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n              >\n                {t('general.submit')}\n              </Button>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n    </Card>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(FinanceOrderEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction FinanceOrderEditBase ({ t, match, history, children, refetch }) {\n  const returnUrl = \"/finance/orders\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceOrderEditBase))","import React, { useContext } from 'react'\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { GET_ORDERS_QUERY } from '../queries'\nimport { GET_FINANCE_ORDER_QUERY, UPDATE_ORDER } from './queries'\nimport FinanceOrderEditForm from \"./FinanceOrderEditForm\"\nimport FinanceOrderEditBase from './FinanceOrderEditBase'\n\nimport {\n  Alert,\n  Grid,\n  Icon,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\n\nfunction FinanceOrderEdit({t, match, location, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n\n  const id = match.params.id\n  const returnUrl = \"/finance/orders\"\n  \n  const { loading, error, data } = useQuery(GET_FINANCE_ORDER_QUERY, {\n    variables: { id: id },\n  })\n  const [updateOrder] = useMutation(UPDATE_ORDER)\n\n\n  // Loading\n  if (loading) return (\n    <FinanceOrderEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </FinanceOrderEditBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <FinanceOrderEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </FinanceOrderEditBase>\n    )\n  }\n\n  const order = data.financeOrder\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  return(\n    <FinanceOrderEditBase>\n      {/* Start info row */}\n      <Grid.Row>\n        <Grid.Col md={6}>\n          <Card title={t(\"finance.orders.edit_details\")}>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.order\")} #</Table.ColHeader>\n                  <Table.Col>{order.orderNumber}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.account\")}</Table.ColHeader>\n                  <Table.Col>{order.account && order.account.fullName}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"finance.orders.placed_at\")}</Table.ColHeader>\n                  <Table.Col>{moment(order.createdAt).format(dateTimeFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.invoice\")}</Table.ColHeader>\n                  <Table.Col>\n                    {(order.financeInvoice && \n                      <Link to={`/finance/invoices/edit/${order.financeInvoice.id}`}>\n                        {order.financeInvoice.invoiceNumber}\n                      </Link>\n                    )}\n                  </Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n\n        </Grid.Col>\n        <Grid.Col md={6}>\n          {(order.status === \"DELIVERED\") ? \n              <Card title={t('general.status')}>\n              <Card.Body> \n                <span className=\"text-green\"><Icon name=\"check\" /></span> {t(\"finance.orders.statuses.DELIVERED\")}\n              </Card.Body>\n            </Card> : \"\" }\n          {(order.status === \"DELIVERY_ERROR\") ? \n              <Card title={t('general.status')}>\n              <Card.Body> \n                <Alert type=\"danger\" icon=\"alert-triangle\">\n                  {t(\"finance.orders.statuses.DELIVERY_ERROR\")}\n                </Alert>\n                <p>\n                  {order.deliveryErrorMessage && order.deliveryErrorMessage}\n                </p>\n              </Card.Body>\n            </Card> : \"\" }\n          {(order.status !== \"DELIVERED\" && order.status !== \"DELIVERY_ERROR\") ?\n            <Formik\n              initialValues={{ \n                status: order.status, \n              }}\n              // validationSchema={GLACCOUNT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  console.log('submit values:')\n                  console.log(values)\n\n                  updateOrder({ variables: {\n                    input: {\n                      id: match.params.id,\n                      status: values.status\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORDERS_QUERY }\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      toast.success((t('finance.orders.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors, values }) => (\n                <FinanceOrderEditForm\n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  returnUrl={returnUrl}\n                />\n              )}\n            </Formik>\n            : \"\"  \n          }\n        </Grid.Col>\n      </Grid.Row> \n      {/* End information row */}\n      {/* Start items row */}\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Card title={t(\"general.items\")}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.quantity_short_and_price\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.tax\")}</Table.ColHeader>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                { order.items.edges.map(({ node }) => (        \n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.productName}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.description}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.quantity} <br />\n                      {node.priceDisplay}\n                    </Table.Col>\n                    <Table.Col>\n                      {(node.financeTaxRate) ? node.financeTaxRate.name : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.totalDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>                \n            </Table>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* End items row */}\n      {/* Start note row */}\n      { (order.message) ?\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card title={t('finance.orders.customer_message')}>\n              <Card.Body>\n                {order.message}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row> : \"\"\n      }\n      {/* End note row */}\n    </FinanceOrderEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceOrderEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\nfunction FinancePaymentMethodsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"finance.title\")} >\n          <div className='page-options d-flex'>\n            {(showBack) ?\n              <ButtonBack returnUrl={\"/finance/paymentmethods\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financepaymentmethod\">\n                  <ButtonAdd addUrl={\"/finance/paymentmethods/add\"} />\n                </HasPermissionWrapper>\n              }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_PAYMENT_METHODS_QUERY = gql`\n  query FinancePaymentMethods($after: String, $before: String, $archived: Boolean) {\n    financePaymentMethods(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          systemMethod\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_PAYMENT_METHOD_QUERY = gql`\n  query FinancePaymentMethod($id: ID!) {\n    financePaymentMethod(id:$id) {\n      id\n      name\n      code\n      archived\n    }\n  }\n`\n\nexport const ADD_PAYMENT_METHOD = gql`\nmutation CreateFinancePaymentMethod($input:CreateFinancePaymentMethodInput!) {\n  createFinancePaymentMethod(input: $input) {\n    financePaymentMethod{\n      id\n      archived\n      name\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_PAYMENT_METHOD = gql`\nmutation UpdateFinancePaymentMethod($input: UpdateFinancePaymentMethodInput!) {\n  updateFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_PAYMENT_METHOD = gql`\nmutation ArchiveFinancePaymentMethod($input: ArchiveFinancePaymentMethodInput!) {\n  archiveFinancePaymentMethod(input: $input) {\n    financePaymentMethod {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase'\n\nimport { GET_PAYMENT_METHODS_QUERY, ARCHIVE_PAYMENT_METHOD } from \"./queries\"\n\n\nfunction FinancePaymentMethods({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.payment_methods.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_PAYMENT_METHODS_QUERY, {\n    variables: { archived: archived }\n  })\n\n  const [ archivePaymentMethod ] = useMutation(ARCHIVE_PAYMENT_METHOD)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.payment_methods.error_loading')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const paymentMethods = data.financePaymentMethods\n\n  // Empty list\n  if (!paymentMethods.edges.length) { return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.payment_methods.empty_list') : t(\"finance.payment_methods.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )}\n\n  return (\n    <FinancePaymentMethodsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={paymentMethods.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: paymentMethods.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financePaymentMethods.edges\n                        const pageInfo = fetchMoreResult.financePaymentMethods.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new paymentMethods at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financePaymentMethods: {\n                                __typename: previousResult.financePaymentMethods.__typename,\n                                edges: [ ...previousResult.financePaymentMethods.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {paymentMethods.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/finance/paymentmethods/edit/${node.id}`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {(node.systemMethod) ? \"\" :\n                      <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archivePaymentMethod({ variables: {\n                            input: {\n                              id,\n                              archived: !archived\n                            }\n                      }, refetchQueries: [\n                          {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": archived }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>      \n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethods))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PAYMENT_METHOD_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinancePaymentMethodForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('finance.code')}>\n            <Field type=\"text\" \n                    name=\"code\" \n                    className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinancePaymentMethodForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_PAYMENT_METHODS_QUERY, ADD_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodAdd({ t, history }) {\n  const returnUrl = \"/finance/paymentmethods\"\n  const [ addPaymentMethod ] = useMutation(ADD_PAYMENT_METHOD)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={t('finance.payment_methods.title_add')}>\n        <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addPaymentMethod({ variables: {\n                input: {\n                  name: values.name, \n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_PAYMENT_METHODS_QUERY, GET_PAYMENT_METHOD_QUERY, UPDATE_PAYMENT_METHOD } from './queries'\nimport { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinancePaymentMethodsBase from './FinancePaymentMethodsBase';\nimport FinancePaymentMethodForm from './FinancePaymentMethodForm'\n\n\nfunction FinancePaymentMethodEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('finance.payment_methods.title_edit')\n  const returnUrl = \"/finance/paymentmethods\"\n\n  const { loading, error, data } = useQuery(GET_PAYMENT_METHOD_QUERY, {\n    variables: { id: id }\n  })\n  const [ updatePaymentMethod ] = useMutation(UPDATE_PAYMENT_METHOD)\n\n  if (loading) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  if (error) return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </FinancePaymentMethodsBase>\n  )\n\n  const initialData = data.financePaymentMethod;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinancePaymentMethodsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            code: initialData.code\n          }}\n          validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updatePaymentMethod({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_PAYMENT_METHODS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.payment_methods.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FinancePaymentMethodForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </FinancePaymentMethodsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinancePaymentMethodEdit))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let status = localStorage.getItem(CSLS.FINANCE_QUOTES_FILTER_STATUS)\n  if (status) {\n    queryVars.status = status\n  } else {\n    queryVars.status = undefined\n  }\n  \n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  console.log(defaultValue)\n\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    console.log('return empty default')\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control mb-2\"\n\n\nconst FinanceQuotesFilter = ({ t, history, data, refetch }) => (\n  <div className=\"mr-2\">\n    {/* Status */}\n    <select \n      className={`${selectClass}`}\n      value={getDefaultValue(CSLS.FINANCE_QUOTES_FILTER_STATUS)}\n      onChange={ (event) => {\n        updateLocalStorageAndRefetch(\n          CSLS.FINANCE_QUOTES_FILTER_STATUS,\n          event.target.value,\n          refetch\n        )\n      }}\n    >\n      <option value=\"\" key={v4()}>{t(\"finance.quotes.status.ALL\")}</option>\n      <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n      <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n      <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n      <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n      <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n    </select>\n  </div>\n);\n\nexport default withTranslation()(withRouter(FinanceQuotesFilter))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from '../../SiteWrapper'\nimport ButtonExport from '../../ui/ButtonExport';\nimport FinanceQuotesFilter from \"./FinanceQuotesFilter\"\n\n\nfunction FinanceQuotesBase ({ t, history, children, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <FinanceQuotesFilter refetch={refetch}/>\n              <ButtonExport url=\"/finance/quotes/export\" className='mr-2' />\n              <Link to=\"/finance/quotes/groups\">\n                <Button\n                  color=\"secondary\"\n                  icon=\"folder\"\n                >\n                  {t('general.groups')}\n                </Button>\n              </Link>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesBase))","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Badge\n} from \"tabler-react\";\n\n\nclass FinanceQuoteStatus extends Component {\n  render() {\n    const t = this.props.t\n    const status = this.props.status\n\n    switch (status) {\n      case \"ALL\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.ALL')}</Badge>\n      case \"DRAFT\":\n        return <Badge color=\"secondary\">{t('finance.quotes.status.DRAFT')}</Badge>\n      case \"SENT\":\n        return <Badge color=\"primary\">{t('finance.quotes.status.SENT')}</Badge>\n      case \"ACCEPTED\":\n        return <Badge color=\"success\">{t('finance.quotes.status.ACCEPTED')}</Badge>\n      case \"REJECTED\":\n        return <Badge color=\"danger\">{t('finance.quotes.status.REJECTED')}</Badge>\n      case \"CANCELLED\":\n        return <Badge color=\"warning\">{t('finance.quotes.status.CANCELLED')}</Badge>\n      default:\n        return t('finance.quotes.status.NOT_FOUND') \n    }\n  }\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteStatus))","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_QUERY = gql`\n  query FinanceQuote($id: ID!, $before: String, $after: String) {\n    financeQuote(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      business {\n        id\n        name\n      }\n      customTo\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      quoteNumber\n      dateSent\n      dateExpire\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n            financeGlaccount {\n              id\n              name\n            }\n            financeCostcenter {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n    businesses(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    organization(id:\"T3JnYW5pemF0aW9uTm9kZToxMDA=\") {\n      id\n      name\n      address\n      phone\n      email\n      registration\n      taxRegistration\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE = gql`\n  mutation UpdateFinanceQuote($input: UpdateFinanceQuoteInput!) {\n    updateFinanceQuote(input: $input) {\n      financeQuote {\n        id\n        summary\n      }\n    }\n  }\n`\n\nexport const DELETE_FINANCE_QUOTE = gql`\n  mutation DeleteFinanceQuote($input: DeleteFinanceQuoteInput!) {\n    deleteFinanceQuote(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const CREATE_QUOTE_ITEM = gql`\n  mutation CreateFinanceQuoteItem($input: CreateFinanceQuoteItemInput!) {\n    createFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n        productName\n        description\n        quantity\n        price\n        financeTaxRate {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_QUOTE_ITEM = gql`\n  mutation DeleteFinanceQuoteItem($input: DeleteFinanceQuoteItemInput!) {\n    deleteFinanceQuoteItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  Button,\n  Table, \n  Text\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { get_list_query_variables } from \"./tools\"\nimport FinanceQuoteStatus from \"../../ui/FinanceQuoteStatus\"\nimport { GET_QUOTES_QUERY, DELETE_FINANCE_QUOTE } from \"./queries\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport moment from 'moment'\n\nfunction FinanceQuotesList({t, history, match, quotes, showColRelation=false}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [ deleteFinanceQuote ] = useMutation(DELETE_FINANCE_QUOTE)\n\n  return (\n    <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.quotes.quote_number')} & {t('finance.quotes.summary')}</Table.ColHeader>\n            {showColRelation && <Table.ColHeader>{t('finance.quotes.relation')}</Table.ColHeader>}\n            <Table.ColHeader>{t('finance.quotes.date')} & {t('finance.quotes.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {quotes.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col key={v4()}>\n                <FinanceQuoteStatus status={node.status} /> <br />\n                {(node.business && !showColRelation) && \n                  <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                    <small><Icon name=\"home\" /> {node.business.name}</small>\n                  </Link>\n                }\n              </Table.Col>\n              <Table.Col key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  {node.quoteNumber}\n                </Link><br />\n                <Text.Small color=\"gray\">{node.summary.trunc(28)}</Text.Small>\n              </Table.Col>\n              {showColRelation &&\n                <Table.Col key={v4()}>\n                  { node.account && \n                    <Link to={\"/relations/accounts/\" + node.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {node.account.fullName} <br />\n                    </Link> \n                  }\n                  { node.business && \n                    <Link to={\"/relations/b2b/\" + node.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {node.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n              }\n              <Table.Col key={v4()}>\n                {moment(node.dateSent).format(dateFormat)} <br />\n                {moment(node.dateExpire).format(dateFormat)}\n              </Table.Col>\n              <Table.Col key={v4()}>\n                {node.totalDisplay}\n              </Table.Col>\n              <Table.Col className=\"text-right\" key={v4()}>\n                <Link to={\"/finance/quotes/edit/\" + node.id}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                <button className=\"icon btn btn-link btn-sm\" \n                  title={t('general.delete')} \n                  href=\"\"\n                  onClick={() => {\n                    confirm_delete({\n                      t: t,\n                      msgConfirm: t(\"finance.quotes.delete_confirm_msg\"),\n                      msgDescription: <p>{node.quoteNumber}</p>,\n                      msgSuccess: t('finance.quotes.deleted'),\n                      deleteFunction: deleteFinanceQuote,\n                      functionVariables: { \n                        variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, \n                        refetchQueries: [\n                          {query: GET_QUOTES_QUERY, variables: get_list_query_variables() } \n                        ]\n                      }\n                    })\n                }}>\n                  <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                </button>\n            </Table.Col>\n          </Table.Row>\n        ))}\n      </Table.Body>\n    </Table>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesList))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceQuotesBase from \"./FinanceQuotesBase\"\nimport FinanceQuotesList from './FinanceQuotesList'\n\nimport { get_list_query_variables } from \"./tools\"\nimport { GET_QUOTES_QUERY } from \"./queries\"\n\n\nfunction FinanceQuotes({ t, location, history }) {\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n\n\n  if (loading) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>{t('finance.quotes.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n\n  const quotes = data.financeQuotes\n\n  // Empty list\n  if (!quotes.edges.length) { return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.quotes.title')}>\n        <p>\n          {t('finance.quotes.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceQuotesBase>\n  )}\n\n  return (\n    <FinanceQuotesBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('finance.quotes.title')}\n        hasCardBody={false}\n        pageInfo={quotes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: quotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new quotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList \n          quotes={quotes} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </FinanceQuotesBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceQuotes))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTES_EXPORT_SCHEMA = Yup.object().shape({\n    status: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\n\n\nconst FinanceQuotesExportForm = ({ t, history, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                    name=\"status\" \n                    className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"ALL\" key={v4()}>{t('general.all')}</option>\n                <option value=\"DRAFT\" key={v4()}>{t('finance.quotes.status.DRAFT')}</option>\n                <option value=\"SENT\" key={v4()}>{t('finance.quotes.status.SENT')}</option>\n                <option value=\"ACCEPTED\" key={v4()}>{t('finance.quotes.status.ACCEPTED')}</option>\n                <option value=\"REJECTED\" key={v4()}>{t('finance.quotes.status.REJECTED')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('finance.quotes.status.CANCELLED')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer> \n        <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n        >\n          {t('finance.quotes.export.btn_prepare_export')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(FinanceQuotesExportForm))","import React, { useContext, useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Container,\n  Icon,\n  List,\n  Page\n} from \"tabler-react\"\n\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from '../../../SiteWrapper'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport ButtonBack from '../../../ui/ButtonBack';\n\nimport { QUOTES_EXPORT_SCHEMA } from './yupSchema'\nimport FinanceQuotesExportForm from './FinanceQuotesExportForm';\nimport moment from 'moment'\n\n\nfunction FinanceQuotesExport({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const [dateStart, setDateStart] = useState(new Date(moment().startOf('month')))\n  const [dateEnd, setDateEnd] = useState(new Date(moment().endOf('month')))\n  const [status, setStatus] = useState(\"ALL\")\n  const [prepared, setPrepared] = useState(false)\n  const [exportUrl, setExportUrl] = useState(\"\")\n\n  const cardTitle = t(\"finance.quotes.export.title\")\n  const returnUrl = \"/finance/quotes\" \n\n  const [ doTokenRefresh ] = useMutation(TOKEN_REFRESH)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Card title={cardTitle}>\n            <Formik\n            initialValues={{ \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              status: status\n            }}\n            validationSchema={QUOTES_EXPORT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                setDateStart(values.dateStart)\n                setDateEnd(values.dateEnd)\n                setStatus(values.status)\n\n                const isoDateStart = dateToLocalISO(values.dateStart)\n                const isoDateEnd = dateToLocalISO(values.dateEnd)\n                setExportUrl(\n                  `/d/export/quotes/${isoDateStart}/${isoDateEnd}/${status}/`\n                )\n                \n                setSubmitting(false)\n                setPrepared(true)  \n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n              <FinanceQuotesExportForm\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n              )\n            }\n          </Formik>\n        </Card>\n        {(prepared) ? \n          <Card title={t(\"finance.quotes.export.ready.title\")}>\n            <Card.Body>\n              {t(\"finance.quotes.export.ready.explanation\")}\n              <List>\n                <List.Item>\n                  {t(\"general.period\")}{ \": \" } \n                  {moment(dateStart).format(dateFormat)} { \" - \" }\n                  {moment(dateEnd).format(dateFormat)}\n                </List.Item>\n                <List.Item>\n                  {t(\"general.status\")}: {t(`finance.quotes.status.${status}`)}\n                </List.Item>\n              </List>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                <Icon name=\"download-cloud\" /> {t(\"general.download\")}\n              </Button>\n            </Card.Footer>\n          </Card>\n          : \"\"}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuotesExport))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            {children}\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { CREATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemAdd({t, match}) {\n  const [ addQuoteItem ] = useMutation(CREATE_QUOTE_ITEM)\n\n    return (\n      <button className=\"btn btn-primary btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          addQuoteItem({ variables: {\n            input: {\n              financeQuote: match.params.id              \n            }\n          }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.toast_add_item_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              // setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              // setSubmitting(false)\n            })\n      }}>\n        <Icon prefix=\"fe\" name=\"plus\" /> { ' ' }\n        {t('finance.quote.item_add')}\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemAdd))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { DELETE_QUOTE_ITEM, GET_QUOTES_QUERY, GET_QUOTE_QUERY } from \"../queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteItemDelete({t, match, node}) {\n  const [deleteQuoteItem] = useMutation(DELETE_QUOTE_ITEM)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"finance.quotes.item_delete_confirm_msg\"),\n            msgDescription: <p>{node.productName} <br /> {node.description}</p>,\n            msgSuccess: t('finance.quotes.item_deleted'),\n            deleteFunction: deleteQuoteItem,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables() },\n                {query: GET_QUOTE_QUERY, variables: {id: match.params.id} },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteItemDelete))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport FinanceQuoteItemDelete from './FinanceQuoteItemDelete'\n\n\nconst FinanceQuoteItemEditForm = ({ t, isSubmitting, errors, node, touched, handleChange, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Grid.Row>\n      {/* <Icon name=\"more-vertical\" /> */}\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"productName\" \n                    className={(errors.productName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"productName\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"productName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={3} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    component=\"textarea\"\n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"description\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field type=\"text\" \n                   name=\"quantity\" \n                   className={(errors.quantity) ? \"form-control is-invalid\" : \"form-control\"} \n                   autoComplete=\"off\" \n                   onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"quantity\", true, true)\n                  }}\n            />\n            <ErrorMessage name=\"quantity\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group>\n            <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n                    onChange={(e) => {\n                      handleChange(e)\n                      setFieldTouched(\"price\", true, true)\n                    }}\n            />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={2} className=\"cs-grid-table-cell\">\n          <Form.Group>\n            <Field component=\"select\" \n                  name=\"financeTaxRate\" \n                  className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  onChange={(e) => {\n                    handleChange(e)\n                    setFieldTouched(\"financeTaxRate\", true, true)\n                  }}\n            >\n              {console.log(\"query data in form finance tax rate:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\">{node.totalDisplay}</span> <br /><br />\n        </Grid.Col>\n        <Grid.Col md={1} className=\"cs-grid-table-cell\">\n          <span className=\"float-right\"><FinanceQuoteItemDelete node={node}/></span><br /><br /> <br />\n          {(Object.keys(touched).length === 0) ? \"\" :\n            <Button \n              color=\"primary\"\n              className=\"pull-right\" \n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.submit')}\n            </Button>\n          }\n        </Grid.Col>\n      </Grid.Row>\n      {/* {(Object.keys(touched).length === 0) ? \"\" :\n        <Grid.Row>\n          <Grid.Col md={12} className=\"cs-grid-table-cell\">\n            <Alert type=\"primary\">\n              <p>A change was detected to the item above. Click the save button to save it. </p>\n              <Button \n                color=\"primary\"\n                // className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n            </Alert>\n          </Grid.Col>\n        </Grid.Row>\n      } */}\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_QUOTE_ITEM, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteItemEditForm from './FinanceQuoteItemEditForm'\n\n\nfunction FinanceQuoteItemEdit({t, match, initialValues, node, inputData}) {\n  const [updateQuoteItem] = useMutation(UPDATE_QUOTE_ITEM)\n\n    return (\n      <Formik\n        initialValues={{\n          productName: initialValues.productName,\n          description: initialValues.description,\n          price: initialValues.price,\n          quantity: initialValues.quantity,\n          financeTaxRate: (initialValues.financeTaxRate) ? initialValues.financeTaxRate.id : null\n        }}\n        // validationSchema={QUOTE_GROUP_SCHEMA}\n        onSubmit={(values, { setSubmitting, setTouched }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateQuoteItem({ variables: {\n            input: {\n              id: initialValues.id,\n              productName: values.productName, \n              description: values.description,\n              price: values.price,\n              quantity: values.quantity,\n              financeTaxRate: values.financeTaxRate\n            }\n          }, refetchQueries: [\n            {query: GET_QUOTE_QUERY, variables: {id: match.params.id}}\n              // {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('finance.quote.item.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n              setTouched({})\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n      >\n        {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n          <FinanceQuoteItemEditForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            touched={touched}\n            handleChange={handleChange}\n            setFieldTouched={setFieldTouched}\n            node={node}\n            inputData={inputData}\n          >\n          </FinanceQuoteItemEditForm>   \n        )}\n      </Formik>\n    )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteItemEdit))","import React, { useState } from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { DragDropContext, Draggable, Droppable } from 'react-beautiful-dnd';\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer, \n  Grid, \n} from \"tabler-react\"\n\nimport FinanceQuoteItemAdd from \"./FinanceQuoteItemAdd\"\nimport { GET_QUOTE_QUERY } from '../queries'\n\nimport FinanceQuoteItemEdit from './FinanceQuoteItemEdit'\n\n\nexport const UPDATE_QUOTE_ITEM = gql`\n  mutation UpdateFinanceQuoteItem($input: UpdateFinanceQuoteItemInput!) {\n    updateFinanceQuoteItem(input: $input) {\n      financeQuoteItem {\n        id\n      }\n    }\n  }\n`\n\nfunction FinanceQuoteEditItems ({ t, history, match, refetchQuote, inputData }) {\n  const [ updateItem ] = useMutation(UPDATE_QUOTE_ITEM)\n  const [ updating, setUpdating ] = useState(false)\n\n  const updateLineNumber = ({ node_id, line_number }) => {\n    setUpdating(true)\n    updateItem({ \n      variables: { \n        input: {\n          id: node_id,\n          lineNumber: line_number\n        } \n      },\n      refetchQueries: [\n        { query: GET_QUOTE_QUERY, variables: { id: inputData.financeQuote.id }}\n      ]\n    }).then(({ data }) => {\n      console.log('got data', data)\n      toast.success((t('finance.quote.saved_item_sorting')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      setTimeout(() => setUpdating(false), 125)\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error sending the query', error)\n      setTimeout(() => setUpdating(false), 125)\n    })\n  }\n\n  const onDragEnd = (result) => {\n    // the only one that is required\n    console.log('onDragEnd triggered...')\n    console.log(result)\n    const { draggableId, destination, source, reason } = result\n    console.log(source)\n    console.log(destination)\n    console.log(reason)\n\n    // Nothing to do, nowhere to go...\n    console.log(\"drop cancelled...\")\n    if (!destination || reason === 'CANCEL') {\n      return\n    }\n\n    // Moved back to the same spot\n    console.log(\"dropped to the same spot\")\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return\n    }\n\n    updateLineNumber({\n      node_id: draggableId,\n      line_number: destination.index\n    })\n  }\n  // const onDragEnd = useCallback((result) => {\n  //   // the only one that is required\n  //   console.log('onDragEnd triggered...')\n  //   console.log(result)\n  //   const { draggableId, destination, source, reason } = result\n  //   console.log(source)\n  //   console.log(destination)\n  //   console.log(reason)\n\n  //   // Nothing to do, nowhere to go...\n  //   console.log(\"drop cancelled...\")\n  //   if (!destination || reason === 'CANCEL') {\n  //     return\n  //   }\n\n  //   // Moved back to the same spot\n  //   console.log(\"dropped to the same spot\")\n  //   if (\n  //     destination.droppableId === source.droppableId &&\n  //     destination.index === source.index\n  //   ) {\n  //     return\n  //   }\n\n  //   updateLineNumber({\n  //     node_id: draggableId,\n  //     line_number: destination.index\n  //   })\n  // }, []);\n\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd} >\n      <Card statusColor=\"blue\">\n        <Card.Header>\n          <Card.Title>{t('general.items')}</Card.Title>\n          <Card.Options>\n            <FinanceQuoteItemAdd />\n          </Card.Options>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer active={updating} loader={updating}>\n              <Grid.Row className=\"cs-grid-table-header\">\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.product\")}</Grid.Col>\n                <Grid.Col md={3} className=\"cs-grid-table-cell\">{t(\"general.description\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.quantity_short_and_price\")}</Grid.Col>\n                <Grid.Col md={2} className=\"cs-grid-table-cell\">{t(\"general.tax\")}</Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"><span className=\"float-right\">{t(\"general.total\")}</span></Grid.Col>\n                <Grid.Col md={1} className=\"cs-grid-table-cell\"></Grid.Col>\n              </Grid.Row>\n              <Droppable droppableId=\"quote_items\">\n                {(provided, snapshot) => (\n                    <div\n                      ref={provided.innerRef} \n                      {...provided.droppableProps} \n                    >\n                      {inputData.financeQuote.items.edges.map(({ node }, idx) => (\n                        <Draggable \n                          draggableId={node.id}\n                          index={idx}\n                          key={node.id}\n                        >\n                          {(provided, snapshot) => (\n                              <div \n                                ref={provided.innerRef}\n                                index={node.lineNumber}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                >\n                                <FinanceQuoteItemEdit initialValues={node} inputData={inputData} node={node} />\n                              </div>\n                          )}\n                        </Draggable>\n                      ))}\n                      {provided.placeholder}\n                    </div>\n                )}\n              </Droppable>\n          </Dimmer>\n        </Card.Body>\n      </Card>\n    </DragDropContext>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditItems))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\nconst FinanceQuoteEditTermsForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"terms\", e.target.getContent())\n            setFieldTouched(\"terms\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTermsForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditFooterForm = ({ t, isSubmitting, values, errors, touched, handleChange, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"footer\", e.target.getContent())\n            setFieldTouched(\"footer\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditFooterForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm,  ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n// Use editor as controlled component:\n// https://github.com/tinymce/tinymce-react/blob/master/README.md\n\nconst FinanceQuoteEditNoteForm = ({ t, isSubmitting, values, errors, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Tab,\n  TabbedCard\n} from \"tabler-react\"\n\n\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY } from \"../queries\"\nimport FinanceQuoteEditTermsForm from \"./FinanceQuoteEditTermsForm\"\nimport FinanceQuoteEditFooterForm from \"./FinanceQuoteEditFooterForm\"\nimport FinanceQuoteEditNoteForm from \"./FinanceQuoteEditNoteForm\"\n\n\nfunction FinanceQuoteEditAdditional({t, history, match, initialData}) {\n  const id = match.params.id\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <TabbedCard initialTab={t('general.terms_and_conditions')}>\n      <Tab title={t('general.terms_and_conditions')}>\n        <Formik\n          initialValues={{ \n            terms: initialData.financeQuote.terms, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                terms: values.terms, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_terms_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditTermsForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditTermsForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.footer')}>\n        <Formik\n          initialValues={{ \n            footer: initialData.financeQuote.footer, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                footer: values.footer, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_footer_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditFooterForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              handleChange={handleChange}\n              touched={touched}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditFooterForm>\n          )}\n        </Formik>\n      </Tab>\n      <Tab title={t('general.note')}>\n        <Formik\n          initialValues={{ \n            note: initialData.financeQuote.note, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                note: values.note, \n              }\n            }, refetchQueries: [\n              {query: GET_QUOTE_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_note_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            >\n            </FinanceQuoteEditNoteForm>\n          )}\n        </Formik>\n      </Tab>\n    </TabbedCard>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditAdditional))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditBalance = ({ t, history, financeQuote }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.balance')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.subtotal')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.subtotalDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.tax')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.taxDisplay}\n        </span>\n      </div><br />\n      <div>\n        <span className=\"pull-left bold\">\n          {t('general.total')}\n        </span>\n        <span className=\"pull-right\">\n          {financeQuote.totalDisplay}\n        </span>\n      </div><br />\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditBalance))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nconst FinanceQuoteEditOptionsForm = ({ t, isSubmitting, values, errors, handleChange, touched, setFieldValue, setFieldTouched, inputData }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group label={t('finance.quotes.quote_number')}>\n        <Field type=\"text\" \n                name=\"quoteNumber\" \n                className={(errors.quoteNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" \n                onChange={(e) => {\n                  handleChange(e)\n                  setFieldTouched(\"quoteNumber\", true, true)\n                }}           \n        />\n        <ErrorMessage name=\"quoteNumber\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.date')}>\n        <CSDatePicker \n          className={(errors.dateSent) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateSent}\n          onChange={(date) => {\n            setFieldValue(\"dateSent\", date)\n            setFieldTouched(\"dateSent\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateSent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.quotes.expiration')}>\n        <CSDatePicker \n          className={(errors.dateExpire) ? \"form-control is-invalid\" : \"form-control\"} \n          selected={values.dateExpire}\n          onChange={(date) => {\n            setFieldValue(\"dateExpire\", date)\n            setFieldTouched(\"dateExpire\", true)\n          }}\n        />\n        <ErrorMessage name=\"dateDue\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.status')}>\n        <Field component=\"select\" \n              name=\"status\" \n              className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\"\n              onChange={(e) => {\n                handleChange(e)\n                setFieldTouched(\"status\", true, true)\n              }}\n        >\n          <option value=\"DRAFT\">{t('finance.quotes.status.DRAFT')}</option>\n          <option value=\"SENT\">{t('finance.quotes.status.SENT')}</option>\n          <option value=\"ACCEPTED\">{t('finance.quotes.status.ACCEPTED')}</option>\n          <option value=\"REJECTED\">{t('finance.quotes.status.REJECTED')}</option>\n          <option value=\"CANCELLED\">{t('finance.quotes.status.CANCELLED')}</option>\n        </Field>\n        <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptionsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditOptionsForm from \"./FinanceQuoteEditOptionsForm\"\n\n\nfunction FinanceQuoteEditOptions({t, match, initialData}) {\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateSent = null\n  if (initialData.financeQuote.dateSent) {\n    dateSent = new Date(initialData.financeQuote.dateSent)\n  }\n  let dateExpire = null\n  if (initialData.financeQuote.dateExpire) {\n    dateExpire = new Date(initialData.financeQuote.dateExpire)\n  }\n\n  return (\n    <Card title={t('general.options')} statusColor=\"blue\">\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            quoteNumber: initialData.financeQuote.quoteNumber, \n            dateSent: dateSent,\n            dateExpire: dateExpire,\n            status: initialData.financeQuote.status,\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                quoteNumber: values.quoteNumber, \n                dateSent: dateToLocalISO(values.dateSent),\n                dateExpire: dateToLocalISO(values.dateExpire),\n                status: values.status,\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_options_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, submitForm, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditOptionsForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditOptionsForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport DOMPurify from 'dompurify'\nimport {\n  Card\n} from \"tabler-react\";\n\n\nconst FinanceQuoteEditOrganization = ({ t, history, organization }) => (\n  <Card statusColor=\"blue\">\n    <Card.Header>\n      <Card.Title>{t('general.from')}</Card.Title>\n    </Card.Header>\n    <Card.Body>\n      <div className=\"bold\">\n        {organization.name}\n      </div>\n      {(organization.address) ?\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address)}} />\n        : \"\"\n      }      \n      <div>\n        {organization.phone}\n      </div>\n      <div>\n        {organization.email}\n      </div>\n      <div>\n        {organization.registration}\n      </div>\n      <div>\n        {organization.taxRegistration}\n      </div>\n    </Card.Body>\n  </Card>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditOrganization))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst FinanceQuoteEditSummaryForm = ({ t, isSubmitting, errors, touched, setFieldTouched, handleChange }) => (\n  <Dimmer loader={isSubmitting} active={isSubmitting}>\n    <FoForm>\n      <Form.Group>\n        <Field \n          type=\"text\" \n          name=\"summary\" \n          className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n          autoComplete=\"off\" \n          onChange={(e) => {\n            handleChange(e)\n            setFieldTouched(\"summary\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(Object.keys(touched).length === 0) ? \"\" :\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n      }\n    </FoForm>\n  </Dimmer>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummaryForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditSummaryForm from \"./FinanceQuoteEditSummaryForm\"\n\n\nfunction FinanceQuoteEditSummary({t, history, match, location, initialData}) {  \n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.summary')}</Card.Title>\n      </Card.Header>\n      <Card.Body>\n        <Formik\n          initialValues={{ \n            summary: initialData.financeQuote.summary, \n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                summary: values.summary, \n              }\n            }, refetchQueries: [\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('finance.quote.toast_edit_summary_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n                setTouched({})\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, setFieldTouched, handleChange }) => (\n            <FinanceQuoteEditSummaryForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n            >\n            </FinanceQuoteEditSummaryForm>\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditSummary))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n} from \"tabler-react\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match, financeQuote }) {\n  const id = match.params.id\n\n  return (\n    <Card statusColor=\"blue\">\n      <Card.Header>\n        <Card.Title>{t('general.to')} </Card.Title>\n        <Card.Options>\n          <Link to={`/finance/quotes/edit/${id}/to`}>\n            <Button color=\"secondary\" size=\"sm\">\n              {t('general.edit')}\n            </Button>\n          </Link> \n        </Card.Options>\n      </Card.Header>\n      <Card.Body>\n        <div className='mb-3'>\n          <div className=\"bold\">\n            {financeQuote.relationCompany}\n          </div>\n          <div>\n            {financeQuote.relationCompanyRegistration}\n          </div>\n          <div>\n            {financeQuote.relationCompanyTaxRegistration}\n          </div>\n        </div>\n          <div className=\"bold\">\n            {financeQuote.relationContactName}\n          </div>\n          <div>\n            {financeQuote.relationAddress}\n          </div>\n          <div>\n            {financeQuote.relationPostcode} {financeQuote.relationCity}\n          </div>\n          <div>\n            {financeQuote.relationCountry}\n          </div>\n      </Card.Body>\n      <Card.Footer>\n        {(financeQuote.business) && <span className='float-right'>\n          <Link to={`/relations/b2b/${financeQuote.business.id}/edit`}>\n            <Button icon=\"home\" color=\"link\">\n              {financeQuote.business.name}\n            </Button> \n          </Link>\n          </span>}\n        {(financeQuote.account) && <Link to={`/relations/accounts/${financeQuote.account.id}/profile`}>\n          <Button icon=\"user\" color=\"link\">\n            {financeQuote.account.fullName}\n          </Button> \n        </Link>}\n      </Card.Footer>\n    </Card>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n} from \"tabler-react\";\n\nimport { GET_QUOTE_QUERY } from '../queries'\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport FinanceQuoteEditBase from \"./FinanceQuoteEditBase\"\nimport FinanceQuoteEditItems from \"./FinanceQuoteEditItems\"\nimport FinanceQuoteEditAdditional from \"./FinanceQuoteEditAdditional\"\nimport FinanceQuoteEditBalance from \"./FinanceQuoteEditBalance\"\nimport FinanceQuoteEditOptions from \"./FinanceQuoteEditOptions\"\nimport FinanceQuoteEditOrganization from \"./FinanceQuoteEditOrganization\"\nimport FinanceQuoteEditSummary from \"./FinanceQuoteEditSummary\"\nimport FinanceQuoteEditTo from \"./FinanceQuoteEditTo\"\n\nfunction FinanceQuoteEdit({t, match, history, location}) {\n  const id = match.params.id\n  const { loading, error, data, refetch } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n  // Set back location for account profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  \n  // Loading\n  if (loading) return <FinanceQuoteEditBase>{t('general.loading_with_dots')}</FinanceQuoteEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditBase>{t('general.error_sad_smiley')}</FinanceQuoteEditBase>\n  }\n\n  // Fetch back location from localStorage, if no value set, default back to /finance/quotes\n  let returnUrl = localStorage.getItem(CSLS.FINANCE_QUOTES_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = \"/finance/quotes\"\n  }\n  const export_url = \"/d/export/quote/pdf/\" + id\n  // const shopAccountQuoteUrl = `${window.location.protocol}//${window.location.host}/#/shop/account/quote/${id}`\n\n  return (\n    <FinanceQuoteEditBase>\n      <Page.Header title={t('finance.quote.title') + ' #' + data.financeQuote.quoteNumber}>\n        <div className=\"page-options d-flex\">\n          {/* Back */}\n          <Link to={returnUrl} \n                className='btn btn-secondary mr-2'>\n              <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n          </Link>\n          {/* Export as PDF */}\n          <Button\n            color=\"secondary\"\n            icon=\"printer\"\n            className=\"mr-2\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url\n            )}\n          >\n            {t('general.pdf')} \n          </Button>\n          {/* Tools */}\n        </div>\n      </Page.Header>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <FinanceQuoteEditSummary \n            initialData={data}\n          />\n          {/* Activate code below once quotes are in shop accounts */}\n        {/* <Alert type=\"primary\">\n          <div className=\"mb-1\"><b>{t(\"finance.quote.account_profile_link\")}</b></div>\n          {shopAccountQuoteUrl}<br />\n          <div className=\"mt-1\"><small><Icon name=\"info\" /> {t(\"finance.quote.account_profile_link_explanation\")}</small></div>\n        </Alert> */}\n          <Grid.Row>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditOrganization organization={data.organization} />\n            </Grid.Col>\n            <Grid.Col md={6} ml={0}>\n              <FinanceQuoteEditTo financeQuote={data.financeQuote} />\n            </Grid.Col>\n          </Grid.Row>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          <FinanceQuoteEditBalance financeQuote={data.financeQuote} />\n          <FinanceQuoteEditOptions initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <FinanceQuoteEditItems inputData={data} refetchQuote={refetch} />\n          <FinanceQuoteEditAdditional initialData={data} />\n        </Grid.Col>\n      </Grid.Row>\n    </FinanceQuoteEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction FinanceQuoteEditToBase({t, match, history, children, quoteNumber}) {\n  const pageTitle = t('finance.quote.edit_to.title') + ' #' + quoteNumber && quoteNumber\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={pageTitle} />\n            <Grid.Row md={12}>\n              {children}\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst FinanceQuoteEditToForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, inputData, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"customer\" \n            checked={values.customTo} \n            onChange={ (event) => {\n              setFieldTouched('customTo', true, true)\n              setFieldValue('customTo', !(values.customTo))\n            }}\n          />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('finance.quotes.edit_to.custom_to')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"customTo\" component=\"div\" />   \n      </Form.Group>  \n      { !(values.customTo)  ?\n          <Form.Group label={t('relations.accounts.quote_to_business')}>\n            <Field component=\"select\" \n                  name=\"business\" \n                  className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}: {inputData.financeQuote.account.fullName}</option>\n              {inputData.businesses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      : \n        <>\n          <Form.Group label={t(\"finance.quotes.relation_company\")}>\n            <Field type=\"text\" \n                    name=\"relationCompany\" \n                    className={(errors.relationCompany) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"     \n            />\n            <ErrorMessage name=\"relationCompany\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyRegistration\" \n                        className={(errors.relationCompanyRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_company_tax_registration\")}>\n                <Field type=\"text\" \n                        name=\"relationCompanyTaxRegistration\" \n                        className={(errors.relationCompanyTaxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCompanyTaxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t(\"finance.quotes.relation_contact_name\")}>\n            <Field type=\"text\" \n                    name=\"relationContactName\" \n                    className={(errors.relationContactName) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" \n            />\n            <ErrorMessage name=\"relationContactName\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_address\")}>\n                <Field type=\"text\" \n                        name=\"relationAddress\" \n                        className={(errors.relationAddress) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationAddress\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_postcode\")}>\n                <Field type=\"text\" \n                        name=\"relationPostcode\" \n                        className={(errors.relationPostcode) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationPostcode\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_city\")}>\n                <Field type=\"text\" \n                        name=\"relationCity\" \n                        className={(errors.relationCity) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={6}>\n              <Form.Group label={t(\"finance.quotes.relation_country\")}>\n                <Field type=\"text\" \n                        name=\"relationCountry\" \n                        className={(errors.relationCountry) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" \n                />\n                <ErrorMessage name=\"relationCountry\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </>\n      }\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceQuoteEditToForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card, \n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"../tools\"\nimport { UPDATE_QUOTE, GET_QUOTE_QUERY, GET_QUOTES_QUERY } from \"../queries\"\nimport FinanceQuoteEditToBase from \"./FinanceQuoteEditToBase\"\nimport FinanceQuoteEditToForm from \"./FinanceQuoteEditToForm\"\n\n\nfunction FinanceQuoteEditTo({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/finance/quotes/edit/${id}`\n  const { loading, error, data } = useQuery(GET_QUOTE_QUERY, {\n    variables: {\n      id: id\n    },\n  })\n  const [ updateQuote ] = useMutation(UPDATE_QUOTE)\n\n  // Loading\n  if (loading) return <FinanceQuoteEditToBase>{t('general.loading_with_dots')}</FinanceQuoteEditToBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <FinanceQuoteEditToBase>{t('general.error_sad_smiley')}</FinanceQuoteEditToBase>\n  }\n\n  console.log(data)\n    \n  let initialBusiness = \"\"\n  if (data.financeQuote.business) {\n    initialBusiness = data.financeQuote.business.id\n  }\n\n  return (\n    <FinanceQuoteEditToBase quoteNumber={data.financeQuote.quoteNumber} >\n      <Card title={t('general.to')} statusColor=\"blue\">\n        <Formik\n          initialValues={{ \n            customTo: data.financeQuote.customTo,\n            relationCompany: data.financeQuote.relationCompany, \n            relationCompanyRegistration: data.financeQuote.relationCompanyRegistration, \n            relationCompanyTaxRegistration: data.financeQuote.relationCompanyTaxRegistration, \n            relationContactName: data.financeQuote.relationContactName, \n            relationAddress: data.financeQuote.relationAddress, \n            relationPostcode: data.financeQuote.relationPostcode, \n            relationCity: data.financeQuote.relationCity, \n            relationCountry: data.financeQuote.relationCountry, \n            business: initialBusiness\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting, setTouched }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateQuote({ variables: {\n              input: {\n                id: match.params.id,\n                customTo: values.customTo,\n                relationCompany: values.relationCompany,\n                relationCompanyRegistration: values.relationCompanyRegistration,\n                relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n                relationContactName: values.relationContactName,\n                relationAddress: values.relationAddress,\n                relationPostcode: values.relationPostcode,\n                relationCity: values.relationCity,\n                relationCountry: values.relationCountry,\n                business: values.business\n              }\n            }, refetchQueries: [\n                {query: GET_QUOTE_QUERY, variables: {id:id}},\n                {query: GET_QUOTES_QUERY, variables: get_list_query_variables()}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('finance.quote.toast_edit_to_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteEditToForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              touched={touched}\n              handleChange={handleChange}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              inputData={data}\n              returnUrl={returnUrl}\n            >\n            </FinanceQuoteEditToForm>\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteEditToBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteEditTo))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_QUOTE_GROUPS_QUERY = gql`\n  query FinanceQuoteGroupsQuery($archived: Boolean!) {\n    financeQuoteGroups(archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          name\n          nextId\n          expiresAfterDays\n          prefix\n          prefixYear\n          autoResetPrefixYear\n          terms\n          footer\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_QUOTE_GROUP_QUERY = gql`\n  query FinanceQuoteGroup($id: ID!) {\n    financeQuoteGroup(id:$id) {\n      id\n      archived\n      displayPublic\n      name\n      nextId\n      expiresAfterDays\n      prefix\n      prefixYear\n      autoResetPrefixYear\n      terms\n      footer\n      code\n    }\n  }\n`\n\nexport const UPDATE_QUOTE_GROUP = gql`\nmutation UpdateFinanceQuoteGroup($input: UpdateFinanceQuoteGroupInput!) {\n  updateFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      name\n      code\n    }\n  }\n}\n`\n\nexport const ADD_QUOTE_GROUP = gql`\nmutation CreateFinanceQuoteGroup($input:CreateFinanceQuoteGroupInput!) {\n  createFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup{\n      id\n    }\n  }\n}\n`\n\nexport const ARCHIVE_QUOTE_GROUP = gql`\nmutation ArchiveFinanceQuoteGroup($input: ArchiveFinanceQuoteGroupInput!) {\n  archiveFinanceQuoteGroup(input: $input) {\n    financeQuoteGroup {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction FinanceQuoteGroupsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showEditBack) ? \n                // Back for add or edit component\n                <ButtonBack returnUrl=\"/finance/quotes/groups\" className=\"mr-2\" />\n              :\n                // Back for list\n                <ButtonBack returnUrl=\"/finance/quotes\" className=\"mr-2\" />\n              }\n              <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financequotegroup\">\n                <ButtonAdd addUrl=\"/finance/quotes/groups/add\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_QUOTE_GROUPS_QUERY, ARCHIVE_QUOTE_GROUP } from \"./queries\"\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase'\n\n\nfunction FinanceQuoteGroups({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.quote_groups.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_QUOTE_GROUPS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveQuoteGroup ] = useMutation(ARCHIVE_QUOTE_GROUP)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  const quoteGroups = data.financeQuoteGroups\n\n  return (\n    <FinanceQuoteGroupsBase>\n      <ContentCard cardTitle={t('finance.quote_groups.title')}\n                   headerContent={headerOptions}\n                   pageInfo={quoteGroups.pageInfo}\n                   hasCardBody={false}\n                   onLoadMore={() => {\n                   fetchMore({\n                     variables: {\n                       after: quoteGroups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeQuoteGroups.edges\n                        const pageInfo = fetchMoreResult.financeQuoteGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new quoteGroups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeQuoteGroups: {\n                                __typename: previousResult.financeQuoteGroups.__typename,\n                                edges: [ ...previousResult.financeQuoteGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.next_id')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.quote_groups.expires_after_days')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.prefix')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader />\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {quoteGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.nextId}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.expiresAfterDays}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.prefix} \n                    {(node.prefixYear) ? <span>[{t('general.year')}]<br /></span>: ''}\n                    {(node.autoResetPrefixYear) ? <Text.Small color=\"gray\">\n                      {t('finance.quote_groups.auto_reset_prefix_year')}\n                    </Text.Small>: ''}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/quotes/groups/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveQuoteGroup({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const QUOTE_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    expiresAfterDays: Yup.number()\n      .moreThan(0, t('yup.field_above_0'))\n      .required(t('yup.field_required')),\n    nextId: Yup.number(),\n    prefix: Yup.string(),\n    prefixYear: Yup.boolean(),\n    autoResetPrefixYear: Yup.boolean(),\n    terms: Yup.string(),\n    footer: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst FinanceInvoiceGroupForm = ({ t, history, isSubmitting, setFieldTouched, setFieldValue, errors, values, returnUrl, edit=false }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.name')}>\n        <Field type=\"text\" \n                name=\"name\" \n                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        {(edit) ?\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.next_id')}>\n            <Field type=\"text\" \n                    name=\"nextId\" \n                    className={(errors.nextId) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"nextId\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col> : \"\"}\n        <Grid.Col>\n          <Form.Group label={t('finance.quote_groups.expires_after_days')}>\n            <Field type=\"text\" \n                    name=\"expiresAfterDays\" \n                    className={(errors.expiresAfterDays) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"expiresAfterDays\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.prefix')}>\n        <Field type=\"text\" \n                name=\"prefix\" \n                className={(errors.prefix) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"prefix\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"prefixYear\" \n                checked={values.prefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"prefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoResetPrefixYear\" \n                checked={values.autoResetPrefixYear} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('finance.quote_groups.auto_reset_prefix_year')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoResetPrefixYear\" component=\"div\" />   \n          </Form.Group>   \n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group label={t('general.terms')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"terms\"\n          initialValue={values.terms}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"terms\", true, true)\n            setFieldValue(\"terms\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"terms\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.footer')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"footer\"\n          initialValue={values.footer}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldTouched(\"footer\", true, true)\n            setFieldValue(\"footer\", e.target.getContent())\n          }}\n        />\n        <ErrorMessage name=\"footer\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('finance.code')}>\n        <Field type=\"text\" \n                name=\"code\" \n                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button \n            type=\"button\" \n            color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(FinanceInvoiceGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, ADD_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\n\n\nfunction FinanceQuoteGroupAdd({ t, history }) {\n  const returnUrl = \"/finance/quotes/groups\"\n  const [addQuoteGroup] = useMutation(ADD_QUOTE_GROUP)\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={t('finance.quote_groups.title_add')}>\n        <Formik\n          initialValues={{ \n            name: '', \n            displayPublic: true,\n            expiresAfterDays: 30,\n            prefix: 'QUO',\n            prefixYear: true,\n            autoResetPrefixYear: true,\n            terms: '',\n            footer: '',\n            code: '' \n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addQuoteGroup({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  expiresAfterDays: values.expiresAfterDays,\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldValue, setFieldTouched }) => (\n            <FinanceQuoteGroupForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_QUOTE_GROUPS_QUERY, GET_QUOTE_GROUP_QUERY, UPDATE_QUOTE_GROUP } from './queries'\nimport { QUOTE_GROUP_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceQuoteGroupForm from './FinanceQuoteGroupForm'\nimport FinanceQuoteGroupsBase from './FinanceQuoteGroupsBase';\n\n\nfunction FinanceQuoteGroupEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/quotes/groups\"\n  const cardTitle = t('finance.quote_groups.title_edit')\n  const { loading, error, data } = useQuery(GET_QUOTE_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateQuoteGroup ] = useMutation(UPDATE_QUOTE_GROUP)\n\n  if (loading) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n\n  if (error) return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.quote_groups.error_loading')}</p>\n      </ContentCard>\n    </FinanceQuoteGroupsBase>\n  )\n                    \n  const initialData = data.financeQuoteGroup;\n\n  return (\n    <FinanceQuoteGroupsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic,\n            expiresAfterDays: initialData.expiresAfterDays,\n            nextId: initialData.nextId,\n            prefix: initialData.prefix,\n            prefixYear: initialData.prefixYear,\n            autoResetPrefixYear: initialData.autoResetPrefixYear,\n            terms: initialData.terms,\n            footer: initialData.footer,\n            code: initialData.code\n          }}\n          validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateQuoteGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name, \n                  displayPublic: values.displayPublic,\n                  nextId: parseInt(values.nextId),\n                  expiresAfterDays: parseInt(values.expiresAfterDays),\n                  prefix: values.prefix,\n                  prefixYear: values.prefixYear,\n                  autoResetPrefixYear: values.autoResetPrefixYear,\n                  terms: values.terms,\n                  footer: values.footer,\n                  code: values.code\n                }\n              }, refetchQueries: [\n                  {query: GET_QUOTE_GROUPS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('finance.quote_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FinanceQuoteGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              edit={true}\n            />\n          )}\n        </Formik>\n      </Card>\n    </FinanceQuoteGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceQuoteGroupEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction FinanceTaxRatesBase({ t, history, children, showBack=false, returnUrl=\"/finance/taxrates\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} >\n            <div className='page-options d-flex'>\n               {(showBack) ?\n                <ButtonBack returnUrl={returnUrl} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"financetaxrate\">\n                  <ButtonAdd addUrl={\"/finance/taxrates/add\"} />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_TAXRATES_QUERY = gql`\n  query FinanceTaxRates($after: String, $before: String, $archived: Boolean) {\n    financeTaxRates(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_TAXRATE_QUERY = gql`\n  query FinanceTaxRate($id: ID!) {\n    financeTaxRate(id:$id) {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n`\n\nexport const ADD_TAXRATE = gql`\nmutation CreateFinanceTaxRate($input:CreateFinanceTaxRateInput!) {\n  createFinanceTaxRate(input: $input) {\n    financeTaxRate{\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const UPDATE_TAXRATE = gql`\nmutation UpdateFinanceTaxRate($input: UpdateFinanceTaxRateInput!) {\n  updateFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n      name\n      percentage\n      rateType\n      code\n    }\n  }\n}\n`\n\nexport const ARCHIVE_TAXRATE = gql`\nmutation ArchiveFinanceTaxRate($input: ArchiveFinanceTaxRateInput!) {\n  archiveFinanceTaxRate(input: $input) {\n    financeTaxRate {\n      id\n      archived\n    }\n  }\n}\n`\n","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase'\n\nimport { GET_TAXRATES_QUERY, ARCHIVE_TAXRATE } from \"./queries\"\n\nfunction FinanceTaxRates({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('finance.taxrates.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TAXRATES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveTaxrate ] = useMutation(ARCHIVE_TAXRATE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.glaccounts.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const taxrates = data.financeTaxRates\n\n  // Empty list\n  if (!taxrates.edges.length) { return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('finance.taxrates.empty_list') : t(\"finance.taxrates.empty_archive\")}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )}\n\n  return (\n    <FinanceTaxRatesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    pageInfo={taxrates.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: taxrates.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.financeTaxRates.edges\n                        const pageInfo = fetchMoreResult.financeTaxRates.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new taxrates at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              financeTaxRates: {\n                                __typename: previousResult.financeTaxRates.__typename,\n                                edges: [ ...previousResult.financeTaxRates.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.rateType')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.code')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {taxrates.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.percentage} %\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.rateType}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.code}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/finance/taxrates/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveTaxrate({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_TAXRATES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRates))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_RATE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    percentage: Yup.number()\n      .max(100)\n      .typeError(t('yup.field_has_to_be_number'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, ADD_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateAdd({t, history}) {\n  const returnUrl = \"/finance/taxrates\"\n  const [ addFinanceTaxrate ] = useMutation(ADD_TAXRATE)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={t('finance.taxrates.title_add')}>\n        <Formik\n            initialValues={{ name: \"\", percentage: \"\", rateType: \"IN\", code: \"\" }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addFinanceTaxrate({ variables: {\n                  input: {\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType, \n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                                name=\"percentage\" \n                                className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                                name=\"rateType\" \n                                className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_TAXRATES_QUERY, GET_TAXRATE_QUERY, UPDATE_TAXRATE } from './queries'\nimport { TAX_RATE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesBase from './FinanceTaxRatesBase';\n\n\nfunction FinanceTaxRateEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/finance/taxrates\"\n  const cardTitle = t('finance.taxrates.title_edit')\n  const { loading, error, data } = useQuery(GET_TAXRATE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateTaxrate ] = useMutation(UPDATE_TAXRATE)\n\n  if (loading) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  if (error) return (\n    <FinanceTaxRatesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesBase>\n  )\n\n  const initialData = data.financeTaxRate;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <FinanceTaxRatesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              percentage: initialData.percentage,\n              rateType: initialData.rateType,\n              code: initialData.code,\n            }}\n            validationSchema={TAX_RATE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateTaxrate({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    percentage: values.percentage,\n                    rateType: values.rateType,\n                    code: values.code,\n                  }\n                }, refetchQueries: [\n                    {query: GET_TAXRATES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('finance.taxrates.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>\n                      <Form.Group label={t('general.name')}>\n                        <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.percentage')}>\n                        <Field type=\"text\" \n                              name=\"percentage\" \n                              className={(errors.percentage) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"percentage\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.taxrates.rateType')}>\n                        <Field component=\"select\" \n                              name=\"rateType\" \n                              className={(errors.rateType) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\">\n                          <option value=\"IN\">{t('finance.taxrates.including')}</option>\n                          <option value=\"EX\">{t('finance.taxrates.excluding')}</option>\n                        </Field>\n                        <ErrorMessage name=\"rateType\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('finance.code')}>\n                        <Field type=\"text\" \n                                name=\"code\" \n                                className={(errors.code) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"code\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </FinanceTaxRatesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(FinanceTaxRateEdit))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const TAX_SUMMARY_SCHEMA = Yup.object().shape({\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction FinanceTaxRatesSummaryFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateStart\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateEnd}\n              onChange={(date) => {\n                setFieldValue(\"dateEnd\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('finance.taxrates_summary.set_dates')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport moment from 'moment'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { TAX_SUMMARY_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceTaxRatesSummaryFilter from \"./FinanceTaxRatesSummaryFilter\"\n\n\nfunction FinanceTaxRatesSummaryBase ({ t, history, children, refetch }) {\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"finance.title\")} subTitle={t('finance.taxrates_summary.title')}>\n            <div className=\"page-options d-flex\">\n              {/* Page header options here, if any */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  dateStart: new Date(dateStart),\n                  dateEnd: new Date(dateEnd)\n                }}\n                validationSchema={TAX_SUMMARY_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd),\n                  })\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceTaxRatesSummaryFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummaryBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY = gql`\n  query InsightFinanceTaxSummary($dateStart: Date!, $dateEnd: Date!) {\n    insightFinanceTaxRateSummary(dateStart:$dateStart, dateEnd: $dateEnd) {\n      dateStart\n      dateEnd\n      data {\n        financeTaxRate {\n          id\n          name\n          percentage\n          rateType        \n        }\n        subtotal\n        subtotalDisplay\n        tax\n        taxDisplay\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Dimmer,\n  Table, \n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceTaxRatesSummaryBase from \"./FinanceTaxRatesSummaryBase\"\nimport { GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction FinanceTaxRatesSummary({ t, location, history }) {\n  const cardTitle = t('finance.taxrates_summary.title')\n  const dateStart = moment().startOf('month')\n  const dateEnd   = moment().endOf('month')\n\n  // Set back location for edit invoice\n  // localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_TAX_SUMMARY_QUERY, {\n    variables: {\n      dateStart: dateToLocalISO(dateStart),\n      dateEnd: dateToLocalISO(dateEnd)\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n  // Error\n  if (error) return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('finance.taxrates_summary.error_loading')}</p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n\n  const taxRatesSummary = data.insightFinanceTaxRateSummary\n\n  // Empty list\n  if (!taxRatesSummary.data.length) { return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('finance.taxrates_summary.empty_list')}\n        </p>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )}\n\n  return (\n    <FinanceTaxRatesSummaryBase refetch={refetch}>\n      <ContentCard cardTitle={t('finance.taxrates_summary.title')}\n                  pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates.percentage')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.taxrates_summary.taxable_amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.tax')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {taxRatesSummary.data.map(({financeTaxRate, taxDisplay, subtotalDisplay }) => (\n              <Table.Row>\n                <Table.Col>{financeTaxRate.name}</Table.Col>\n                <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col>\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </FinanceTaxRatesSummaryBase>\n  )\n} \n\nexport default withTranslation()(withRouter(FinanceTaxRatesSummary))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass InsightHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Insight home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"insight.home.link_view\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"insight.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"insight.home.products.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightclasspasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.classpasses.title\")}</h5>\n                      {t(\"insight.classpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/classpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightsubscriptions\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.subscriptions.title\")}</h5>\n                      {t(\"insight.subscriptions.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/subscriptions\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insighttrialpasses\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.trialpasses.title\")}</h5>\n                      {t(\"insight.trialpasses.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/trialpasses\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"insight.home.finance.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightrevenue\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.revenue.title\")}</h5>\n                      {t(\"insight.revenue.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/revenue\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightfinanceinvoicesopenondate\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.invoicesopenondate.title\")}</h5>\n                      {t(\"insight.invoicesopenondate.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/invoices_open_on_date\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"insight.home.accounts.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightaccountsinactive\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.inactive_accounts.title\")}</h5>\n                      {t(\"insight.inactive_accounts.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/inactive_accounts\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightkeynumberswosubscription\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.keynumbers_wo_subscription.title\")}</h5>\n                      {t(\"insight.keynumbers_wo_subscription.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/keynumbers_wo_subscription\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n            <Grid.Row>\n             <Grid.Col md={12}>\n                <h4>{t(\"insight.home.schedule.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"insightinstructorclassesmonth\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"insight.instructor_classes_month.title\")}</h5>\n                      {t(\"insight.instructor_classes_month.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/insight/instructor_classes_month\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(InsightHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction InsightInactiveAccountsBase({\n  t, \n  history, \n  match, \n  children, \n  showAdd=false, \n  showBack=false, \n  returnUrl=\"/insight/inactive_accounts\"}) \n{\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} >\n            <div className='page-options d-flex'>\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"insightaccountinactive\">\n                  <ButtonAdd addUrl={`/insight/inactive_accounts/add`} />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n              {(showBack) ? <ButtonBack returnUrl={returnUrl} /> : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVES = gql`\n  query InsightAccountInactives {\n    insightAccountInactives(first: 100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          noActivityAfterDate \n          countInactiveAccounts\n          countDeletedInactiveAccounts\n          createdAt\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  query InsightAccountInactive($id: ID!) {\n    insightAccountInactive(id: $id) {\n      id\n      noActivityAfterDate\n      countInactiveAccounts\n      createdAt\n      accounts {\n        edges {\n          node {\n            account {\n              id\n              fullName\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation CreateInsightAccountInactive($input: CreateInsightAccountInactiveInput!) {\n    createInsightAccountInactive(input: $input) {\n      insightAccountInactive {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE = gql`\n  mutation deleteInsightAccountInactive($input: DeleteInsightAccountInactiveInput!) {\n    deleteInsightAccountInactive(input: $input){\n      ok\n    }\n  }\n`\n\nexport const DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS = gql`\n  mutation deleteInsightAccountInactiveAccounts($input: DeleteInsightAccountInactiveAccountsInput!) {\n    deleteInsightAccountInactiveAccounts(input: $input){\n      ok\n    }\n  } \n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase'\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, DELETE_INSIGHT_ACCOUNTS_INACTIVE } from \"./queries\"\n\n\nfunction InsightInactiveAccounts({t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const cardTitle = t(\"insight.inactive_accounts.title\")\n\n  const { loading, error, data, fetchMore } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVES)\n  const [deleteInsightAccountsInactive] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('insight.inactive_accounts.error_loading')}</p>\n      </ContentCard>\n      </InsightInactiveAccountsBase>\n  )\n\n  console.log(data)\n\n  const insightAccountInactives = data.insightAccountInactives\n  // Empty list\n  if (!insightAccountInactives.edges.length) { return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle} >\n        <p>{t(\"insight.inactive_accounts.empty_list\")}</p>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )}\n\n  return (\n    <InsightInactiveAccountsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={insightAccountInactives.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: insightAccountInactives.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.insightAccountInactives.edges\n            const pageInfo = fetchMoreResult.insightAccountInactives.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new payment_methods at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  insightAccountInactives: {\n                    __typename: previousResult.insightAccountInactives.__typename,\n                    edges: [ ...previousResult.insightAccountInactives.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('insight.inactive_accounts.created_at')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.inactive_accounts.no_activity_after_date')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader>{t('insight.inactive_accounts.count_deleted_inactive_accounts')}</Table.ColHeader>      \n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {insightAccountInactives.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateTimeFormatMoment)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.noActivityAfterDate).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.countInactiveAccounts}\n                </Table.Col>\n                <Table.Col>\n                  {node.countDeletedInactiveAccounts}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/insight/inactive_accounts/view/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('insight.inactive_accounts.btn_view_inactive_accounts')}\n                    </Button>\n                  </Link>\n                  <button className=\"icon btn btn-link btn-sm\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"insight.inactive_accounts.delete_confirm_msg\"),\n                        msgDescription: <p>{moment(node.created_at).format(dateTimeFormatMoment)} { \" - \" } \n                          {moment(node.noActivityAfterDate).format(dateFormat)}</p>,\n                        msgSuccess: t('insight.inactive_accounts.deleted'),\n                        deleteFunction: deleteInsightAccountsInactive,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_INSIGHT_ACCOUNTS_INACTIVES } \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightInactiveAccountsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccounts))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormSubmit from '../../ui/ButtonFormSubmit'\nimport ButtonFormCancel from '../../ui/ButtonFormCancel'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nconst InsightInactiveAccountsForm = ({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {console.log(values)}\n        <Form.Group label={t(\"insight.inactive_accounts.no_activity_after_date\")}>\n          <CSDatePicker \n            className={(errors.noActivityAfterDate) ? \"form-control is-invalid\" : \"form-control\"} \n            selected={values.noActivityAfterDate}\n            onChange={(date) => {\n              setFieldValue(\"noActivityAfterDate\", date)\n              setFieldTouched(\"noActivityAfterDate\", true)\n            }}\n            onBlur={() => setFieldTouched(\"noActivityAfterDate\", true)}\n          />\n          <ErrorMessage name=\"noActivityAfterDate\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n          <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVES, ADD_INSIGHT_ACCOUNTS_INACTIVE } from './queries'\n// import { PAYMENT_METHOD_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport InsightInactiveAccountsBase from './InsightInactiveAccountsBase';\nimport InsightInactiveAccountsForm from './InsightInactiveAccountsForm'\n\n\nfunction InsightInactiveAccountsAdd({ t, history }) {\n  const returnUrl = \"/insight/inactive_accounts\"\n  const [ addInsightAccountsInactive ] = useMutation(ADD_INSIGHT_ACCOUNTS_INACTIVE)\n\n  return (\n    <InsightInactiveAccountsBase showBack={true}>\n      <Card title={t('insight.inactive_accounts.title_add')}>\n        <Formik\n          initialValues={{ noActivityAfterDate: new Date(moment().subtract(1, \"year\")) }}\n          // validationSchema={PAYMENT_METHOD_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addInsightAccountsInactive({ variables: {\n                input: {\n                  noActivityAfterDate: dateToLocalISO(values.noActivityAfterDate), \n                }\n              }, refetchQueries: [\n                  {query: GET_INSIGHT_ACCOUNTS_INACTIVES}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('insight.inactive_accounts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <InsightInactiveAccountsForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </InsightInactiveAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_delete from \"../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonDelete({\n  t, \n  match, \n  history, \n  msgConfirm, \n  msgDescription, \n  msgSuccess, \n  deleteFunction, \n  deleteFunctionVariables, \n  className=\"\",\n  buttonClass=\"btn-link\",\n  buttonText=\"\",\n  buttonTextColor=\"text-red\"\n}) {\n  return (\n    <button className={`icon btn ${buttonClass} btn-sm ${className}`}\n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: <p>{msgConfirm}</p>,\n          msgDescription: msgDescription,\n          msgSuccess: msgSuccess,\n          deleteFunction: deleteFunction,\n          functionVariables: deleteFunctionVariables\n        })\n    }}>\n      <span className={buttonTextColor}>\n        <Icon prefix=\"fe\" name=\"trash-2\" /> {buttonText}\n      </span>\n    </button> \n  )\n}\n\n\nexport default withTranslation()(withRouter(ButtonDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Page,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\n\nfunction InsightInactiveAccountsViewBase({t, history, match, children, subTitle, pageHeaderButtonList}) {\n  const returnUrl = `/insight/inactive_accounts`\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.inactive_accounts.title\")} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">\n                <Link to={returnUrl} \n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')}\n                </Link>\n                {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsViewBase))","\nimport React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\"\n\nimport { GET_INSIGHT_ACCOUNTS_INACTIVE, DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS } from './queries'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ButtonDelete from '../../ui/ButtonDelete'\nimport InsightInactiveAccountsViewBase from './InsightInactiveAccountsViewBase'\n\n\nfunction InsightInactiveAccountsView({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n  const id = match.params.id\n\n  const { loading, error, data } = useQuery(GET_INSIGHT_ACCOUNTS_INACTIVE, {\n    variables: { id: id },\n    pollInterval: 5000\n  })\n  const [deleteAccounts] = useMutation(DELETE_INSIGHT_ACCOUNTS_INACTIVE_ACCOUNTS)\n\n  // Loading\n  if (loading) return (\n    <InsightInactiveAccountsViewBase>\n      <Card title={t(\"insight.inactive_accounts.card_title\")}>\n        <Card.Body>\n          <Dimmer active={true} loader={true}/>\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n  // Error\n  if (error) return (\n    <InsightInactiveAccountsViewBase>\n      <p>{t('insight.inactive_accounts.error_loading')}</p>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  const insightAccountInactive = data.insightAccountInactive\n  console.log(insightAccountInactive)\n  const cardTitle = t(\"insight.inactive_accounts.card_title\") + \" \" + moment(insightAccountInactive.noActivityAfterDate).format(dateFormat)\n  const subTitle = t(\"general.generated on\") + \" \" + moment(insightAccountInactive.createdAt).format(dateTimeFormatMoment)\n\n  const pageHeaderButtonList = <ButtonDelete\n    msgConfirm={t(\"insight.inactive_accounts.accounts.delete_confirm_msg\")}\n    msgDescription={<p><b>{insightAccountInactive.countInactiveAccounts} {t(\"insight.inactive_accounts.accounts.count_will_be_deleted\")}</b></p>} \n    msgSuccess={t(\"insight.inactive_accounts.accounts.deleted\")}\n    deleteFunction={deleteAccounts} \n    deleteFunctionVariables={{\n      variables: {input: {id: id}}\n    }}\n    buttonClass=\"btn-danger ml-2\"\n    buttonText=\"Delete accounts\" \n    buttonTextColor=\"text-white\"\n  />\n\n  if (!insightAccountInactive.accounts.edges.length) return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"insight.inactive_accounts.accounts.empty_list\")}\n        </Card.Body>\n      </Card>\n    </InsightInactiveAccountsViewBase>\n  )\n\n  return (\n    <InsightInactiveAccountsViewBase subTitle={subTitle} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col>\n          <Card title={cardTitle}>\n            <Card.Alert color=\"primary\">\n              {t(\"insight.inactive_accounts.explanation_when_inactive\")}\n            </Card.Alert>\n            <small>\n              <Table cards >\n                <Table.Header>\n                  <Table.Row>\n                    <Table.ColHeader>\n                      {t(\"general.name\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.email\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.last_login\")}\n                    </Table.ColHeader>\n                    <Table.ColHeader>\n                      {t(\"general.created_at\")}\n                    </Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {insightAccountInactive.accounts.edges.map(({ node }, index) => (\n                    <Table.Row>\n                      <Table.Col>\n                        {\n                          <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                            {node.account.fullName}\n                          </Link>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        {node.account.email}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.lastLogin).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                      <Table.Col>\n                        {moment(node.account.createdAt).format(dateTimeFormatMoment)}\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            </small>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '', executionDate: new Date() }}\n          // validationSchema={PAYMENT_BATCH_CATEGORY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            let input = {\n                batchType: batchType.toUpperCase(),\n                name: values.name, \n                executionDate: dateToLocalISO(values.executionDate),\n                description: values.description,\n                note: values.note,\n                includeZeroAmounts: values.includeZeroAmounts\n            }\n\n            if (categoryType == \"category\") {\n              input.year = values.year\n              input.month = values.month\n              input.financePaymentBatchCategory = values.financePaymentBatchCategory\n            }\n\n            addFinancePaymentBatch({ \n              variables: { input: input }, \n              refetchQueries: [\n                {query: GET_PAYMENT_BATCHES_QUERY, variables: get_list_query_variables(batchType)}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('finance.payment_batches.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n              <FinancePaymentCollectionBatchForm\n                inputValues={inputValues}\n                create={true}\n                invoices={invoices}\n                category={category}\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                values={values}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card> */}\n    </InsightInactiveAccountsViewBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInactiveAccountsView))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const OPEN_INVOICES_SCHEMA = Yup.object().shape({\n    date: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Grid\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\n\nfunction InsightFinanceInvoicesOpenOnDateFilter({ t, history, values, errors, data, isSubmitting, setFieldTouched=f=>f, setFieldValue=f=>f,  refetch }) {\n  console.log(errors)\n  return (\n    <FoForm>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date')}>\n            <CSDatePicker \n              className={(errors.date) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.date}\n              onChange={(date) => {\n                setFieldValue(\"date\", date)\n                setFieldTouched(\"date\", true)\n              }}\n              // onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"date\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <br />\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right mt-1\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('insight.invoicesopenondate.generate_report')}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightFinanceInvoicesOpenOnDateFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport { OPEN_INVOICES_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport SiteWrapper from '../../SiteWrapper'\nimport FinanceInvoicesOpenOnDateFilter from \"./InsightFinanceInvoicesOpenOnDateFilter\"\n\n\nfunction InsightFinanceInvoicesOpenOnDateBase ({ t, history, children, refetch=f=>f, setDate=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t('insight.invoicesopenondate.title')}>\n            <div className=\"page-options d-flex\">\n              {/* Page options here, if any */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Formik \n                initialValues={{\n                  date: new Date(),\n                }}\n                validationSchema={OPEN_INVOICES_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n                  refetch({\n                    date: dateToLocalISO(values.date),\n                  })\n                  setDate(values.date)\n                  setSubmitting(false)                  \n                }}\n              >\n                {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched, setFieldValue }) => (\n                <FinanceInvoicesOpenOnDateFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  handleChange={handleChange}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                />\n                )}\n              </Formik>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightFinanceInvoicesOpenOnDateBase))\n\n\n\n// <Formik\n// initialValues={{ \n//   relationCompany: initialData.financeInvoice.relationCompany, \n//   relationCompanyRegistration: initialData.financeInvoice.relationCompanyRegistration, \n//   relationCompanyTaxRegistration: initialData.financeInvoice.relationCompanyTaxRegistration, \n//   relationContactName: initialData.financeInvoice.relationContactName, \n//   relationAddress: initialData.financeInvoice.relationAddress, \n//   relationPostcode: initialData.financeInvoice.relationPostcode, \n//   relationCity: initialData.financeInvoice.relationCity, \n//   relationCountry: initialData.financeInvoice.relationCountry, \n// }}\n// // validationSchema={INVOICE_GROUP_SCHEMA}\n// onSubmit={(values, { setSubmitting, setTouched }) => {\n//   console.log('submit values:')\n//   console.log(values)\n\n//   updateInvoice({ variables: {\n//     input: {\n//       id: match.params.id,\n//       relationCompany: values.relationCompany,\n//       relationCompanyRegistration: values.relationCompanyRegistration,\n//       relationCompanyTaxRegistration: values.relationCompanyTaxRegistration,\n//       relationContactName: values.relationContactName,\n//       relationAddress: values.relationAddress,\n//       relationPostcode: values.relationPostcode,\n//       relationCity: values.relationCity,\n//       relationCountry: values.relationCountry\n//     }\n//   }, refetchQueries: [\n//       {query: GET_INVOICES_QUERY, variables: get_list_query_variables()}\n//   ]})\n//   .then(({ data }) => {\n//       console.log('got data', data)\n//       toast.success((t('finance.invoice.toast_edit_to_success')), {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       setSubmitting(false)\n//       setTouched({})\n//     }).catch((error) => {\n//       toast.error((t('general.toast_server_error')) +  error, {\n//           position: toast.POSITION.BOTTOM_RIGHT\n//         })\n//       console.log('there was an error sending the query', error)\n//       setSubmitting(false)\n//     })\n//   }}\n// >\n// {({ isSubmitting, errors, values, touched, handleChange, setFieldTouched }) => (\n//   <FinanceInvoiceEditToForm\n//     isSubmitting={isSubmitting}\n//     errors={errors}\n//     values={values}\n//     touched={touched}\n//     handleChange={handleChange}\n//     setFieldTouched={setFieldTouched}\n//   >\n//   </FinanceInvoiceEditToForm>\n// )}\n// </Formik>","import { gql } from \"@apollo/client\"\n\nexport const GET_INSIGHT_FINANCE_OPEN_INVOICES_QUERY = gql`\n  query InsightFinanceOpenInvoices($date: Date!) {\n    insightFinanceOpenInvoices(date:$date) {\n      date\n      totalOpenOnDate\n      totalOpenOnDateDisplay\n      financeInvoices {\n        id\n        invoiceNumber\n        status\n        dateSent\n        totalDisplay\n        paidDisplay\n        balanceDisplay\n        account {\n          id\n          fullName\n        }\n        business {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from \"moment\"\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table, \n} from \"tabler-react\";\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport FinanceInvoiceStatus from '../../ui/FinanceInvoiceStatus'\nimport InsightFinanceInvoicesOpenOnDateBase from \"./InsightFinanceInvoicesOpenOnDateBase\"\nimport { GET_INSIGHT_FINANCE_OPEN_INVOICES_QUERY } from \"./queries\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\n\nfunction InsightFinanceInvoicesOpenOnDate({ t, location, history }) {\n  const cardTitle = t('insight.invoicesopenondate.title')\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const [date, setDate] = useState(new Date())\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_BUSINESS_EDIT_RETURN, location.pathname)\n  // Fetch data\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_FINANCE_OPEN_INVOICES_QUERY, {\n    variables: {\n      date: dateToLocalISO(date),\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <InsightFinanceInvoicesOpenOnDateBase refetch={refetch} setDate={setDate}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </InsightFinanceInvoicesOpenOnDateBase>\n  )\n  // Error\n  if (error) return (\n    <InsightFinanceInvoicesOpenOnDateBase refetch={refetch} setDate={setDate}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('insight.invoicesopenondate.error_loading')}</p>\n      </ContentCard>\n    </InsightFinanceInvoicesOpenOnDateBase>\n  )\n\n  const openInvoices = data.insightFinanceOpenInvoices\n\n  console.log(openInvoices)\n\n  // Empty list\n  if (!openInvoices.financeInvoices.length) { return (\n    <InsightFinanceInvoicesOpenOnDateBase refetch={refetch} setDate={setDate}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n          {t('insight.invoicesopenondate.empty_list')}\n        </p>\n      </ContentCard>\n    </InsightFinanceInvoicesOpenOnDateBase>\n  )}\n\n  return (\n    <InsightFinanceInvoicesOpenOnDateBase refetch={refetch} setDate={setDate}>\n      <ContentCard cardTitle={cardTitle}\n                  // pageInfo={taxRatesSummary.pageInfo}\n                  hasCardBody={false}\n                  headerContent={\n                    <Card.Options>\n                      {t(\"general.total\")} {openInvoices.totalOpenOnDateDisplay}\n                    </Card.Options>\n                  }\n        >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.invoices.invoice_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.invoicesopenondate.invoice_date')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.invoicesopenondate.relation')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('insight.invoicesopenondate.amount_paid_on')} {moment(date).format(dateFormat)}</Table.ColHeader>\n              <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {openInvoices.financeInvoices.map((financeInvoice) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoiceStatus status={financeInvoice.status} /> <br />\n                  {/* Perhaps but the business relation in the \"relation\" column? */}\n                  {/* {(financeInvoice.business) && \n                    <Link to={\"/relations/b2b/\" + financeInvoice.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {financeInvoice.business.name}</small>\n                    </Link>} */}\n                </Table.Col>\n                <Table.Col>\n                  <Link to={`/finance/invoices/edit/${financeInvoice.id}`}>\n                    {financeInvoice.invoiceNumber}\n                  </Link>\n                </Table.Col>\n                <Table.Col>{moment(financeInvoice.dateSent).format(dateFormat)}</Table.Col>\n                <Table.Col key={v4()}>\n                  { financeInvoice.account && \n                    <Link to={\"/relations/accounts/\" + financeInvoice.account.id + \"/profile\"}>\n                      <Icon name=\"user\" /> {financeInvoice.account.fullName} <br />\n                    </Link> \n                  }\n                  { financeInvoice.business && \n                    <Link to={\"/relations/b2b/\" + financeInvoice.business.id + \"/edit\"}>\n                      <small><Icon name=\"home\" /> {financeInvoice.business.name}</small>\n                    </Link>\n                  }\n                </Table.Col>\n                <Table.Col>{ financeInvoice.totalDisplay }</Table.Col>\n                <Table.Col>{ financeInvoice.paidDisplay }</Table.Col>\n                <Table.Col>{ financeInvoice.balanceDisplay }</Table.Col>\n                {/* <Table.Col>{financeTaxRate.percentage} %</Table.Col>\n                <Table.Col>{subtotalDisplay}</Table.Col>\n                <Table.Col>{taxDisplay}</Table.Col> */}\n              </Table.Row>  \n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightFinanceInvoicesOpenOnDateBase>\n  )\n} \n\nexport default withTranslation()(withRouter(InsightFinanceInvoicesOpenOnDate))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_CLASSPASSES_QUERY = gql`\nquery InsightAccountClasspasses($year: Int!) {\n  insightAccountClasspasses(year: $year) {\n    year\n    months {\n      month\n      sold\n      active\n    }\n  }\n}\n`\n","\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n} from \"tabler-react\";\n\nconst InsightBackHome = ({ t }) => (\n  <div className=\"page-options d-flex\">\n    <Link to=\"/insight\" \n          className='btn btn-secondary'>\n        <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('insight.title')}\n    </Link>\n  </div>\n)\n\nexport default withTranslation()(InsightBackHome)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport moment from 'moment'\n\nimport {\n  Button,\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightClasspassesBase ({ t, history, children, year, refetch }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.classpasses\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n\n                    console.log(currentYear)\n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            {children}\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspassesBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { AreaChart, Area, XAxis, YAxis, Legend, Tooltip, ResponsiveContainer } from 'recharts'\n\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_CLASSPASSES_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightClasspassesBase from './InsightClasspassesBase'\n\nfunction InsightClasspasses ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR))\n  const export_url_active = \"/d/export/insight/classpasses/active/\" + year\n  const export_url_sold = \"/d/export/insight/classpasses/sold/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_CLASSPASSES_QUERY, {\n    variables: { year: year },\n  })\n\n  if (loading) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          <Dimmer active={true} loader={true} />\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightClasspassesBase year={year} refetch={refetch}>\n        <Card title={t('general.chart')}>\n          {t(\"general.error_sad_smiley\")}\n        </Card>\n      </InsightClasspassesBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountClasspasses.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <InsightClasspassesBase year={year} refetch={refetch}>\n        <Grid.Col md={9}>\n          <Card title={t('general.chart')}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <AreaChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"blue\"]} fillOpacity={0.4} fill={colors[\"blue\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"green\"]} fillOpacity={0.1} fill={colors[\"green\"]} />\n              </AreaChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export as sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.classpasses.sold.export_excel\")}\n          </Button>\n          {/* Export as active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.classpasses.active.export_excel\")}\n          </Button>\n        </Grid.Col>\n    </InsightClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightClasspasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_WO_KEYNUMBER_QUERY = gql`\nquery AccountSubscriptions($after: String, $before: String) {\n    accountSubscriptions(first: 25, before: $before, after: $after, account_KeyNumber_Isempty: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          account {\n            id\n            fullName\n            keyNumber            \n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nfunction InsightKeyNumbersWoSubscriptionBase ({ t, history, children }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.keynumbers_wo_subscription.title\")}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightKeyNumbersWoSubscriptionBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport {\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_WO_KEYNUMBER_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport InsightKeyNumbersWoSubscriptionBase from './InsightKeyNumbersWoSubscriptionBase'\n\n\nfunction InsightKeyNumbersWoSubscription ({ t, history }) {\n  const cardTitle = t(\"insight.keynumbers_wo_subscription.title\")\n\n  const { loading, error, data, fetchMore } = useQuery(\n    GET_ACCOUNT_SUBSCRIPTIONS_WO_KEYNUMBER_QUERY, {\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  if (loading) {\n    return (\n      <InsightKeyNumbersWoSubscriptionBase>\n        <Dimmer active={true} loader={true} />\n      </InsightKeyNumbersWoSubscriptionBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightKeyNumbersWoSubscriptionBase>\n        {t(\"general.error_sad_smiley\")}\n      </InsightKeyNumbersWoSubscriptionBase>\n    )\n  }\n\n  console.log(data)\n  let accountSubscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!accountSubscriptions.edges.length) {\n    return (\n      <InsightKeyNumbersWoSubscriptionBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t(\"insight.keynumbers_wo_subscription.empty_list\")}</p>\n          </Card.Body>\n        </Card>\n      </InsightKeyNumbersWoSubscriptionBase>\n    )\n  }\n\n\n  return (\n    <InsightKeyNumbersWoSubscriptionBase>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountSubscriptions.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationSubscription.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  {/* <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col> */}\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightKeyNumbersWoSubscriptionBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightKeyNumbersWoSubscription))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_REVENUE_QUERY = gql`\n  query InsightRevenueTotal($year: Int!) {\n    insightRevenueTotal(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueClasspasses(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueSubscriptions(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueEventTickets(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n    insightRevenueOther(year: $year) {\n      year\n      months {\n        month\n        total\n        totalDisplay\n        subtotal\n        tax\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Container,\n  Page\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, moment().format('YYYY')) \n} \n\nfunction InsightRevenueBase ({ t, history, children, year, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.revenue\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_REVENUE_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n            {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { getMonthNamesShort } from '../../../tools/date_tools'\n\n\nfunction InsightRevenueDisplay({ \n  t, \n  history, \n  error, \n  loading, \n  cardTitle,\n  data\n }) {\n\n  if (loading) {\n    return (\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <Card.Body>\n              <Dimmer loader={true} active={true} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n        </Grid.Col>\n      </Grid.Row>\n    )\n  }\n\n  if (error) {\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </Grid.Col>\n    </Grid.Row>\n  }\n\n\n\n  const monthNames = getMonthNamesShort(t)\n  // Add month name to data\n  const chartData = data.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n  return (\n    <Grid.Row>\n      <Grid.Col md={9}>\n        <Card title={cardTitle}>\n          <ResponsiveContainer width=\"100%\" aspect={2.6}>\n            <BarChart\n              width={500}\n              height={300}\n              data={chartData}\n              margin={{\n                top: 10,\n                right: 20,\n                left: 0,\n                bottom: 10,\n              }}\n            >\n              <XAxis dataKey=\"monthName\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Bar dataKey=\"total\" fill={colors['blue']} />\n              <Bar dataKey=\"subtotal\" stackId=\"a\" fill={colors['green']} />\n              <Bar dataKey=\"tax\" stackId=\"a\" fill={colors['orange']} />\n            </BarChart>\n          </ResponsiveContainer>\n          <Card.Footer>\n            {t(\"insight.revenue.total.explanation\")}\n          </Card.Footer>\n        </Card>\n      </Grid.Col>\n      <Grid.Col md={3}>\n        <Card title={t(\"general.data\")}>\n          <small>\n          <Table cards>\n            <Table.Body>\n              {data.months.map((item, index) => (\n                <Table.Row>\n                  <Table.Col className=\"cs-insight-data-table-cell\">\n                    {monthNames[index]}\n                  </Table.Col>\n                  <Table.Col className=\"cs-insight-data-table-cell text-right\">\n                    {item['totalDisplay']}\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </small>\n        </Card>\n        {/* Export as sold as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_sold\n          )}\n        >\n          {t(\"insight.classpasses.sold.export_excel\")}\n        </Button> */}\n        {/* Export as active as excel sheet */}\n        {/* <Button\n          block\n          color=\"secondary\"\n          RootComponent=\"a\"\n          icon=\"download-cloud\"\n          onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n            t, doTokenRefresh, history, export_url_active\n          )}\n        >\n          {t(\"insight.classpasses.active.export_excel\")}\n        </Button> */}\n      </Grid.Col>\n    </Grid.Row>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenueDisplay))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { GET_REVENUE_QUERY } from './queries'\nimport InsightRevenueBase from './InsightRevenueBase'\nimport InsightRevenueDisplay from './InsightRevenueDisplay'\n\nfunction InsightRevenue ({ t, history }) {\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_REVENUE_YEAR))\n\n  const { loading, error, data, refetch } = useQuery(GET_REVENUE_QUERY, {\n    variables: { year: year }\n  })\n\n  return (\n    <InsightRevenueBase year={year} refetch={refetch}>\n      {/* Total */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.total\")}\n        data={data && data.insightRevenueTotal}\n      />\n      {/* Subscriptions */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.subscriptions\")}\n        data={data && data.insightRevenueSubscriptions}\n      />\n      {/* Classpasses */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.classpasses\")}\n        data={data && data.insightRevenueClasspasses}\n      />\n      {/* Event tickets */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.event_tickets\")}\n        data={data && data.insightRevenueEventTickets}\n      />\n      {/* Other */}\n      <InsightRevenueDisplay\n        loading={loading}\n        error={error}\n        cardTitle={t(\"general.other\")}\n        data={data && data.insightRevenueOther}\n      />\n    </InsightRevenueBase> \n  )\n}\n\nexport default withTranslation()(withRouter(InsightRevenue))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const INSIGHT_INSTRUCTOR_CLASSES_SCHEMA = Yup.object().shape({\n    year: Yup.number()\n      .required(t('yup.field_required')),\n    month: Yup.number()\n      .required(t('yup.field_required')),\n    instructor: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","import { gql } from \"@apollo/client\"\n\nexport const GET_INSTRUCTORS_QUERY = gql`\nquery Instructors {\n    instructors(first: 1000) {\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n}\n`\n\nexport const GET_INSTRUCTORS_CLASSES_MONTH_CLASSES = gql`\nquery InsightInstructorClassesMonth($year:Int!, $month:Int!, $instructor: ID!) {\n  insightInstructorClassesMonth(year: $year, month:$month, instructor: $instructor) {\n    year\n    month\n    instructor\n    classes {\n      scheduleItemId,\n      frequencyType,\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      date\n    \ttimeStart\n      status\n      description\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Page\n} from \"tabler-react\"\n\nimport SiteWrapper from '../../SiteWrapper'\nimport InsightBackHome from '../InsightBackHome'\n\n\nfunction InsightInstructorClassesMonthBase({t, history, children}) {\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n            </div>\n          </Page.Header>\n          {children}\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonthBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst InsightInstructorClassesForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.year')}>\n              <Field type=\"number\" \n                      name=\"year\" \n                      className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.month')}>\n              <Field component=\"select\" \n                    name=\"month\" \n                    className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\"\n              >\n                <option value=\"1\" key={v4()}>{t(\"datetime.months.january\")}</option>\n                <option value=\"2\" key={v4()}>{t(\"datetime.months.february\")}</option>\n                <option value=\"3\" key={v4()}>{t(\"datetime.months.march\")}</option>\n                <option value=\"4\" key={v4()}>{t(\"datetime.months.april\")}</option>\n                <option value=\"5\" key={v4()}>{t(\"datetime.months.may\")}</option>\n                <option value=\"6\" key={v4()}>{t(\"datetime.months.june\")}</option>\n                <option value=\"7\" key={v4()}>{t(\"datetime.months.july\")}</option>\n                <option value=\"8\" key={v4()}>{t(\"datetime.months.august\")}</option>\n                <option value=\"9\" key={v4()}>{t(\"datetime.months.september\")}</option>\n                <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n                <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n                <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n              </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                    name=\"instructor\" \n                    className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.instructors.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n            >\n              {t('insight.instructor_classes_month.find_classes')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(InsightInstructorClassesForm))","import React, { useContext } from 'react'\nimport { useQuery, useLazyQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { represent_class_status } from '../../schedule/classes/tools'\n\nimport { INSIGHT_INSTRUCTOR_CLASSES_SCHEMA } from './yupSchema'\nimport { GET_INSTRUCTORS_QUERY, GET_INSTRUCTORS_CLASSES_MONTH_CLASSES } from './queries'\nimport InsightInstructorClassesMonthBase from './InsightInstructorClassesMonthBase'\nimport InsightInstructorClassesForm from './InsightInstructorClassesForm';\n\n\nfunction InsightInstructorClassesMonth({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  // const [prepared, setPrepared] = useState(false)\n  const cardTitle = t(\"insight.instructor_classes_month.title\")\n\n  const { loading, error, data } = useQuery(GET_INSTRUCTORS_QUERY)\n  const [ getInstructoClassesInMonth, { \n    called: calledReport, \n    loading: loadingReport, \n    error: errorReport, \n    data: dataReport, \n  } ] = useLazyQuery( GET_INSTRUCTORS_CLASSES_MONTH_CLASSES )\n\n  if (loading) {\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  if (error || errorReport) {\n    console.error(error)\n    return (\n      <InsightInstructorClassesMonthBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightInstructorClassesMonthBase>\n    )\n  }\n\n  return (\n    <InsightInstructorClassesMonthBase>\n      <Card title={cardTitle}>\n        <Formik\n        initialValues={{ \n          year: moment().year(),\n          month: moment().month()+1,\n          instructor: \"\"\n        }}\n        validationSchema={INSIGHT_INSTRUCTOR_CLASSES_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            // execute lazy query to fetch classes for instructor\n            getInstructoClassesInMonth({\n              variables: { \n                year: parseInt(values.year),\n                month: parseInt(values.month),\n                instructor: values.instructor\n              }\n            })\n\n            setSubmitting(false)\n            // setPrepared(true)  \n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n          <InsightInstructorClassesForm\n            inputData={data}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n          )\n        }\n      </Formik>\n    </Card>\n\n    {/* Show loader */}\n    {(calledReport && loadingReport) ? <Card>\n      <Card.Body>\n        <Dimmer active={true} loader={true} /><br />\n        <div className=\"text-center\">\n          Loading...\n        </div>\n      </Card.Body>\n      </Card> : \"\"}\n    {/* Prepared & loaded lazy query */}\n    {(calledReport && dataReport) ? \n    // List instructor classes in this card\n      <Card title={t(\"\")}>\n        {console.log(dataReport)}\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {dataReport.insightInstructorClassesMonth.classes.map(({ \n              description,\n              date,\n              timeStart,\n              organizationClasstype,\n              organizationLocationRoom,\n              status\n             }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {represent_class_status(status)} {\" \"}\n                  {moment(date).format(dateFormat)} - {moment(`${date} ${timeStart}`).format(timeFormat)} <br />\n                  <small className=\"text-muted\">\n                    {description}\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {organizationClasstype.name}\n                </Table.Col>\n                <Table.Col>\n                  {organizationLocationRoom.organizationLocation.name} - {organizationLocationRoom.name}\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </Card>\n      : \"\"}\n    </InsightInstructorClassesMonthBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightInstructorClassesMonth))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INSIGHT_SUBSCRIPTIONS_QUERY = gql`\n  query InsightAccountSubscriptions($year: Int!) {\n    insightAccountSubscriptions(year: $year) {\n      year\n      months {\n        month\n        sold\n        stopped\n        active\n        paused\n        blocked\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Button,\n  Page,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\n\nfunction InsightSubscriptionsBase ({ t, history, children, year, refetch=f=>f}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"general.subscriptions\") + \" \" + year}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              <Button.List className=\"ml-4 schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, previousYear) \n\n                    refetch({year: previousYear})\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = parseInt(moment().format('YYYY'))\n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, currentYear) \n                    \n                    refetch({year: currentYear})\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, nextYear) \n\n                    refetch({year: nextYear})\n                }} />\n              </Button.List> \n            </div>\n          </Page.Header>\n          {children}\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptionsBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { CartesianGrid, XAxis, YAxis, Legend, LineChart, Line, Tooltip, ResponsiveContainer } from 'recharts'\nimport moment from 'moment'\nimport {\n  colors,\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { getMonthNamesShort } from '../../../tools/date_tools'\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../tools/refresh_token_and_open_export_link\"\nimport { GET_INSIGHT_SUBSCRIPTIONS_QUERY } from './queries'\nimport { TOKEN_REFRESH } from \"../../../queries/system/auth\"\nimport InsightSubscriptionsBase from './InsightSubscriptionsBase'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR, moment().format('YYYY')) \n} \n\n\nfunction InsightSubscriptions ({ t, history }) {\n  const cardTitle = t('general.chart')\n  const year = parseInt(localStorage.getItem(CSLS.INSIGHT_SUBSCRIPTIONS_YEAR))\n  const export_url_active = \"/d/export/insight/subscriptions/active/\" + year\n  const export_url_sold = \"/d/export/insight/subscriptions/sold/\" + year\n  const export_url_stopped = \"/d/export/insight/subscriptions/stopped/\" + year\n  const export_url_paused = \"/d/export/insight/subscriptions/paused/\" + year\n  const export_url_blocked = \"/d/export/insight/subscriptions/blocked/\" + year\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  console.log(year)\n\n\n  const { loading, error, data, refetch } = useQuery(GET_INSIGHT_SUBSCRIPTIONS_QUERY, {\n    variables: { year: year }\n  })\n\n  if (loading) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightSubscriptionsBase year={year} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.error_sad_smiley\")}\n          </Card.Body>\n        </Card>\n      </InsightSubscriptionsBase>\n    )\n  }\n\n  const monthNames = getMonthNamesShort(t)\n\n  // Add month name to data\n  const chartData = data.insightAccountSubscriptions.months.map((item, index) => (\n    { ...item, monthName: monthNames[index] }\n  ))\n\n\n  return (\n    <InsightSubscriptionsBase year={year} refetch={refetch}>\n      <Grid.Row>\n        <Grid.Col md={9}>\n          <Card title={cardTitle}>\n            <ResponsiveContainer width=\"100%\" aspect={2.5}>\n              <LineChart\n                width={500}\n                height={300}\n                data={chartData}\n                margin={{\n                  top: 20,\n                  right: 20,\n                  left: 0,\n                  bottom: 20,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"monthName\"/>\n                <YAxis width={40} />\n                <Tooltip />\n                <Legend />\n                {/* <Area type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} fillOpacity={0.4} fill={colors[\"green\"]} />\n                <Area type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} fillOpacity={0.4} fill={colors[\"red\"]} />\n                <Area type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} fillOpacity={0.1} fill={colors[\"blue\"]} /> */}\n                <Line type=\"monotone\" dataKey=\"sold\" stroke={colors[\"green\"]} />\n                <Line type=\"monotone\" dataKey=\"stopped\" stroke={colors[\"red\"]} />\n                <Line type=\"monotone\" dataKey=\"active\" stroke={colors[\"blue\"]} />\n                <Line type=\"monotone\" dataKey=\"paused\" stroke={colors[\"orange\"]} />\n                <Line type=\"monotone\" dataKey=\"blocked\" stroke={colors[\"purple\"]} />\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid.Col>\n        <Grid.Col md={3}>\n          {/* Export sold as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_sold\n            )}\n          >\n            {t(\"insight.subscriptions.sold.export_excel\")}\n          </Button>\n          {/* Export active as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_active\n            )}\n          >\n            {t(\"insight.subscriptions.active.export_excel\")}\n          </Button>\n          {/* Export stopped as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_stopped\n            )}\n          >\n            {t(\"insight.subscriptions.stopped.export_excel\")}\n          </Button>\n          {/* Export paused as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_paused\n            )}\n          >\n            {t(\"insight.subscriptions.paused.export_excel\")}\n          </Button>\n          {/* Export blocked as excel sheet */}\n          <Button\n            block\n            color=\"secondary\"\n            RootComponent=\"a\"\n            icon=\"download-cloud\"\n            onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n              t, doTokenRefresh, history, export_url_blocked\n            )}\n          >\n            {t(\"insight.subscriptions.blocked.export_excel\")}\n          </Button>\n        </Grid.Col>\n      </Grid.Row>\n    </InsightSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_TRIALPASSES_QUERY = gql`\n  query AccountClasspasses($dateStartFrom: Date!, $dateStartUntil: Date!) {\n    accountClasspasses(first:100, organizationClasspass_TrialPass: true, dateStart_Gte: $dateStartFrom, dateStart_Lte:$dateStartUntil), {\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          account {\n            id\n            fullName\n            classpasses(organizationClasspass_TrialPass: false) {\n              edges {\n                node {\n                  id\n                  dateStart\n                  organizationClasspass{\n                    name\n                  }\n                }\n              }\n            }\n            subscriptions {\n              edges {\n                node {\n                  dateStart\n                  organizationSubscription {\n                    name\n                  }\n                }\n              }\n            }\n          }\n          organizationClasspass {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nfunction InsightTrialpassesFilter({ t, history, values, errors, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card>\n        <Card.Body>\n          <Form.Group label={t('general.year')}>\n            <Field type=\"number\" \n                    name=\"year\" \n                    className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.month')}>\n            <Field component=\"select\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\"\n                  // onChange={(e) => {\n                  //   handleChange(e)\n                  //   setFieldTouched(\"financeTaxRate\", true, true)\n                  // }}\n            >\n              <option value=\"01\" key={v4()}>{t(\"datetime.months.january\")}</option>\n              <option value=\"02\" key={v4()}>{t(\"datetime.months.february\")}</option>\n              <option value=\"03\" key={v4()}>{t(\"datetime.months.march\")}</option>\n              <option value=\"04\" key={v4()}>{t(\"datetime.months.april\")}</option>\n              <option value=\"05\" key={v4()}>{t(\"datetime.months.may\")}</option>\n              <option value=\"06\" key={v4()}>{t(\"datetime.months.june\")}</option>\n              <option value=\"07\" key={v4()}>{t(\"datetime.months.july\")}</option>\n              <option value=\"08\" key={v4()}>{t(\"datetime.months.august\")}</option>\n              <option value=\"09\" key={v4()}>{t(\"datetime.months.september\")}</option>\n              <option value=\"10\" key={v4()}>{t(\"datetime.months.october\")}</option>\n              <option value=\"11\" key={v4()}>{t(\"datetime.months.november\")}</option>\n              <option value=\"12\" key={v4()}>{t(\"datetime.months.december\")}</option>\n            </Field>\n              <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n          <Button \n            block\n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('insight.trialpasses.set_month')}\n          </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesFilter))","import CSLS from \"../../../tools/cs_local_storage\"\nimport { dateToLocalISO, getFirstDayMonth, getLastDayMonth } from '../../../tools/date_tools'\n\nexport function getListQueryVariables() {\n  let dateStartFrom = dateToLocalISO(getFirstDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n  let dateStartUntil = dateToLocalISO(getLastDayMonth(\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n    localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  ))\n\n  return {\n    dateStartFrom: dateStartFrom,\n    dateStartUntil: dateStartUntil\n  }\n}","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport InsightBackHome from '../InsightBackHome'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesFilter from './InsightTrialpassesFilter';\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\n// if (!localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) {\n//   console.log('year from not found... defaulting to today...')\n//   localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, moment().format('YYYY')) \n// } \n\nfunction InsightTrialpassesBase ({ t, history, children, year, month, refetch=f=>f }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"insight.title\")} subTitle={t(\"insight.trialpasses.title\") + \" \" + year + \"-\" + month}>\n            <div className=\"page-options d-flex\">\n              <InsightBackHome />\n              {/* <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let previousYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) - 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, previousYear) \n\n                    refetchData(previousYear)\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentYear = moment().format('YYYY')\n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, currentYear) \n                    \n                    refetchData(currentYear)\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextYear = parseInt(localStorage.getItem(CSLS.INSIGHT_CLASSPASSES_YEAR)) + 1                    \n                    localStorage.setItem(CSLS.INSIGHT_CLASSPASSES_YEAR, nextYear) \n\n                    refetchData(nextYear)\n                }} />\n              </Button.List>  */}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n            <Formik \n                initialValues={{\n                  year: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR),\n                  month: localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                  console.log(\"hello world\")\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, values.year)\n                  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, values.month)\n\n                  const listVariables = getListQueryVariables()\n                  refetch(listVariables)\n                  setSubmitting(false)\n                  \n                }}\n              >\n                {({ isSubmitting, errors, values }) => (\n                <InsightTrialpassesFilter \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                  values={values}\n                />\n                )}\n              </Formik>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>  \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpassesBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Card,\n  Icon,\n  List,\n  Table\n} from \"tabler-react\";\n\nimport { GET_TRIALPASSES_QUERY } from './queries'\nimport ContentCard from '../../general/ContentCard'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InsightTrialpassesBase from './InsightTrialpassesBase'\nimport { getListQueryVariables } from './tools'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)) {\n  console.log('year from not found... defaulting to today...')\n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_YEAR, moment().format('YYYY')) \n  localStorage.setItem(CSLS.INSIGHT_TRIALPASSES_MONTH, moment().format('MM')) \n} \n\nfunction InsightTrialpasses ({ t, history }) {\n  const year = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_YEAR)\n  const month = localStorage.getItem(CSLS.INSIGHT_TRIALPASSES_MONTH)\n  const cardTitle = t(\"insight.trialpasses.title\")\n\n  const listVariables = getListQueryVariables()\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_TRIALPASSES_QUERY, {\n    variables: listVariables\n  })\n\n  if (loading) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.loading_with_dots\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        {t(\"general.error_sad_smiley\")}\n      </InsightTrialpassesBase>\n    )\n  }\n\n  console.log(data)\n  let accountClasspasses = data.accountClasspasses\n\n  // Empty list\n  if (!accountClasspasses.edges.length) {\n    return (\n      <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t(\"insight.trialpasses.empty_list\")}</p>\n          </Card.Body>\n        </Card>\n      </InsightTrialpassesBase>\n    )\n  }\n\n\n  return (\n    <InsightTrialpassesBase year={year} month={month} refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}\n          // headerContent={headerOptions}\n          hasCardBody={false}\n          pageInfo={accountClasspasses.pageInfo}\n          onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new glaccounts at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row>\n                  <Table.Col>\n                    {node.organizationClasspass.name} <br />\n                    <small className='text-muted'>\n                      {node.dateStart}\n                    </small>\n                  </Table.Col>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.account.id}/profile/`}>\n                      {node.account.fullName}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col>\n                    <List unstyled>\n                      {node.account.classpasses.edges && node.account.classpasses.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"credit-card\" /> { \" \" }\n                          {node.organizationClasspass.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                    <List unstyled>\n                      {node.account.subscriptions.edges && node.account.subscriptions.edges.map(({ node }) => (\n                        <List.Item>\n                          <Icon name=\"edit\" /> { \" \" }\n                          {node.organizationSubscription.name} <br />\n                          <small className='text-muted'>\n                            {node.dateStart}\n                          </small>\n                        </List.Item>\n                      ))}\n                    </List>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </InsightTrialpassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(InsightTrialpasses))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\n\nclass OrganizationHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"organization.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.products.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classpasses.title\")}</h5>\n                    {t(\"organization.classpasses.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classpasses\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.subscriptions.title\")}</h5>\n                    {t(\"organization.subscriptions.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/subscriptions\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationproduct\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.products.title\")}</h5>\n                      {t(\"organization.products.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/products\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              {/* <Grid.Col md={3} lg={3}>\n                <Link to='/organization/appointment_categories'>\n                  <StampCard header={<small>{t('organization.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                </Link>\n              </Grid.Col> */}\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.scheduling.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.locations.title\")}</h5>\n                    {t(\"organization.locations.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/locations\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.classtypes.title\")}</h5>\n                    {t(\"organization.classtypes.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/classtypes\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.levels.title\")}</h5>\n                    {t(\"organization.levels.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/levels\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.shifts.title\")}</h5>\n                    {t(\"organization.shifts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/shifts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.holidays.title\")}</h5>\n                    {t(\"organization.holidays.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/holidays\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.accounts.title\")}</h4>\n              </Grid.Col>\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"organizationannouncement\">\n\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"organization.announcements.title\")}</h5>\n                      {t(\"organization.announcements.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/organization/announcements\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.discoveries.title\")}</h5>\n                    {t(\"organization.discoveries.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/discoveries\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.languages.title\")}</h5>\n                    {t(\"organization.languages.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/languages\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t(\"organization.home.about.title\")}</h4>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.title\")}</h5>\n                    {t(\"organization.organization.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.documents.title\")}</h5>\n                    {t(\"organization.documents.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/documents/T3JnYW5pemF0aW9uTm9kZToxMDA=\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"organization.organization.branding.title\")}</h5>\n                    {t(\"organization.organization.branding.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/organization/edit/T3JnYW5pemF0aW9uTm9kZToxMDA=/branding\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(OrganizationHome))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ORGANIZATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .required(t('yup.field_required')),\n    address: Yup.string(),\n    phone: Yup.string(),\n    email: Yup.string()\n      .email(t('yup.email')),\n    registration: Yup.string(),\n    taxRegistration: Yup.string(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nconst OrganizationForm = ({ \n  t, \n  history, \n  isSubmitting, \n  errors, \n  values, \n  setFieldTouched, \n  setFieldValue,\n}) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('general.name')}>\n          <Field type=\"text\" \n                  name=\"name\" \n                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.address')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"address\"\n            initialValue={values.address}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"address\", e.target.getContent())\n              setFieldTouched(\"address\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('organization.organization.tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n          {t('general.submit')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nfunction OrganizationEditBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('organization.organization.title_edit')}</Card.Title>\n              </Card.Header>\n              {children}\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY } from './queries'\nimport { ORGANIZATION_SCHEMA } from './yupSchema'\nimport OrganizationForm from './OrganizationForm'\nimport OrganizationEditBase from \"./OrganizationEditBase\"\n\nconst UPDATE_ORGANIZATION = gql`\n  mutation UpdateOrganization($input: UpdateOrganizationInput!) {\n    updateOrganization(input: $input) {\n      organization {\n        id\n        name\n      }\n    }\n  }\n`\n\n\nfunction OrganizationEdit({t, match, history}) {\n  const id = match.params.id\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n\n  if (loading) return (\n    <OrganizationEditBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationEditBase>\n  )\n  if (error) return (\n    <OrganizationEditBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationEditBase>\n  )\n\n  const initialData = data.organization\n\n  return (\n \n    <OrganizationEditBase>\n      <Formik\n        initialValues={{ \n          name: initialData.name, \n          address: initialData.address,\n          phone: initialData.phone,\n          email: initialData.email,\n          registration: initialData.registration,\n          taxRegistration: initialData.taxRegistration,\n        }}\n        validationSchema={ORGANIZATION_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log('submit values:')\n          console.log(values)\n\n          updateOrganization({ variables: {\n            input: {\n              id: match.params.id,\n              name: values.name,\n              address: values.address,\n              phone: values.phone,\n              email: values.email,\n              registration: values.registration,\n              taxRegistration: values.taxRegistration,\n            }\n          }})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('organization.organization.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n          }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <OrganizationForm \n            isSubmitting={isSubmitting}\n            values={values}\n            errors={errors}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n          />\n        )}\n      </Formik>\n    </OrganizationEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\n\nfunction OrganizationBrandingBase({t, match, history, children}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h3>{t('organization.organization.branding.title')}</h3>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Card,\n    Form,\n    Grid,\n    Icon,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nfunction OrganizationBrandingEditColorsForm({ t, history, errors, formTitle, isSubmitting }) {\n  return (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Card.Alert color=\"info\">\n            <Icon name=\"info\" /> {t(\"organization.branding.colors_explanation\")}\n          </Card.Alert>\n        </Card.Body>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_background')}>\n                <Field type=\"color\" \n                      name=\"colorBackground\" \n                      className={(errors.colorBackground) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorBackground\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_text')}>\n                <Field type=\"color\" \n                      name=\"colorText\" \n                      className={(errors.colorText) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorText\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Form.Group label={t('organization.branding.color_accent')}>\n                <Field type=\"color\" \n                      name=\"colorAccent\" \n                      className={(errors.colorAccent) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorAccent\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col md={3}>   \n              <Form.Group label={t('organization.branding.color_secondary')}>\n                <Field type=\"color\" \n                      name=\"colorSecondary\" \n                      className={(errors.colorSecondary) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"colorSecondary\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <ButtonFormSubmit disabled={isSubmitting} />\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditColorsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Button,\n  GalleryCard,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditColorsForm from \"./OrganizationBrandingEditColorsForm\"\n\n\nfunction OrganizationBranding({t, match, history}) {\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {\n      id: id\n  }})\n  const [ updateOrganization ] = useMutation(UPDATE_ORGANIZATION)\n\n  if (loading) return (\n    <OrganizationBrandingBase>\n      {t(\"general.loading_with_dots\")}\n    </OrganizationBrandingBase>\n  )\n  if (error) return (\n    <OrganizationBrandingBase>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </OrganizationBrandingBase>\n  )\n\n  const organization = data.organization\n\n  return (\n \n    <OrganizationBrandingBase>\n        <Grid.Row>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_login')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoLogin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoLogin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_invoice')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoInvoice}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoInvoice`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_email')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoEmail}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoEmail`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_shop_header')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoShopHeader}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoShopHeader`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n          <Grid.Col md={4}>\n            <GalleryCard>\n              <h5>{t('organization.branding.logo_self_checkin')}</h5>\n              <GalleryCard.Image\n                src={organization.urlLogoSelfCheckin}\n              >\n              </GalleryCard.Image>\n              <GalleryCard.Details>\n                <Link to={`/organization/edit/${id}/branding/logoSelfCheckin`}>\n                  <Button block color=\"secondary\">\n                    {t(\"organization.branding.link_change\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </GalleryCard.Details>\n            </GalleryCard>\n          </Grid.Col>\n        </Grid.Row>\n        {/* Colors */}\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <h3>{t('organization.branding.title_colors')}</h3>\n            <Formik\n              initialValues={{ \n                colorBackground: organization.brandingColorBackground, \n                colorText: organization.brandingColorText, \n                colorAccent: organization.brandingColorAccent, \n                colorSecondary: organization.brandingColorSecondary, \n              }}\n              // validationSchema={LEVEL_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                  updateOrganization({ variables: {\n                    input: {\n                      id: id,\n                      brandingColorBackground: values.colorBackground,\n                      brandingColorText: values.colorText,\n                      brandingColorAccent: values.colorAccent,\n                      brandingColorSecondary: values.colorSecondary,\n                    }\n                  }, refetchQueries: [\n                      {query: GET_ORGANIZATION_QUERY, variables: {id: id }}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data);\n                      setSubmitting(false)\n                      toast.success((t('organization.branding.toast_save_colors_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                      setSubmitting(false)\n                    })\n              }}\n              >\n              {({ isSubmitting, errors }) => (\n                <OrganizationBrandingEditColorsForm \n                  isSubmitting={isSubmitting}\n                  errors={errors}\n                />\n              )}\n            </Formik>\n          </Grid.Col>\n        </Grid.Row>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBranding))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm } from 'formik'\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\n\nconst OrganizationBrandingEditForm = ({ \n  t, \n  history, \n  formTitle,\n  isSubmitting, \n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n}) => (\n    <FoForm>\n      <Card title={formTitle}>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.custom_file_input_label')}>\n                <div className=\"custom-file\">\n                  <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                  <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                    {fileInputLabel}\n                  </label>\n                </div>\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationBrandingEditForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ORGANIZATION_QUERY, UPDATE_ORGANIZATION } from '../queries'\nimport OrganizationBrandingBase from \"./OrganizationBrandingBase\"\nimport OrganizationBrandingEditForm from \"./OrganizationBrandingEditForm\"\n\n\nfunction OrganizationBrandingEdit({t, match, history}) {\n  const id = match.params.id\n  const updateField = match.params.update_field\n  const returnUrl = `/organization/edit/${id}/branding`\n\n  let formTitle = \"\"\n  switch (updateField) {\n    case \"logoLogin\":\n      formTitle = t(\"organization.branding.logo_login\")\n      break\n    default:\n      break\n  }\n\n\n  const [updateOrganization] = useMutation(UPDATE_ORGANIZATION)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  return (\n \n    <OrganizationBrandingBase>\n      <Formik\n        initialValues={{}}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: id\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            switch(updateField) {\n              case \"logoLogin\":\n                inputVars.logoLoginFileName = fileName\n                inputVars.logoLogin = b64_enc_file\n                break\n              case \"logoInvoice\":\n                inputVars.logoInvoiceFileName = fileName\n                inputVars.logoInvoice = b64_enc_file\n                break\n              case \"logoEmail\":\n                inputVars.logoEmailFileName = fileName\n                inputVars.logoEmail = b64_enc_file\n                break\n              case \"logoShopHeader\":\n                inputVars.logoShopHeaderFileName = fileName\n                inputVars.logoShopHeader = b64_enc_file\n                break\n              case \"logoSelfCheckin\":\n                inputVars.logoSelfCheckinFileName = fileName\n                inputVars.logoSelfCheckin = b64_enc_file\n                break\n              default:\n                break              \n            }\n            \n            updateOrganization({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_ORGANIZATION_QUERY, variables: {id: id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                setSubmitting(false)\n                history.push(returnUrl)\n                toast.success((t('organization.branding.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <OrganizationBrandingEditForm \n            isSubmitting={isSubmitting}\n            formTitle={formTitle}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n          />\n        )}\n      </Formik>\n    </OrganizationBrandingBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationBrandingEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationAnnouncementsBase({t, history, children, showEditBack=false}) {\n  return (\n    <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"organization.title\")} >\n          <div className='page-options d-flex'>\n            {(showEditBack) ?\n              <ButtonBack returnUrl=\"/organization/announcements\" />\n            :\n              <HasPermissionWrapper permission=\"add\"\n                          resource=\"organizationlevel\">\n                <ButtonAdd addUrl=\"/organization/announcements/add\" />\n              </HasPermissionWrapper>\n            }\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          displayBackend\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ANNOUNCEMENT_QUERY = gql`\n  query OrganizationAnnouncement($id: ID!) {\n    organizationAnnouncement(id:$id) {\n      id\n      displayPublic\n      displayShop\n      displayBackend\n      title\n      content\n      dateStart\n      dateEnd\n      priority\n    }\n  }\n`\n\nexport const ADD_ANNOUNCEMENT = gql`\n  mutation CreateOrganizationAnnouncement($input:CreateOrganizationAnnouncementInput!) {\n    createOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ANNOUNCEMENT = gql`\n  mutation UpdateOrganizationAnnouncement($input: UpdateOrganizationAnnouncementInput!) {\n    updateOrganizationAnnouncement(input: $input) {\n      organizationAnnouncement {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ANNOUNCEMENT = gql`\nmutation DeleteOrganizationAnnouncement($input: DeleteOrganizationAnnouncementInput!) {\n  deleteOrganizationAnnouncement(input: $input) {\n    ok\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Button,\n  Icon,\n  Table\n} from \"tabler-react\"\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ContentCard from \"../../general/ContentCard\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\n\nimport { GET_ANNOUNCEMENTS_QUERY, DELETE_ANNOUNCEMENT } from \"./queries\"\n\nfunction OrganizationAnnouncements({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ANNOUNCEMENTS_QUERY)\n  const [ deleteAnnouncement ] = useMutation(DELETE_ANNOUNCEMENT)\n\n  const cardTitle = t('organization.announcements.title')\n\n  // Loading\n  if (loading) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.error_loading')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncements = data.organizationAnnouncements\n\n  // Empty list\n  if (!organizationAnnouncements.edges.length) { return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.announcements.empty_list')}</p>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )}\n\n  return (\n    <OrganizationAnnouncementsBase>\n      <ContentCard cardTitle={cardTitle}\n                    pageInfo={organizationAnnouncements.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: organizationAnnouncements.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationAnnouncements.edges\n                        const pageInfo = fetchMoreResult.organizationAnnouncements.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new organizationAnnouncements at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationAnnouncements: {\n                                __typename: previousResult.organizationAnnouncements.__typename,\n                                edges: [ ...previousResult.organizationAnnouncements.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.title')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.display_public')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.backend')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.priority')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                  {organizationAnnouncements.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col key={v4()}>\n                        {node.title}\n                      </Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayPublic} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayShop} /></Table.Col>\n                      <Table.Col><BadgeBoolean value={node.displayBackend} /></Table.Col>\n                      <Table.Col>{moment(node.dateStart).format(dateFormat)}</Table.Col>\n                      <Table.Col>{(node.dateEnd) ? moment(node.dateEnd).format(dateFormat): \"\"}</Table.Col>\n                      <Table.Col>{node.priority}</Table.Col>\n                      <Table.Col className=\"text-right\" key={v4()}>\n                        <Link to={`/organization/announcements/edit/${node.id}`}>\n                          <Button className='btn-sm' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                        <button \n                          className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"organization.announcements.delete_confirm_msg\"),\n                              msgDescription: <p><br />{node.title}</p>,\n                              msgSuccess: t('organization.announcements.deleted'),\n                              deleteFunction: deleteAnnouncement,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ANNOUNCEMENTS_QUERY} \n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\n// const OrganizationLevels = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Link to={\"/organization/announcements/add\"}\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\nexport default withTranslation()(withRouter(OrganizationAnnouncements))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ANNOUNCEMENT_SCHEMA = Yup.object().shape({\n    title: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    content: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    dateEnd: Yup.date()\n      .required(t('yup.field_required')),\n    priority: Yup.number()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nfunction OrganizationAnnouncementForm({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayShop\" \n                  checked={values.displayShop} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_shop')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayShop\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayBackend\" \n                  checked={values.displayBackend} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('organization.announcements.display_backend')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayBackend\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.title')}>\n              <Field type=\"text\" \n                      name=\"title\" \n                      className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('organization.announcements.content')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"content\"\n                initialValue={values.content}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldTouched(\"content\", true)\n                  setFieldValue(\"content\", e.target.getContent())\n                }}\n                />\n              <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.priority')}>\n              <Field type=\"text\" \n                      name=\"priority\" \n                      className={(errors.priority) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"priority\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n  \n  \nexport default withTranslation()(withRouter(OrganizationAnnouncementForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from './OrganizationAnnouncementsBase';\nimport { GET_ANNOUNCEMENTS_QUERY, ADD_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\nimport { dateToLocalISO } from '../../../tools/date_tools'\n\n\nfunction OrganizationAnnouncementAdd({t, history}) {\n  const returnUrl = \"/organization/announcements\"\n  const [addAnnouncement] = useMutation(ADD_ANNOUNCEMENT)\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.announcements.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: false,\n              displayShop: false,\n              displayBackend: false,\n              title: '', \n              content: '',\n              dateStart: new Date(),\n              dateEnd: new Date(),\n              priority: 100,\n            }}\n            validationSchema={ANNOUNCEMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n              let inputValues = {\n                displayPublic: values.displayPublic,\n                displayBackend: values.displayBackend,\n                displayShop: values.displayShop,\n                title: values.title, \n                content: values.content,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateToLocalISO(values.dateEnd),\n                priority: parseInt(values.priority)\n              }\n\n              addAnnouncement({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  {query: GET_ANNOUNCEMENTS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.announcements.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                <OrganizationAnnouncementForm \n                  isSubmitting={isSubmitting}\n                  values={values}\n                  errors={errors}\n                  setFieldTouched={setFieldTouched}\n                  setFieldValue={setFieldValue}\n                  returnUrl={returnUrl}\n                />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementAdd))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationAnnouncementsBase from \"./OrganizationAnnouncementsBase\"\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { GET_ANNOUNCEMENTS_QUERY, GET_ANNOUNCEMENT_QUERY, UPDATE_ANNOUNCEMENT } from './queries'\nimport { ANNOUNCEMENT_SCHEMA } from './yupSchema'\nimport OrganizationAnnouncementForm from './OrganizationAnnouncementForm'\n\n\nfunction OrganizationAnnouncementEdit({t, history, match}) {\n  const announcementId = match.params.id\n  const cardTitle = t(\"organization.announcements.title_edit\")\n  const returnUrl = \"/organization/announcements\"\n  \n  const { loading, error, data } = useQuery(GET_ANNOUNCEMENT_QUERY, { variables: {\n    id: announcementId\n  }})\n  const [updateAnnouncement] = useMutation(UPDATE_ANNOUNCEMENT)\n\n  if (loading) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.loading_with_dots\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  if (error) return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"general.error_sad_smiley\")}\n        </Card.Body>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n\n  const organizationAnnouncement = data.organizationAnnouncement\n  \n  return (\n    <OrganizationAnnouncementsBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n              initialValues={{ \n                displayPublic: organizationAnnouncement.displayPublic,\n                displayShop: organizationAnnouncement.displayShop,\n                displayBackend: organizationAnnouncement.displayBackend,\n                title: organizationAnnouncement.title, \n                content: organizationAnnouncement.content,\n                dateStart: new Date(organizationAnnouncement.dateStart),\n                dateEnd: new Date(organizationAnnouncement.dateEnd),\n                priority: organizationAnnouncement.priority,\n              }}\n              validationSchema={ANNOUNCEMENT_SCHEMA}\n              onSubmit={(values, { setSubmitting }) => {\n                let inputValues = {\n                  id: announcementId,\n                  displayPublic: values.displayPublic,\n                  displayBackend: values.displayBackend,\n                  displayShop: values.displayShop,\n                  title: values.title, \n                  content: values.content,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  priority: parseInt(values.priority)\n                }\n\n                updateAnnouncement({ variables: {\n                  input: inputValues\n                }, refetchQueries: [\n                    {query: GET_ANNOUNCEMENTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.announcements.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n              >\n              {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                  <OrganizationAnnouncementForm \n                    isSubmitting={isSubmitting}\n                    values={values}\n                    errors={errors}\n                    setFieldTouched={setFieldTouched}\n                    setFieldValue={setFieldValue}\n                    returnUrl={returnUrl}\n                  />\n              )}\n          </Formik>\n      </Card>\n    </OrganizationAnnouncementsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationAnnouncementEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasspassesBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/classpasses\" />           \n              :\n                <React.Fragment>\n                  <Link to=\"/organization/classpasses/groups\" \n                    className='btn btn-secondary mr-2'>\n                    <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspass\">\n                    <ButtonAdd addUrl=\"/organization/classpasses/add\" />\n                  </HasPermissionWrapper>    \n                </React.Fragment>          \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String, $archived: Boolean) {\n    organizationClasspasses(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!, $after: String, $before: String) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASSPASS = gql`\nmutation CreateClasspass($input: CreateOrganizationClasspassInput!) {\n  createOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS = gql`\n  mutation UpdateOrganizationClasspass($input: UpdateOrganizationClasspassInput!) {\n    updateOrganizationClasspass(input: $input) {\n      organizationClasspass {\n        id\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_CLASSPASS = gql`\nmutation ArchiveOrganizationClasspass($input: ArchiveOrganizationClasspassInput!) {\n  archiveOrganizationClasspass(input: $input) {\n    organizationClasspass {\n      id\n      archived\n    }\n  }\n}\n`\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\n\nimport { GET_CLASSPASSES_QUERY, ARCHIVE_CLASSPASS } from \"./queries\"\n\n\nfunction OrganizationClasspasses({t, history}) {\n  const cardTitle = t('organization.classpasses.title')\n  let [archived, setArchived] = useState(false)\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_CLASSPASSES_QUERY, {\n    variables: { archived: archived },\n    fetchPolicy: \"network-only\"\n  })\n  const [ archiveClasspass ] = useMutation(ARCHIVE_CLASSPASS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.classpasses.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  let classpasses = data.organizationClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) { return (\n    <OrganizationClasspassesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.classpasses.empty_list') : t(\"organization.classpasses.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )}\n\n  return (\n    <OrganizationClasspassesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={classpasses.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: classpasses.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationClasspasses.edges\n            const pageInfo = fetchMoreResult.organizationClasspasses.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new memberships at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationClasspasses: {\n                    __typename: previousResult.organizationClasspasses.__typename,\n                    edges: [ ...previousResult.organizationClasspasses.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.classpasses.trial_pass')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.validity')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classpasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayPublic} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.displayShop} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <BadgeBoolean value={node.trialPass} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.unlimited) ? t('general.unlimited') : node.classes }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    {(node.financeTaxRate) ? \n                      <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.validity} <br />\n                    <span className=\"text-muted\">\n                      {node.validityUnitDisplay}\n                    </span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/classpasses/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveClasspass({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                      </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  name: Yup.string()\n  .min(3, t('yup.min_len_3'))\n  .required(t('yup.field_required')),\n  price: Yup.number()\n    .required(t('yup.field_required')),\n  financeTaxRate: Yup.string()\n    .required(t('yup.field_required')),\n  validity: Yup.number()\n    .positive(t('yup.positive_number_required'))\n    .required(t('yup.field_required')),\n  validityUnit: Yup.string()\n    .required(t('yup.field_required')),\n  classes: Yup.number(),\n  quickStatsAmount: Yup.number()\n})\n\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\n\nclass OrganizationClasspassForm extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Organization classpass form props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const history = this.props.history\n    const returnUrl = \"/organization/classpasses\"\n    const initialData = this.props.initialData\n    const isSubmitting = this.props.isSubmitting\n    const setFieldValue = this.props.setFieldValue\n    const setFieldTouched = this.props.setFieldTouched\n    const errors = this.props.errors\n    const values = this.props.values\n\n    return (\n        <FoForm>\n            <Card.Body> \n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"displayPublic\" \n                      checked={values.displayPublic} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.public')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                </Form.Group>      \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                    <Form.Label className=\"custom-switch\">\n                        <Field \n                        className=\"custom-switch-input\"\n                        type=\"checkbox\" \n                        name=\"displayShop\" \n                        checked={values.displayShop} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.classpass.shop')}</span>\n                    </Form.Label>\n                    <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group> \n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group>\n                  <Form.Label className=\"custom-switch\">\n                      <Field \n                      className=\"custom-switch-input\"\n                      type=\"checkbox\" \n                      name=\"trialPass\" \n                      checked={values.trialPass} />\n                      <span className=\"custom-switch-indicator\" ></span>\n                      <span className=\"custom-switch-description\">{t('organization.classpass.trial_pass')}</span>\n                  </Form.Label>\n                  <ErrorMessage name=\"displayShop\" component=\"div\" />   \n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>            \n            <Form.Group label={t('general.name')} >\n                <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n                <Editor\n                  tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                  textareaName=\"description\"\n                  initialValue={values.description}\n                  init={tinymceBasicConf}\n                  onBlur={(e) => {\n                    setFieldTouched(\"description\", true)\n                    setFieldValue(\"description\", e.target.getContent())\n                  }}\n                />\n                <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.price')}>\n                    <Field type=\"text\" \n                        name=\"price\" \n                        className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                    <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.taxrate')}>\n                  <Field component=\"select\" \n                          name=\"financeTaxRate\" \n                          className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  {console.log(\"query data in classpass add:\")}\n                  {console.log(initialData)}\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeTaxRates.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.validity')}>\n                  <Field type=\"text\" \n                      name=\"validity\" \n                      className={(errors.validity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                  <ErrorMessage name=\"validity\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.validity_unit')}>\n                  <Field component=\"select\" \n                          name=\"validityUnit\" \n                          className={(errors.validityUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"DAYS\" key={v4()}>{t('validity.days')}</option>\n                  <option value=\"WEEKS\" key={v4()}>{t('validity.weeks')}</option>\n                  <option value=\"MONTHS\" key={v4()}>{t('validity.months')}</option>\n                  </Field>\n                  <ErrorMessage name=\"validityUnit\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            <Form.Group>\n                <Form.Label className=\"custom-switch\">\n                    <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"unlimited\" \n                    checked={values.unlimied} />\n                    <span className=\"custom-switch-indicator\" ></span>\n                    <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n                </Form.Label>\n                <ErrorMessage name=\"unlimited\" component=\"div\" />   \n            </Form.Group>  \n            { (values.unlimited) ? \"\" :\n            <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                        name=\"classes\" \n                        className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> } \n            {/* <Form.Group label={t('general.membership')}>\n                <Field component=\"select\" \n                        name=\"organizationMembership\" \n                        className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n                {initialData.organizationMemberships.edges.map(({ node }) =>\n                    <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n                </Field>\n                <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>  */}\n            { (values.unlimited) ? \n                    <Form.Group label={t('general.quickStatsAmount')}>\n                    <Field type=\"text\" \n                            name=\"quickStatsAmount\" \n                            className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n                            autoComplete=\"off\" />\n                    <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    : \"\"\n            }\n            <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.glaccount')}>\n                  <Field component=\"select\" \n                          name=\"financeGlaccount\" \n                          className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeGlaccounts.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n              <Grid.Col>\n                <Form.Group label={t('general.costcenter')}>\n                  <Field component=\"select\" \n                          name=\"financeCostcenter\" \n                          className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\">\n                  <option value=\"\" key={v4()}></option>\n                  {initialData.financeCostcenters.edges.map(({ node }) =>\n                      <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                  )}\n                  </Field>\n                  <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n            </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n                <Button \n                className=\"pull-right\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                type=\"submit\"\n                >\n                {t('general.submit')}\n                </Button>\n                <Button\n                type=\"button\" \n                color=\"link\" \n                onClick={() => history.push(returnUrl)}\n                >\n                    {t('general.cancel')}\n                </Button>\n            </Card.Footer>\n        </FoForm>\n    ) \n  }\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase';\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassAdd({t, match, history}) {\n  const cardTitle = t('organization.classpasses.title_add')\n  const returnUrl = \"/organization/classpasses\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createClasspass] = useMutation(CREATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n                    \n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            trialPass: false,\n            name: \"\",\n            description: \"\",\n            price: 0,\n            financeTaxRate: \"\",\n            validity: 1,\n            validityUnit: \"MONTHS\",\n            classes: 1,\n            unlimited: false,\n            quickStatsAmount: 0,\n            financeGlaccount: \"\",\n            financeCostcenter: \"\"\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createClasspass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpasses.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSPASS_QUERY, UPDATE_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesBase from './OrganizationClasspassesBase'\nimport OrganizationClasspassForm from \"./OrganizationClasspassForm\"\n\n\nfunction OrganizationClasspassEdit({ t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateClasspass] = useMutation(UPDATE_CLASSPASS)\n\n  if (loading) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  if (error) return (\n    <OrganizationClasspassesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialData = data\n\n  let initialTaxRate = \"\"\n  if (initialData.organizationClasspass.financeTaxRate) {\n    initialTaxRate = initialData.organizationClasspass.financeTaxRate.id\n  }\n\n  let initialGlaccount = \"\"\n  if (initialData.organizationClasspass.financeGlaccount) {\n    initialGlaccount =  initialData.organizationClasspass.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationClasspass.financeCostcenter) {\n    initialCostcenter =  initialData.organizationClasspass.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationClasspassesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationClasspass.displayPublic,\n            displayShop: initialData.organizationClasspass.displayShop,\n            trialPass: initialData.organizationClasspass.trialPass,\n            name: initialData.organizationClasspass.name,\n            description: initialData.organizationClasspass.description,\n            price: initialData.organizationClasspass.price,\n            financeTaxRate: initialTaxRate,\n            validity: initialData.organizationClasspass.validity,\n            validityUnit: initialData.organizationClasspass.validityUnit,\n            classes: initialData.organizationClasspass.classes,\n            unlimited: initialData.organizationClasspass.unlimited,\n            quickStatsAmount: initialData.organizationClasspass.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspass({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  trialPass: values.trialPass,\n                  name: values.name,\n                  description: values.description,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  validity: parseInt(values.validity),\n                  validityUnit: values.validityUnit,\n                  classes: parseInt(values.classes),\n                  unlimited: values.unlimited,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.classpasses.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationClasspassForm \n              initialData = {initialData}\n              isSubmitting = {isSubmitting}\n              setFieldValue = {setFieldValue}\n              setFieldTouched = {setFieldTouched}\n              errors = {errors}\n              values = {values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationClasspassesGroupsBase({ t, history, children, showAdd=false, returnUrl=\"/organization/classpasses\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasspassgroup\">\n                  <ButtonAdd addUrl=\"/organization/classpasses/groups/add\" className='ml-2' />\n                </HasPermissionWrapper> \n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSPASS_GROUPS_QUERY = gql`\n  query OrganizationClasspassGroups($after: String, $before: String) {\n    organizationClasspassGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_QUERY = gql`\n  query OrganizationClasspassGroup($id: ID!) {\n    organizationClasspassGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_CLASSPASS_GROUP_PASSES_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationClasspassGroup(id: $id) {\n      id\n      name\n      description\n      organizationClasspasses {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_CLASSPASS_GROUP = gql`\nmutation CreateOrganizationClasspassGroup($input:CreateOrganizationClasspassGroupInput!) {\n  createOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup{\n      id\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSPASS_GROUP = gql`\nmutation UpdateOrganizationClasspassGroup($input: UpdateOrganizationClasspassGroupInput!) {\n  updateOrganizationClasspassGroup(input: $input) {\n    organizationClasspassGroup {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const DELETE_CLASSPASS_GROUP = gql`\n  mutation DeleteClasspassGroup($input: DeleteOrganizationClasspassGroupInput!) {\n    deleteOrganizationClasspassGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationClasspassGroupClasspassInput!) {\n    createOrganizationClasspassGroupClasspass(input:$input) {\n      organizationClasspassGroupClasspass {\n        id\n        organizationClasspass {\n          id\n          name\n        }\n        organizationClasspassGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationClasspassGroupClasspassInput!) {\n    deleteOrganizationClasspassGroupClasspass(input:$input) {\n      ok\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from \"./OrganizationClasspassesGroupsBase\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, DELETE_CLASSPASS_GROUP } from \"./queries\"\n\n\nfunction OrganizationClasspassesGroups({ t, history}) {\n  const { loading, error, data, fetchMore } = useQuery(GET_CLASSPASS_GROUPS_QUERY)\n  const [deleteClasspassGroup] = useMutation(DELETE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  \n  const classpass_groups = data.organizationClasspassGroups\n\n  // Empty list\n  if (!classpass_groups.edges.length) { return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n        <p>{t('organization.classpass_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )} \n\n  \n  // We have data\n  return (\n    <OrganizationClasspassesGroupsBase  showAdd={true}>\n      <ContentCard cardTitle={t('organization.classpass_groups.title')}\n                    pageInfo={classpass_groups.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classpass_groups.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n                        const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new classpass_groups at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasspassGroups: {\n                                __typename: previousResult.organizationClasspassGroups.__typename,\n                                edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpass_groups.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.description.substring(0, 24)}\n                    </Table.Col>\n                    <Table.Col className=\"text-right\" key={v4()}>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n                                color=\"secondary\">\n                          {t('organization.classpasses.groups.edit_passes')}\n                        </Button>\n                      <button className=\"icon btn btn-link btn-sm float-right\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t(\"organization.classpasses.groups.delete_confirm_msg\"),\n                            msgDescription: <p>{node.name}</p>,\n                            msgSuccess: t('organization.classpasses.groups.deleted'),\n                            deleteFunction: deleteClasspassGroup,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_CLASSPASS_GROUPS_QUERY} \n                            ]}\n                          })\n                      }}>\n                        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                      </button>\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n   )\n\n}\n\n\n\n// const OrganizationClasspassesGroups = ({ t, history }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")}>\n//           <div className=\"page-options d-flex\">\n//             <Link to=\"/organization/classpasses\" \n//                   className='btn btn-outline-secondary btn-sm'>\n//                 <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back_to')} {t('organization.classpasses.title')}\n//             </Link>\n//           </div>\n//         </Page.Header>\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_CLASSPASS_GROUPS_QUERY} >\n//              {({ loading, error, data: {organizationClasspassGroups: classpass_groups}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n                \n//                 // Empty list\n//                 if (!classpass_groups.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}>\n//                     <p>{t('organization.classpass_groups.empty_list')}</p>\n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.classpass_groups.title')}\n//                                pageInfo={classpass_groups.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: classpass_groups.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationClasspassGroups.edges\n//                                     const pageInfo = fetchMoreResult.organizationClasspassGroups.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new classpass_groups at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationClasspassGroups: {\n//                                             __typename: previousResult.organizationClasspassGroups.__typename,\n//                                             edges: [ ...previousResult.organizationClasspassGroups.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                         <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {classpass_groups.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/classpasses/groups/edit/passes/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('organization.classpasses.groups.edit_passes')}\n//                                       </Button>\n//                                   </Table.Col>\n//                                   {/* <Mutation mutation={ARCHIVE_CLASSPASS_GROUP} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_CLASSPASS_GROUPS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation> */}\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationclasspassgroup\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/classpasses/groups/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.classpass_groups.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// )\n\nexport default withTranslation()(withRouter(OrganizationClasspassesGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { GET_CLASSPASS_GROUPS_QUERY, ADD_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupAdd({t, history}) {\n  const returnUrl = \"/organization/classpasses/groups\"\n  const [ addClasspassGroup ] = useMutation(ADD_CLASSPASS_GROUP)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={t('organization.classpass_groups.title_add')}>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasspassGroup({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n              <FoForm>\n                  <Card.Body>\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                    <Form.Group label={t('general.description')}>\n                      <Field type=\"text\" \n                              name=\"description\" \n                              className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        color=\"primary\"\n                        className=\"pull-right\" \n                        type=\"submit\" \n                        disabled={isSubmitting}\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button color=\"link\">\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                      {(isSubmitting) ? \n                        <Alert type=\"primary\" hasExtraSpace>\n                          <strong>{t('general.please_wait')}</strong> {t('organization.classpass_groups.toast_creating_might_take_a_while')}\n                        </Alert> : \n                        \"\"\n                      }\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\nimport { GET_CLASSPASS_GROUPS_QUERY, GET_CLASSPASS_GROUP_QUERY, UPDATE_CLASSPASS_GROUP } from './queries'\nimport { CLASSPASS_GROUP_SCHEMA } from './yupSchema'\n\n\nfunction OrganizationClasspassGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.classpass_groups.title_edit')\n  const returnUrl = \"/organization/classpasses/groups\"\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateClasspassGroup ] = useMutation(UPDATE_CLASSPASS_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n    \n\n  const initialData = data.organizationClasspassGroup;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={CLASSPASS_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateClasspassGroup({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  description: values.description,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSPASS_GROUPS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.classpass_groups.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>    \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                      <Form.Group label={t('general.description')}>\n                        <Field type=\"text\" \n                                name=\"description\" \n                                className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                  </Card.Footer>\n              </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_CLASSPASS_GROUP_PASSES_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasspassesGroupsBase from './OrganizationClasspassesGroupsBase';\n\n\nfunction OrganizationClasspassGroupEditPasses({ t, match, history }) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/classpasses/groups\"\n  let cardTitle = t('organization.classpass_group_classpasses.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASSPASS_GROUP_PASSES_QUERY, { \n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  // Loading\n  if (loading) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasspassesGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const passes = data.organizationClasspasses\n  const group = data.organizationClasspassGroup\n\n  cardTitle = `${cardTitle} - ${group.name}`\n  let group_passes = {}\n  if (group.organizationClasspasses.edges) {\n    group.organizationClasspasses.edges.map(({ node}) => (\n      group_passes[node.id] = true\n    ))\n  }\n\n  return (\n    <OrganizationClasspassesGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('')}</Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {passes.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {(node.id in group_passes) ? \n                        <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                      }\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.name}\n                    </Table.Col>\n                    {console.log((node.id in group_passes))}\n                    {(!(node.id in group_passes)) ?\n                      // Add\n                      <Table.Col className=\"text-right text-green\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.add_to_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked add\")\n                            let pass_id = node.id\n                            addCardToGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.added_to_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                          {t('general.add_to_group')} \n                        </Button>\n                      </Table.Col>\n                      :\n                      // Delete\n                      <Table.Col className=\"text-right text-red\" key={v4()}>\n                        <Button color=\"link\"\n                          size=\"sm\"\n                          title={t('general.delete_from_group')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked delete\")\n                            console.log(node.id)\n                            let pass_id = node.id\n                            deleteCardFromGroup({ variables: {\n                              input: {\n                                organizationClasspass: pass_id,\n                                organizationClasspassGroup: groupId\n                              }\n                        }, refetchQueries: [\n                            {query: GET_CLASSPASS_GROUP_PASSES_QUERY, variables: {\"id\": groupId }}\n                        ]}).then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success(t('general.deleted_from_group'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                          <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                          {t('general.delete_from_group')}\n                        </Button>\n                      </Table.Col>\n                      }\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n      </Card>\n    </OrganizationClasspassesGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasspassGroupEditPasses))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.ORGANIZATION_CLASSTYPES_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSTYPES_QUERY = gql`\nquery OrganizationClasstypes($after: String, $before: String, $archived: Boolean) {\n  organizationClasstypes(first: 15, before: $before, after: $after, archived: $archived) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        archived\n        displayPublic\n        name\n        description\n        urlWebsite\n        urlImage\n        urlImageThumbnailSmall\n      }\n    }\n  }\n}\n`\n\nexport const GET_CLASSTYPE_QUERY = gql`\nquery getOrganizationClasstype($id: ID!) {\n  organizationClasstype(id:$id) {\n    id\n    archived\n    name\n    description\n    displayPublic\n    urlWebsite\n    urlImage\n  }\n}\n`\n\nexport const ADD_CLASSTYPE = gql`\nmutation CreateOrganizationClasstype($input: CreateOrganizationClasstypeInput!) {\n  createOrganizationClasstype(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const UPDATE_CLASSTYPE = gql`\n  mutation UpdateOrganizationClasstype($input: UpdateOrganizationClasstypeInput!) {\n    updateOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n        name\n        description\n        displayPublic\n        urlWebsite\n      }\n    }\n  }\n`\n\nexport const UPDATE_CLASSTYPE_IMAGE = gql`\nmutation UploadOrganizationClasstypeImage($input: UploadOrganizationClasstypeImageInput!) {\n  uploadOrganizationClasstypeImage(input: $input) {\n    organizationClasstype {\n      id\n      archived\n      name\n      description\n      displayPublic\n      urlWebsite\n      image\n    }\n  }\n}\n`\n\nexport const ARCHIVE_CLASSTYPE = gql`\nmutation ArchiveOrganizationClasstype($input: ArchiveOrganizationClasstypeInput!) {\n    archiveOrganizationClasstype(input: $input) {\n      organizationClasstype {\n        id\n        archived\n      }\n    }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationClasstypesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl={\"/organization/classtypes\"} />\n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationclasstype\">\n                  <ButtonAdd addUrl=\"/organization/classtypes/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>          \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Avatar,\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport { get_list_query_variables } from './tools'\nimport { GET_CLASSTYPES_QUERY, ARCHIVE_CLASSTYPE } from \"./queries\"\nimport OrganizationClasstypesBase from \"./OrganizationClasstypesBase\"\n\n\nfunction OrganizationClasstypes({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_CLASSTYPES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [archiveClasstype] = useMutation(ARCHIVE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}>\n        <p>{t('organization.classtypes.error_loading')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const classtypes = data.organizationClasstypes\n  // Empty list\n  if (!classtypes.edges.length) { return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.classtypes.empty_list') : t(\"organization.classtypes.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )}   \n\n  return (\n    <OrganizationClasstypesBase>\n      <ContentCard cardTitle={t('organization.classtypes.title')}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={classtypes.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: classtypes.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationClasstypes.edges\n                        const pageInfo = fetchMoreResult.organizationClasstypes.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationClasstypes: {\n                                __typename: previousResult.organizationClasstypes.__typename,\n                                edges: [ ...previousResult.organizationClasstypes.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classtypes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <React.Fragment>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit_image/\" + node.id)}\n                                  color=\"secondary\">\n                            <Icon name=\"image\" />\n                          </Button>\n                          <Button className='btn-sm' \n                                  onClick={() => history.push(\"/organization/classtypes/edit/\" + node.id)}\n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          archiveClasstype({ variables: {\n                            input: {\n                              id: node.id,\n                              archived: !node.archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (node.archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypes))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSTYPE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    urlWebsite: Yup.string()\n      .url(t(\"yup.url\")),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, ADD_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from './tools'\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeAdd({t, history}) {\n  const returnUrl = \"/organization/classtypes\"\n  const [addClasstype] = useMutation(ADD_CLASSTYPE)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.classtypes.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: \"\", description: \"\", displayPublic: true, urlWebsite: '' }}\n          validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addClasstype({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description,\n                  displayPublic: values.displayPublic,\n                  urlWebsite: values.urlWebsite,\n                  image: values.image\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  {query: GET_CLASSTYPES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n                <FoForm>\n                  {/* {console.log('values in FoForm')}\n                  {console.log(values)} */}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>    \n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                              textareaName=\"description\"\n                              initialValue={values.description}\n                              init={tinymceBasicConf}\n                              onBlur={(e) => {\n                                setFieldValue(\"description\", e.target.getContent())\n                                setFieldTouched(\"description\", true)\n                              }}\n                            />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                            {t('general.cancel')}\n                        </Button>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE } from './queries'\nimport { CLASSTYPE_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\n\n\nfunction OrganizationClasstypeEdit({ t, history, match }) {\n  const id = match.params.id\n  const cardTitle = t('organization.classtypes.title_edit')\n  const returnUrl = \"/organization/classtypes\"\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, { variables: {\n    id: id\n  }})\n  const [ updateClasstype ] = useMutation(UPDATE_CLASSTYPE)\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n                      \n  const initialData = data.organizationClasstype\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              displayPublic: initialData.displayPublic,\n              urlWebsite: initialData.urlWebsite\n            }}\n            validationSchema={CLASSTYPE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateClasstype({ variables: {\n                  input: {\n                    id: id,\n                    name: values.name,\n                    description: (values.description) ? values.description: '',\n                    displayPublic: values.displayPublic,\n                    urlWebsite: (values.urlWebsite) ? values.urlWebsite: ''\n                  }\n                }, refetchQueries: [\n                    {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('organization.classtypes.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldValue, setFieldTouched }) => (\n                <FoForm>\n                    {console.log(values)}\n                    <Card.Body>\n                        <Form.Group>\n                          <Form.Label className=\"custom-switch\">\n                            <Field \n                              className=\"custom-switch-input\"\n                              type=\"checkbox\" \n                              name=\"displayPublic\" \n                              checked={values.displayPublic} />\n                            <span className=\"custom-switch-indicator\" ></span>\n                            <span className=\"custom-switch-description\">{t('organization.classtype.public')}</span>\n                          </Form.Label>\n                          <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                        </Form.Group>     \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('general.description')}>\n                          <Editor\n                            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                            textareaName=\"description\"\n                            initialValue={values.description}\n                            init={tinymceBasicConf}\n                            onBlur={(e) => {\n                              setFieldValue(\"description\", e.target.getContent())\n                              setFieldTouched(\"description\", true)\n                            }}\n                          />\n                          <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                        <Form.Group label={t('organization.classtype.url_website')}>\n                          <Field type=\"text\" \n                                name=\"urlWebsite\" \n                                className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEdit))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\nimport { \n  Formik,\n  Form as FoForm, \n} from 'formik'\n\n\nimport { GET_CLASSTYPES_QUERY, GET_CLASSTYPE_QUERY, UPDATE_CLASSTYPE_IMAGE } from './queries'\n\nimport {\n  Dimmer,\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationClasstypesBase from './OrganizationClasstypesBase';\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationClasstypeEditImage({t, history, match}) {\n  const classtypeId = match.params.id\n  const returnUrl = \"/organization/classtypes\"\n  let cardTitle = t('organization.classtypes.edit_image')\n  const { loading, error, data } = useQuery(GET_CLASSTYPE_QUERY, {\n    variables: { id: classtypeId }\n  })\n  const [ uploadImage ] = useMutation(UPDATE_CLASSTYPE_IMAGE)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n\n  if (loading) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationClasstypesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationClasstypesBase>\n  )\n\n  cardTitle = `${cardTitle} - ${data.organizationClasstype.name}`\n\n  return (\n    <OrganizationClasstypesBase showBack={true}>\n      <Card title={cardTitle}>\n       <Formik\n          initialValues={{}}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              id: classtypeId,\n              imageFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n  \n              uploadImage({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.classtypes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Link to={returnUrl}>\n                <Button color=\"link\">\n                  {t('general.cancel')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationClasstypesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationClasstypeEditImage))","import { gql } from \"@apollo/client\"\n\nexport const GET_DISCOVERIES_QUERY = gql`\n  query OrganizationDiscoveries($after: String, $before: String, $archived: Boolean) {\n    organizationDiscoveries(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DISCOVERY_QUERY = gql`\n  query SchoolDiscovery($id: ID!) {\n    organizationDiscovery(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_DISCOVERY = gql`\n  mutation CreateOrganizationDiscovery($input:CreateOrganizationDiscoveryInput!) {\n    createOrganizationDiscovery(input: $input) {\n      organizationDiscovery{\n        id\n        archived\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_DISCOVERY = gql`\nmutation UpdateOrganizationDiscovery($input: UpdateOrganizationDiscoveryInput!) {\n  updateOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_DISCOVERY = gql`\nmutation ArchiveOrganizationDiscovery($input: ArchiveOrganizationDiscoveryInput!) {\n  archiveOrganizationDiscovery(input: $input) {\n    organizationDiscovery {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationDiscoveriesBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/discoveries\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationdiscovery\">\n                  <ButtonAdd addUrl=\"/organization/discoveries/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveriesBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_DISCOVERIES_QUERY, ARCHIVE_DISCOVERY } from \"./queries\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase'\n\n\nfunction OrganizationDiscoveries({ t, history }) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.discoveries.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_DISCOVERIES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.discoveries.error_loading')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const discoveries = data.organizationDiscoveries\n\n  // Empty list\n  if (!discoveries.edges.length) { return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p> \n          {(!archived) ? t('organization.discoveries.empty_list') : t(\"organization.discoveries.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )}\n\n  return (\n    <OrganizationDiscoveriesBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={discoveries.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: discoveries.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationDiscoveries.edges\n                        const pageInfo = fetchMoreResult.organizationDiscoveries.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new discoveries at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationDiscoveries: {\n                                __typename: previousResult.organizationDiscoveries.__typename,\n                                edges: [ ...previousResult.organizationDiscoveries.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {discoveries.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/discoveries/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveDiscovery({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveries))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DISCOVERY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\n\nimport { GET_DISCOVERIES_QUERY, ADD_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryAdd({t, history}) {\n  const returnUrl = \"/organization/discoveries\"\n  const [ addDiscovery ] = useMutation(ADD_DISCOVERY)\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={t('organization.discoveries.title_add')}>\n        <Formik\n            initialValues={{ name: '', code: '' }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                addDiscovery({ variables: {\n                  input: {\n                    name: values.name, \n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n                <FoForm>\n                    <Card.Body>\n                        <Form.Group label={t('general.name')}>\n                          <Field type=\"text\" \n                                  name=\"name\" \n                                  className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                  autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          color=\"primary\"\n                          className=\"pull-right\" \n                          type=\"submit\" \n                          disabled={isSubmitting}\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button color=\"link\">\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from \"react-router-dom\"\n\nimport { GET_DISCOVERIES_QUERY, GET_DISCOVERY_QUERY, UPDATE_DISCOVERY } from './queries'\nimport { DISCOVERY_SCHEMA } from './yupSchema'\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationDiscoveriesBase from './OrganizationDiscoveriesBase';\n\n\nfunction OrganizationDiscoveryEdit({t, history, match}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/discoveries\"\n  const cardTitle = t('organization.discoveries.title_edit')\n  const { loading, error, data } = useQuery(GET_DISCOVERY_QUERY, {\n    variables: {id: id}\n  })\n  const [ updateDiscovery ] = useMutation(UPDATE_DISCOVERY)\n\n  if (loading) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  if (error) return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationDiscoveriesBase>\n  )\n\n  const initialData = data.organizationDiscovery;\n\n  return (\n    <OrganizationDiscoveriesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={DISCOVERY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateDiscovery({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_DISCOVERIES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.discoveries.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n                <FoForm>\n                    <Card.Body>    \n                        <Form.Group label={t('general.name')} >\n                          <Field type=\"text\" \n                                name=\"name\" \n                                className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                                autoComplete=\"off\" />\n                          <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                        </Form.Group>\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button \n                          className=\"pull-right\"\n                          color=\"primary\"\n                          disabled={isSubmitting}\n                          type=\"submit\"\n                        >\n                          {t('general.submit')}\n                        </Button>\n                        <Link to={returnUrl}>\n                          <Button\n                            type=\"button\" \n                            color=\"link\" \n                          >\n                              {t('general.cancel')}\n                          </Button>\n                        </Link>\n                    </Card.Footer>\n                </FoForm>\n            )}\n        </Formik>\n      </Card>\n    </OrganizationDiscoveriesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDiscoveryEdit))","// @flow\n\nimport React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Card,\n  Container,\n  Table\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocuments({ t, match }) {\n  const organizationId = match.params.organization_id\n  const docTypes = [\n    [ \"TERMS_AND_CONDITIONS\", t(\"general.terms_and_conditions\")],\n    [ \"PRIVACY_POLICY\", t(\"general.privacy_policy\")],\n  ]\n\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            {/* <div className=\"page-options d-flex\">\n              <Link to={`/organization/edit/${organizationId}`}>\n                <Button \n                  icon=\"arrow-left\"\n                  className=\"mr-2\"\n                  outline\n                  color=\"secondary\"\n                >\n                  {t('general.back_to')} {t('organization.title')}\n                </Button>\n              </Link>\n            </div> */}\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('organization.documents.title')}</Card.Title>\n                </Card.Header>\n                <Table cards>\n                  <Table.Header>\n                    <Table.Row key={v4()}>\n                      <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n                      <Table.ColHeader></Table.ColHeader>\n                    </Table.Row>\n                  </Table.Header>\n                  <Table.Body>\n                      {docTypes.map((docType) => (\n                        <Table.Row key={v4()}>\n                          <Table.Col key={v4()}>\n                            {docType[1]}\n                          </Table.Col>\n                          <Table.Col className=\"text-right\" key={v4()}>\n                            <Link to={`/organization/documents/${organizationId}/${docType[0]}`}>\n                              <Button className='btn-sm' \n                                      color=\"secondary\">\n                                {t('general.manage')} <Icon name=\"chevron-right\" />\n                              </Button>\n                            </Link>\n                          </Table.Col>\n                        </Table.Row>\n                      ))}\n                  </Table.Body>\n                </Table>\n              </Card>        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocuments))","import { useContext } from 'react'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\n\nfunction FormatISODateStr({ ISODateStr }) {\n    const appSettings = useContext(AppSettingsContext)\n    const dateFormat = appSettings.dateFormat\n\n    return (\n        moment(ISODateStr).format(dateFormat)    \n    )\n}\n\nexport default FormatISODateStr\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button\n} from \"tabler-react\";\n\nconst FileDownloadTableButton = ({ t, mediaUrl, className=\"\", target=\"_blank\" }) => {\n  return <Button \n           color={\"secondary \" + className}\n           size=\"sm\"\n           icon=\"download-cloud\"\n           target={target}\n           RootComponent=\"a\" \n           href={mediaUrl}\n          >\n           {t('general.download')}\n          </Button>\n}\n\nexport default withTranslation()(FileDownloadTableButton)\n\n\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\n\nfunction OrganizationDocumentsBase({ t, children, pageHeaderButtonList }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('organization.title')}>\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}        \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query OrganizationDocuments($documentType: CostasiellaOrganizationDocumentDocumentTypeChoices!) {\n    organizationDocuments(documentType:$documentType) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          documentType\n          version\n          dateStart\n          dateEnd\n          document\n          urlDocument\n        }\n      }\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query OrganizationDocument($id: ID!) {\n    organizationDocument(id:$id) {\n      id\n      version\n      dateStart\n      dateEnd\n      document\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateOrganizationDocument($input:CreateOrganizationDocumentInput!) {\n    createOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateOrganizationDocument($input:UpdateOrganizationDocumentInput!) {\n    updateOrganizationDocument(input: $input) {\n      organizationDocument{\n        id\n        version\n        dateStart\n        dateEnd\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteOrganizationDocument($input:DeleteOrganizationDocumentInput!) {\n    deleteOrganizationDocument(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport confirmDelete from \"../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction OrganizationDocumentDelete({t, match, node}) {\n  const [ deleteOrganizationDocument ] = useMutation(DELETE_DOCUMENT)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirmDelete({\n          t: t,\n          msgConfirm: t(\"organization.documents.delete_confirm_msg\"),\n          msgDescription: <p> {t(\"general.version\")}: {node.version}</p>,\n          msgSuccess: t('organization.documents.deleted'),\n          deleteFunction: deleteOrganizationDocument,\n          functionVariables: { \n            variables: {\n              input: { id: node.id }\n            }, \n            refetchQueries: [\n              {query: GET_DOCUMENTS_QUERY, variables: { documentType: node.documentType} },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationDocumentDelete))\n","\nexport function getSubtitle(t, documentType) {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":\n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return \"Invalid document type\"\n  }\n}\n  ","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\nimport ISODateString from \"../../ui/ISODateString\"\nimport FileDownloadTableButton from \"../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport OrganizationDocumentsDelete from \"./OrganizationDocumentDelete\"\nimport { getSubtitle } from './tools'\n\nimport { GET_DOCUMENTS_QUERY } from \"./queries\"\n\n\nfunction OrganizationListDocuments({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n  const cardTitle = t('organization.documents.title') + ' - ' + subTitle\n\n  const pageHeaderButtonList = <React.Fragment>\n      <ButtonBack returnUrl={`/organization/documents/${organizationId}`} />\n      <HasPermissionWrapper \n        permission=\"add\"\n        resource=\"organizationdocument\"\n      >\n        <ButtonAdd addUrl={`/organization/documents/${organizationId}/${documentType}/add`} className=\"ml-2\" />\n      </HasPermissionWrapper>\n    </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { documentType: documentType }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t('general.loading_with_dots')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase  pageHeaderButtonList={pageHeaderButtonList}>\n        {t('organization.documents.error_loading')}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // Empty list\n  if (!data.organizationDocuments.edges.length) { return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>\n         {t('organization.documents.empty_list')}\n        </p>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )}   \n  \n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.organizationDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: data.organizationDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationDocuments.edges\n              const pageInfo = fetchMoreResult.organizationDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the fetched documents at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationDocuments: {\n                      __typename: previousResult.organizationDocuments.__typename,\n                      edges: [ ...previousResult.organizationDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.version')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.organizationDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <ISODateString ISODateStr={node.dateStart} />\n                    {(node.dateEnd) ? <span> - <ISODateString ISODateStr={node.dateEnd} /></span> : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.version}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <FileDownloadTableButton mediaUrl={node.urlDocument} />\n                    <Link to={`/organization/documents/${organizationId}/${documentType}/edit/${node.id}`} >\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <OrganizationDocumentsDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationDocumentsBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(OrganizationListDocuments))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport { ADD_DOCUMENT, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nconst customFileInputLabelStyle = {\n  whiteSpace: \"nowrap\",\n  display: \"block\",\n  overflow: \"hidden\"\n}  \n\n\nfunction OrganizationDocumentAdd({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const subTitle = getSubtitle(t, documentType)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  // Vars for document file input field end\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [addDocument] = useMutation(ADD_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t('organization.documents.add') + ' - ' + subTitle}>\n        <Formik\n          initialValues={{ \n            version: '',\n            dateStart: '', \n            dateEnd: '',\n            document: ''\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              documentType: documentType,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n              documentFileName: fileName,\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n\n              addDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            reader.readAsDataURL(file)\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationDocumentAdd))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next';\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { \n  Formik,\n  Form as FoForm, \n  Field, \n  ErrorMessage \n} from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { UPDATE_DOCUMENT, GET_DOCUMENT_QUERY, GET_DOCUMENTS_QUERY } from \"./queries\"\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport {\n  Grid,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationDocumentsBase from \"./OrganizationDocumentsBase\"\nimport { getSubtitle } from './tools'\n\n\nfunction OrganizationDocumentEdit({ t, match, history }) {\n  const organizationId = match.params.organization_id\n  const documentType = match.params.document_type\n  const id = match.params.id\n  const subTitle = getSubtitle(t, documentType)\n  \n  const returnUrl = `/organization/documents/${organizationId}/${documentType}`\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const [ updateDocument ] = useMutation(UPDATE_DOCUMENT, {\n    onCompleted: () => history.push(returnUrl)\n  })\n  const { loading, error, data } = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { \"id\": id }\n  })\n\n  if (loading) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"general.loading_with_dots\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        {t(\"organization.documents.error_loading\")}\n      </OrganizationDocumentsBase>\n    )\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateEnd = null\n  if (data.organizationDocument.dateEnd) {\n    dateEnd = new Date(data.organizationDocument.dateEnd)\n  }\n\n  return (\n    <OrganizationDocumentsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card>\n        <Card.Header>\n          <Card.Title>\n            {t('organization.documents.edit') + ' - ' + subTitle}\n          </Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            version: data.organizationDocument.version,\n            dateStart: new Date(data.organizationDocument.dateStart), \n            dateEnd: dateEnd,\n          }}\n          // validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n\n            let inputVars = {\n              id: id,\n              version: values.version,\n              dateStart: dateToLocalISO(values.dateStart),\n            }\n\n            if (values.dateEnd) {\n              inputVars.dateEnd = dateToLocalISO(values.dateEnd)\n            }\n\n            updateDocument({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: {documentType: documentType}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('organization.documents.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <FoForm>\n            <Card.Body>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.version')}>\n                    <Field type=\"text\" \n                          name=\"version\" \n                          className={(errors.version) ? \"form-control is-invalid\" : \"form-control\"} \n                          autoComplete=\"off\" />\n                    <ErrorMessage name=\"version\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                {/* <Grid.Col>\n                  <Form.Group label={t('general.custom_file_input_label')}>\n                    <div className=\"custom-file\">\n                      <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                      <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                        {fileInputLabel}\n                      </label>\n                    </div>\n                  </Form.Group>\n                </Grid.Col> */}\n              </Grid.Row>\n              <Grid.Row>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_start')}>\n                    <CSDatePicker \n                      selected={values.dateStart}\n                      onChange={(date) => setFieldValue(\"dateStart\", date)}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                    />\n                    <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"primary\"\n                className=\"pull-right\" \n                type=\"submit\" \n                disabled={isSubmitting}\n              >\n                {t('general.submit')}\n              </Button>\n              <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n                {t('general.cancel')}\n              </Button>\n            </Card.Footer>\n          </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationDocumentsBase>\n  )\n}\n\nexport default withTranslation()(OrganizationDocumentEdit)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationHolidaysBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/holidays\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationholiday\">\n                  <ButtonAdd addUrl=\"/organization/holidays/add\" />\n                </HasPermissionWrapper>\n              }   \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidaysBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_HOLIDAYS_QUERY = gql`\n  query OrganizationHolidays($after: String, $before: String) {\n    organizationHolidays(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          dateStart\n          dateEnd\n          classes\n          organizationLocations {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_HOLIDAY_QUERY = gql`\n  query OrganizationHoliday($id: ID!) {\n    organizationHoliday(id:$id) {\n      id\n      name\n      description\n      dateStart\n      dateEnd\n      classes\n    }\n  }\n`\n\nexport const ADD_HOLIDAY = gql`\n  mutation CreateOrganizationHoliday($input:CreateOrganizationHolidayInput!) {\n    createOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_HOLIDAY = gql`\n  mutation UpdateOrganizationHoliday($input: UpdateOrganizationHolidayInput!) {\n    updateOrganizationHoliday(input: $input) {\n      organizationHoliday {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const DELETE_HOLIDAY = gql`\n  mutation DeleteOrganizationHoliday($input: DeleteOrganizationHolidayInput!) {\n    deleteOrganizationHoliday(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const GET_HOLIDAY_LOCATIONS_QUERY = gql`\n  query GetOrganizationHolidayLocations($after: String, $before: String, $id:ID!) {\n    organizationLocations(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationHoliday(id: $id) {\n      id\n      name\n      description\n      organizationLocations {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_LOCATION_TO_HOLIDAY = gql`\n  mutation AddLocationToHoliday($input: CreateOrganizationHolidayLocationInput!) {\n    createOrganizationHolidayLocation(input:$input) {\n      organizationHolidayLocation {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_LOCATION_FROM_HOLIDAY = gql`\n  mutation DeleteLocationFromHoliday($input: DeleteOrganizationHolidayLocationInput!) {\n    deleteOrganizationHolidayLocation(input:$input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n\nimport {\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase'\n\nimport { GET_HOLIDAYS_QUERY, DELETE_HOLIDAY } from \"./queries\"\n\n\nfunction OrganizationHolidays({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const cardTitle = t('organization.holidays.title')\n  \n  const { loading, error, data, fetchMore } = useQuery(GET_HOLIDAYS_QUERY)\n  const [ deleteHoliday ] = useMutation(DELETE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.error_loading')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  let holidays = data.organizationHolidays\n\n  // Empty list\n  if (!holidays.edges.length) { return (\n    <OrganizationHolidaysBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.holidays.empty_list')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )}\n\n\n  return (\n    <OrganizationHolidaysBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={holidays.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: holidays.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationHolidays.edges\n            const pageInfo = fetchMoreResult.organizationHolidays.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationHolidays: {\n                    __typename: previousResult.organizationHolidays.__typename,\n                    edges: [ ...previousResult.organizationHolidays.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('organization.locations.title')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {holidays.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name} \n                    <div className=\"text-muted\">\n                      <small dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                    </div>\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.organizationLocations.edges.map(({ node: location }) => (\n                       <div><Badge color=\"primary\" className=\"mr-1\">{location.name}</Badge></div>\n                    ))}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/organization/holidays/edit/${node.id}/locations`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('organization.holidays.locations.title_edit')}\n                      </Button>\n                    </Link>\n                    <Link to={`/organization/holidays/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"organization.holidays.holiday_delete_confirm_msg\"),\n                          msgDescription: <p>{node.name}</p>,\n                          msgSuccess: t('organization.holidays.payment_deleted'),\n                          deleteFunction: deleteHoliday,\n                          functionVariables: { \n                            variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, \n                            refetchQueries: [\n                              {query: GET_HOLIDAYS_QUERY },\n                            ]\n                          }\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationHolidays))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const HOLIDAY_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid,\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"  \nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nconst OrganizationHolidayForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Grid.Row>\n              <Grid.Col>\n                <Form.Group label={t('general.date_start')}>\n                  <CSDatePicker \n                      className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                      selected={values.dateStart}\n                      onChange={(date) => {\n                      setFieldValue(\"dateStart\", date)\n                      setFieldTouched(\"dateStart\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateStart\", true)}\n                  />\n                  <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n                </Form.Group>\n              </Grid.Col>\n                <Grid.Col>\n                  <Form.Group label={t('general.date_end')}>\n                    <CSDatePicker \n                      selected={values.dateEnd}\n                      onChange={(date) => {\n                          setFieldValue(\"dateEnd\", date)\n                          setFieldTouched(\"dateEnd\", true)\n                      }}\n                      onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                      placeholderText={t('general.date_end')}\n                    />\n                    <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n                  </Form.Group>\n                </Grid.Col>\n              </Grid.Row>\n            <h5>{t(\"general.apply_to\")}</h5>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                    setFieldValue(\"description\", e.target.getContent())\n                    setFieldTouched(\"description\", true, true)\n                }}\n                />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationHolidayForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport { GET_HOLIDAYS_QUERY, ADD_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayAdd({t, history}) {\n  const returnUrl = \"/organization/holidays\"\n  const [ addHoliday ] = useMutation(ADD_HOLIDAY)\n  \n  return (\n   <OrganizationHolidaysBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.holidays.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', classes: true }}\n          validationSchema={HOLIDAY_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addHoliday({ variables: {\n                input: {\n                  name: values.name, \n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateToLocalISO(values.dateEnd),\n                  description: values.description,\n                  classes: values.classes,\n                }\n              }, refetchQueries: [\n                  {query: GET_HOLIDAYS_QUERY}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.holidays.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n            <OrganizationHolidayForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationHolidaysBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAYS_QUERY, GET_HOLIDAY_QUERY, UPDATE_HOLIDAY } from './queries'\nimport { HOLIDAY_SCHEMA } from './yupSchema'\nimport OrganizationHolidayForm from './OrganizationHolidayForm'\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationHolidayEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.holidays.title_edit')\n  const returnUrl = \"/organization/holidays\"\n  const { loading, error, data } = useQuery(GET_HOLIDAY_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateHoliday ] = useMutation(UPDATE_HOLIDAY)\n\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n                    \n  const initialData = data.organizationHoliday;\n  console.log('query data')\n  console.log(data)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              classes: initialData.classes\n            }}\n            validationSchema={HOLIDAY_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateHoliday({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    description: values.description,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateToLocalISO(values.dateEnd)\n                  }\n                }, refetchQueries: [\n                    {query: GET_HOLIDAYS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.holidays.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, values, errors, setFieldTouched, setFieldValue }) => (\n              <OrganizationHolidayForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationHolidayEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_HOLIDAY_LOCATIONS_QUERY, ADD_LOCATION_TO_HOLIDAY, DELETE_LOCATION_FROM_HOLIDAY } from './queries'\n\nimport {\n  Dimmer,\n  Icon,\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationHolidaysBase from './OrganizationHolidaysBase';\n\n\nfunction OrganizationHolidayEditLocations({ t, match, history }) {\n  const holidayId = match.params.id\n  let cardTitle = t('organization.holidays.locations.title_edit')\n  const { loading, error, data } = useQuery(GET_HOLIDAY_LOCATIONS_QUERY, { \n    variables: { id: holidayId }\n  })\n  const [ addLocationToHoliday ] = useMutation(ADD_LOCATION_TO_HOLIDAY)\n  const [ deleteLocationFromHoliday ] = useMutation(DELETE_LOCATION_FROM_HOLIDAY)\n\n  // Loading\n  if (loading) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationHolidaysBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationHolidaysBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const locations = data.organizationLocations\n  const holiday = data.organizationHoliday\n\n  let holiday_locations = {}\n  if (holiday.organizationLocations.edges) {\n    holiday.organizationLocations.edges.map(({ node}) => (\n      holiday_locations[node.id] = true\n    ))\n  }\n\n  cardTitle = cardTitle + \" - \" + holiday.name\n\n  return (\n    <OrganizationHolidaysBase showBack={true}>\n      <Card title={cardTitle}>\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in holiday_locations) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in holiday_locations))}\n                  {(!(node.id in holiday_locations)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.add_to_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let locationId = node.id\n                          addLocationToHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.added_to_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.add_to_holiday')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('organization.holiday.locations.delete_from_holiday')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let locationId = node.id\n                          deleteLocationFromHoliday({ variables: {\n                            input: {\n                              organizationHoliday: holidayId,\n                              organizationLocation: locationId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_HOLIDAY_LOCATIONS_QUERY, variables: {\"id\": holidayId }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('organization.holiday.locations.deleted_from_holiday'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('organization.holiday.locations.delete_from_holiday')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </Card>\n    </OrganizationHolidaysBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationHolidayEditLocations))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\n\nfunction OrganizationLanguagesBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/languages\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlanguage\">\n                  <ButtonAdd addUrl=\"/organization/languages/add\" />\n                </HasPermissionWrapper>\n              }    \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguagesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LANGUAGES_QUERY = gql`\n  query OrganizationLanguages($after: String, $before: String, $archived: Boolean) {\n    organizationLanguages(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LANGUAGE_QUERY = gql`\n  query OrganizationLanguage($id: ID!) {\n    organizationLanguage(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LANGUAGE = gql`\nmutation CreateOrganizationLanguage($input:CreateOrganizationLanguageInput!) {\n  createOrganizationLanguage(input: $input) {\n    organizationLanguage{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LANGUAGE = gql`\nmutation UpdateOrganizationLanguage($input: UpdateOrganizationLanguageInput!) {\n  updateOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LANGUAGE = gql`\nmutation ArchiveOrganizationLanguage($input: ArchiveOrganizationLanguageInput!) {\n  archiveOrganizationLanguage(input: $input) {\n    organizationLanguage {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase'\n\nimport { GET_LANGUAGES_QUERY, ARCHIVE_LANGUAGE } from \"./queries\"\n\n\nfunction OrganizationLanguages({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.languages.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LANGUAGES_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLanguage ] = useMutation(ARCHIVE_LANGUAGE)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.languages.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  let languages = data.organizationLanguages\n\n  // Empty list\n  if (!languages.edges.length) { return (\n    <OrganizationLanguagesBase>\n      <ContentCard cardTitle={t('organization.languages.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.languages.empty_list') : t(\"organization.languages.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )}\n\n\n  return (\n    <OrganizationLanguagesBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={languages.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: languages.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLanguages.edges\n            const pageInfo = fetchMoreResult.organizationLanguages.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new languages at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLanguages: {\n                    __typename: previousResult.organizationLanguages.__typename,\n                    edges: [ ...previousResult.organizationLanguages.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {languages.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/languages/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLanguage({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LANGUAGES_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLanguages))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LANGUAGE_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLanguageForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLanguageForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LANGUAGES_QUERY, ADD_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\n\n\nfunction OrganizationLanguageAdd({t, history}) {\n  const returnUrl = \"/organization/languages\"\n  const [ addLanguage ] = useMutation(ADD_LANGUAGE)\n  \n  return (\n   <OrganizationLanguagesBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.languages.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LANGUAGE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLanguage({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.languages.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLanguageForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLanguagesBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LANGUAGES_QUERY, GET_LANGUAGE_QUERY, UPDATE_LANGUAGE } from './queries'\nimport { LANGUAGE_SCHEMA } from './yupSchema'\nimport OrganizationLanguageForm from './OrganizationLanguageForm'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLanguagesBase from './OrganizationLanguagesBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLanguageEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.languages.title_edit')\n  const returnUrl = \"/organization/languages\"\n  const { loading, error, data } = useQuery(GET_LANGUAGE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLanguage ] = useMutation(UPDATE_LANGUAGE)\n\n  if (loading) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n\n  if (error) return (\n    <OrganizationLanguagesBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLanguagesBase>\n  )\n                    \n  const initialData = data.organizationLanguage;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLanguagesBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LANGUAGE_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLanguage({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LANGUAGES_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.languages.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLanguageForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLanguagesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLanguageEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATIONS_QUERY = gql`\n  query OrganizationLocations($after: String, $before: String, $archived: Boolean) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id,\n          archived,\n          displayPublic,\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LOCATION_QUERY = gql`\n  query OrganizationLocation($id: ID!) {\n    organizationLocation(id:$id) {\n      id\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION = gql`\nmutation CreateOrganizationLocation($input: CreateOrganizationLocationInput!) {\n  createOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n      displayPublic\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LOCATION = gql`\nmutation UpdateOrganizationLocation($input: UpdateOrganizationLocationInput!) {\n  updateOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION = gql`\nmutation ArchiveOrganizationLocation($input: ArchiveOrganizationLocationInput!) {\n  archiveOrganizationLocation(input: $input) {\n    organizationLocation {\n      id\n      archived\n    }\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLocationsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title=\"Organization\">\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/locations\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                resource=\"organizationlocation\">\n                  <ButtonAdd addUrl=\"/organization/locations/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>  \n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsBase))","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\n\nimport { GET_LOCATIONS_QUERY, ARCHIVE_LOCATION } from \"./queries\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocations({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.locations.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATIONS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLocation ] = useMutation(ARCHIVE_LOCATION)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  let locations = data.organizationLocations\n\n  // Empty list\n  if (!locations.edges.length) { return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n        {(!archived) ? t('organization.locations.empty_list') : t(\"organization.locations.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )}\n\n  return (\n    <OrganizationLocationsBase>\n      <ContentCard cardTitle={cardTitle}\n                headerContent={headerOptions}\n                hasCardBody={false}\n                pageInfo={locations.pageInfo}\n                onLoadMore={() => {\n                fetchMore({\n                  variables: {\n                    after: locations.pageInfo.endCursor\n                  },\n                  updateQuery: (previousResult, { fetchMoreResult }) => {\n                    const newEdges = fetchMoreResult.organizationLocations.edges\n                    const pageInfo = fetchMoreResult.organizationLocations.pageInfo\n\n                    return newEdges.length\n                      ? {\n                          // Put the new locations at the end of the list and update `pageInfo`\n                          // so we have the new `endCursor` and `hasNextPage` values\n                          organizationLocations: {\n                            __typename: previousResult.organizationLocations.__typename,\n                            edges: [ ...previousResult.organizationLocations.edges, ...newEdges ],\n                            pageInfo\n                          }\n                        }\n                      : previousResult\n                  }\n                })\n              }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locations.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <React.Fragment>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/edit/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                        <Button className='btn-sm' \n                                onClick={() => history.push(\"/organization/locations/rooms/\" + node.id)}\n                                color=\"secondary\">\n                          {t('general.rooms')}\n                        </Button>\n                      </React.Fragment>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLocation({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LOCATIONS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fa\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocations))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, ADD_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\nfunction OrganizationLocationAdd({ t, history }) {\n  const returnUrl = \"/organization/locations\"\n  const cardTitle = t('organization.locations.title_add')\n  const [ addLocation ] = useMutation(ADD_LOCATION)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>    \n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocation({ variables: {\n                input: {\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.locations.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <FoForm>\n                <Card.Body>\n                    <Form.Group>\n                      <Form.Label className=\"custom-switch\">\n                        <Field \n                          className=\"custom-switch-input\"\n                          type=\"checkbox\" \n                          name=\"displayPublic\" \n                          checked={values.displayPublic} />\n                        <span className=\"custom-switch-indicator\" ></span>\n                        <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                      </Form.Label>\n                      <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                    </Form.Group>    \n\n                    <Form.Group label={t('general.name')}>\n                      <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                      <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                    </Form.Group>\n                </Card.Body>\n                <Card.Footer>\n                    <Button \n                      color=\"primary\"\n                      className=\"pull-right\" \n                      type=\"submit\" \n                      disabled={isSubmitting}\n                    >\n                      {t('general.submit')}\n                    </Button>\n                    <Link to={returnUrl}>\n                      <Button color=\"link\">\n                          {t('general.cancel')}\n                      </Button>\n                    </Link>\n                </Card.Footer>\n            </FoForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik, Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport { GET_LOCATIONS_QUERY, GET_LOCATION_QUERY, UPDATE_LOCATION } from './queries'\nimport { LOCATION_SCHEMA } from './yupSchema'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Form\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLocationsBase from \"./OrganizationLocationsBase\"\n\n\nfunction OrganizationLocationEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.locations.title_edit')\n  const returnUrl = \"/organization/locations\"\n  const { loading, error, data } = useQuery(GET_LOCATION_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocation ] = useMutation(UPDATE_LOCATION)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.locations.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationsBase>\n  )\n\n  const initialData = data.organizationLocation;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n          {console.log(match.params.id)}\n        </Card.Header>                    \n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              displayPublic: initialData.displayPublic \n            }}\n            validationSchema={LOCATION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLocation({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                    displayPublic: values.displayPublic \n                  }\n                }, refetchQueries: [\n                    {query: GET_LOCATIONS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.locations.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <FoForm>\n                  <Card.Body>\n                      <Form.Group>\n                        <Form.Label className=\"custom-switch\">\n                          <Field \n                            className=\"custom-switch-input\"\n                            type=\"checkbox\" \n                            name=\"displayPublic\" \n                            checked={values.displayPublic} />\n                          <span className=\"custom-switch-indicator\" ></span>\n                          <span className=\"custom-switch-description\">{t('organization.location.public')}</span>\n                        </Form.Label>\n                        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n                      </Form.Group>     \n                      <Form.Group label={t('general.name')} >\n                        <Field type=\"text\" \n                              name=\"name\" \n                              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                              autoComplete=\"off\" />\n                        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n                      </Form.Group>\n                  </Card.Body>\n                  <Card.Footer>\n                      <Button \n                        className=\"pull-right\"\n                        color=\"primary\"\n                        disabled={isSubmitting}\n                        type=\"submit\"\n                      >\n                        {t('general.submit')}\n                      </Button>\n                      <Link to={returnUrl}>\n                        <Button\n                          type=\"button\" \n                          color=\"link\" \n                        >\n                            {t('general.cancel')}\n                        </Button>\n                      </Link>\n                    </Card.Footer>\n                </FoForm>\n              )}\n            </Formik>\n          </Card>\n    </OrganizationLocationsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_ROOMS_QUERY = gql`\n  query OrganizationLocationRooms($after: String, $before: String, $organizationLocation: ID!, $archived: Boolean!) {\n    organizationLocationRooms(first: 15, before: $before, after: $after, organizationLocation: $organizationLocation, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationLocation {\n            id\n            name\n          }\n          archived,\n          displayPublic\n          name\n        }\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_LOCATION_ROOM_QUERY = gql`\n  query OrganizationLocationRoom($id: ID!) {\n    organizationLocationRoom(id:$id) {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n      archived\n    }\n  }\n`\n\nexport const ADD_LOCATION_ROOM = gql`\n  mutation CreateOrganizationLocationRoom($input: CreateOrganizationLocationRoomInput!) {\n    createOrganizationLocationRoom(input: $input) {\n      organizationLocationRoom {\n        id\n        organizationLocation {\n          id\n          name\n        }\n        archived\n        displayPublic\n        name\n      }\n    }\n  }\n`\n\nexport const UPDATE_LOCATION_ROOM = gql`\nmutation UpdateOrganizationLocationRoom($input: UpdateOrganizationLocationRoomInput!) {\n  updateOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      organizationLocation {\n        id\n        name\n      }\n      name\n      displayPublic\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LOCATION_ROOM = gql`\nmutation ArchiveOrganizationLocationRoom($input: ArchiveOrganizationLocationRoomInput!) {\n  archiveOrganizationLocationRoom(input: $input) {\n    organizationLocationRoom {\n      id\n      archived\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\n\n\nfunction OrganizationLocationRoomsBase({t, history, match, children, showAdd=false, returnUrl=\"/organization/locations\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlocationroom\">\n                  <ButtonAdd addUrl={`/organization/locations/rooms/add/${match.params.location_id}`}\n                    className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>        \n)}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomsBase))","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Icon,\n  Dimmer,\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ARCHIVE_LOCATION_ROOM } from \"./queries\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationsRooms({ t, history, match }) {\n  const organizationLocationId = match.params.location_id\n  let cardTitle = t('organization.location_rooms.title')\n  let [archived, setArchived] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LOCATION_ROOMS_QUERY, {\n    variables: { archived: archived, organizationLocation: organizationLocationId }\n  })\n  const [ archiveLocationRoom ] = useMutation(ARCHIVE_LOCATION_ROOM)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.location_rooms.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  let locationRooms = data.organizationLocationRooms\n  let location = data.organizationLocation\n\n  cardTitle = `${cardTitle} - ${location.name}`\n\n  // Empty list\n  if (!locationRooms.edges.length) { return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.location_rooms.empty_list') : t(\"organization.location_rooms.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )}\n\n  return (\n    <OrganizationLocationRoomsBase showAdd={true}>\n      <ContentCard \n        cardTitle={cardTitle}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={locationRooms.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: locationRooms.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationLocationsRooms.edges\n                        const pageInfo = fetchMoreResult.organizationLocationsRooms.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationLocationsRooms: {\n                                __typename: previousResult.organizationLocationsRooms.__typename,\n                                edges: [ ...previousResult.organizationLocationsRooms.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {locationRooms.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.displayPublic) ? \n                      <Badge color=\"success\">{t('general.yes')}</Badge>: \n                      <Badge color=\"danger\">{t('general.no')}</Badge>}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/locations/rooms/edit/\" + match.params.location_id + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                      <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.archive')} \n                          href=\"\"\n                          onClick={() => {\n                            console.log(\"clicked archived\")\n                            let id = node.id\n                            archiveLocationRoom({ variables: {\n                              input: {\n                              id,\n                              archived: !archived\n                              }\n                      }, refetchQueries: [\n                          { \n                            query: GET_LOCATION_ROOMS_QUERY, \n                            variables: {archived: archived, organizationLocation: organizationLocationId }\n                          }\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(\n                          (archived) ? t('general.unarchived'): t('general.archived'), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fa\" name=\"inbox\" />\n                      </button>\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationsRooms))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LOCATION_ROOM_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst OrganizationLocationRoomForm = ({ t, history, match, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayPublic\" \n                checked={values.displayPublic} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('organization.location_room.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>    \n\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_LOCATION_ROOMS_QUERY, ADD_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase';\n\n\nfunction OrganizationLocationRoomAdd({ t, history, match }) {\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const [ addLocationRoom ] = useMutation(ADD_LOCATION_ROOM)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={t(\"organization.location_rooms.title_add\")}>\n        <Formik\n          initialValues={{ name: '', displayPublic: true }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLocationRoom({ variables: {\n                input: {\n                  organizationLocation: locationId,\n                  name: values.name, \n                  displayPublic: values.displayPublic\n                }\n              }, refetchQueries: [\n                  {query: GET_LOCATION_ROOMS_QUERY,\n                    variables: {\"archived\": false, \"organizationLocation\": locationId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n              />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LOCATION_ROOMS_QUERY, GET_LOCATION_ROOM_QUERY, UPDATE_LOCATION_ROOM } from './queries'\nimport { LOCATION_ROOM_SCHEMA } from './yupSchema'\nimport OrganizationLocationRoomForm from './OrganizationLocationRoomForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport OrganizationLocationRoomsBase from './OrganizationLocationRoomsBase'\n\n\nfunction OrganizationLocationRoomEdit({t, history, match}) {\n  const id = match.params.id\n  const locationId = match.params.location_id\n  const returnUrl = `/organization/locations/rooms/${locationId}`\n  const cardTitle = t('organization.location_rooms.title_edit')\n  const { loading, error, data } = useQuery(GET_LOCATION_ROOM_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLocationRoom ] = useMutation(UPDATE_LOCATION_ROOM)\n\n  // Loading\n  if (loading) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLocationRoomsBase>\n  )\n\n  const initialData = data.organizationLocationRoom;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLocationRoomsBase showBack={true} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            displayPublic: initialData.displayPublic \n          }}\n          validationSchema={LOCATION_ROOM_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateLocationRoom({ variables: {\n                input: {\n                  id: match.params.id,\n                  name: values.name,\n                  displayPublic: values.displayPublic \n                }\n              }, refetchQueries: [\n                {query: GET_LOCATION_ROOMS_QUERY,\n                  variables: {\"archived\": false, \"organizationLocation\": match.params.location_id }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.location_rooms.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationLocationRoomForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationLocationRoomsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLocationRoomEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationLevelsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/levels\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationlevel\">\n                  <ButtonAdd addUrl=\"/organization/levels/add\" />\n                </HasPermissionWrapper>\n              }     \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationLevelsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_LEVELS_QUERY = gql`\n  query OrganizationLevels($after: String, $before: String, $archived: Boolean) {\n    organizationLevels(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_LEVEL_QUERY = gql`\n  query SchoolLevel($id: ID!) {\n    organizationLevel(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_LEVEL = gql`\nmutation CreateOrganizationLevel($input:CreateOrganizationLevelInput!) {\n  createOrganizationLevel(input: $input) {\n    organizationLevel{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_LEVEL = gql`\nmutation UpdateOrganizationLevel($input: UpdateOrganizationLevelInput!) {\n  updateOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_LEVEL = gql`\nmutation ArchiveOrganizationLevel($input: ArchiveOrganizationLevelInput!) {\n  archiveOrganizationLevel(input: $input) {\n    organizationLevel {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationLevelsBase from './OrganizationLevelsBase'\n\nimport { GET_LEVELS_QUERY, ARCHIVE_LEVEL } from \"./queries\"\n\n\nfunction OrganizationLevels({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.levels.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_LEVELS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveLevel ] = useMutation(ARCHIVE_LEVEL)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.levels.error_loading')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  let levels = data.organizationLevels\n\n  // Empty list\n  if (!levels.edges.length) { return (\n    <OrganizationLevelsBase>\n      <ContentCard cardTitle={t('organization.levels.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )}\n\n\n  return (\n    <OrganizationLevelsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={levels.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: levels.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationLevels.edges\n            const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new levels at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationLevels: {\n                    __typename: previousResult.organizationLevels.__typename,\n                    edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {levels.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveLevel({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationLevels))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const LEVEL_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationLevelForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationLevelForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_LEVELS_QUERY, ADD_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\n\n\nfunction OrganizationLevelAdd({t, history}) {\n  const returnUrl = \"/organization/levels\"\n  const [ addLevel ] = useMutation(ADD_LEVEL)\n  \n  return (\n   <OrganizationLevelsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.levels.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', code: '' }}\n          validationSchema={LEVEL_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addLevel({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.levels.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationLevelForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationLevelsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_LEVELS_QUERY, GET_LEVEL_QUERY, UPDATE_LEVEL } from './queries'\nimport { LEVEL_SCHEMA } from './yupSchema'\nimport OrganizationLevelForm from './OrganizationLevelForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationLevelsBase from './OrganizationLevelsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationLevelEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.levels.title_edit')\n  const returnUrl = \"/organization/levels\"\n  const { loading, error, data } = useQuery(GET_LEVEL_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateLevel ] = useMutation(UPDATE_LEVEL)\n\n  if (loading) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n\n  if (error) return (\n    <OrganizationLevelsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationLevelsBase>\n  )\n                    \n  const initialData = data.organizationLevel;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationLevelsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={LEVEL_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateLevel({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_LEVELS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.levels.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationLevelForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationLevelsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationLevelEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button\n} from \"tabler-react\"\n\nconst ButtonEdit = ({ t, editUrl, className=\"\" }) => (\n  <Link to={editUrl}>\n    <Button\n      className={`btn-sm ${className}`}\n      color=\"secondary\"\n    >\n        {t(\"general.edit\")}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(ButtonEdit)\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORGANIZATION_PRODUCTS_QUERY = gql`\n  query OrganizationProducts($before:String, $after:String, $archived: Boolean) {\n    organizationProducts(first: 100, before:$before, after:$after, archived: $archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImage\n          urlImageThumbnailSmall\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_ORGANIZATION_PRODUCT_QUERY = gql`\n  query OrganizationProduct($id:ID!) {\n    organizationProduct(id: $id) {\n      id\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ORGANIZATION_PRODUCT = gql`\n  mutation CreateOrganizationProduct($input:CreateOrganizationProductInput!) {\n    createOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ORGANIZATION_PRODUCT = gql`\n  mutation UpdateOrganizationProduct($input:UpdateOrganizationProductInput!) {\n    updateOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_ORGANIZATION_PRODUCT   = gql`\n  mutation ArchiveOrganizationProduct($input: ArchiveOrganizationProductInput!) {\n    archiveOrganizationProduct(input: $input) {\n      organizationProduct {\n        id\n        archived\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_archive = ({t, msgConfirm, msgDescription, msgSuccess, archiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_archive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_archive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                archiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"inbox\" /> {t('general.confirm_archive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_archive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_archive from '../../tools/confirm_archive'\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, archiveFunction, archiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.archive')} \n        onClick={() => {\n          confirm_archive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              archiveFunction: archiveFunction,\n              functionVariables: archiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonArchive))","import React from 'react'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\nimport {\n  Icon,\n} from \"tabler-react\";\n\n\nconst confirm_unarchive = ({t, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, functionVariables}) => {\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div className='custom-ui'>\n            <h1>{t('general.confirm_unarchive')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_unarchive_no')}</button>\n            <button\n              className=\"btn btn-warning\"\n              onClick={() => {\n                unArchiveFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              <Icon name=\"corner-up-left\" /> {t('general.confirm_unarchive_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  }\n\nexport default confirm_unarchive\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport confirm_unarchive from \"../../tools/confirm_unarchive\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ButtonUnArchive({t, match, history, msgConfirm, msgDescription, msgSuccess, unArchiveFunction, unArchiveFunctionVariables}) {\n  return (\n    <button className=\"icon btn btn-link btn-sm float-right\" \n        title={t('general.unarchive')} \n        onClick={() => {\n          confirm_unarchive({\n              t: t,\n              msgConfirm: <p>{msgConfirm}</p>,\n              msgDescription: msgDescription,\n              msgSuccess: msgSuccess,\n              unArchiveFunction: unArchiveFunction,\n              functionVariables: unArchiveFunctionVariables\n          })\n      }}>\n      <Icon prefix=\"fe\" name=\"inbox\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ButtonUnArchive))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCTS_QUERY } from \"./queries\"\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction OrganizationProductArchive({t, match, history, node}) {\n  const [archiveProduct] = useMutation(ARCHIVE_ORGANIZATION_PRODUCT)\n  const refetchQueries = [\n    { query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: node.archived } },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"organization.products.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveProduct}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"organization.products.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveProduct}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(OrganizationProductArchive))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationProductsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/products\" />           \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                    resource=\"organizationproduct\">\n                  <ButtonAdd addUrl=\"/organization/products/add\" />\n                </HasPermissionWrapper>    \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationProductsBase))","import React, { useState } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Avatar,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ButtonEdit from \"../../ui/ButtonEdit\"\nimport { GET_ORGANIZATION_PRODUCTS_QUERY  } from \"./queries\"\nimport OrganizationProductArchive from './OrganizationProductArchive'\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\n\n\nfunction OrganizationProducts({t, history}) {\n  const cardTitle = t('organization.products.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_ORGANIZATION_PRODUCTS_QUERY, { \n    variables: {archived: archived}\n  })\n\n  if (loading) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.products.error_loading')}</p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  \n  const products = data.organizationProducts\n  // Empty list\n  if (!products.edges.length) { return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                  headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.products.empty_list') : t(\"organization.products.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )}   \n\n  return (\n    <OrganizationProductsBase>\n      <ContentCard cardTitle={cardTitle}\n                   headerContent={headerOptions}\n                   hasCardBody={false}\n                   pageInfo={products.pageInfo}\n                   onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: products.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationProducts.edges\n                        const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new locations at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationProducts: {\n                                __typename: previousResult.organizationProducts.__typename,\n                                edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {products.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name} <br />\n                    <small className=\"text-muted\">{node.description.trunc(46)}</small>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                        <ButtonEdit editUrl={`/organization/products/edit/${node.id}`} />\n                    }\n                    <OrganizationProductArchive node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProducts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PRODUCT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    price: Yup.number(),\n    // sortOrder: Yup.number()\n    //   .min(0),\n    // minDuration: Yup.number()\n    //   .min(0),\n    // classes: Yup.number()\n    //   .min(0),\n    // subscriptionUnit: Yup.string(),\n    // creditValidity: Yup.number()\n    //   .min(0),\n    // reconciliationClasses: Yup.number()\n    //   .min(0),\n    // quickStatsAmount: Yup.number()\n    //   .min(0),\n    // termsAndConditions: Yup.string()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nfunction OrganizationProductForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  returnUrl,\n  initialData,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              {console.log(\"query data in classpass add:\")}\n              {console.log(initialData)}\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                      name=\"financeGlaccount\" \n                      className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                      name=\"financeCostcenter\" \n                      className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {initialData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, ADD_ORGANIZATION_PRODUCT, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductAdd({ t, history, match }) {\n  const returnUrl = `/organization/products/`\n  const cardTitle = t(\"organization.products.add\")\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addOrganizationProduct] = useMutation(ADD_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n              imageFileName: fileName,\n            }\n\n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n\n              addOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: {archived: false}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.products.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductAdd))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport { GET_ORGANIZATION_PRODUCTS_QUERY, UPDATE_ORGANIZATION_PRODUCT, GET_ORGANIZATION_PRODUCT_QUERY } from \"./queries\"\nimport { PRODUCT_SCHEMA } from './yupSchema'\n\n// import ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport OrganizationProductsBase from \"./OrganizationProductsBase\"\nimport OrganizationProductForm from './OrganizationProductForm'\n\n\n\nfunction OrganizationProductEdit({ t, history, match }) {\n  const id = match.params.id\n  const returnUrl = `/organization/products/`\n  // const activeLink = 'media'\n  const cardTitle = t(\"organization.products.edit\")\n\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_PRODUCT_QUERY, { \n    variables: { id: id }\n  })\n  const [ updateOrganizationProduct ] = useMutation(UPDATE_ORGANIZATION_PRODUCT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </OrganizationProductsBase>\n  )\n\n  if (error) {\n    console.log(error)\n    return (\n      <OrganizationProductsBase showBack={true} >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </OrganizationProductsBase>\n    )\n  } \n\n  const organizationProduct = data.organizationProduct\n\n  // Initial finance tax rate\n  let initialTaxRate = \"\"\n  if ( organizationProduct.financeTaxRate ) {\n    initialTaxRate = organizationProduct.financeTaxRate.id\n  }\n  // Initial finance GLaccount\n  let initialGlaccount = \"\"\n  if ( organizationProduct.financeGlaccount ) {\n    initialGlaccount = organizationProduct.financeGlaccount.id\n  }\n  // Initial finance cost center\n  let initialCostcenter = \"\"\n  if ( organizationProduct.financeCostcenter ) {\n    initialCostcenter = organizationProduct.financeCostcenter.id\n  }\n\n\n  return (\n    <OrganizationProductsBase showBack={true} >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: organizationProduct.name,\n            description: organizationProduct.description,\n            price: organizationProduct.price,\n            financeTaxRate: initialTaxRate,\n            financeGlaccount: initialGlaccount,\n            financeCostcenter: initialCostcenter,\n          }}\n          validationSchema={ PRODUCT_SCHEMA }\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n\n            let inputVars = {\n              id: id,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeCostcenter: values.financeCostcenter,\n              financeGlaccount: values.financeGlaccount,\n            }\n  \n            function updateProduct() {\n              updateOrganizationProduct({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                {query: GET_ORGANIZATION_PRODUCTS_QUERY, variables: { archived: false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('organization.products.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.image = b64_enc_file\n              inputVars.imageFileName = fileName\n  \n              updateProduct()\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              // No file provided, update the data by calling updateProduct\n              updateProduct()\n            }\n          }}\n        >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationProductForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              initialData={data}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationProductsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationProductEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../ui/ButtonAdd\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction OrganizationShiftsBase({t, history, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/organization/shifts\" />\n                :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationshift\">\n                  <ButtonAdd addUrl=\"/organization/shifts/add\" />\n                </HasPermissionWrapper>\n              }  \n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query OrganizationShifts($after: String, $before: String, $archived: Boolean) {\n    organizationShifts(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query SchoolShift($id: ID!) {\n    organizationShift(id:$id) {\n      id\n      name\n      archived\n    }\n  }\n`\n\nexport const ADD_SHIFT = gql`\nmutation CreateOrganizationShift($input:CreateOrganizationShiftInput!) {\n  createOrganizationShift(input: $input) {\n    organizationShift{\n      id\n      archived\n      name\n    }\n  }\n}\n`\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateOrganizationShift($input: UpdateOrganizationShiftInput!) {\n  updateOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      name\n    }\n  }\n}\n`\n\nexport const ARCHIVE_SHIFT = gql`\nmutation ArchiveOrganizationShift($input: ArchiveOrganizationShiftInput!) {\n  archiveOrganizationShift(input: $input) {\n    organizationShift {\n      id\n      archived\n    }\n  }\n}\n`","// @flow\n\nimport React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationShiftsBase from './OrganizationShiftsBase'\n\nimport { GET_SHIFTS_QUERY, ARCHIVE_SHIFT } from \"./queries\"\n\n\nfunction OrganizationShifts({t, history}) {\n  let [archived, setArchived] = useState(false)\n  const cardTitle = t('organization.shifts.title')\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SHIFTS_QUERY, {\n    variables: { archived: archived }\n  })\n  const [ archiveShift ] = useMutation(ARCHIVE_SHIFT)\n\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.shifts.error_loading')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  let shifts = data.organizationShifts\n\n  // Empty list\n  if (!shifts.edges.length) { return (\n    <OrganizationShiftsBase>\n      <ContentCard cardTitle={t('organization.shifts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.shifts.empty_list') : t(\"organization.shifts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )}\n\n\n  return (\n    <OrganizationShiftsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={shifts.pageInfo}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: shifts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.organizationShifts.edges\n            const pageInfo = fetchMoreResult.organizationShifts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new shifts at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  organizationShifts: {\n                    __typename: previousResult.organizationShifts.__typename,\n                    edges: [ ...previousResult.organizationShifts.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              : previousResult\n          }\n        })\n      }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {shifts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/shifts/edit/\" + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.archive')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked archived\")\n                          let id = node.id\n                          archiveShift({ variables: {\n                            input: {\n                            id,\n                            archived: !archived\n                            }\n                    }, refetchQueries: [\n                        {query: GET_SHIFTS_QUERY, variables: {\"archived\": archived }}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (archived) ? t('general.unarchived'): t('general.archived'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      <Icon prefix=\"fe\" name=\"inbox\" />\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(OrganizationShifts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n    Button,\n    Card,\n    Form\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nconst OrganizationShiftForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n            <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(OrganizationShiftForm))","// @flow\n\nimport React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_SHIFTS_QUERY, ADD_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\n\n\nfunction OrganizationShiftAdd({t, history}) {\n  const returnUrl = \"/organization/shifts\"\n  const [ addShift ] = useMutation(ADD_SHIFT)\n  \n  return (\n   <OrganizationShiftsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('organization.shifts.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '' }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addShift({ variables: {\n                input: {\n                  name: values.name, \n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors }) => (\n            <OrganizationShiftForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </OrganizationShiftsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY, UPDATE_SHIFT } from './queries'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport OrganizationShiftForm from './OrganizationShiftForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport OrganizationShiftsBase from './OrganizationShiftsBase';\nimport ContentCard from \"../../general/ContentCard\"\n\n\nfunction OrganizationShiftEdit({t, match, history}) {\n  const id = match.params.id\n  const cardTitle = t('organization.shifts.title_edit')\n  const returnUrl = \"/organization/shifts\"\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n\n  if (error) return (\n    <OrganizationShiftsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationShiftsBase>\n  )\n                    \n  const initialData = data.organizationShift;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <OrganizationShiftsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n            }}\n            validationSchema={SHIFT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateShift({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name,\n                  }\n                }, refetchQueries: [\n                    {query: GET_SHIFTS_QUERY, variables: {\"archived\": false }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.shifts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationShiftForm \n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationShiftsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationShiftEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsBase({t, children, showBack=false}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              {(showBack) ? \n                <ButtonBack returnUrl=\"/organization/subscriptions\" />\n              :\n                <React.Fragment>\n                  <Link to=\"/organization/subscriptions/groups\" \n                        className='btn btn-secondary ml-2 mr-2'>\n                      <Icon prefix=\"fe\" name=\"folder\" /> {t('general.groups')}\n                  </Link>\n                  <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscription\">\n                    <ButtonAdd addUrl=\"/organization/subscriptions/add\" />\n                  </HasPermissionWrapper>\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String, $archived: Boolean) {\n    organizationSubscriptions(first: 15, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          creditValidity\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n          financeGlaccount {\n            id \n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!, $after: String, $before: String) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      creditValidity\n      unlimited\n      termsAndConditions\n      registrationFee\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeGlaccounts(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 15, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String) {\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SUBSCRIPTION = gql`\n  mutation CreateSubscription($input: CreateOrganizationSubscriptionInput!) {\n    createOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SUBSCRIPTION = gql`\n  mutation UpdateOrganizationSubscription($input: UpdateOrganizationSubscriptionInput!) {\n    updateOrganizationSubscription(input: $input) {\n      organizationSubscription {\n        id\n      }\n    }\n  }\n`\n\n\nexport const ARCHIVE_SUBSCRIPTION = gql`\nmutation ArchiveOrganizationSubscription($input: ArchiveOrganizationSubscriptionInput!) {\n  archiveOrganizationSubscription(input: $input) {\n    organizationSubscription {\n      id\n      archived\n    }\n  }\n}\n`","import React, { useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase'\n\nimport { GET_SUBSCRIPTIONS_QUERY, ARCHIVE_SUBSCRIPTION } from \"./queries\"\n\n\nfunction OrganizationSubscriptions({t, history}) {\n  const cardTitle = t('organization.subscriptions.title')\n  let [archived, setArchived] = useState(false)\n  const {loading, error, data, refetch, fetchMore} = useQuery(GET_SUBSCRIPTIONS_QUERY, {\n    variables: {archived: archived},\n    fetchPolicy: \"network-only\"\n  })\n  const [archiveSubscription] = useMutation(ARCHIVE_SUBSCRIPTION)\n  const headerOptions = <Card.Options>\n    <Button color={(!archived) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {setArchived(false); refetch({archived: false});}}>\n      {t('general.current')}\n    </Button>\n    <Button color={(archived) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {setArchived(true); refetch({archived: true});}}>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscriptions.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  let subscriptions = data.organizationSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) { return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={cardTitle}\n                    headerContent={headerOptions}>\n        <p>\n          {(!archived) ? t('organization.subscriptions.empty_list') : t(\"organization.subscriptions.empty_archive\")}\n        </p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )}\n\n  return (\n    <OrganizationSubscriptionsBase>\n      <ContentCard cardTitle={t('organization.subscriptions.title')}\n                  headerContent={headerOptions}\n                  hasCardBody={false}\n                  pageInfo={subscriptions.pageInfo}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: subscriptions.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationSubscriptions.edges\n                        const pageInfo = fetchMoreResult.organizationSubscriptions.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new subscriptions at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationSubscriptions: {\n                                __typename: previousResult.organizationSubscriptions.__typename,\n                                edges: [ ...previousResult.organizationSubscriptions.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes')}</Table.ColHeader>\n              <Table.ColHeader><span className=\"pull-right\">{t('general.price')}</span></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscriptions.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {\n                    (node.unlimited) ? t(\"general.unlimited\"):\n                    <div>\n                      {node.classes} <br />\n                      <span className=\"text-muted\"> {t(\"general.a\")} {node.subscriptionUnitDisplay}</span>\n                    </div>\n                  }\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {node.priceTodayDisplay} <br />\n                  <Link to={\"/organization/subscriptions/prices/\" + node.id}\n                        className='btn btn-link btn-sm'>\n                      {/* <Icon prefix=\"fe\" name=\"dollar-sign\" />  */}\n                      {t('general.edit_price')}\n                  </Link>\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  }\n                  <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        console.log(\"clicked archived\")\n                        let id = node.id\n                        archiveSubscription({ variables: {\n                          input: {\n                          id,\n                          archived: !archived\n                          }\n                  }, refetchQueries: [\n                      {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": archived }}\n                  ]}).then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      (archived) ? t('general.unarchived'): t('general.archived'), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                  }}>\n                    <Icon name=\"inbox\" />\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ContentCard>\n  </OrganizationSubscriptionsBase>\n)}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string(),\n    sortOrder: Yup.number()\n      .min(0),\n    minDuration: Yup.number()\n      .min(0),\n    classes: Yup.number()\n      .min(0),\n    subscriptionUnit: Yup.string(),\n    creditValidity: Yup.number()\n      .min(0),\n    reconciliationClasses: Yup.number()\n      .min(0),\n    quickStatsAmount: Yup.number()\n      .min(0),\n    termsAndConditions: Yup.string()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\";\n\n\nconst OrganizationSubscriptionForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayPublic\" \n              checked={values.displayPublic} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.public')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"displayShop\" \n              checked={values.displayShop} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('organization.subscription.shop')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"displayShop\" component=\"div\" />   \n      </Form.Group>      \n      <Form.Group label={t('general.name')} >\n        <Field type=\"text\" \n              name=\"name\" \n              className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.description')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"description\"\n            initialValue={values.description}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"description\", e.target.getContent())\n              setFieldTouched(\"description\", true)\n            }}\n          />\n        <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('shop.subscriptions.min_duration_in_months')}>\n            <Field type=\"text\" \n                  name=\"minDuration\" \n                  className={(errors.minDuration) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"minDuration\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.sort_order')}>\n            <Field type=\"text\" \n                  name=\"sortOrder\" \n                  className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Form.Group>\n        <Form.Label className=\"custom-switch\">\n            <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"unlimited\" \n              checked={values.unlimied} />\n            <span className=\"custom-switch-indicator\" ></span>\n            <span className=\"custom-switch-description\">{t('general.unlimited')}</span>\n          </Form.Label>\n        <ErrorMessage name=\"unlimited\" component=\"div\" />   \n      </Form.Group>  \n      {/* Show if unlimited */}\n      { (values.unlimited) ? \"\"\n        : \n        // Show if not unlimited\n        <React.Fragment>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.classes')}>\n                <Field type=\"text\" \n                      name=\"classes\" \n                      className={(errors.classes) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"classes\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group> \n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.subscription_unit')}>\n                <Field component=\"select\" \n                      name=\"subscriptionUnit\" \n                      className={(errors.subscriptionUnit) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                  <option value=\"WEEK\" key={v4()}>{t('subscription_unit.week')}</option>\n                  <option value=\"MONTH\" key={v4()}>{t('subscription_unit.month')}</option>\n                </Field>\n                <ErrorMessage name=\"subscriptionUnit\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.credit_validity')}>\n                <Field type=\"text\" \n                      name=\"creditValidity\" \n                      className={(errors.creditValidity) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"creditValidity\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('organization.subscriptions.reconciliation_classes')}>\n                <Field type=\"text\" \n                      name=\"reconciliationClasses\" \n                      className={(errors.reconciliationClasses) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n                <ErrorMessage name=\"reconciliationClasses\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n        </React.Fragment>\n      } \n      <Form.Group label={t('general.terms_and_conditions')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"termsAndConditions\"\n            initialValue={values.termsAndConditions}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"termsAndConditions\", e.target.getContent())\n              setFieldTouched(\"termsAndConditions\", true)\n            }}\n          />\n        <ErrorMessage name=\"termsAndConditions\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {/* <Form.Group label={t('general.membership')}>\n        <Field component=\"select\" \n              name=\"organizationMembership\" \n              className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t(\"general.membership_not_required\")}</option>\n          {inputData.organizationMemberships.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"organizationMembership\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>  */}\n      <Form.Group label={t('general.quickStatsAmount')}>\n        <Field type=\"text\" \n              name=\"quickStatsAmount\" \n              className={(errors.quickStatsAmount) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n        <ErrorMessage name=\"quickStatsAmount\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.glaccount')}>\n            <Field component=\"select\" \n                  name=\"financeGlaccount\" \n                  className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeGlaccounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.costcenter')}>\n            <Field component=\"select\" \n                  name=\"financeCostcenter\" \n                  className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financeCostcenters.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\"\n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from \"./OrganizationSubscriptionsBase\"\n\n\nfunction OrganizationSubscriptionAdd({ t, history }) {\n  const cardTitle = t('organization.subscriptions.title_add')\n  const returnUrl =  \"/organization/subscriptions\"\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [createSubscription] = useMutation(CREATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{ \n              displayPublic: true,\n              displayShop: true,\n              name: \"\",\n              description: \"\",\n              sortOrder: 0,\n              minDuration: 1,\n              classes: 1,\n              subscriptionUnit: \"WEEK\",\n              reconciliationClasses: 0,\n              creditValidity: 31,\n              unlimited: false,\n              termsAndConditions: \"\",\n              organizationMembership: \"\",\n              quickStatsAmount: 0,\n              financeGlaccount: \"\",\n              financeCostcenter: \"\"\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                createSubscription({ variables: {\n                  input: {\n                    displayPublic: values.displayPublic,\n                    displayShop: values.displayShop,\n                    name: values.name,\n                    description: values.description,\n                    sortOrder: parseInt(values.sortOrder),\n                    minDuration: parseInt(values.minDuration),\n                    classes: parseInt(values.classes),\n                    subscriptionUnit: values.subscriptionUnit,\n                    reconciliationClasses: parseInt(values.reconciliationClasses),\n                    creditValidity: parseInt(values.creditValidity),\n                    unlimited: values.unlimited,\n                    termsAndConditions: values.termsAndConditions,\n                    quickStatsAmount: values.quickStatsAmount,\n                    financeGlaccount: values.financeGlaccount,\n                    financeCostcenter: values.financeCostcenter\n                  }\n                }})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('organization.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n              }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <OrganizationSubscriptionForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\n\n// class OrganizationSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const returnUrl = \"/organization/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"add\"\n//                                       resource=\"organizationsubscription\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_QUERY, UPDATE_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionForm from './OrganizationSubscriptionForm'\n\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsBase from './OrganizationSubscriptionsBase';\n\n\nfunction OrganizationSubscriptionEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions\"\n  const cardTitle = t('organization.subscriptions.title_edit')\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, { \n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateSubscription ] = useMutation(UPDATE_SUBSCRIPTION)\n\n  if (loading) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsBase>\n  )\n\n  const initialData = data\n\n  let initialMembership = \"\"\n  if (initialData.organizationSubscription.organizationMembership) {\n    initialMembership =  initialData.organizationSubscription.organizationMembership.id\n  } \n\n  let initialGlaccount = \"\"\n  if (initialData.organizationSubscription.financeGlaccount) {\n    initialGlaccount =  initialData.organizationSubscription.financeGlaccount.id\n  } \n\n  let initialCostcenter = \"\"\n  if (initialData.organizationSubscription.financeCostcenter) {\n    initialCostcenter =  initialData.organizationSubscription.financeCostcenter.id\n  } \n\n  return (\n    <OrganizationSubscriptionsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.organizationSubscription.displayPublic,\n            displayShop: initialData.organizationSubscription.displayShop,\n            name: initialData.organizationSubscription.name,\n            description: initialData.organizationSubscription.description,\n            sortOrder: initialData.organizationSubscription.sortOrder,\n            minDuration: initialData.organizationSubscription.minDuration,\n            classes: initialData.organizationSubscription.classes,\n            subscriptionUnit: initialData.organizationSubscription.subscriptionUnit,\n            reconciliationClasses: initialData.organizationSubscription.reconciliationClasses,\n            creditValidity: initialData.organizationSubscription.creditValidity,\n            unlimited: initialData.organizationSubscription.unlimited,\n            termsAndConditions: initialData.organizationSubscription.termsAndConditions,\n            organizationMembership: initialMembership,\n            quickStatsAmount: initialData.organizationSubscription.quickStatsAmount,\n            financeGlaccount:  initialGlaccount,\n            financeCostcenter: initialCostcenter\n          }}\n          validationSchema={SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateSubscription({ variables: {\n                input: {\n                  id: match.params.id,\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  name: values.name,\n                  description: values.description,\n                  sortOrder: parseInt(values.sortOrder),\n                  minDuration: parseInt(values.minDuration),\n                  classes: parseInt(values.classes),\n                  subscriptionUnit: values.subscriptionUnit,\n                  reconciliationClasses: parseInt(values.reconciliationClasses),\n                  creditValidity: parseInt(values.creditValidity),\n                  unlimited: values.unlimited,\n                  termsAndConditions: values.termsAndConditions,\n                  quickStatsAmount: values.quickStatsAmount,\n                  financeGlaccount: values.financeGlaccount,\n                  financeCostcenter: values.financeCostcenter\n                }\n              }})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('organization.subscriptions.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <OrganizationSubscriptionForm\n              inputData={initialData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonBack from '../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsGroupsBase({ \n  t, history, children, showAdd=false, returnUrl=\"/organization/subscriptions\" \n}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ? \n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptiongroup\">\n                  <ButtonAdd addUrl=\"/organization/subscriptions/groups/add\" className=\"ml-2\" />\n                </HasPermissionWrapper>\n                : \"\"\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroupsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_GROUPS_QUERY = gql`\n  query OrganizationSubscriptionGroups($after: String, $before: String) {\n    organizationSubscriptionGroups(first: 100, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_QUERY = gql`\n  query OrganizationSubscriptionGroup($id: ID!) {\n    organizationSubscriptionGroup(id:$id) {\n      id\n      name\n      description\n    }\n  }\n`\n\n\nexport const GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY = gql`\n  query GetPassesAndGroupMembership($after: String, $before: String, $id:ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationSubscriptionGroup(id: $id) {\n      id\n      name\n      description\n      organizationSubscriptions {\n        edges {\n          node {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_GROUP = gql`\n  mutation CreateOrganizationSubscriptionGroup($input:CreateOrganizationSubscriptionGroupInput!) {\n    createOrganizationSubscriptionGroup(input: $input) {\n      organizationSubscriptionGroup{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SUBSCRIPTION_GROUP = gql`\nmutation UpdateOrganizationSubscriptionGroup($input: UpdateOrganizationSubscriptionGroupInput!) {\n  updateOrganizationSubscriptionGroup(input: $input) {\n    organizationSubscriptionGroup {\n      id\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_GROUP = gql`\n  mutation DeleteSubscriptionGroup($input: DeleteOrganizationSubscriptionGroupInput!) {\n    deleteOrganizationSubscriptionGroup(input: $input) {\n      ok\n    }\n  }\n`\n\nexport const ADD_CARD_TO_GROUP = gql`\n  mutation AddCardToGroup($input: CreateOrganizationSubscriptionGroupSubscriptionInput!) {\n    createOrganizationSubscriptionGroupSubscription(input:$input) {\n      organizationSubscriptionGroupSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        organizationSubscriptionGroup {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const DELETE_CARD_FROM_GROUP = gql`\n  mutation DeleteCardFromGroup($input: DeleteOrganizationSubscriptionGroupSubscriptionInput!) {\n    deleteOrganizationSubscriptionGroupSubscription(input:$input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport ContentCard from \"../../general/ContentCard\"\n\nimport OrganizationGroupsSubscriptionsBase from \"./OrganizationSubscriptionsGroupsBase\"\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, DELETE_SUBSCRIPTION_GROUP } from \"./queries\"\n\n\nfunction OrganizationSubscriptionsGroups({ t, history }) {\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_GROUPS_QUERY)\n  const [deleteSubscriptionGroup] = useMutation(DELETE_SUBSCRIPTION_GROUP)\n\n  if (loading) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  const subscription_groups = data.organizationSubscriptionGroups\n  \n  // Empty list\n  if (!subscription_groups.edges.length) return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}>\n        <p>{t('organization.subscription_groups.empty_list')}</p>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n\n  return (\n    <OrganizationGroupsSubscriptionsBase showAdd={true}>\n      <ContentCard cardTitle={t('organization.subscription_groups.title')}\n            hasCardBody={false}\n            pageInfo={subscription_groups.pageInfo}\n            onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: subscription_groups.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationSubscriptionGroups.edges\n                const pageInfo = fetchMoreResult.organizationSubscriptionGroups.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new subscription_groups at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationSubscriptionGroups: {\n                        __typename: previousResult.organizationSubscriptionGroups.__typename,\n                        edges: [ ...previousResult.organizationSubscriptionGroups.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} >\n        <Table cards>\n          <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {subscription_groups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.name}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.description.substring(0, 24)}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <span>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/\" + node.id)}\n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                    <Button className='btn-sm' \n                            onClick={() => history.push(\"/organization/subscriptions/groups/edit/subscriptions/\" + node.id)}\n                            color=\"secondary\">\n                      {t('organization.subscriptions.groups.edit_subscriptions')}\n                    </Button>\n                  </span>\n                  <button className=\"icon btn btn-link btn-sm float-right\" \n                    title={t('general.delete')} \n                    href=\"\"\n                    onClick={() => {\n                      confirm_delete({\n                        t: t,\n                        msgConfirm: t(\"organization.subscriptions.groups.delete_confirm_msg\"),\n                        msgDescription: <p>{node.name}</p>,\n                        msgSuccess: t('organization.subscriptions.groups.deleted'),\n                        deleteFunction: deleteSubscriptionGroup,\n                        functionVariables: { variables: {\n                          input: {\n                            id: node.id\n                          }\n                        }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUPS_QUERY} \n                        ]}\n                      })\n                  }}>\n                    <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                  </button>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationGroupsSubscriptionsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsGroups))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_GROUP_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\nconst OrganizationSubscriptionGroupForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        {(isSubmitting) ?\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          loading\n          disabled={isSubmitting}\n        >\n          {t(\"general.submit\")}\n        </Button>\n        :\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n        }\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n        {(isSubmitting) ? \n          <Alert type=\"primary\" hasExtraSpace>\n            <strong>{t('general.please_wait')}</strong> {t('organization.subscription_groups.toast_creating_might_take_a_while')}\n          </Alert> : \n          \"\"\n        }\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, ADD_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupAdd({t, history}) {\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const [addSubscriptionGroup] = useMutation(ADD_SUBSCRIPTION_GROUP)\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('organization.subscription_groups.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ name: '', description: '' }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            addSubscriptionGroup({ variables: {\n              input: {\n                name: values.name, \n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n            >\n            {({ isSubmitting, errors }) => (\n              <OrganizationSubscriptionGroupForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUPS_QUERY, GET_SUBSCRIPTION_GROUP_QUERY, UPDATE_SUBSCRIPTION_GROUP } from './queries'\nimport { SUBSCRIPTION_GROUP_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionGroupForm from './OrganizationSubscriptionsGroupForm'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../general/ContentCard\"\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\n\nfunction OrganizationSubscriptionGroupEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  const cardTitle = t('organization.subscription_groups.title_edit')\n  const {loading, error, data} = useQuery(GET_SUBSCRIPTION_GROUP_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionGroup ] = useMutation(UPDATE_SUBSCRIPTION_GROUP)\n  \n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('organization.subscription_groups.error_loading')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  const initialData = data.organizationSubscriptionGroup;\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            name: initialData.name, \n            description: initialData.description,\n          }}\n          validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateSubscriptionGroup({ variables: {\n              input: {\n                id: match.params.id,\n                name: values.name,\n                description: values.description,\n              }\n            }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('organization.subscription_groups.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <OrganizationSubscriptionGroupForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\n\n// class OrganizationSubscriptionGroupEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization subscriptiongroup edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const returnUrl = \"/organization/subscriptions/groups\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Page.Header title=\"Organization\" />\n//             <Grid.Row>\n//               <Grid.Col md={9}>\n//               <Card>\n//                 <Card.Header>\n//                   <Card.Title>{t('organization.subscription_groups.title_edit')}</Card.Title>\n//                   {console.log(match.params.id)}\n//                 </Card.Header>\n//                 <Query query={GET_SUBSCRIPTION_GROUP_QUERY} variables={{ id }} >\n//                 {({ loading, error, data, refetch }) => {\n//                     // Loading\n//                     if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                     // Error\n//                     if (error) {\n//                       console.log(error)\n//                       return <p>{t('general.error_sad_smiley')}</p>\n//                     }\n                    \n//                     const initialData = data.organizationSubscriptionGroup;\n//                     console.log('query data')\n//                     console.log(data)\n\n//                     return (\n                      \n//                       <Mutation mutation={UPDATE_SUBSCRIPTION_GROUP} onCompleted={() => history.push(returnUrl)}> \n//                       {(updateSubscriptionGroup, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 name: initialData.name, \n//                                 description: initialData.description,\n//                               }}\n//                               validationSchema={SUBSCRIPTION_GROUP_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n\n//                                   updateSubscriptionGroup({ variables: {\n//                                     input: {\n//                                       id: match.params.id,\n//                                       name: values.name,\n//                                       description: values.description,\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_SUBSCRIPTION_GROUPS_QUERY}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('organization.subscription_groups.toast_edit_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, errors, values }) => (\n//                                 <OrganizationSubscriptionGroupForm\n//                                   isSubmitting={isSubmitting}\n//                                   errors={errors}\n//                                   returnUrl={returnUrl}\n//                                 />\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                       )}}\n//                 </Query>\n//               </Card>\n//               </Grid.Col>\n//               <Grid.Col md={3}>\n//                 <HasPermissionWrapper permission=\"change\"\n//                                       resource=\"organizationsubscriptiongroup\">\n//                   <Button color=\"primary btn-block mb-6\"\n//                           onClick={() => history.push(returnUrl)}>\n//                     <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                   </Button>\n//                 </HasPermissionWrapper>\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEdit))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, ADD_CARD_TO_GROUP, DELETE_CARD_FROM_GROUP } from './queries'\n\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport ContentCard from '../../general/ContentCard'\nimport OrganizationSubscriptionsGroupsBase from './OrganizationSubscriptionsGroupsBase';\n\nfunction OrganizationSubscriptionGroupEditSubscriptions({t, match, history}) {\n  const groupId = match.params.id\n  const returnUrl = \"/organization/subscriptions/groups\"\n  let cardTitle = t('organization.subscription_group_subscriptions.title_edit')\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, {\n    variables: { id: groupId }\n  })\n  const [ addCardToGroup ] = useMutation(ADD_CARD_TO_GROUP)\n  const [ deleteCardFromGroup ] = useMutation(DELETE_CARD_FROM_GROUP)\n\n  if (loading) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n  // Error\n  if (error) return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </OrganizationSubscriptionsGroupsBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const subscriptions = data.organizationSubscriptions\n  const group = data.organizationSubscriptionGroup\n\n  let group_subscriptions = {}\n  if (group.organizationSubscriptions.edges) {\n    group.organizationSubscriptions.edges.map(({ node }) => (\n      group_subscriptions[node.id] = true\n    ))\n  }\n\n  console.log(\"group_subscriptions\")\n  console.log(group_subscriptions)\n\n  cardTitle = `${cardTitle} - ${group.name}`\n\n\n  return (\n    <OrganizationSubscriptionsGroupsBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n      {(!subscriptions.edges) ? \"\" : \n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {(node.id in group_subscriptions) ? \n                      <Icon name=\"check-circle\" className=\"text-green\" /> : <Icon name=\"x-circle\" className=\"text-red\" />\n                    }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  {console.log((node.id in group_subscriptions))}\n                  {(!(node.id in group_subscriptions)) ?\n                    // Add\n                    <Table.Col className=\"text-right text-green\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.add_to_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked add\")\n                          let pass_id = node.id\n                          addCardToGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.added_to_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"plus-circle\" /> { ' ' }\n                        {t('general.add_to_group')} \n                      </Button>\n                    </Table.Col>\n                    :\n                    // Delete\n                    <Table.Col className=\"text-right text-red\" key={v4()}>\n                      <Button color=\"link\"\n                        size=\"sm\"\n                        title={t('general.delete_from_group')} \n                        href=\"\"\n                        onClick={() => {\n                          console.log(\"clicked delete\")\n                          console.log(node.id)\n                          let pass_id = node.id\n                          deleteCardFromGroup({ variables: {\n                            input: {\n                              organizationSubscription: pass_id,\n                              organizationSubscriptionGroup: groupId\n                            }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_GROUP_SUBSCRIPTIONS_QUERY, variables: {\"id\": groupId, \"archived\": false }}\n                      ]}).then(({ data }) => {\n                        console.log('got data', data);\n                        toast.success(t('general.deleted_from_group'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error);\n                      })\n                      }}>\n                        <Icon prefix=\"fe\" name=\"minus-circle\" /> { ' ' }\n                        {t('general.delete_from_group')}\n                      </Button>\n                    </Table.Col>\n                    }\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      }\n    </Card>\n  </OrganizationSubscriptionsGroupsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionGroupEditSubscriptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nfunction OrganizationSubscriptionsPricesBase ({ t, history, match, children, showAdd=false, returnUrl=\"/organization/subscriptions\" }) {\n  const subscriptionId = match.params.subscription_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"organization.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              {(showAdd) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"organizationsubscriptionprice\">\n                  <ButtonAdd addUrl={`/organization/subscriptions/prices/add/${subscriptionId}`} className=\"ml-2\" />\n                </HasPermissionWrapper>\n              : \"\" }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPricesBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SUBSCRIPTION_PRICES_QUERY = gql`\n  query OrganizationSubscriptionPrices($after: String, $before: String, $organizationSubscription: ID!) {\n    organizationSubscriptionPrices(first: 15, before: $before, after: $after, organizationSubscription: $organizationSubscription) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n          }\n          price\n          priceDisplay\n          financeTaxRate {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    organizationSubscription(id: $organizationSubscription) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_SUBSCRIPTION_PRICE_QUERY = gql`\n  query OrganizationSubscriptionPrice($id: ID!, $after: String, $before: String) {\n    organizationSubscriptionPrice(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      priceDisplay\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          percentage\n          rateType\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SUBSCRIPTION_PRICE = gql`\nmutation CreateOrganizationSubscriptionPrice($input: CreateOrganizationSubscriptionPriceInput!) {\n  createOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const UPDATE_SUBSCRIPTION_PRICE = gql`\nmutation UpdateOrganizationSubscriptionPrice($input: UpdateOrganizationSubscriptionPriceInput!) {\n  updateOrganizationSubscriptionPrice(input: $input) {\n    organizationSubscriptionPrice {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n    }\n  }\n}\n`\n\nexport const DELETE_SUBSCRIPTION_PRICE = gql`\n  mutation DeleteOrganizationSubscriptionPrice($input: DeleteOrganizationSubscriptionPriceInput!) {\n    deleteOrganizationSubscriptionPrice(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase'\nimport { GET_SUBSCRIPTION_PRICES_QUERY, DELETE_SUBSCRIPTION_PRICE } from \"./queries\"\nimport { GET_SUBSCRIPTIONS_QUERY } from \"../queries\"\n\nimport ButtonDelete from '../../../ui/ButtonDelete'\n\n\nfunction OrganizationSubscriptionsPrices ({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const subscriptionId = match.params.subscription_id\n  let cardTitle = t('organization.subscription_prices.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SUBSCRIPTION_PRICES_QUERY, {\n    variables: {\n      organizationSubscription: subscriptionId\n    }\n  })\n  const [deleteSubscriptionPrice] = useMutation(DELETE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const subscriptionPrices = data.organizationSubscriptionPrices\n  cardTitle = `${cardTitle} - ${data.organizationSubscription.name}`\n  \n\n  if (!subscriptionPrices.edges.length) return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t('organization.subscription_prices.empty_list')}\n        </Card.Body>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase showAdd={true}>\n      <ContentCard cardTitle={cardTitle}\n        pageInfo={subscriptionPrices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: subscriptionPrices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.organizationSubscriptionsPrices.edges\n              const pageInfo = fetchMoreResult.organizationSubscriptionsPrices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    organizationSubscriptionsPrices: {\n                      __typename: previousResult.organizationSubscriptionsPrices.__typename,\n                      edges: [ ...previousResult.organizationSubscriptionsPrices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {subscriptionPrices.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.priceDisplay} <br />\n                    <span className=\"text-muted\">{node.financeTaxRate.name}</span>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Button className='btn-sm' \n                              onClick={() => history.push(\"/organization/subscriptions/prices/edit/\" + subscriptionId + '/' + node.id)}\n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    }\n                    <ButtonDelete \n                      msgConfirm={t('organization.subscription_prices.delete_confirm_msg')}\n                      msgDescription={<p>\n                        {node.priceDisplay} {node.financeTaxRate && node.financeTaxRate.name} <br />\n                        <span className=\"text-muted\">\n                          {node.dateStart} {(node.dateEnd) ? ' - ' + node.dateEnd : \"\"}\n                        </span>\n                      </p>}\n                      msgSuccess={t('organization.subscription_prices.deleted')}\n                      deleteFunction={deleteSubscriptionPrice}\n                      deleteFunctionVariables={{ variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, refetchQueries: [\n                          {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                          {query: GET_SUBSCRIPTIONS_QUERY, variables: {archived: false}},\n                      ]}}\n                    />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionsPrices))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_PRICE_SCHEMA = Yup.object().shape({\n    price: Yup.number()\n      .typeError(t('yup.type_error_number'))\n      .required(t('yup.field_required'))\n      .max(99999999999999999999, t('yup.max_decimal_number')),\n    financeTaxRate: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    // dateEnd: Yup.date(),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\n\nimport {\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\" \nimport ButtonFormSubmit from \"../../../ui/ButtonFormSubmit\"\n\n\nconst OrganizationSubscriptionPriceForm = (\n  { t, history, inputData, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl }\n  ) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.price')}>\n            <Field type=\"text\" \n                  name=\"price\" \n                  className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.taxrate')}>\n            <Field component=\"select\" \n                    name=\"financeTaxRate\" \n                    className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n              {console.log(\"query data in subscription price add:\")}\n              {console.log(inputData)}\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financeTaxRates.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              selected={values.dateStart}\n              onChange={(date) => setFieldValue(\"dateStart\", date)}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.date_end')}>\n            <CSDatePicker \n              selected={values.dateEnd}\n              onChange={(date) => setFieldValue(\"dateEnd\", date)}\n              onBlur={() => setFieldTouched(\"dateEnd\", true)}\n            />\n            <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, ADD_SUBSCRIPTION_PRICE, GET_INPUT_VALUES_QUERY } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\n\n\nfunction OrganizationSubscriptionPriceAdd({ t, history, match }) {\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_add')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ addSubscriptionPrice ] = useMutation(ADD_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ price: \"\", dateStart: new Date() }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let dateEnd\n              if (values.dateEnd) {\n                dateEnd = dateToLocalISO(values.dateEnd)\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              addSubscriptionPrice({ variables: {\n                input: {\n                  organizationSubscription: match.params.subscription_id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd\n                }\n              }, refetchQueries: [\n                  {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: {\"organizationSubscription\": match.params.subscription_id }},\n                  {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\";\n\nimport { GET_SUBSCRIPTION_PRICES_QUERY, GET_SUBSCRIPTION_PRICE_QUERY, UPDATE_SUBSCRIPTION_PRICE } from './queries'\nimport { GET_SUBSCRIPTIONS_QUERY } from '../queries'\nimport { SUBSCRIPTION_PRICE_SCHEMA } from './yupSchema'\nimport OrganizationSubscriptionPriceForm from './OrganizationSubscriptionPriceForm'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport OrganizationSubscriptionsPricesBase from './OrganizationSubscriptionsPricesBase';\n\n\nfunction OrganizationSubscriptionPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const subscriptionId = match.params.subscription_id\n  const cardTitle = t('organization.subscription_prices.title_edit')\n  const returnUrl = `/organization/subscriptions/prices/${subscriptionId}`\n\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_PRICE_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateSubscriptionPrice ] = useMutation(UPDATE_SUBSCRIPTION_PRICE)\n\n  if (loading) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer active={true} loader={true} />\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  if (error) return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('organization.subscription_prices.error_loading')}</p>\n          </Card.Body>\n        </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n\n  const initialData = data.organizationSubscriptionPrice\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <OrganizationSubscriptionsPricesBase returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            price: initialData.price, \n            financeTaxRate: initialData.financeTaxRate.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n          }}\n          validationSchema={SUBSCRIPTION_PRICE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let dateEnd\n              if (values.dateEnd) {\n                if (values.dateEnd instanceof Date) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              } else {\n                dateEnd = values.dateEnd\n              }\n\n              let dateStart\n              if (values.dateStart instanceof Date) {\n                dateStart = dateToLocalISO(values.dateStart)\n              } else {\n                // Input hasn't changed and DatePicket hasn't made a Date object out of it\n                dateStart = values.dateStart\n              }\n\n              updateSubscriptionPrice({ variables: {\n                input: {\n                  id: match.params.id,\n                  price: values.price,\n                  financeTaxRate: values.financeTaxRate,\n                  dateStart: dateStart,\n                  dateEnd: dateEnd,\n                }\n              }, refetchQueries: [\n                {query: GET_SUBSCRIPTION_PRICES_QUERY, variables: { organizationSubscription: subscriptionId }},\n                {query: GET_SUBSCRIPTIONS_QUERY, variables: { \"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('organization.subscription_prices.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <OrganizationSubscriptionPriceForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </OrganizationSubscriptionPriceForm>\n          )}\n        </Formik>\n      </Card>\n    </OrganizationSubscriptionsPricesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(OrganizationSubscriptionPriceEdit))","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass RelationsHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"School home props:\")\n    console.log(props)\n  }\n\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t(\"general.manage\")\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"relations.title\")} />\n            <Grid.Row>\n              <Grid.Col md={3} lg={3}>\n                <Card>\n                  <Card.Body>\n                    <h5>{t(\"relations.accounts.title\")}</h5>\n                    {t(\"relations.accounts.explanation\")}\n                    <br /><br />\n                    <HomeItemButton linkTitle={linkTitle} link=\"/relations/accounts\" />\n                  </Card.Body>\n                </Card>\n              </Grid.Col>\n              {/* <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={4} lg={4}>\n                  <Link to='/relations/suppliers')}>\n                    <StampCard header={<small>{t('relations.suppliers.title')}</small>} footer={t('')} color=\"blue\" icon=\"package\" />\n                  </Link>\n                </Grid.Col>\n              </HasPermissionWrapper> */}\n              <HasPermissionWrapper permission=\"view\"\n                                    resource=\"business\">\n                <Grid.Col md={3} lg={3}>\n                  <Card>\n                    <Card.Body>\n                      <h5>{t(\"relations.b2b.title\")}</h5>\n                      {t(\"relations.b2b.explanation\")}\n                      <br /><br />\n                      <HomeItemButton linkTitle={linkTitle} link=\"/relations/b2b\" />\n                    </Card.Body>\n                  </Card>\n                </Grid.Col>\n              </HasPermissionWrapper>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(RelationsHome))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let isActive = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)\n  if (isActive === null) {\n    isActive = true\n  }\n\n  let queryVars = {\n    isActive: (isActive === \"true\") ? true : false,\n    customer: undefined,\n    instructor: undefined,\n    employee: undefined,\n    orderBy: \"-createdAt\"\n  }\n\n  let search = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_SEARCH)\n  queryVars.searchName = search\n\n  if (search) {\n    queryVars.orderBy = \"fullName\"\n  }\n\n  let type_filter = localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE)\n  switch (type_filter) {\n    case \"customer\":\n      queryVars.customer = true\n      break\n    case \"instructor\":\n      queryVars.instructor = true\n      break\n    case \"employee\":\n      queryVars.employee = true\n      break\n    default:\n      break\n  }\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Form,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\n\n\nimport { TOKEN_REFRESH } from '../../../queries/system/auth'\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport InputSearch from \"../../general/InputSearch\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction RelationsAccountsBase({t, history, children, refetch}) {\n  const exportUrl = `/d/export/relations/accounts/active`\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  \n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"relations.title\")}>\n            <div className=\"page-options d-flex\">\n              <InputSearch \n                initialValueKey={CSLS.RELATIONS_ACCOUNTS_SEARCH}\n                placeholder=\"Search...\"\n                onChange={(value) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_SEARCH, value)\n                  refetch(get_list_query_variables())\n                }}\n              />\n              <Form.Select\n                className=\"w-auto ml-2\"\n                onChange={(event) => {\n                  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_FILTER_TYPE, event.target.value)\n                  console.log(refetch(get_list_query_variables()))\n                }}\n              >\n                <option value=\"\">{t(\"general.all_accounts\")}</option>\n                <option value=\"customer\">{t(\"general.customers\")}</option>\n                <option value=\"instructor\">{t(\"general.instructors\")}</option>\n                <option value=\"employee\">{t(\"general.employees\")}</option>\n              </Form.Select>\n              {/* Export Active Accounts */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"ml-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('relations.btn_export_active_accounts')} \n              </Button>\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"account\">\n                <Button color=\"primary ml-2\"\n                        onClick={() => history.push(\"/relations/accounts/add\")}>\n                  <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                </Button>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>        \n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\nquery Accounts(\n  $after: String, \n  $before: String, \n  $isActive: Boolean!, \n  $searchName: String,\n  $customer: Boolean,\n  $instructor: Boolean,\n  $employee: Boolean,\n  $orderBy: String!\n) {\n  accounts(\n    first: 15, \n    before: $before, \n    after: $after, \n    isActive: $isActive, \n    fullName_Icontains: $searchName,\n    customer: $customer,\n    instructor: $instructor,\n    employee: $employee,\n    orderBy: $orderBy,\n  ) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        customer\n        instructor\n        employee\n        firstName\n        lastName\n        fullName\n        email\n        phone\n        mobile\n        isActive\n        urlImageThumbnailSmall\n        subscriptionsLatest {\n          organizationSubscription {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n        }\n        classpassesLatest {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemaining\n          classesRemainingDisplay\n          isExpired\n        }\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($id: ID!) {\n    account(id:$id) {\n      id\n      customer\n      instructor\n      employee\n      firstName\n      lastName\n      email\n      dateOfBirth\n      gender\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      isActive\n      keyNumber\n      mollieCustomerId\n      urlImageThumbnailSmall\n      organizationDiscovery {\n        id\n      }\n      organizationLanguage {\n        id\n      }\n      invoiceToBusiness {\n        id\n      }\n    }\n    organizationDiscoveries(first: 100){\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    organizationLanguages(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_ACCOUNT = gql`\n  mutation CreateAccount($input:CreateAccountInput!) {\n    createAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_ACTIVE = gql`\n  mutation UpdateAccountActive($input: UpdateAccountActiveInput!) {\n    updateAccountActive(input: $input) {\n      account {\n        id\n        isActive\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT = gql`\n  mutation DeleteAccount($input: DeleteAccountInput!) {\n    deleteAccount(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Badge,\n  Icon,\n  Dimmer,\n  Button,\n  Card,\n  Container,\n  List,\n  SocialNetworksList,\n  Table,\n  Tooltip\n} from \"tabler-react\";\n\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsAccountsBase from \"./RelationsAccountsBase\"\nimport { GET_ACCOUNTS_QUERY, UPDATE_ACCOUNT_ACTIVE, DELETE_ACCOUNT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Set some initial value for isActive, if not found\nif (!localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE)) {\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true) \n} \n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\nfunction RelationsAccounts({t, location}) {\n  const [isLoadingMore, setIsLoadingMore] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const {loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNTS_QUERY, {\n    variables: get_list_query_variables(),\n    onError: console.log,\n    // These options would be nice to enable, but behave strangely with current caching\n    // notifyOnNetworkStatusChange: true\n    // fetchPolicy: \"network-only\"\n  })\n  const [updateAccountActive] = useMutation(UPDATE_ACCOUNT_ACTIVE)\n  const [deleteAccount] = useMutation(DELETE_ACCOUNT)\n\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  if (loading || (data && !data.accounts)) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n  \n  if (error) return (\n    <RelationsAccountsBase refetch={refetch}>\n      <Container>\n        <ContentCard cardTitle={t('relations.accounts.title')}>\n          <p>{t('relations.accounts.error_loading')}</p>\n        </ContentCard>\n      </Container>\n    </RelationsAccountsBase>\n  )\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.active')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"false\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.deleted')}\n    </Button>\n  </Card.Options>\n\n  let accounts = data.accounts\n  let pageInfo = accounts.pageInfo\n\n  // Empty list\n  if (!accounts.edges.length) { return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.accounts.title')}\n                    headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") ? t('relations.accounts.empty_list') : t(\"relations.accounts.empty_archive\")}\n        </p>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )}\n\n  // Data\n  return (\n    <RelationsAccountsBase refetch={refetch}>\n      <ContentCard \n        cardTitle={t('relations.accounts.title')}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        pageInfo={data.accounts.pageInfo}\n        isLoadingMore={isLoadingMore}\n        onLoadMore={async () => {\n          setIsLoadingMore(true)\n          if (pageInfo.hasNextPage) {\n            await fetchMore({\n              variables: {\n                after: pageInfo.endCursor,\n              },\n            });\n          }\n          setIsLoadingMore(false)\n        }}\n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader>{t('general.account')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.products')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.contact')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    <Link to={`/relations/accounts/${node.id}/profile`}>\n                      {(node.urlImageThumbnailSmall) ? \n                        <Avatar size={\"lg\"} imageURL={node.urlImageThumbnailSmall} /> :\n                        <Avatar size={\"lg\"} icon=\"user\" />\n                      }\n                    </Link>\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <span className=\"bold\">{node.fullName}</span>\n                    <div className=\"text-muted\">\n                      <a href={`mailto:${node.email}`}>{node.email}</a>\n                    </div>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mr-1\">{t(\"general.customer\")}</Badge>\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mr-1\">{t(\"general.instructor\")}</Badge>\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\">{t(\"general.employee\")}</Badge>\n                      </span> : null}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.subscriptionsLatest) ? \n                      node.subscriptionsLatest.map((subscription) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"edit\" /> {' '}\n                          { subscription.organizationSubscription.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(subscription.dateStart).format(dateFormat) } \n                              {(subscription.dateEnd) ? \n                                <span> - {moment(subscription.dateEnd).format(dateFormat)}</span>  \n                                : \"\"\n                              }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                    {(node.classpassesLatest) ? \n                      node.classpassesLatest.map((classpass) => (\n                        <div key={v4()}>\n                          <small>\n                          <Icon name=\"credit-card\" /> {' '}\n                          { classpass.organizationClasspass.name } <br />\n                          <div className=\"text-muted \">\n                            <small>\n                              { moment(classpass.dateStart).format(dateFormat) } {\" - \"}\n                              { moment(classpass.dateEnd).format(dateFormat)} { \" | \" }  \n                              { t(\"general.classes_remaining\") }: { classpass.classesRemainingDisplay }\n                            </small>\n                          </div>\n                          </small>\n                        </div>\n                      )) \n                      : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col>\n                    <SocialNetworksList className=\"mb-0 mt-2\">\n                      {\n                        (node.phone) ? \n                          <List.Item inline>\n                            <Tooltip content={node.phone} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"phone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item>\n                        // No phone number found\n                        : \"\"\n                      }\n                      {\n                        (node.mobile) ?\n                          <List.Item inline>\n                            <Tooltip content={node.mobile} placement=\"top\">\n                              <span>\n                                <Icon prefix=\"fe\" name=\"smartphone\" />\n                              </span>\n                            </Tooltip>\n                          </List.Item> \n                          // No mobile number found\n                          : \"\"\n                      }\n\n                      <List.Item inline>\n                        <Tooltip content={node.email} placement=\"top\">\n                          <a href={\"mailto:\" + node.email}>\n                            <Icon prefix=\"fe\" name=\"mail\" />\n                          </a>\n                        </Tooltip>\n                      </List.Item>\n                    </SocialNetworksList>\n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {(node.customer) ? <span>\n                        <Badge color=\"primary\" className=\"mb-1\">{t(\"general.customer\")}</Badge> <br />\n                      </span> : null}\n                    {(node.instructor) ? <span>\n                        <Badge color=\"info\" className=\"mb-1\">{t(\"general.instructor\")}</Badge> <br />\n                      </span> : null}\n                    {(node.employee) ? <span>\n                        <Badge color=\"secondary\" className=\"mb-1\">{t(\"general.employee\")}</Badge> <br />\n                      </span> : null}\n                  </Table.Col> */}\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(!node.isActive) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/accounts/${node.id}/profile`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.deactivate')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let isActive \n                        if (localStorage.getItem(CSLS.RELATIONS_ACCOUNTS_IS_ACTIVE) === \"true\") {\n                          isActive = true\n                        } else {\n                          isActive = false\n                        }\n\n                        updateAccountActive({ variables: {\n                          input: {\n                            id,\n                            isActive: !isActive // invert, as we need the opposite from the list currently displayed\n                          }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                    ]}).then(({ data }) => {\n                      console.log('got data', data);\n                      toast.success(\n                        (isActive) ? t('relations.accounts.deactivated'): t('relations.accounts.restored'), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error);\n                    })\n                    }}>\n                      {\n                        (node.isActive) ?\n                          <Icon prefix=\"fe\" name=\"trash-2\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n                  {\n                    (node.isActive) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.accounts.delete_confirm_msg\"),\n                              msgDescription: <p>{node.first_name} {node.last_name}</p>,\n                              msgSuccess: t('relations.accounts.deleted'),\n                              deleteFunction: deleteAccount,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                        }}>\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                  }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccounts))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.first_name')}>\n                <Field type=\"text\" \n                        name=\"firstName\" \n                        className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('general.last_name')}>\n                <Field type=\"text\" \n                        name=\"lastName\" \n                        className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n          <Form.Group label={t('general.email')}>\n            <Field type=\"text\" \n                    name=\"email\" \n                    className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">{t('general.cancel')}</Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountForm from \"./RelationsAccountForm\"\n\nconst returnUrl = \"/relations/accounts\"\n\n\nfunction RelationsAccountAdd({t, history}) {\n  const [addAccount] = useMutation(ADD_ACCOUNT)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.accounts.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '', code: '' }}\n                    validationSchema={ACCOUNT_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addAccount({ variables: {\n                          input: {\n                            firstName: values.firstName,\n                            lastName: values.lastName,\n                            email: values.email\n                          }\n                        }, refetchQueries: [\n                            {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            const accountId = data.createAccount.account.id\n                            history.push(`/relations/accounts/${accountId}/profile`)\n                            toast.success((t('relations.accounts.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsAccountForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountAdd))","import { t } from 'i18next'\n\nconst ISO_COUNTRY_CODES = [{\"Name\":t(\"countries.Afghanistan\"),\"Code\":\"AF\"},{\"Name\":t(\"countries.Åland_Islands\"),\"Code\":\"AX\"},{\"Name\":t(\"countries.Albania\"),\"Code\":\"AL\"},{\"Name\":t(\"countries.Algeria\"),\"Code\":\"DZ\"},{\"Name\":t(\"countries.American_Samoa\"),\"Code\":\"AS\"},{\"Name\":t(\"countries.Andorra\"),\"Code\":\"AD\"},{\"Name\":t(\"countries.Angola\"),\"Code\":\"AO\"},{\"Name\":t(\"countries.Anguilla\"),\"Code\":\"AI\"},{\"Name\":t(\"countries.Antarctica\"),\"Code\":\"AQ\"},{\"Name\":t(\"countries.Antigua_and_Barbuda\"),\"Code\":\"AG\"},{\"Name\":t(\"countries.Argentina\"),\"Code\":\"AR\"},{\"Name\":t(\"countries.Armenia\"),\"Code\":\"AM\"},{\"Name\":t(\"countries.Aruba\"),\"Code\":\"AW\"},{\"Name\":t(\"countries.Australia\"),\"Code\":\"AU\"},{\"Name\":t(\"countries.Austria\"),\"Code\":\"AT\"},{\"Name\":t(\"countries.Azerbaijan\"),\"Code\":\"AZ\"},{\"Name\":t(\"countries.Bahamas\"),\"Code\":\"BS\"},{\"Name\":t(\"countries.Bahrain\"),\"Code\":\"BH\"},{\"Name\":t(\"countries.Bangladesh\"),\"Code\":\"BD\"},{\"Name\":t(\"countries.Barbados\"),\"Code\":\"BB\"},{\"Name\":t(\"countries.Belarus\"),\"Code\":\"BY\"},{\"Name\":t(\"countries.Belgium\"),\"Code\":\"BE\"},{\"Name\":t(\"countries.Belize\"),\"Code\":\"BZ\"},{\"Name\":t(\"countries.Benin\"),\"Code\":\"BJ\"},{\"Name\":t(\"countries.Bermuda\"),\"Code\":\"BM\"},{\"Name\":t(\"countries.Bhutan\"),\"Code\":\"BT\"},{\"Name\":t(\"countries.Bolivia,_Plurinational_State_of\"),\"Code\":\"BO\"},{\"Name\":t(\"countries.Bonaire,_Sint_Eustatius_and_Saba\"),\"Code\":\"BQ\"},{\"Name\":t(\"countries.Bosnia_and_Herzegovina\"),\"Code\":\"BA\"},{\"Name\":t(\"countries.Botswana\"),\"Code\":\"BW\"},{\"Name\":t(\"countries.Bouvet_Island\"),\"Code\":\"BV\"},{\"Name\":t(\"countries.Brazil\"),\"Code\":\"BR\"},{\"Name\":t(\"countries.British_Indian_Ocean_Territory\"),\"Code\":\"IO\"},{\"Name\":t(\"countries.Brunei_Darussalam\"),\"Code\":\"BN\"},{\"Name\":t(\"countries.Bulgaria\"),\"Code\":\"BG\"},{\"Name\":t(\"countries.Burkina_Faso\"),\"Code\":\"BF\"},{\"Name\":t(\"countries.Burundi\"),\"Code\":\"BI\"},{\"Name\":t(\"countries.Cambodia\"),\"Code\":\"KH\"},{\"Name\":t(\"countries.Cameroon\"),\"Code\":\"CM\"},{\"Name\":t(\"countries.Canada\"),\"Code\":\"CA\"},{\"Name\":t(\"countries.Cape_Verde\"),\"Code\":\"CV\"},{\"Name\":t(\"countries.Cayman_Islands\"),\"Code\":\"KY\"},{\"Name\":t(\"countries.Central_African_Republic\"),\"Code\":\"CF\"},{\"Name\":t(\"countries.Chad\"),\"Code\":\"TD\"},{\"Name\":t(\"countries.Chile\"),\"Code\":\"CL\"},{\"Name\":t(\"countries.China\"),\"Code\":\"CN\"},{\"Name\":t(\"countries.Christmas_Island\"),\"Code\":\"CX\"},{\"Name\":t(\"countries.Cocos_(Keeling)_Islands\"),\"Code\":\"CC\"},{\"Name\":t(\"countries.Colombia\"),\"Code\":\"CO\"},{\"Name\":t(\"countries.Comoros\"),\"Code\":\"KM\"},{\"Name\":t(\"countries.Congo\"),\"Code\":\"CG\"},{\"Name\":t(\"countries.Congo,_the_Democratic_Republic_of_the\"),\"Code\":\"CD\"},{\"Name\":t(\"countries.Cook_Islands\"),\"Code\":\"CK\"},{\"Name\":t(\"countries.Costa_Rica\"),\"Code\":\"CR\"},{\"Name\":t(\"countries.Côte_d'Ivoire\"),\"Code\":\"CI\"},{\"Name\":t(\"countries.Croatia\"),\"Code\":\"HR\"},{\"Name\":t(\"countries.Cuba\"),\"Code\":\"CU\"},{\"Name\":t(\"countries.Curaçao\"),\"Code\":\"CW\"},{\"Name\":t(\"countries.Cyprus\"),\"Code\":\"CY\"},{\"Name\":t(\"countries.Czech_Republic\"),\"Code\":\"CZ\"},{\"Name\":t(\"countries.Denmark\"),\"Code\":\"DK\"},{\"Name\":t(\"countries.Djibouti\"),\"Code\":\"DJ\"},{\"Name\":t(\"countries.Dominica\"),\"Code\":\"DM\"},{\"Name\":t(\"countries.Dominican_Republic\"),\"Code\":\"DO\"},{\"Name\":t(\"countries.Ecuador\"),\"Code\":\"EC\"},{\"Name\":t(\"countries.Egypt\"),\"Code\":\"EG\"},{\"Name\":t(\"countries.El_Salvador\"),\"Code\":\"SV\"},{\"Name\":t(\"countries.Equatorial_Guinea\"),\"Code\":\"GQ\"},{\"Name\":t(\"countries.Eritrea\"),\"Code\":\"ER\"},{\"Name\":t(\"countries.Estonia\"),\"Code\":\"EE\"},{\"Name\":t(\"countries.Ethiopia\"),\"Code\":\"ET\"},{\"Name\":t(\"countries.Falkland_Islands_(Malvinas)\"),\"Code\":\"FK\"},{\"Name\":t(\"countries.Faroe_Islands\"),\"Code\":\"FO\"},{\"Name\":t(\"countries.Fiji\"),\"Code\":\"FJ\"},{\"Name\":t(\"countries.Finland\"),\"Code\":\"FI\"},{\"Name\":t(\"countries.France\"),\"Code\":\"FR\"},{\"Name\":t(\"countries.French_Guiana\"),\"Code\":\"GF\"},{\"Name\":t(\"countries.French_Polynesia\"),\"Code\":\"PF\"},{\"Name\":t(\"countries.French_Southern_Territories\"),\"Code\":\"TF\"},{\"Name\":t(\"countries.Gabon\"),\"Code\":\"GA\"},{\"Name\":t(\"countries.Gambia\"),\"Code\":\"GM\"},{\"Name\":t(\"countries.Georgia\"),\"Code\":\"GE\"},{\"Name\":t(\"countries.Germany\"),\"Code\":\"DE\"},{\"Name\":t(\"countries.Ghana\"),\"Code\":\"GH\"},{\"Name\":t(\"countries.Gibraltar\"),\"Code\":\"GI\"},{\"Name\":t(\"countries.Greece\"),\"Code\":\"GR\"},{\"Name\":t(\"countries.Greenland\"),\"Code\":\"GL\"},{\"Name\":t(\"countries.Grenada\"),\"Code\":\"GD\"},{\"Name\":t(\"countries.Guadeloupe\"),\"Code\":\"GP\"},{\"Name\":t(\"countries.Guam\"),\"Code\":\"GU\"},{\"Name\":t(\"countries.Guatemala\"),\"Code\":\"GT\"},{\"Name\":t(\"countries.Guernsey\"),\"Code\":\"GG\"},{\"Name\":t(\"countries.Guinea\"),\"Code\":\"GN\"},{\"Name\":t(\"countries.Guinea-Bissau\"),\"Code\":\"GW\"},{\"Name\":t(\"countries.Guyana\"),\"Code\":\"GY\"},{\"Name\":t(\"countries.Haiti\"),\"Code\":\"HT\"},{\"Name\":t(\"countries.Heard_Island_and_McDonald_Islands\"),\"Code\":\"HM\"},{\"Name\":t(\"countries.Holy_See_(Vatican_City_State)\"),\"Code\":\"VA\"},{\"Name\":t(\"countries.Honduras\"),\"Code\":\"HN\"},{\"Name\":t(\"countries.Hong_Kong\"),\"Code\":\"HK\"},{\"Name\":t(\"countries.Hungary\"),\"Code\":\"HU\"},{\"Name\":t(\"countries.Iceland\"),\"Code\":\"IS\"},{\"Name\":t(\"countries.India\"),\"Code\":\"IN\"},{\"Name\":t(\"countries.Indonesia\"),\"Code\":\"ID\"},{\"Name\":t(\"countries.Iran,_Islamic_Republic_of\"),\"Code\":\"IR\"},{\"Name\":t(\"countries.Iraq\"),\"Code\":\"IQ\"},{\"Name\":t(\"countries.Ireland\"),\"Code\":\"IE\"},{\"Name\":t(\"countries.Isle_of_Man\"),\"Code\":\"IM\"},{\"Name\":t(\"countries.Israel\"),\"Code\":\"IL\"},{\"Name\":t(\"countries.Italy\"),\"Code\":\"IT\"},{\"Name\":t(\"countries.Jamaica\"),\"Code\":\"JM\"},{\"Name\":t(\"countries.Japan\"),\"Code\":\"JP\"},{\"Name\":t(\"countries.Jersey\"),\"Code\":\"JE\"},{\"Name\":t(\"countries.Jordan\"),\"Code\":\"JO\"},{\"Name\":t(\"countries.Kazakhstan\"),\"Code\":\"KZ\"},{\"Name\":t(\"countries.Kenya\"),\"Code\":\"KE\"},{\"Name\":t(\"countries.Kiribati\"),\"Code\":\"KI\"},{\"Name\":t(\"countries.Korea,_Democratic_People's_Republic_of\"),\"Code\":\"KP\"},{\"Name\":t(\"countries.Korea,_Republic_of\"),\"Code\":\"KR\"},{\"Name\":t(\"countries.Kuwait\"),\"Code\":\"KW\"},{\"Name\":t(\"countries.Kyrgyzstan\"),\"Code\":\"KG\"},{\"Name\":t(\"countries.Lao_People's_Democratic_Republic\"),\"Code\":\"LA\"},{\"Name\":t(\"countries.Latvia\"),\"Code\":\"LV\"},{\"Name\":t(\"countries.Lebanon\"),\"Code\":\"LB\"},{\"Name\":t(\"countries.Lesotho\"),\"Code\":\"LS\"},{\"Name\":t(\"countries.Liberia\"),\"Code\":\"LR\"},{\"Name\":t(\"countries.Libya\"),\"Code\":\"LY\"},{\"Name\":t(\"countries.Liechtenstein\"),\"Code\":\"LI\"},{\"Name\":t(\"countries.Lithuania\"),\"Code\":\"LT\"},{\"Name\":t(\"countries.Luxembourg\"),\"Code\":\"LU\"},{\"Name\":t(\"countries.Macao\"),\"Code\":\"MO\"},{\"Name\":t(\"countries.Macedonia,_the_Former_Yugoslav_Republic_of\"),\"Code\":\"MK\"},{\"Name\":t(\"countries.Madagascar\"),\"Code\":\"MG\"},{\"Name\":t(\"countries.Malawi\"),\"Code\":\"MW\"},{\"Name\":t(\"countries.Malaysia\"),\"Code\":\"MY\"},{\"Name\":t(\"countries.Maldives\"),\"Code\":\"MV\"},{\"Name\":t(\"countries.Mali\"),\"Code\":\"ML\"},{\"Name\":t(\"countries.Malta\"),\"Code\":\"MT\"},{\"Name\":t(\"countries.Marshall_Islands\"),\"Code\":\"MH\"},{\"Name\":t(\"countries.Martinique\"),\"Code\":\"MQ\"},{\"Name\":t(\"countries.Mauritania\"),\"Code\":\"MR\"},{\"Name\":t(\"countries.Mauritius\"),\"Code\":\"MU\"},{\"Name\":t(\"countries.Mayotte\"),\"Code\":\"YT\"},{\"Name\":t(\"countries.Mexico\"),\"Code\":\"MX\"},{\"Name\":t(\"countries.Micronesia,_Federated_States_of\"),\"Code\":\"FM\"},{\"Name\":t(\"countries.Moldova,_Republic_of\"),\"Code\":\"MD\"},{\"Name\":t(\"countries.Monaco\"),\"Code\":\"MC\"},{\"Name\":t(\"countries.Mongolia\"),\"Code\":\"MN\"},{\"Name\":t(\"countries.Montenegro\"),\"Code\":\"ME\"},{\"Name\":t(\"countries.Montserrat\"),\"Code\":\"MS\"},{\"Name\":t(\"countries.Morocco\"),\"Code\":\"MA\"},{\"Name\":t(\"countries.Mozambique\"),\"Code\":\"MZ\"},{\"Name\":t(\"countries.Myanmar\"),\"Code\":\"MM\"},{\"Name\":t(\"countries.Namibia\"),\"Code\":\"NA\"},{\"Name\":t(\"countries.Nauru\"),\"Code\":\"NR\"},{\"Name\":t(\"countries.Nepal\"),\"Code\":\"NP\"},{\"Name\":t(\"countries.Netherlands\"),\"Code\":\"NL\"},{\"Name\":t(\"countries.New_Caledonia\"),\"Code\":\"NC\"},{\"Name\":t(\"countries.New_Zealand\"),\"Code\":\"NZ\"},{\"Name\":t(\"countries.Nicaragua\"),\"Code\":\"NI\"},{\"Name\":t(\"countries.Niger\"),\"Code\":\"NE\"},{\"Name\":t(\"countries.Nigeria\"),\"Code\":\"NG\"},{\"Name\":t(\"countries.Niue\"),\"Code\":\"NU\"},{\"Name\":t(\"countries.Norfolk_Island\"),\"Code\":\"NF\"},{\"Name\":t(\"countries.Northern_Mariana_Islands\"),\"Code\":\"MP\"},{\"Name\":t(\"countries.Norway\"),\"Code\":\"NO\"},{\"Name\":t(\"countries.Oman\"),\"Code\":\"OM\"},{\"Name\":t(\"countries.Pakistan\"),\"Code\":\"PK\"},{\"Name\":t(\"countries.Palau\"),\"Code\":\"PW\"},{\"Name\":t(\"countries.Palestine,_State_of\"),\"Code\":\"PS\"},{\"Name\":t(\"countries.Panama\"),\"Code\":\"PA\"},{\"Name\":t(\"countries.Papua_New_Guinea\"),\"Code\":\"PG\"},{\"Name\":t(\"countries.Paraguay\"),\"Code\":\"PY\"},{\"Name\":t(\"countries.Peru\"),\"Code\":\"PE\"},{\"Name\":t(\"countries.Philippines\"),\"Code\":\"PH\"},{\"Name\":t(\"countries.Pitcairn\"),\"Code\":\"PN\"},{\"Name\":t(\"countries.Poland\"),\"Code\":\"PL\"},{\"Name\":t(\"countries.Portugal\"),\"Code\":\"PT\"},{\"Name\":t(\"countries.Puerto_Rico\"),\"Code\":\"PR\"},{\"Name\":t(\"countries.Qatar\"),\"Code\":\"QA\"},{\"Name\":t(\"countries.Réunion\"),\"Code\":\"RE\"},{\"Name\":t(\"countries.Romania\"),\"Code\":\"RO\"},{\"Name\":t(\"countries.Russian_Federation\"),\"Code\":\"RU\"},{\"Name\":t(\"countries.Rwanda\"),\"Code\":\"RW\"},{\"Name\":t(\"countries.Saint_Barthélemy\"),\"Code\":\"BL\"},{\"Name\":t(\"countries.Saint_Helena,_Ascension_and_Tristan_da_Cunha\"),\"Code\":\"SH\"},{\"Name\":t(\"countries.Saint_Kitts_and_Nevis\"),\"Code\":\"KN\"},{\"Name\":t(\"countries.Saint_Lucia\"),\"Code\":\"LC\"},{\"Name\":t(\"countries.Saint_Martin_(French_part)\"),\"Code\":\"MF\"},{\"Name\":t(\"countries.Saint_Pierre_and_Miquelon\"),\"Code\":\"PM\"},{\"Name\":t(\"countries.Saint_Vincent_and_the_Grenadines\"),\"Code\":\"VC\"},{\"Name\":t(\"countries.Samoa\"),\"Code\":\"WS\"},{\"Name\":t(\"countries.San_Marino\"),\"Code\":\"SM\"},{\"Name\":t(\"countries.Sao_Tome_and_Principe\"),\"Code\":\"ST\"},{\"Name\":t(\"countries.Saudi_Arabia\"),\"Code\":\"SA\"},{\"Name\":t(\"countries.Senegal\"),\"Code\":\"SN\"},{\"Name\":t(\"countries.Serbia\"),\"Code\":\"RS\"},{\"Name\":t(\"countries.Seychelles\"),\"Code\":\"SC\"},{\"Name\":t(\"countries.Sierra_Leone\"),\"Code\":\"SL\"},{\"Name\":t(\"countries.Singapore\"),\"Code\":\"SG\"},{\"Name\":t(\"countries.Sint_Maarten_(Dutch_part)\"),\"Code\":\"SX\"},{\"Name\":t(\"countries.Slovakia\"),\"Code\":\"SK\"},{\"Name\":t(\"countries.Slovenia\"),\"Code\":\"SI\"},{\"Name\":t(\"countries.Solomon_Islands\"),\"Code\":\"SB\"},{\"Name\":t(\"countries.Somalia\"),\"Code\":\"SO\"},{\"Name\":t(\"countries.South_Africa\"),\"Code\":\"ZA\"},{\"Name\":t(\"countries.South_Georgia_and_the_South_Sandwich_Islands\"),\"Code\":\"GS\"},{\"Name\":t(\"countries.South_Sudan\"),\"Code\":\"SS\"},{\"Name\":t(\"countries.Spain\"),\"Code\":\"ES\"},{\"Name\":t(\"countries.Sri_Lanka\"),\"Code\":\"LK\"},{\"Name\":t(\"countries.Sudan\"),\"Code\":\"SD\"},{\"Name\":t(\"countries.Suriname\"),\"Code\":\"SR\"},{\"Name\":t(\"countries.Svalbard_and_Jan_Mayen\"),\"Code\":\"SJ\"},{\"Name\":t(\"countries.Swaziland\"),\"Code\":\"SZ\"},{\"Name\":t(\"countries.Sweden\"),\"Code\":\"SE\"},{\"Name\":t(\"countries.Switzerland\"),\"Code\":\"CH\"},{\"Name\":t(\"countries.Syrian_Arab_Republic\"),\"Code\":\"SY\"},{\"Name\":t(\"countries.Taiwan,_Province_of_China\"),\"Code\":\"TW\"},{\"Name\":t(\"countries.Tajikistan\"),\"Code\":\"TJ\"},{\"Name\":t(\"countries.Tanzania,_United_Republic_of\"),\"Code\":\"TZ\"},{\"Name\":t(\"countries.Thailand\"),\"Code\":\"TH\"},{\"Name\":t(\"countries.Timor-Leste\"),\"Code\":\"TL\"},{\"Name\":t(\"countries.Togo\"),\"Code\":\"TG\"},{\"Name\":t(\"countries.Tokelau\"),\"Code\":\"TK\"},{\"Name\":t(\"countries.Tonga\"),\"Code\":\"TO\"},{\"Name\":t(\"countries.Trinidad_and_Tobago\"),\"Code\":\"TT\"},{\"Name\":t(\"countries.Tunisia\"),\"Code\":\"TN\"},{\"Name\":t(\"countries.Turkey\"),\"Code\":\"TR\"},{\"Name\":t(\"countries.Turkmenistan\"),\"Code\":\"TM\"},{\"Name\":t(\"countries.Turks_and_Caicos_Islands\"),\"Code\":\"TC\"},{\"Name\":t(\"countries.Tuvalu\"),\"Code\":\"TV\"},{\"Name\":t(\"countries.Uganda\"),\"Code\":\"UG\"},{\"Name\":t(\"countries.Ukraine\"),\"Code\":\"UA\"},{\"Name\":t(\"countries.United_Arab_Emirates\"),\"Code\":\"AE\"},{\"Name\":t(\"countries.United_Kingdom\"),\"Code\":\"GB\"},{\"Name\":t(\"countries.United_States\"),\"Code\":\"US\"},{\"Name\":t(\"countries.United_States_Minor_Outlying_Islands\"),\"Code\":\"UM\"},{\"Name\":t(\"countries.Uruguay\"),\"Code\":\"UY\"},{\"Name\":t(\"countries.Uzbekistan\"),\"Code\":\"UZ\"},{\"Name\":t(\"countries.Vanuatu\"),\"Code\":\"VU\"},{\"Name\":t(\"countries.Venezuela,_Bolivarian_Republic_of\"),\"Code\":\"VE\"},{\"Name\":t(\"countries.Viet_Nam\"),\"Code\":\"VN\"},{\"Name\":t(\"countries.Virgin_Islands_British\"),\"Code\":\"VG\"},{\"Name\":t(\"countries.Virgin_Islands_US\"),\"Code\":\"VI\"},{\"Name\":t(\"countries.Wallis_and_Futuna\"),\"Code\":\"WF\"},{\"Name\":t(\"countries.Western_Sahara\"),\"Code\":\"EH\"},{\"Name\":t(\"countries.Yemen\"),\"Code\":\"YE\"},{\"Name\":t(\"countries.Zambia\"),\"Code\":\"ZM\"},{\"Name\":t(\"countries.Zimbabwe\"),\"Code\":\"ZW\"}]\n\nexport default ISO_COUNTRY_CODES","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst RelationsAccountProfileForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"customer\" \n                  checked={values.customer} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.customer')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"customer\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"instructor\" \n                  checked={values.instructor} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.instructor')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"instructor\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"employee\" \n                  checked={values.employee} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.employee')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"employee\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.discovery')}>\n              <Field component=\"select\" \n                    name=\"organizationDiscovery\" \n                    className={(errors.organizationDiscovery) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationDiscoveries.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationDiscovery\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.language')}>\n              <Field component=\"select\" \n                    name=\"organizationLanguage\" \n                    className={(errors.organizationLanguage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.organizationLanguages.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLanguage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.invoice_to_business')}>\n              <Field component=\"select\" \n                    name=\"invoiceToBusiness\" \n                    className={(errors.invoiceToBusiness) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"relations.accounts.invoice_to_account\")}</option>\n                {inputData.businesses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"invoiceToBusiness\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.key_number')}>\n              <Field type=\"text\" \n                      name=\"keyNumber\" \n                      className={(errors.keyNumber) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"keyNumber\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Avatar,\n  Card,\n  Icon,\n  List,\n  Media,\n  SocialNetworksList,\n  Tooltip,\n} from \"tabler-react\"\n\nfunction ProfileCardSmall({ t, value, user, avatarSize='lg' }) {\n  if (!user) {\n    return \"\"\n  }\n\n  const accountId = user.id\n\n  return (\n    <Card>\n      <Card.Body>\n        <Media>\n          <Link to={`/relations/accounts/${accountId}/profile/image`}>\n            {(user.urlImageThumbnailSmall) ? \n              <Avatar size={avatarSize + \" mr-5\"} imageURL={user.urlImageThumbnailSmall} /> :\n              <Avatar size={avatarSize + \" mr-5\"} icon=\"user\" />\n            }\n          </Link>\n          <Media.Body>\n            <h4 className=\"mb-2\">{user.firstName + \" \" + user.lastName}</h4>\n            <div className=\"text-muted mb-0\">\n              <SocialNetworksList className=\"mb-0 mt-2\">\n                {\n                  (user.phone) ? \n                    <List.Item inline>\n                      <Tooltip content={user.phone} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"phone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item>\n                  // No phone number found\n                  : \"\"\n                }\n                {\n                  (user.mobile) ?\n                    <List.Item inline>\n                      <Tooltip content={user.mobile} placement=\"top\">\n                        <span>\n                          <Icon prefix=\"fe\" name=\"smartphone\" />\n                        </span>\n                      </Tooltip>\n                    </List.Item> \n                    // No mobile number found\n                    : \"\"\n                }\n\n                <List.Item inline>\n                  <Tooltip content={user.email} placement=\"top\">\n                    <a href={\"mailto:\" + user.email}>\n                      <Icon prefix=\"fe\" name=\"mail\" />\n                    </a>\n                  </Tooltip>\n                </List.Item>\n\n              </SocialNetworksList>\n              {/* items={[\n                <a href={\"mailto:\" + user.email}\n                  title={user.email}>\n                  <Icon prefix=\"fe\" name=\"mail\" />\n                </a>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"phone\" />\n                </span>,\n                <span title=\"Phone number here\">\n                  <Icon prefix=\"fe\" name=\"mobile\" />\n                </span>,\n                \n              ]}\n            /> */}\n              {/* <Text.Small>\n                <Icon name=\"mail\" />  <a href={\"mailto:\" + user.email}>{user.email}</a> <br/>\n                <Icon name=\"phone\" /> user phone nr here... <br />\n                <Icon name=\"smartphone\" /> user mobile nr here...\n              </Text.Small> */}\n            </div>\n            {/* <SocialNetworksList\n              items={[\n                <a href=\"http://www.twitter.com\">\n                  <Icon prefix=\"fa\" name=\"twitter\" />\n                </a>,\n                <a href=\"http://www.facebook.com\">\n                  <Icon prefix=\"fa\" name=\"facebook\" />\n                </a>,\n              ]}\n            /> */}\n          </Media.Body>\n        </Media>\n      </Card.Body>\n    </Card>  \n  )\n}\n\nexport default withTranslation()(ProfileCardSmall)","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\nimport { GET_ACCOUNT_QUERY } from './queries'\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nlet profile_active\nlet subscriptions_active\nlet classpasses_active\nlet classes_active\nlet documents_active\nlet tickets_active\nlet instructor_profile_active\nlet orders_active\nlet invoices_active\nlet bank_account_active\nlet notes_active\nlet finance_payment_batch_category_item_active\nlet accepted_documents_active\n\n\nfunction ProfileMenu({t, accountId, activeLink}) {\n    const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n        variables: {id: accountId}\n    })\n\n    if (loading) return <p>{t('general.loading_with_dots')}</p>\n    // Error\n    if (error) {\n      console.log(error)\n      return <p>{t('general.error_sad_smiley')}</p>\n    }\n    const account = data.account\n    console.log('account in profile menu')\n    console.log(account)\n\n    return (\n      <List.Group transparent={true}>\n        {(activeLink === 'profile') ? profile_active = true: profile_active = false}\n        {(activeLink === 'subscriptions') ? subscriptions_active = true: subscriptions_active = false}\n        {(activeLink === 'classpasses') ? classpasses_active = true: classpasses_active = false}\n        {(activeLink === 'classes') ? classes_active = true: classes_active = false}\n        {(activeLink === 'documents') ? documents_active = true: documents_active = false}\n        {(activeLink === 'tickets') ? tickets_active = true: tickets_active = false}\n        {(activeLink === 'instructor_profile') ? instructor_profile_active = true: instructor_profile_active = false}\n        {(activeLink === 'orders') ? orders_active = true: orders_active = false}\n        {(activeLink === 'invoices') ? invoices_active = true: invoices_active = false}\n        {(activeLink === 'bank_account') ? bank_account_active = true: bank_account_active = false}\n        {(activeLink === 'notes') ? notes_active = true: notes_active = false}\n        {(activeLink === 'finance_payment_batch_category_item') ? \n            finance_payment_batch_category_item_active = true : \n            finance_payment_batch_category_item_active = false }\n        {(activeLink === 'accepted_documents') ? accepted_documents_active = true: accepted_documents_active = false}\n        \n\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/accounts/\" + accountId + \"/profile\"}\n            icon=\"user\"\n            active={profile_active}\n        >\n            {t('relations.accounts.profile')}\n        </List.GroupItem>\n        {/* <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountmembership\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/memberships\"}\n                icon=\"clipboard\"\n                active={memberships_active}\n                >\n            {t('relations.account.memberships.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper> */}\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountsubscription\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/subscriptions\"}\n                icon=\"edit\"\n                active={subscriptions_active}\n                >\n            {t('relations.account.subscriptions.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountclasspass\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classpasses\"}\n                icon=\"credit-card\"\n                active={classpasses_active}\n                >\n            {t('relations.account.classpasses.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemattendance\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/classes\"}\n                icon=\"book\"\n                active={classes_active}\n                >\n            {t('relations.account.classes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"scheduleitemenrollment\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/enrollments\"}\n                icon=\"refresh-cw\"\n                active={activeLink === 'enrollments'}\n                >\n            {t('relations.account.enrollments.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountscheduleeventticket\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/event_tickets\"}\n                icon=\"clipboard\"\n                active={tickets_active}\n                >\n            {t('relations.account.event_tickets.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountproduct\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/products\"}\n                icon=\"package\"\n                active={(activeLink === 'products')}\n                >\n            {t('relations.account.products.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeorder\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/orders\"}\n                icon=\"file-plus\"\n                active={orders_active}\n                >\n            {t('relations.account.orders.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financequote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/quotes\"}\n                icon=\"file\"\n                active={(activeLink === \"quotes\")}\n                >\n            {t('relations.account.quotes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/invoices\"}\n                icon=\"file-text\"\n                active={invoices_active}\n                >\n            {t('relations.account.invoices.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountbankaccount\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/bank_accounts\"}\n                icon=\"briefcase\"\n                active={bank_account_active}\n                >\n            {t('relations.account.bank_accounts.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountfinancepaymentbatchcategoryitem\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/finance_payment_batch_category_items\"}\n                icon=\"list\"\n                active={finance_payment_batch_category_item_active}\n                >\n            {t('relations.account.finance_payment_batch_category_items.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        { (account.instructor) ?\n            <HasPermissionWrapper \n                permission=\"view\"\n                resource=\"accountinstructorprofile\">\n                <List.GroupItem\n                    key={v4()}\n                    className=\"d-flex align-items-center\"\n                    to={\"#/relations/accounts/\" + accountId + \"/instructor_profile\"}\n                    icon=\"paperclip\"\n                    active={instructor_profile_active}\n                    >\n                {t('relations.account.instructor_profile.title')}\n                </List.GroupItem>\n            </HasPermissionWrapper>\n        : \"\" }\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountaccepteddocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/accepted_documents\"}\n                icon=\"check-square\"\n                active={accepted_documents_active}\n                >\n            {t('relations.account.accepted_documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountdocument\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/documents\"}\n                icon=\"file\"\n                active={documents_active}\n                >\n            {t('relations.account.documents.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"accountnote\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/notes\"}\n                icon=\"message-square\"\n                active={notes_active}\n                >\n            {t('relations.account.notes.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            permission=\"change\"\n            resource=\"account\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/accounts/\" + accountId + \"/tools\"}\n                icon=\"settings\"\n                active={(activeLink === 'tools')}\n                >\n            {t('relations.account.tools.title')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(ProfileMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ProfileCardSmall from \"../../ui/ProfileCardSmall\"\n\nimport ButtonBack from '../../ui/ButtonBack'\nimport ProfileMenu from \"./ProfileMenu\"\n\n\nfunction RelationsAccountProfileBase({t, match, children, back, returnUrl='/relations/accounts', pageHeaderButtonList=\"\", activeLink=\"\", user={}}) {\n  const accountId = match.params.account_id\n  let headerTitle = \"\"\n  if (user) {\n    headerTitle = `${user.firstName} ${user.lastName}`\n  }\n\n  returnUrl = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN)\n  if (!returnUrl) {\n    returnUrl = '/relations/accounts'\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={headerTitle}>\n            <div className=\"page-options d-flex\">\n              {(back) ? back : <ButtonBack returnUrl={returnUrl} />}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>                                    \n            <Grid.Col md={3}>\n              <ProfileCardSmall user={user}/>\n              <ProfileMenu \n                activeLink={activeLink}\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { dateToLocalISO } from '../../../tools/date_tools'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileForm from \"./RelationsAccountProfileForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfile({t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateOfBirth = null\n  if (account.dateOfBirth) {\n    dateOfBirth = new Date(account.dateOfBirth)\n  }\n\n  let initialValues = { \n    customer: account.customer, \n    instructor: account.instructor, \n    employee: account.employee, \n    firstName: account.firstName, \n    lastName: account.lastName, \n    email: account.email,\n    dateOfBirth: dateOfBirth,\n    gender: account.gender,\n    emergency: account.emergency,\n    phone: account.phone,\n    mobile: account.mobile,\n    address: account.address,\n    postcode: account.postcode,\n    city: account.city,\n    country: account.country,\n    keyNumber: account.keyNumber\n  }\n\n  if (account.organizationDiscovery) {\n    initialValues.organizationDiscovery = account.organizationDiscovery.id\n  }\n\n  if (account.organizationLanguage) {\n    initialValues.organizationLanguage = account.organizationLanguage.id\n  }\n\n  if (account.invoiceToBusiness) {\n    initialValues.invoiceToBusiness = account.invoiceToBusiness.id\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n\n        <Formik\n            initialValues={initialValues}\n            validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  customer: values.customer,\n                  instructor: values.instructor,\n                  employee: values.employee,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country,\n                  keyNumber: values.keyNumber,\n                  organizationDiscovery: values.organizationDiscovery,\n                  organizationLanguage: values.organizationLanguage,\n                  invoiceToBusiness: values.invoiceToBusiness\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // Refetch list\n                    {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // Refresh local cached results for this account\n                    {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.accounts.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfile))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { customFileInputLabelStyle } from \"../../../tools/custom_file_input_label_style\"\n\n\nconst RelationsAccountProfileImageForm = ({ t, history, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Link to={returnUrl}>\n            <Button color=\"link\" className=\"pull-right\">\n              {t('general.cancel')}\n            </Button>\n          </Link>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImageForm))\n\n","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNTS_QUERY, GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from './queries'\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsAccountProfileImageForm from \"./RelationsAccountProfileImageForm\"\nimport RelationsAccountProfileBase from './RelationsAccountProfileBase'\n\n\nfunction RelationsAccountProfileImage({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"profile\"\n  const cardTitle = t('relations.accounts.profile_image')\n  const returnUrl = `/relations/accounts/${accountId}/profile` \n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId}\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n\n  // Vars file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n  // Vars file input field end\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n            initialValues={{}}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let inputVars = {\n                  id: accountId,\n                }\n\n                function updateImage() {\n                  updateAccount({ variables: {\n                    input: inputVars\n                  }, refetchQueries: [\n                      // Refetch list\n                      {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                      // Refresh local cached results for this account\n                      {query: GET_ACCOUNT_QUERY, variables: {id: accountId}}\n                  ]})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(`/relations/accounts/${accountId}/profile`)\n                      toast.success((t('relations.accounts.toast_edit_success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n                }\n\n                let reader = new FileReader()\n                reader.onload = function(reader_event) {\n                  console.log(reader_event.target.result)\n                  let b64_enc_file = reader_event.target.result\n                  console.log(b64_enc_file)\n                  // Add uploaded document b64 encoded blob to input vars\n                  inputVars.image = b64_enc_file\n                  inputVars.imageFileName = fileName\n      \n                  updateImage()\n                }\n                \n                let file = inputFileName.current.files[0]\n                if (file && file.size < 5242880) {\n                  reader.readAsDataURL(file)\n                } else if (file && file.size > 5242880) { \n                  toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n                } else {\n                  updateImage()\n                }\n            }}\n            >\n            {({ isSubmitting, values }) => (\n              <RelationsAccountProfileImageForm\n                isSubmitting={isSubmitting}\n                values={values}\n                inputData={data}\n                inputFileName={inputFileName}\n                fileInputLabel={fileInputLabel}\n                handleFileInputChange={handleFileInputChange}\n                returnUrl={returnUrl}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountProfileImage))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../ui/ButtonBack'\n\nconst RelationsAccountsBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/relations/accounts\" />\n)\n\nexport default withTranslation()(RelationsAccountsBack)","import { withTranslation } from 'react-i18next'\n\nconst DocumentType = ({ t, documentType }) => {\n  switch (documentType) {\n    case \"TERMS_AND_CONDITIONS\":  \n      return t('general.terms_and_conditions')\n    case \"PRIVACY_POLICY\":\n      return t('general.privacy_policy')\n    default:\n      return t('general.unknown_document_type')\n  }\n}\n\nexport default withTranslation()(DocumentType)\n\n\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY = gql`\n  query AccountAcceptedDocuments($after: String, $before: String, $account: ID!) {\n    accountAcceptedDocuments(first: 15, before:$before, after:$after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          document {\n            id\n            documentType\n            version\n            urlDocument\n          }\n          dateAccepted\n          clientIp\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport DocumentType from \"../../../ui/DocumentType\"\nimport FileDownloadTableButton from \"../../../ui/FileDownloadTableButton\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nimport { GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY } from \"./queries\"\n\n\n\n\nfunction AccountAcceptedDocuments({ t, history, match }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.accepted_documents.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ACCEPTED_DOCUMENTS_QUERY, {\n    variables: {\n      account: accountId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log(data)\n  \n  const account = data.account\n  const acceptedDocuments = data.accountAcceptedDocuments\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {\n              // Empty list\n                (!acceptedDocuments.edges.length) ?\n                  <Card title={cardTitle}>\n                    <Card.Body>\n                      <p>{t('relations.account.accepted_documents.empty_list')}</p>\n                    </Card.Body>\n                  </Card>\n                :\n                <ContentCard \n                  cardTitle={cardTitle}\n                  pageInfo={acceptedDocuments.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: data.accountAcceptedDocuments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accountAcceptedDocuments.edges\n                        const pageInfo = fetchMoreResult.accountAcceptedDocuments.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new acceptedDocuments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              accountAcceptedDocuments: {\n                                __typename: previousResult.accountAcceptedDocuments.__typename,\n                                edges: [ ...previousResult.accountAcceptedDocuments.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n                >\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row key={v4()}>\n                        <Table.ColHeader>{t('general.document_type')}</Table.ColHeader>\n                        <Table.ColHeader>{t('general.date_accepted')}</Table.ColHeader>\n                        <Table.ColHeader>{t('relations.account.accepted_documents.accepted_from_address')}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"pull-right\">{t('general.document')}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {acceptedDocuments.edges.map(({ node }) => (\n                          <Table.Row key={v4()}>\n                            <Table.Col key={v4()}>\n                              <DocumentType documentType={node.document.documentType} />\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              {moment(node.dateAccepted).format(dateFormat)}\n                            </Table.Col>\n                            <Table.Col>\n                              {node.clientIp}\n                            </Table.Col>\n                            <Table.Col key={v4()}>\n                              <FileDownloadTableButton mediaUrl={node.document.urlDocument} className=\"pull-right\" />\n                            </Table.Col>\n                          </Table.Row>\n                        ))}\n                    </Table.Body>\n                  </Table>\n                </ContentCard>\n              }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='accepted_documents' \n                accountId={match.params.account_id}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n      \n        \nexport default withTranslation()(withRouter(AccountAcceptedDocuments))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS_QUERY = gql`\n  query AccountBankAccounts($after: String, $before: String, $account: ID!) {\n    accountBankAccounts(\n      first: 1, \n      before: $before, \n      after: $after, \n      account: $account\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          number\n          holder\n          bic\n          mandates(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                reference\n                content\n                signatureDate\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\n// export const GET_ACCOUNT_QUERY = gql`\n//   query Account($id: ID!) {\n//     account(id:$id) {\n//       id\n//       customer\n//       instructor\n//       employee\n//       firstName\n//       lastName\n//       email\n//       dateOfBirth\n//       gender\n//       address\n//       postcode\n//       city\n//       country\n//       phone\n//       mobile\n//       emergency\n//       isActive\n//     }\n//   }\n// `\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT = gql`\n  mutation UpdateAccountBanKAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n        number\n        holder\n        bic\n      }\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY = gql`\n  query AccountBankAccountMandate($id: ID!) {\n    accountBankAccountMandate(id:$id) {\n      id\n      reference\n      content\n      signatureDate\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation CreateAccountBankAccountMandate($input:CreateAccountBankAccountMandateInput!) {\n    createAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation UpdateAccountBankAccountMandate($input:UpdateAccountBankAccountMandateInput!) {\n    updateAccountBankAccountMandate(input: $input) {\n      accountBankAccountMandate {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE = gql`\n  mutation DeleteAccountBankAccountMandate($input:DeleteAccountBankAccountMandateInput!) {\n    deleteAccountBankAccountMandate(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport ButtonBack from '../../../ui/ButtonBack';\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ProfileMenu from \"../ProfileMenu\"\n\n\nfunction RelationsAccountBankAccountBase({ t, match, history, children, bankAccountId=\"\", pageHeaderButtonList, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ? \n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/bank_accounts/`} /> :\n                <RelationsAccountsBack />  \n              }\n              {pageHeaderButtonList}\n              {((bankAccountId) && !(showEditBack)) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountbankaccountmandate\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${match.params.account_id}/bank_accounts/${bankAccountId}/mandates/add`}\n                    buttonText={t('relations.account.bank_accounts.mandates.add')}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='bank_account'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountBankAccountForm = ({ t, history, isSubmitting, errors, values, }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountForm))\n\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card, \n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT } from './queries'\nimport { DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './mandates/queries'\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport RelationsAccountBankAccountBase from \"./RelationsAccountBankAccountBase\"\nimport RelationsAccountBankAccountForm from \"./RelationsAccountBankAccountForm\"\n\n\n\nfunction RelationsAccountBankAccount({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS_QUERY, {\n    variables: { account: accountId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [ updateAccountBankAccount ] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT)\n  const [ deleteAccountBankAccountMandate ] = useMutation(DELETE_ACCOUNT_BANK_ACCOUNT_MANDATE)\n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const accountBankAccounts = data.accountBankAccounts\n  const accountBankAccount = accountBankAccounts.edges[0].node\n  const mandates = accountBankAccount.mandates\n  console.log(accountBankAccount)\n\n  return (\n    <RelationsAccountBankAccountBase bankAccountId={accountBankAccount.id}>\n      <Card title={t('relations.account.bank_accounts.title')}>\n        <Formik\n          initialValues={{ \n            number: accountBankAccount.number,\n            holder: accountBankAccount.holder,\n            bic: accountBankAccount.bic\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountBankAccount.id,\n                number: values.number,\n                holder: values.holder,\n                bic: values.bic              \n              }\n\n              updateAccountBankAccount({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refresh local cached results for this account\n                  {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.bank_accounts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n      {(mandates.edges.length) ? <h5>{t(\"relations.account.bank_accounts.mandates.title\")}</h5> : \"\"}\n      <Grid.Row>\n      {mandates.edges.map(({ node }) => (\n        <Grid.Col md={6}>\n          <Card title={node.reference}>\n            <Card.Body>\n              {t(\"relations.account.bank_accounts.mandates.signature_date\")} {moment(node.signatureDate).format(dateFormat)}\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                className=\"pull-right\"\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.bank_accounts.mandates.delete_confirm_msg\"),\n                    msgDescription: <p>{node.reference}</p>,\n                    msgSuccess: t('relations.account.bank_accounts.mandates.deleted'),\n                    deleteFunction: deleteAccountBankAccountMandate,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId} } \n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${accountId}/bank_accounts/${accountBankAccount.id}/mandates/edit/${node.id}`}>\n                <Button\n                  type=\"button\" \n                  color=\"secondary\" \n                >\n                    {t('general.edit')}\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      ))}\n      </Grid.Row>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccount))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountBankAccountMandateForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.reference')}>\n            <Field type=\"text\" \n                    name=\"reference\" \n                    className={(errors.reference) ? \"form-control is-invalid\" : \"form-control\"}\n                    placeholder={t('relations.account.bank_accounts.mandates.reference_placeholder')}\n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"reference\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.signature_date')}>\n            <CSDatePicker \n              selected={values.signatureDate}\n              onChange={(date) => setFieldValue(\"signatureDate\", date)}\n              onBlur={() => setFieldTouched(\"signatureDate\", true)}\n            />\n            <ErrorMessage name=\"signatureDate\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('relations.account.bank_accounts.mandates.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateForm))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateAdd({ t, match, history }) {\n  const accountId = match.params.account_id\n  const bankAccountId = match.params.bank_account_id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const [createAccountBankAccountMandate] = useMutation(CREATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n \n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_add')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: \"\",\n            content: \"\",\n            signatureDate: new Date()\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createAccountBankAccountMandate({ variables: {\n              input: {\n                accountBankAccount: bankAccountId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                history.push(returnUrl)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE } from './queries'\nimport { GET_ACCOUNT_BANK_ACCOUNTS_QUERY } from '../queries'\nimport RelationsAccountBankAccountMandateForm from './RelationsAccountBankAccountMandateForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport RelationsAccountBankAccountBase from '../RelationsAccountBankAccountBase'\n\n\nfunction RelationsAccountBankAccountMandateEdit({ t, match, history }) {\n  const accountId = match.params.account_id\n  const mandateId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/bank_accounts`\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNT_MANDATE_QUERY, {\n    variables: {'id': mandateId},\n  })\n  const [updateAccountBankAccountMandate] = useMutation(UPDATE_ACCOUNT_BANK_ACCOUNT_MANDATE) \n\n  if (loading) return (\n    <RelationsAccountBankAccountBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </RelationsAccountBankAccountBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <RelationsAccountBankAccountBase>\n        <p>{t('general.loading_with_dots')}</p><p>{t('general.error_sad_smiley')}</p>\n      </RelationsAccountBankAccountBase>\n    )\n  }\n\n  const mandate = data.accountBankAccountMandate\n \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let signDate = null\n  if (mandate.signatureDate) {\n    signDate = new Date(mandate.signatureDate)\n  }\n\n  return (\n    <RelationsAccountBankAccountBase showEditBack={true}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.account.bank_accounts.mandates.title_edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{\n            reference: mandate.reference,\n            content: mandate.content,\n            signatureDate: signDate\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            updateAccountBankAccountMandate({ variables: {\n              input: {\n                id: mandateId,\n                reference: values.refrence, \n                content: values.content,\n                signatureDate: dateToLocalISO(values.signatureDate)\n              }\n            }, refetchQueries: [\n              {query: GET_ACCOUNT_BANK_ACCOUNTS_QUERY, variables: { account: accountId }}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.bank_accounts.mandates.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push(returnUrl)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountBankAccountMandateForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </RelationsAccountBankAccountMandateForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountBankAccountBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsAccountBankAccountMandateEdit))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeBookingStatus({ t, status }) {\n  switch (status) {\n    case \"ATTENDING\":\n      return <Badge color=\"success\">{t('schedule.classes.class.attendance.booking_status.ATTENDING')}</Badge> \n    case \"BOOKED\":\n      return <Badge color=\"primary\">{t('schedule.classes.class.attendance.booking_status.BOOKED')}</Badge> \n    case \"CANCELLED\":\n      return <Badge color=\"warning\">{t('schedule.classes.class.attendance.booking_status.CANCELLED')}</Badge> \n    default:\n      return t(\"schedule.classes.class.attendance.booking_status.invalid_type\")\n  }\n}\n\nexport default withTranslation()(BadgeBookingStatus)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountClassesBase({ t, match, history, children, account={}, pageHeaderButtonList }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='classes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClassesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          accountClasspass {\n            organizationClasspass {\n              name\n              trialPass\n            }\n          }\n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n      countAttending\n      countBooked\n      spaces\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItem: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId:$scheduleItem, date:$date) {\n      scheduleItemId\n      frequencyType\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      date\n      timeStart\n      timeEnd\n      displayPublic\n      status\n      description\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n\nexport const RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation ResendClassInfoMail($input: ResendInfoMailScheduleItemAttendanceInput!) {\n    resendInfoMailScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\n// export const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n//   query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n//     scheduleItemAccount(id: $id) {\n//       id\n//       account {\n//         id\n//         fullName\n//       }\n//       role\n//       account2 {\n//         id\n//         fullName\n//       }\n//       role2\n//       dateStart\n//       dateEnd       \n//     }\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `\n\n\n// export const GET_INPUT_VALUES_QUERY = gql`\n//   query InputValues($after: String, $before: String) {\n//     accounts(first: 15, before: $before, after: $after, isActive: true, instructor: true) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           fullName\n//         }\n//       }\n//     }\n//   }\n// `","import React, { useContext } from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport moment from 'moment'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const [deleteScheduleItemAttendance] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n          msgDescription: <p>\n            <List>\n              <List.Item>\n                {t(\"general.time\")}: { moment(node.date).format(dateFormat) } { ' ' }\n                {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n              </List.Item>\n              <List.Item>\n                {t(\"general.class\")}: {node.scheduleItem.organizationClasstype.name} \n              </List.Item>\n              <List.Item>\n                {t(\"general.location\")}: {node.scheduleItem.organizationLocationRoom.organizationLocation.name} \n              </List.Item>\n            </List>    \n          </p>,\n          msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n          deleteFunction: deleteScheduleItemAttendance,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_CLASSES_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","export function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(schedule_item_id, date) {\n  return {\n    scheduleItem: schedule_item_id,\n    date: date\n  }\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Dropdown,\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { toast } from 'react-toastify'\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport { \n  GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n  UPDATE_SCHEDULE_ITEM_ATTENDANCE,\n} from \"./queries\"\n\nimport {\n  GET_ACCOUNT_CLASSES_QUERY\n} from \"../../../../relations/accounts/classes/queries\"\n\nfunction setAttendanceStatus({\n  t,\n  match,\n  updateAttendance, \n  node, \n  status, \n  setAttendanceRefetching=f=>f,\n  refetchAccountAttendance=false,\n  refetchScheduleItemAttendance=false,\n}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const account_id = match.params.account_id\n  let refetchQueries = []\n\n  setAttendanceRefetching(true)\n\n  // Refetch relations > account > classes\n  if (refetchAccountAttendance) {\n    refetchQueries.push({\n      query: GET_ACCOUNT_CLASSES_QUERY,\n      variables: {account: account_id}\n    })\n  }\n\n  // Refetch schedule > classes > attendance\n  if (refetchScheduleItemAttendance) {\n    refetchQueries.push({\n      query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n      variables: get_attendance_list_query_variables(schedule_item_id, class_date)\n    })\n  }\n\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: refetchQueries,\n    // refetchQueries: [\n    //   {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n    //     variables: get_attendance_list_query_variables(schedule_item_id, class_date)}\n    // ], \n    // Mutation is \"complete\" when refetchQueries finish\n    awaitRefetchQueries: true\n  }).then(({ data }) => {\n    console.log('got data', data);\n    // sleepFor(1000)\n    setAttendanceRefetching(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setAttendanceRefetching(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction ScheduleClassAttendanceItemCheckinAndStatus({ \n  t, \n  match, \n  location, \n  refetchAccountAttendance=false,\n  refetchScheduleItemAttendance=false,\n  scheduleItemAttendanceNode,\n  setAttendanceRefetching=f=>f,\n }) {\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  return (\n    <React.Fragment>\n      {/* Status dropdown */}\n      <Dropdown\n        key={v4()}\n        className=\"float-right\"\n        type=\"button\"\n        toggle\n        color=\"secondary btn-sm\"\n        triggerContent={t(\"general.status\")}\n        items={[\n          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n            <Dropdown.Item\n              key={v4()}\n              icon=\"calendar\"\n              onClick={() => {\n                setAttendanceStatus({\n                  t: t, \n                  match: match,\n                  updateAttendance: updateAttendance,\n                  node: scheduleItemAttendanceNode,\n                  status: 'BOOKED',\n                  setAttendanceRefetching: setAttendanceRefetching,\n                  refetchAccountAttendance: refetchAccountAttendance,\n                  refetchScheduleItemAttendance: refetchScheduleItemAttendance\n                })\n              }}>\n                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n            </Dropdown.Item>\n          </HasPermissionWrapper>,\n          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n            <Dropdown.Item\n              key={v4()}\n              icon=\"x\"\n              onClick={() => {\n                setAttendanceStatus({\n                  t: t, \n                  match: match,\n                  updateAttendance: updateAttendance,\n                  node: scheduleItemAttendanceNode,\n                  status: 'CANCELLED',\n                  setAttendanceRefetching: setAttendanceRefetching,\n                  refetchAccountAttendance: refetchAccountAttendance,\n                  refetchScheduleItemAttendance: refetchScheduleItemAttendance\n                })\n              }}>\n                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n            </Dropdown.Item>\n          </HasPermissionWrapper>,\n        ]}\n      />\n      {/* Check-in button */}\n      {(scheduleItemAttendanceNode.bookingStatus === \"BOOKED\") ?\n        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n          <Button\n            key={v4()}\n            className=\"float-right\"\n            color=\"success\"\n            size=\"sm\"\n            onClick={() => {\n              setAttendanceStatus({\n                t: t, \n                match: match,\n                updateAttendance: updateAttendance,\n                node: scheduleItemAttendanceNode,\n                status: 'ATTENDING',\n                setAttendanceRefetching: setAttendanceRefetching,\n                refetchAccountAttendance: refetchAccountAttendance,\n                refetchScheduleItemAttendance: refetchScheduleItemAttendance\n              })\n            }}>\n              {t('general.checkin')}\n          </Button>\n        </HasPermissionWrapper>  : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceItemCheckinAndStatus))\n","import React, { useContext, useState } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from \"../../../ui/BadgeBookingStatus\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassDelete from \"./AccountClassDelete\"\nimport ScheduleClassAttendanceItemCheckinAndStatus from '../../../schedule/classes/class/attendance/ScheduleClassAttendanceItemCheckinAndStatus'\n\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasses({ t, match, history, location }) {\n  const [attendanceRefetching, setAttendanceRefetching] = useState(false)\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.classes.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    variables: {'account': accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/classes_find_class`} className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Loading\n  if (loading) return (\n    <AccountClassesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountClassesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountClassesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  \n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <AccountClassesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.classes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountClassesBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountClassesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Dimmer active={attendanceRefetching} loader={true}>\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>  \n                <Table.ColHeader></Table.ColHeader>  \n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {scheduleItemAttendances.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  { console.log(node) }\n                  { console.log(account) }\n                  <Table.Col>\n                    { moment(node.date).format(dateFormat) } <br />\n                    <span className=\"text-muted\">\n                      {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    { node.scheduleItem.organizationClasstype.name }\n                  </Table.Col>\n                  <Table.Col>\n                    { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                    <span className=\"text-muted\">\n                      { node.scheduleItem.organizationLocationRoom.name }\n                    </span> \n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBookingStatus status={node.bookingStatus} />\n                  </Table.Col>\n                  <Table.Col>\n                    <ScheduleClassAttendanceItemCheckinAndStatus\n                      setAttendanceRefetching={setAttendanceRefetching}\n                      scheduleItemAttendanceNode={node}\n                      refetchAccountAttendance={true}\n                    />\n                  </Table.Col>\n                  <Table.Col>\n                    <AccountClassDelete account={account} node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </Dimmer>\n      </ContentCard>\n    </AccountClassesBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT = gql`\n  query Account($accountId: ID!){\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Alert,\n  Button,\n  Dimmer,\n  Icon, \n} from \"tabler-react\";\n\n\nconst GET_ACCOUNT_ATTENDANCES_QUERY = gql`\n  query ScheduleItemAttendance($account: ID!, $scheduleItem: ID!, $classDate: Date!, $before: String, $after: String) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, scheduleItem: $scheduleItem, date: $classDate) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n        }\n      } \n    }\n  }\n`\n\n\nfunction SearchClassesOnDateBtnAttendanceAdd({ \n  t, \n  match, \n  accountId,\n  scheduleClassId,\n  classDate,\n }) {\n  const { loading, error, data } = useQuery( GET_ACCOUNT_ATTENDANCES_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: scheduleClassId,\n      classDate: classDate\n    },\n    fetchPolicy: \"network-only\"\n  } )\n\n  if (loading) return (\n    <React.Fragment>\n        <Dimmer active={true} loader={true} />\n    </React.Fragment>\n  )\n\n  if (error) return (\n    <React.Fragment>\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (data.scheduleItemAttendances.edges.length) return (\n      <strong>{t(\"general.attending\")}</strong>\n  )\n\n  return (\n    <Link to={`/schedule/classes/class/book/${scheduleClassId}/${classDate}/${accountId}`}>\n      <Button color=\"primary\" outline size=\"sm\">\n        <Icon name=\"plus\" /> {t(\"general.add\")}\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(SearchClassesOnDateBtnAttendanceAdd))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nconst BadgePublic = ({ t, className, isPublic }) => (\n    (isPublic) ?\n        <Badge className={className} color=\"success\">{t('general.public')}</Badge> :\n        <Badge className={className} color=\"danger\">{t('general.not_public')}</Badge> \n)\n\nexport default withTranslation()(BadgePublic)","import { gql } from \"@apollo/client\"\n\nexport const GET_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $instructor: ID,\n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        instructor: $instructor,\n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n        publicOnly: false\n    ){\n      date\n      bookingOpenOn\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        holiday\n        holidayName\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        spaces\n        countAttending\n        countBooked\n        countAttendingAndBooked\n        availableSpacesOnline\n        availableSpacesTotal\n        displayPublic\n        bookingStatus\n      }\n    }\n    instructors(first: 100) {\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleItem($id: ID!, $before: String, $after: String) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      spaces\n      walkInSpaces\n      displayPublic\n      enrollmentSpaces\n      infoMailEnabled\n      infoMailContent\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleClassInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_CLASS = gql`\n  mutation CreateScheduleClass($input:CreateScheduleClassInput!) {\n    createScheduleClass(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n  }\n`","import React, { useContext, useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from \"moment\"\n\nimport {\n  Alert,\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon, \n} from \"tabler-react\";\n\nimport AppSettingsContext from '../context/AppSettingsContext'\nimport { dateToLocalISO } from \"../../tools/date_tools\"\nimport { capitalize } from '../../tools/string_tools'\nimport { \n  get_class_messages,\n  represent_class_status,\n  represent_instructor \n} from '../schedule/classes/tools'\n\nimport SearchClassesOnDateBtnAttendanceAdd from \"./SearchClassesOnDateBtnAttendanceAdd\"\nimport BadgePublic from './BadgePublic'\nimport CSDatePicker from './CSDatePicker'\nimport { GET_CLASSES_QUERY } from \"../schedule/classes/queries\"\n\n// Action buttons\n// import SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_classes_query_variables(date) {\n  let queryVars = {}\n\n  if (date) {\n    const searchDate = dateToLocalISO(date)\n\n    queryVars.dateFrom = searchDate\n    queryVars.dateUntil = searchDate\n  }\n\n  return queryVars\n}\n\n\nfunction SearchClassesOnDate({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  btnDisableClassesIds=[],\n  btnDisabledMessage=\"\",\n  classDate=\"\",\n  btnAction,\n }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const accountId = match.params.account_id\n\n  const [selectedDate, setSelectedDate] = useState(new Date())\n  // const [showSearchResults, setShowSearchResults] = useState(false)\n\n  const { loading, error, data, refetch } = useQuery( GET_CLASSES_QUERY, {\n    variables: get_classes_query_variables(selectedDate)\n  } )\n\n  function renderActionButton(scheduleClassId) {\n    switch(btnAction) {\n      case \"accountAttendanceAdd\":\n        //  Check whether a customer is already checked in and show a message instead of an add button\n        // Perhaps make a new component for the button and do an attendance query based on date, classID & account id\n        // If there's an attendance id, the customer is attending\n\n        return <SearchClassesOnDateBtnAttendanceAdd\n          accountId={accountId}\n          scheduleClassId={scheduleClassId}\n          classDate={dateToLocalISO(selectedDate)}\n        />\n\n        // return <Link to={`/schedule/classes/class/book/${scheduleClassId}/${dateToLocalISO(selectedDate)}/${accountId}`}>\n        //   <Button color=\"primary\" outline size=\"sm\">\n        //     <Icon name=\"plus\" /> {t(\"general.add\")}\n        //   </Button>\n        // </Link>\n      case \"accountEnrollmentAdd\":\n        return <Link to={`/schedule/classes/all/enrollments/${scheduleClassId}/options/${accountId}`}>\n          <Button color=\"primary\" outline size=\"sm\">\n            <Icon name=\"plus\" /> {t(\"general.enroll\")}\n          </Button>\n        </Link>\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <CSDatePicker \n      // className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n      className={\"form-control\"} \n      selected={selectedDate}\n      onChange={(date) => {\n        if (date) {\n          // setShowSearchResults(true)\n          setSelectedDate(date)\n          refetch(get_classes_query_variables(date))\n        } else {\n          // showSearchResults(false)\n        }\n      }}\n      // onBlur={() => setFieldTouched(\"dateStart\", true)}\n    />\n\n    // return <InputSearch \n    //   className=\"mb-2\"\n    //   initialValueKey={localStorateKeySearchValue}\n    //   placeholder={placeholderSearch}\n    //   onChange={(value) => {\n    //     localStorage.setItem(localStorateKeySearchValue, value)\n    //     if (value && !called) {\n    //       setShowSearchResults(true)\n    //       getAccounts({ variables: get_accounts_query_variables(value)})\n    //     } else if (value) {\n    //       // This is important, as the current relayStylePagination doesn't include args.\n    //       // Don't use getAccounts again, but refetch with different vars.\n    //       setShowSearchResults(true)\n    //       refetch(get_accounts_query_variables(value))\n    //     } else {\n    //       setShowSearchResults(false)\n    //     }\n    //   }}\n    // />\n  }\n\n  // if (!showSearchResults) {\n  //   return <Search />\n  // }\n\n  if (loading) return (\n    <React.Fragment>\n      <Search />\n      <div>\n        <Dimmer active={true} loader={true} />\n      </div>\n    </React.Fragment>\n  )\n\n  if (error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (!data.scheduleClasses.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_no_classes_found\")}</strong>\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(data) ?\n      <div className='mt-4'>\n        {data.scheduleClasses.map(({ date, classes }) => (\n          <React.Fragment key={v4()}>\n            <h3>\n              {capitalize(moment(date).format(\"dddd\"))} {' '}\n              <small className=\"text-muted\">\n                    {moment(date).format(\"LL\")} \n              </small>\n            </h3>\n            {!(classes.length) ? <Card>\n                <Card.Body>\n                  <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n                </Card.Body>\n              </Card> \n            :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <span className=\"float-right\">{renderActionButton(scheduleItemId)}</span>\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n              )\n            }\n          </React.Fragment>\n        ))}\n      </div>\n      // <ContentCard cardTitle={t('general.search_results')}\n      //             pageInfo={data.accounts.pageInfo}\n      //             hasCardBody={false}\n      //             onLoadMore={() => {\n      //               fetchMore({\n      //                 variables: {\n      //                 after: data.accounts.pageInfo.endCursor\n      //               },\n      //               updateQuery: (previousResult, { fetchMoreResult }) => {\n      //                 const newEdges = fetchMoreResult.accounts.edges\n      //                 const pageInfo = fetchMoreResult.accounts.pageInfo \n\n      //                 return newEdges.length\n      //                   ? {\n      //                       // Put the new accounts at the end of the list and update `pageInfo`\n      //                       // so we have the new `endCursor` and `hasNextPage` values\n      //                       queryAccountsData: {\n      //                         accounts: {\n      //                           __typename: previousResult.accounts.__typename,\n      //                           edges: [ ...previousResult.accounts.edges, ...newEdges ],\n      //                           pageInfo\n      //                         }\n      //                       }\n      //                     }\n      //                   : previousResult\n      //               }\n      //             })\n      //           }} >\n      //   <Table cards>\n      //     <Table.Header>\n      //       <Table.Row key={v4()}>\n      //         <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n      //         <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n      //         <Table.ColHeader></Table.ColHeader>\n      //       </Table.Row>\n      //     </Table.Header>\n      //     <Table.Body>\n      //       {data.accounts.edges.map(({ node }) => (\n      //         <Table.Row key={v4()}>\n      //           <Table.Col key={v4()}>\n      //             {node.fullName}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {node.email}\n      //           </Table.Col>\n      //           <Table.Col key={v4()}>\n      //             {(btnDisableAccountIds.includes(node.id)) ? \n      //               <span className=\"pull-right\">{btnDisabledMessage}</span> :\n      //               <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n      //             }   \n      //           </Table.Col>\n      //         </Table.Row>\n      //       ))}\n      //     </Table.Body>\n      //   </Table>\n      // </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(SearchClassesOnDate))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst AccountClassesBack = ({ t, accountId }) => (\n  <ButtonBack returnUrl={ `/relations/accounts/${accountId}/classes` } />\n)\n\nexport default withTranslation()(withRouter(AccountClassesBack))","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT } from '../../../../queries/accounts/get_account'\nimport CSLS from '../../../../tools/cs_local_storage'\n\nimport SearchClassesOnDate from '../../../ui/SearchClassesOnDate'\nimport AccountClassesBase from \"./AccountClassesBase\"\nimport AccountClassesBack from './AccountClassesBack'\n\nfunction AccountClassesFindClass({ t, match, location }) {\n  const accountId = match.params.account_id\n  const pageHeaderButtonList = <AccountClassesBack accountId={accountId} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: { accountId: accountId }})\n\n  // Return here after registering attendance using the schedule class attendance components\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_BOOK_RETURN, location.pathname)\n\n  if (loading) { \n    return (\n      <AccountClassesBase pageHeaderButtonList={pageHeaderButtonList} >\n        <Dimmer active={true} loader={true} />\n      </AccountClassesBase>\n    )\n  }\n\n  if (error) { \n    return (\n      <AccountClassesBase pageHeaderButtonList={pageHeaderButtonList} >\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountClassesBase>\n    )\n  }\n\n  const account = data.account\n\n  return (\n    <AccountClassesBase account={account} pageHeaderButtonList={pageHeaderButtonList} >\n      <h5>{t('relations.account.classes.title_add_search_class')}</h5>\n      <SearchClassesOnDate btnAction=\"accountAttendanceAdd\" />\n    </AccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassesFindClass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountEnrollmentsBase({ t, match, history, children, account={}, pageHeaderButtonList }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className=\"page-options d-flex\">\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='enrollments' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountEnrollmentsBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($after: String, $before: String, $scheduleItem: ID!, $dateEnd_Isnull:Boolean) {\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n      enrollmentSpaces\n      enrollments(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, dateEnd_Isnull: $dateEnd_Isnull, orderBy: \"fullName\") {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            id \n            dateStart\n            dateEnd\n            scheduleItem {\n              id\n            }\n            accountSubscription {\n              id\n              dateStart\n              dateEnd\n              organizationSubscription {\n                id\n                name\n              }\n              account {\n                id\n                fullName\n              }            \n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_QUERY = gql`\n  query ScheduleItemEnrollment($id: ID!) {\n    scheduleItemEnrollment(id: $id) {\n      id\n      dateStart\n      dateEnd\n      accountSubscription {\n        id\n        organizationSubscription {\n          id\n          name\n        }\n        account {\n          id\n          firstName\n          lastName\n          fullName\n          email\n          phone\n          mobile\n          isActive\n          urlImageThumbnailSmall\n        }\n      }\n      scheduleItem {\n        id\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n        displayPublic\n      }  \n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY = gql`\n  query ScheduleItemEnrollmentOptions($account: ID!, $scheduleItem: ID!) {\n    scheduleClassEnrollmentOptions(account: $account, scheduleItem: $scheduleItem) {\n      subscriptions {\n        allowed\n        blocked\n        paused\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            name\n          }\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation CreateScheduleItemEnrollment($input: CreateScheduleItemEnrollmentInput!) {\n    createScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation UpdateScheduleItemEnrollment($input: UpdateScheduleItemEnrollmentInput!) {\n    updateScheduleItemEnrollment(input:$input) {\n      scheduleItemEnrollment {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_ENROLLMENT = gql`\n  mutation DeleteScheduleItemEnrollment($input: DeleteScheduleItemEnrollmentInput!) {\n    deleteScheduleItemEnrollment(input: $input) {\n      ok\n    }\n  }\n`\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ENROLLMENTS_QUERY = gql`\n  query ScheduleItemEnrollments($account: ID!, $before: String, $after: String) {\n    scheduleItemEnrollments(first: 20, before: $before, after: $after, accountSubscription_Account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          dateStart\n          dateEnd\n          accountSubscription {\n            id\n            dateStart\n            organizationSubscription {\n              id\n              name\n            }\n            account {\n              id\n              fullName\n            }\n          }\n          scheduleItem {\n            id\n            dateStart\n            timeStart\n            timeEnd\n            frequencyInterval\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","export function getAccountsQueryVariables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\nexport function getEnrollmentsListQueryVariables(scheduleItemId, showEnded=false) {\n  let queryVars = {\n    scheduleItem: scheduleItemId,\n    dateEnd_Isnull: true\n  }\n\n  if (showEnded) {\n    queryVars.dateEnd_Isnull = false\n  } \n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_ENROLLMENT, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"../../../../relations/accounts/enrollments/queries\"\nimport ButtonDelete from '../../../../ui/ButtonDelete'\nimport { getEnrollmentsListQueryVariables } from './tools'\n\nfunction ScheduleClassEnrollmentDelete({t, match, node}) {\n  const scheduleItemId = node.scheduleItem.id\n  const [deleteScheduleItemEnrollment] = useMutation(DELETE_SCHEDULE_ITEM_ENROLLMENT)\n\n    return (\n      <ButtonDelete\n        className=\"float-right\"\n        msgConfirm={t(\"schedule.classes.class.enrollments.delete_confirm_msg\")}\n        msgDescription={<p>{node.accountSubscription.account.fullName}</p>}\n        msgSuccess={t('schedule.classes.class.enrollments.delete_success')}\n        deleteFunction={deleteScheduleItemEnrollment}\n        deleteFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                variables: getEnrollmentsListQueryVariables(scheduleItemId) },\n              { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                variables: { account: node.accountSubscription.account.id }}  \n            ]\n          }}\n      />\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport { getWeekdayNames } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../ui/ButtonEdit'\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport ScheduleClassEnrollmentDelete from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentDelete'\n// import AccountClassDelete from \"./AccountClassDelete\"\n\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction AccountEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.enrollments.title')\n\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/enrollment_find_class`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ENROLLMENTS_QUERY, {\n    variables: {'account': accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Return here after adding an enrollment\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return (\n    <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n  const scheduleItemEnrollments = data.scheduleItemEnrollments\n  \n  // Empty list\n  if (!scheduleItemEnrollments.edges.length) {\n    return (\n      <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.enrollments.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={scheduleItemEnrollments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemEnrollments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemEnrollments.edges\n              const pageInfo = fetchMoreResult.scheduleItemEnrollments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemEnrollments: {\n                      __typename: previousResult.scheduleItemEnrollments.__typename,\n                      edges: [ ...previousResult.scheduleItemEnrollments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('relations.account.enrollments.dateStart')}</Table.ColHeader>\n              <Table.ColHeader>{t('relations.account.enrollments.dateEnd')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {scheduleItemEnrollments.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { (node.dateEnd) && moment(node.dateEnd).format(dateFormat) }\n                </Table.Col>\n                <Table.Col>\n                  { node.scheduleItem.organizationClasstype.name } <br />\n                  <span className=\"text-muted\">\n                    <Icon name=\"clock\" /> { \" \" }\n                      { weekdayNames[node.scheduleItem.frequencyInterval - 1] } { \" \" }\n                      { moment(`${node.scheduleItem.dateStart} ${node.scheduleItem.timeStart}`).format(timeFormat) } <br />\n                    <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col>\n                <Table.Col>\n                  { node.accountSubscription.organizationSubscription.name } ({ moment(node.accountSubscription.dateStart).format(dateFormat) })\n                </Table.Col>\n                <Table.Col>\n                  <ScheduleClassEnrollmentDelete node={node} />\n                  <ButtonEdit className='float-right' editUrl={`/relations/accounts/${accountId}/enrollments/edit/${node.id}`} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountEnrollmentsBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountEnrollments))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_ENROLLMENT_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\n\nconst ScheduleClassEnrollmentForm = ({ t, history, match, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                placeholderText={t('schedule.classes.enrollments.placeholder_date_end')}\n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <ButtonFormCancel returnUrl={returnUrl} />\n          {(isSubmitting) ? \n            <Alert type=\"primary\" hasExtraSpace>\n              <strong>{t('general.please_wait')}</strong> {t('schedule.classes.enrollments.toast_creating_might_take_a_while')}\n            </Alert> : \n          \"\"\n          }\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst AccountEnrollmentBack = ({ t, accountId }) => (\n  <ButtonBack returnUrl={ `/relations/accounts/${accountId}/enrollments` } />\n)\n\nexport default withTranslation()(withRouter(AccountEnrollmentBack))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport { Card, Icon } from 'tabler-react';\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_ENROLLMENTS_QUERY } from \"./queries\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from '../../../schedule/classes/all/enrollments/queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from '../../../schedule/classes/all/enrollments/yupSchema'\nimport ScheduleClassEnrollmentForm from '../../../schedule/classes/all/enrollments/ScheduleClassEnrollmentForm'\nimport { dateToLocalISO, getWeekdayNames } from '../../../../tools/date_tools'\n\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from \"./AccountEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"../../../schedule/classes/all/enrollments/tools\"\n\n\nfunction AccountEnrollmentEdit({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const weekdayNames = getWeekdayNames(t)\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/enrollments`\n  let cardTitle = t('relations.account.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n  if (error) return (\n    <AccountEnrollmentsBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </AccountEnrollmentsBase>\n  )\n\n//   { node.scheduleItem.organizationClasstype.name } <br />\n//   <span className=\"text-muted\">\n//     <Icon name=\"clock\" /> { weekdayNames[node.scheduleItem.frequencyInterval] } { moment(node.timeStart).format(timeFormat) } <br />\n//     <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n\n  console.log('query data')\n  console.log(data)\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  const account = data.scheduleItemEnrollment.accountSubscription.account\n  const scheduleItem = data.scheduleItemEnrollment.scheduleItem\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  console.log(scheduleItem)\n\n  return (\n    <AccountEnrollmentsBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n      account={account}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n        <Card.Alert color=\"primary\">\n          <b>{scheduleItem.organizationClasstype.name}</b><br />\n          <Icon name=\"clock\" /> {\" \"} \n              { weekdayNames[scheduleItem.frequencyInterval - 1 ] } {\" \"}\n              { moment(`${scheduleItem.dateStart} ${scheduleItem.timeStart}`).format(timeFormat) } <br />\n            <Icon name=\"home\" /> {\" \"}\n            { scheduleItem.organizationLocationRoom.organizationLocation.name } {\" - \" } \n            { scheduleItem.organizationLocationRoom.name }\n        </Card.Alert>\n        </Card.Body>\n          <Formik\n            initialValues={{  \n              dateStart: dateStart,\n              dateEnd: dateEnd,\n            }}\n            validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n\n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateScheduleClassEnrollment({ variables: {\n                  input: {\n                    id: match.params.id,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd\n                  }\n                }, refetchQueries: [\n                    { query: GET_ACCOUNT_ENROLLMENTS_QUERY, \n                      variables: { account: accountId }},\n                    // Also update enrollment list under schedule\n                    {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, \n                      variables: getEnrollmentsListQueryVariables(scheduleItem.id)},\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data);\n                    history.push(returnUrl)\n                    toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ScheduleClassEnrollmentForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </ScheduleClassEnrollmentForm>\n            )}\n          </Formik>\n      </Card>\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentEdit))","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer } from 'tabler-react';\n\nimport { GET_ACCOUNT } from '../../../../queries/accounts/get_account'\n\nimport SearchClassesOnDate from '../../../ui/SearchClassesOnDate'\nimport AccountEnrollmentsBase from \"./AccountEnrollmentsBase\"\nimport AccountEnrollmentBack from './AccountEnrollmentBack'\n\nfunction AccountEnrollmentFindClass({ t, match, location }) {\n  const accountId = match.params.account_id\n  const pageHeaderButtonList = <AccountEnrollmentBack accountId={accountId} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: { accountId: accountId }})\n\n  if (loading) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <Dimmer active={true} loader={true} />\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  if (error) { \n    return (\n      <AccountEnrollmentsBase pageHeaderButtonList={pageHeaderButtonList} >\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountEnrollmentsBase>\n    )\n  }\n\n  const account = data.account\n\n  return (\n    <AccountEnrollmentsBase account={account} pageHeaderButtonList={pageHeaderButtonList} >\n      <h5>{t('relations.account.enrollments.title_add_search_class')}</h5>\n      <SearchClassesOnDate btnAction=\"accountEnrollmentAdd\" />\n    </AccountEnrollmentsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountEnrollmentFindClass))\n","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_ACCOUNT_PASSWORD = gql`\n  mutation UpdateAccountPassword($input:UpdateAccountPasswordInput!) {\n    updateAccountPassword(input: $input) {\n      ok\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountMollieCustomerForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.mollie_customer_id')}>\n              <Field type=\"mollieCustomerId\" \n                      name=\"mollieCustomerId\" \n                      className={(errors.mollieCustomerId) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"mollieCustomerId\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>  \n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountMollieCustomerForm))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsAccountPasswordForm = ({ t, history, isSubmitting, errors, values, inputData, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.accounts.set_password')}>\n              <Field type=\"password\" \n                      name=\"passwordNew\" \n                      className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          // className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>  \n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountPasswordForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_QUERY, UPDATE_ACCOUNT } from '../queries'\nimport { UPDATE_ACCOUNT_PASSWORD } from './queries'\n// import { ACCOUNT_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\"\n\nimport RelationsAccountMollieCustomerForm from \"./RelationsAccountMollieCustomerForm\"\nimport RelationsAccountPasswordForm from \"./RelationsAccountPasswordForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountTools({t, match}) {\n  const accountId = match.params.account_id\n  const cardTitle = t(\"relations.account.tools.title\")\n  const activeLink = \"tools\"\n\n  const {loading, error, data} = useQuery(GET_ACCOUNT_QUERY, {\n    variables: {id: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccount] = useMutation(UPDATE_ACCOUNT)\n  const [updateAccountPassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <Dimmer loader={true} active={true} />\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  console.log(account)\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n    >\n      <Card title={t(\"relations.accounts.set_password\")}> \n        {/* Update password */}\n        <Formik\n          initialValues={{}}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: accountId,\n                passwordNew: values.passwordNew\n              }\n\n              updateAccountPassword({ variables: {\n                input: input_vars\n              }})\n              .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.accounts.toast_edit_password_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              }\n            )\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountPasswordForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              inputData={data}\n            />\n          )}\n        </Formik>\n      </Card>\n      <Card title={t(\"relations.accounts.set_mollie_customer_id\")}>\n        {/* Update mollie customer id */}\n        <Formik\n            initialValues={{ mollieCustomerId: data.account.mollieCustomerId }}\n            // validationSchema={ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: accountId,\n                  mollieCustomerId: values.mollieCustomerId\n                }\n\n                updateAccount({ variables: {\n                  input: input_vars\n                }})\n                .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.accounts.toast_edit_mollie_customer_id_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                }\n              )\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <RelationsAccountMollieCustomerForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                inputData={data}\n              />\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsAccountTools))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_CLASSPASSES_QUERY = gql`\n  query AccountClasspasses($after: String, $before: String, $accountId: ID!) {\n    accountClasspasses(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspass {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_CLASSPASS_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n    }\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ClasspassInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_CLASSPASS = gql`\n  mutation CreateAccountClasspass($input: CreateAccountClasspassInput!) {\n    createAccountClasspass(input: $input) {\n      accountClasspass {\n        id\n        account {\n          id\n          firstName\n          lastName\n          email\n        }\n        organizationClasspass {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        note\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_CLASSPASS = gql`\nmutation UpdateAccountClasspass($input: UpdateAccountClasspassInput!) {\n  updateAccountClasspass(input: $input) {\n    accountClasspass {\n      id\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n    }\n  }\n}\n`\n\nexport const DELETE_ACCOUNT_CLASSPASS = gql`\n  mutation DeleteAccountClasspass($input: DeleteAccountClasspassInput!) {\n    deleteAccountClasspass(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, DELETE_ACCOUNT_CLASSPASS } from \"./queries\"\n\n\nfunction AccountClasspasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountclasspass\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/classpasses/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASSES_QUERY, {\n    variables: { accountId: accountId },\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountClasspass] = useMutation(DELETE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspasses = data.accountClasspasses\n\n    // Empty list\n    if (!accountClasspasses.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.classpasses.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.classpasses.title')}\n        pageInfo={accountClasspasses.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountClasspasses.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountClasspasses.edges\n              const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountClasspasses.__typename,\n                      edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountClasspasses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationClasspass.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <Link to={`/relations/accounts/${accountId}/classpasses/classes/${node.id}`}>\n                      {node.classesRemainingDisplay}\n                    </Link>\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.classpasses.deleted'),\n                          deleteFunction: deleteAccountClasspass,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspasses))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASSPASS_SCHEMA = Yup.object().shape({\n  organizationClasspass: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  note: Yup.string(),\n})\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountClasspassForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.classpass')}>\n            <Field component=\"select\" \n                  name=\"organizationClasspass\" \n                  className={(errors.organizationClasspass) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationClasspasses.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationClasspass\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.date_start')}>\n            <CSDatePicker \n              className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n              selected={values.dateStart}\n              onChange={(date) => {\n                setFieldValue(\"dateStart\", date)\n                setFieldTouched(\"dateEnd\", true)\n              }}\n              onBlur={() => setFieldTouched(\"dateStart\", true)}\n            />\n            <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        {(!create) ? \n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                placeholderText={t('schedule.classes.placeholder_enddate')}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        : \"\" }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n          tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n          textareaName=\"note\"\n          initialValue={values.note}\n          init={tinymceBasicConf}\n          onBlur={(e) => {\n            setFieldValue(\"note\", e.target.getContent())\n            setFieldTouched(\"note\", true, true)\n          }}\n        />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Button\n          type=\"button\" \n          color=\"link\" \n          onClick={() => history.push(returnUrl)}\n        >\n          {t('general.cancel')}\n        </Button>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountClasspassForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\n\nfunction AccountClasspassAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountClasspass] = useMutation(CREATE_ACCOUNT_CLASSPASS)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountClasspassAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_CLASSPASSES_QUERY, GET_ACCOUNT_CLASSPASS_QUERY, UPDATE_ACCOUNT_CLASSPASS } from './queries'\nimport { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\n\nfunction AccountClasspassEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/classpasses`\n  \n  const {loading, error, data} = useQuery(GET_ACCOUNT_CLASSPASS_QUERY, {\n    variables: { id: id, accountId: accountId }\n  })\n  const [updateClasspass] = useMutation(UPDATE_ACCOUNT_CLASSPASS)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountClasspass\n\n    // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: initialdata.organizationClasspass.id,\n              dateStart: dateStart,\n              dateEnd: dateEnd,\n              note: initialdata.note,\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                updateClasspass({ variables: {\n                  input: {\n                    id: id,\n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId }}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    toast.success((t('relations.account.classpasses.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountClasspassEdit))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSPASS_CLASSES_QUERY = gql`\n  query AccountClasspass($id: ID!, $accountId: ID!, $before: String, $after: String) {\n    accountClasspass(id:$id) {\n      id\n      organizationClasspass {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      createdAt\n      classes(first:100, before:$before, after:$after) {\n        pageInfo {\n          startCursor\n          endCursor\n          hasNextPage\n          hasPreviousPage\n        }\n        edges {\n          node {\n            date\n            bookingStatus\n            scheduleItem {\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id\n                  name\n                }\n              }\n              organizationClasstype {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport {\n  Card,\n  Table\n} from \"tabler-react\";\n\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport { GET_ACCOUNT_CLASSPASS_CLASSES_QUERY } from \"./queries\"\n\n\nfunction AccountClasspassClasses({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.classpasses.title_classes')\n  const back = <div className=\"page-options d-flex\">\n    <ButtonBack returnUrl={`/relations/accounts/${accountId}/classpasses`} />\n  </div>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_CLASSPASS_CLASSES_QUERY, {\n    variables: { \n      accountId: accountId,\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountClasspass = data.accountClasspass\n  const classes = accountClasspass.classes\n  console.log(classes)\n\n  const cardTitleWithCardInfo = `${cardTitle} ${accountClasspass.organizationClasspass.name} (${moment(accountClasspass.dateStart).format(dateFormat)})`\n\n  if (!classes.edges.length) return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      {console.log(error)}\n      <Card title={cardTitleWithCardInfo}>\n        <Card.Body>\n          {t(\"relations.account.classpasses.no_classes_taken_yet\")}\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n\n\n  return (\n    <RelationsAccountProfileBase user={account} activeLink={activeLink} back={back}>\n      <ContentCard \n        cardTitle={cardTitleWithCardInfo}\n        pageInfo={classes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: classes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.classes.edges\n              const pageInfo = fetchMoreResult.classes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    classes: {\n                      __typename: previousResult.classes.__typename,\n                      edges: [ ...previousResult.classes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {classes.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {moment(new Date(node.date + \" \" + node.scheduleItem.timeStart)).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.scheduleItem.organizationClasstype.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <BadgeBookingStatus status={node.bookingStatus} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountClasspassClasses))","import { gql } from \"@apollo/client\"\n\nexport const GET_DOCUMENTS_QUERY = gql`\n  query AccountDocuments($account: ID!) {\n    accountDocuments(account:$account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          description\n          urlProtectedDocument\n          createdAt\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_DOCUMENT_QUERY = gql`\n  query AccountDocument($id: ID!, $account: ID!) {\n    accountDocument(id:$id) {\n      id\n      description\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const ADD_DOCUMENT = gql`\n  mutation CreateAccountDocument($input:CreateAccountDocumentInput!) {\n    createAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_DOCUMENT = gql`\n  mutation UpdateAccountDocument($input:UpdateAccountDocumentInput!) {\n    updateAccountDocument(input: $input) {\n      accountDocument{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_DOCUMENT = gql`\n  mutation DeleteAccountDocument($input:DeleteAccountDocumentInput!) {\n    deleteAccountDocument(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_DOCUMENTS_QUERY, DELETE_DOCUMENT } from \"./queries\"\nimport FileProtectedDownloadTableButton from \"../../../ui/FileProtectedDownloadTableButton\"\n\n\nfunction AccountDocuments({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountdocument\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/documents/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const {loading, error, data, fetchMore} = useQuery(GET_DOCUMENTS_QUERY, {\n    variables: { account: accountId },\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountDocument] = useMutation(DELETE_DOCUMENT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountDocuments = data.accountDocuments\n  console.log(accountDocuments)\n\n  // Empty list\n  if (!accountDocuments.edges.length) {\n    return (\n      <RelationsAccountProfileBase activeLink={activeLink} user={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.documents.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.documents.title')}\n        pageInfo={accountDocuments.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountDocuments.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountDocuments.edges\n              const pageInfo = fetchMoreResult.accountDocuments.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountDocuments at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountDocuments: {\n                      __typename: previousResult.accountDocuments.__typename,\n                      edges: [ ...previousResult.accountDocuments.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.document')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.download')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountDocuments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.description}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    <FileProtectedDownloadTableButton protectedMediaUrl={node.urlProtectedDocument} />\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + accountId + \"/documents/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.documents.delete_confirm_msg\"),\n                          msgDescription: <p>{node.description}</p>,\n                          msgSuccess: t('relations.account.documents.deleted'),\n                          deleteFunction: deleteAccountDocument,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountDocuments))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n  \n\nfunction AccountDocumentForm({ t, history, errors, values, isSubmitting, returnUrl, inputFileName, fileInputLabel, handleFileInputChange=f=>f, }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Button\n            type=\"button\" \n            color=\"link\" \n            onClick={() => history.push(returnUrl)}\n          >\n            {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentForm))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, ADD_DOCUMENT } from './queries'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\nimport AccountDocumentForm from './AccountDocumentForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"classpasses\"\n  const cardTitle = t('relations.account.documents.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n  const [addAccountDocument] = useMutation(ADD_DOCUMENT)\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: \"\"\n          }}\n          // validationSchema={CLASSPASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log(\"Submit values\")\n            console.log(values)\n            console.log(fileName)\n  \n            let inputVars = {\n              account: accountId,\n              description: values.description,\n              documentFileName: fileName,\n            }\n  \n            let reader = new FileReader()\n            reader.onload = function(reader_event) {\n              console.log(reader_event.target.result)\n              let b64_enc_file = reader_event.target.result\n              console.log(b64_enc_file)\n              // Add uploaded document b64 encoded blob to input vars\n              inputVars.document = b64_enc_file\n  \n              addAccountDocument({ variables: {\n                input: inputVars\n              }, refetchQueries: [\n                  {query: GET_DOCUMENTS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                    setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n            }\n            \n            let file = inputFileName.current.files[0]\n            if (file && file.size < 5242880) {\n              reader.readAsDataURL(file)\n            } else if (file && file.size > 5242880) { \n              toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            } else {\n              toast.error(t(\"general.please_select_a_file\"), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountDocumentForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              inputFileName={inputFileName}\n              fileInputLabel={fileInputLabel}\n              handleFileInputChange={handleFileInputChange}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentForm>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountDocumentAdd))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DOCUMENT_SCHEMA = Yup.object().shape({\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n  \n\nfunction AccountDocumentFormEdit({ t, history, errors, values, isSubmitting, returnUrl }) {\n  return (\n    <FoForm>\n      <Card.Body> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row> \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\"\n            >\n              {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentFormEdit))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_DOCUMENTS_QUERY, GET_DOCUMENT_QUERY, UPDATE_DOCUMENT } from './queries'\nimport { DOCUMENT_SCHEMA } from './yupSchema'\nimport AccountDocumentFormEdit from './AccountDocumentFormEdit'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n} from \"tabler-react\";\n\n\nfunction AccountDocumentEdit({t, history, match}) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const activeLink = \"documents\"\n  const cardTitle = t('relations.account.documents.title_edit')\n  const returnUrl = `/relations/accounts/${accountId}/documents`\n  \n  const {loading, error, data} = useQuery(GET_DOCUMENT_QUERY, {\n    variables: { id: id, account: accountId }\n  })\n  const [updateDocument] = useMutation(UPDATE_DOCUMENT)\n\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n  const initialdata = data.accountDocument\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            description: initialdata.description,\n          }}\n          validationSchema={DOCUMENT_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateDocument({ variables: {\n                input: {\n                  id: id,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                {query: GET_DOCUMENTS_QUERY, variables: { account: accountId }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.documents.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <AccountDocumentFormEdit\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountDocumentFormEdit>\n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountDocumentEdit))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\n\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountFinancePaymentBatchcAtegoryItemsBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <HasPermissionWrapper permission=\"view\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonBack returnUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/`} />\n                </HasPermissionWrapper>\n                : \n                <RelationsAccountsBack />\n              }\n              {!(showEditBack) ?\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"accountfinancepaymentbatchcategoryitem\">\n                  <ButtonAdd \n                    addUrl={`/relations/accounts/${accountId}/finance_payment_batch_category_items/add`}\n                    className=\"ml-2\"\n                  />\n                </HasPermissionWrapper>\n                : \"\" \n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='finance_payment_batch_category_item'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchcAtegoryItemsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItems($after: String, $before: String, $account: ID!) {\n    accountFinancePaymentBatchCategoryItems(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          financePaymentBatchCategory {\n            id\n            name\n          }\n          year\n          month\n          amountDisplay\n          description\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY = gql`\n  query AccountFinancePaymentBatchCategoryItem($id: ID!) {\n    accountFinancePaymentBatchCategoryItem(id: $id) {\n      id\n      financePaymentBatchCategory {\n        id\n        name\n      }\n      year\n      month\n      amount\n      description\n    }\n    financePaymentBatchCategories(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query AccountPaymentBatchCategoryItemInputValues($after: String, $before: String) {\n    financePaymentBatchCategories(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          batchCategoryType\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation CreateAccountFinancePaymentBatchCategoryItem($input: CreateAccountFinancePaymentBatchCategoryItemInput!) {\n    createAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation UpdateAccountFinancePaymentBatchCategoryItem($input: UpdateAccountFinancePaymentBatchCategoryItemInput!) {\n    updateAccountFinancePaymentBatchCategoryItem(input: $input) {\n      accountFinancePaymentBatchCategoryItem {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM = gql`\n  mutation DeleteAccountFinancePaymentBatchCategoryItem($input: DeleteAccountFinancePaymentBatchCategoryItemInput!) {\n    deleteAccountFinancePaymentBatchCategoryItem(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY,\n  DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from \"./queries\"\n\n\nfunction AccountFinancePaymentBatchCategoryItems({ t, history, match }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title')\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, {\n    variables: { account: accountId },\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountFinancePaymentBatchCategoryItem] = useMutation(DELETE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM)\n\n  if (loading) return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <Card title={cardTitle}>\n        <Card.Body><p>{t('general.loading_with_dots')}</p></Card.Body>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body><p>{t('general.error_sad_smiley')}</p></Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  let batchCategoryItems = data.accountFinancePaymentBatchCategoryItems\n    \n  // Empty list\n  if (!batchCategoryItems.edges.length) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.finance_payment_batch_category_items.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={batchCategoryItems.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: batchCategoryItems.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountFinancePaymentBatchCategoryItems.edges\n              const pageInfo = fetchMoreResult.accountFinancePaymentBatchCategoryItems.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    batchCategoryItems: {\n                      __typename: previousResult.accountFinancePaymentBatchCategoryItems.__typename,\n                      edges: [ ...previousResult.accountFinancePaymentBatchCategoryItems.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.year')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.month')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.category')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {batchCategoryItems.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.year}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.month}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.amountDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    { node.financePaymentBatchCategory && node.financePaymentBatchCategory.name }\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.description.replace(/(.{28})..+/, \"$1...\")}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/relations/accounts/${match.params.account_id}/finance_payment_batch_category_items/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button \n                      className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.finance_payment_batch_category_items.delete_confirm_msg\"),\n                          msgDescription: <p><br />{node.financePaymentBatchCategory.name} {node.amountDisplay} <br/>{node.description}</p>,\n                          msgSuccess: t('relations.account.finance_payment_batch_category_items.deleted'),\n                          deleteFunction: deleteAccountFinancePaymentBatchCategoryItem,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: { \n                              account: accountId\n                            }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA = Yup.object().shape({\n  financePaymentBatchCategory: Yup.string()\n    .required(t('yup.field_required')),\n  year: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  month: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required(t('yup.field_required')),\n  description: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountFinancePaymentBatchCategoryItemsForm = ({ t, history, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.year')} >\n            <Field type=\"text\" \n                  name=\"year\" \n                  className={(errors.year) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.month')} >\n            <Field type=\"text\" \n                  name=\"month\" \n                  className={(errors.month) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"month\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.amount')} >\n            <Field type=\"text\" \n                  name=\"amount\" \n                  className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.category')}>\n            <Field component=\"select\" \n                  name=\"financePaymentBatchCategory\" \n                  className={(errors.financePaymentBatchCategory) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.financePaymentBatchCategories.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentBatchCategory\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')} >\n            <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM,\n  GET_INPUT_VALUES_QUERY \n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addAccountFinancePaymentBatchCategoryItem] = useMutation(\n    CREATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={t('relations.account.finance_payment_batch_category_items.title_add')}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: \"\",\n            year: new Date().getFullYear(),\n            month: new Date().getMonth() + 1,\n            amount: \"\",\n            description: \"\"\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  account: accountId, \n                  amount: values.amount,\n                  year: parseInt(values.year),\n                  month: parseInt(values.month),\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, \n  GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, \n  UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n} from './queries'\nimport { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountFinancePaymentBatchCategoryItemsForm from './AccountFinancePaymentBatchCategoryItemsForm'\nimport AccountFinancePaymentBatchCategoryItemsBase from \"./AccountFinancePaymentBatchCategoryItemsBase\"\n\n\nfunction AccountFinancePaymentBatchCategoryItemEdit({ t, history, match }) {\n  const accountId = match.params.account_id\n  const accountFinancePaymentBatchCategoryItemId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/finance_payment_batch_category_items`\n  const cardTitle = t('relations.account.finance_payment_batch_category_items.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_QUERY, { variables: {\n    id: accountFinancePaymentBatchCategoryItemId\n  }})\n  const [updateAccountFinancePaymentBatchCategoryItem] = useMutation(\n    UPDATE_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM\n  )\n\n  if (loading) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"general.loading_with_dots\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"relations.account.finance_payment_batch_category_items.error_loading\")}\n          </Card.Body>\n        </Card>\n      </AccountFinancePaymentBatchCategoryItemsBase>\n    )\n  }\n\n  const inputData = data\n  const initialValues = data.accountFinancePaymentBatchCategoryItem\n\n  return (\n    <AccountFinancePaymentBatchCategoryItemsBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            financePaymentBatchCategory: initialValues.financePaymentBatchCategory.id,\n            year: initialValues.year,\n            month: initialValues.month,\n            amount: initialValues.amount,\n            description: initialValues.description\n          }}\n          validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateAccountFinancePaymentBatchCategoryItem({ variables: {\n                input: {\n                  id: accountFinancePaymentBatchCategoryItemId, \n                  amount: values.amount,\n                  year: parseInt(values.year),\n                  month: parseInt(values.month),\n                  financePaymentBatchCategory: values.financePaymentBatchCategory,\n                  description: values.description\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEMS_QUERY, variables: {account: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.finance_payment_batch_category_items.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <AccountFinancePaymentBatchCategoryItemsForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountFinancePaymentBatchCategoryItemsForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountFinancePaymentBatchCategoryItemsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountFinancePaymentBatchCategoryItemEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $accountId: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountInvoicesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n\n              <ProfileMenu \n                activeLink='invoices' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoicesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_INVOICES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport AccountInvoicesBase from './AccountInvoicesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountInvoices({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.invoices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/invoices/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_INVOICES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountInvoicesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountInvoicesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  let financeInvoices = data.financeInvoices\n  const account = data.account\n\n  // Empty list\n  if (!financeInvoices.edges.length) {\n    return (\n      <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountInvoicesBase>\n    )\n  }\n  \n  return (\n    <AccountInvoicesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeInvoices.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeInvoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeInvoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList invoices={financeInvoices} />\n      </ContentCard>\n    </AccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoices))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.invoice_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.invoice_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_INVOICE } from './queries'\nimport AccountInvoiceAddForm from './AccountInvoiceAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountInvoiceAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.account.invoices.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.invoiceToBusiness ? account.invoiceToBusiness.id : null\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {/* { account.invoiceToBusiness && \n          <Card.Alert color=\"primary\">\n           <b><Icon name=\"home\" /> {account.invoiceToBusiness.name}</b> {' '}\n           {t(\"relations.account.invoices.is_the_default_billing_address_for_this_account\")}\n          </Card.Alert>\n        } */}\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                account: account_id, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.invoices.toast_title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountInvoiceAdd))\n","import React, { Component } from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n    Button,\n    Card,\n    Grid,\n  } from \"tabler-react\"\n\n\nclass LoadMoreOnBottomScroll extends Component {\n    componentDidMount() {\n      window.addEventListener(\"scroll\", this.handleOnScroll);\n    }\n  \n    componentWillUnmount() {\n      window.removeEventListener(\"scroll\", this.handleOnScroll);\n    }\n\n    handleOnScroll = () => {\n      // http://stackoverflow.com/questions/9439725/javascript-how-to-detect-if-browser-window-is-scrolled-to-bottom\n      var scrollTop =\n        (document.documentElement && document.documentElement.scrollTop) ||\n        document.body.scrollTop;\n      var scrollHeight =\n        (document.documentElement && document.documentElement.scrollHeight) ||\n        document.body.scrollHeight;\n      var clientHeight =\n        document.documentElement.clientHeight || window.innerHeight;\n      var scrolledToBottom = Math.ceil(scrollTop + clientHeight) >= scrollHeight;\n      if (scrolledToBottom) {\n        const pageInfo = this.props.pageInfo\n        if (pageInfo) {\n          if (pageInfo.hasNextPage) {\n            this.props.onLoadMore()\n          }\n        }\n      }\n    }\n\n    render() {\n      const t = this.props.t\n      const onLoadMore = this.props.onLoadMore \n      const pageInfo = this.props.pageInfo\n      const children = this.props.children\n\n\n      return(\n        <div>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              { (!pageInfo) ? '':\n                (pageInfo.hasNextPage) ? \n                  <Card>\n                    <Card.Body>\n                      <Button \n                        color=\"secondary\"\n                        outline\n                        onClick={onLoadMore} \n                      >\n                        {t('general.load_more')}\n                      </Button>\n                    </Card.Body>\n                  </Card>\n                : <span className=\"text-muted\">{t(\"general.loaded_all\")}</span>\n              }\n            </Grid.Col>\n          </Grid.Row>\n        </div>\n      )\n    }\n}\n\nLoadMoreOnBottomScroll.defaultProps = {\n  onLoadMore: f=>f\n}\n  \nexport default withTranslation()(LoadMoreOnBottomScroll)\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport ButtonAdd from '../../../ui/ButtonAdd'\nimport ButtonBack from '../../../ui/ButtonBack'\nimport { GET_ACCOUNT_QUERY } from '../queries'\n\n\nfunction AccountNotesBase({ t, history, match, children, showEditBack=false }) {\n  const accountId = match.params.account_id\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_QUERY, {\n    variables: { id: accountId }\n  })\n\n  if (loading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (error) {\n    console.log(error)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  const account = data.account\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName}>\n            <div className='page-options d-flex'>\n              {(showEditBack) ?\n                <ButtonBack returnUrl={`/relations/accounts/${accountId}/notes/`} />\n              :\n                <React.Fragment>\n                  <RelationsAccountsBack />\n                  <ButtonAdd addUrl={`/relations/accounts/${accountId}/notes/add`} className='ml-2' />\n                </React.Fragment>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='notes'\n                accountId={accountId}\n              /> \n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}    \n        \nexport default withTranslation()(withRouter(AccountNotesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_NOTES_QUERY = gql`\n  query AccountNotes($after: String, $before: String, $account: ID!, $noteType: CostasiellaAccountNoteNoteTypeChoices!) {\n    accountNotes(first: 15, before: $before, after: $after, account: $account, noteType: $noteType ) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          note\n          injury\n          noteType\n          noteBy {\n            id\n            fullName\n          }\n          createdAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_ACCOUNT_NOTE_QUERY = gql`\n  query AccountNote($id: ID!) {\n    accountNote(id: $id) {\n      id\n      note\n      injury\n    }\n  }\n`\n\n\nexport const CREATE_ACCOUNT_NOTE = gql`\n  mutation CreateAccountNote($input: CreateAccountNoteInput!) {\n    createAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_NOTE = gql`\n  mutation UpdateAccountNote($input: UpdateAccountNoteInput!) {\n    updateAccountNote(input: $input) {\n      accountNote {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_NOTE = gql`\n  mutation DeleteAccountNote($input: DeleteAccountNoteInput!) {\n    deleteAccountNote(input: $input) {\n      ok\n    }\n  }\n`\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables(accountId) {\n  let queryVars = {\n      account: accountId,\n      // noteType: noteType\n  }\n\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n\n  queryVars.noteType = noteType  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport {\n  Button,\n  Badge,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY,\n  DELETE_ACCOUNT_NOTE\n} from \"./queries\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\n\nfunction AccountNotes({ t, history, match }) {\n  let [noteType, setNoteType] = useState(localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE) || \"BACKOFFICE\")\n  // Set some initial value for noteType, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n  } \n\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_ACCOUNT_NOTES_QUERY, {\n    variables: get_list_query_variables(accountId),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountNote] = useMutation(DELETE_ACCOUNT_NOTE)\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  let notes = data.accountNotes\n\n  return (\n    <AccountNotesBase>\n      <Grid.Row>\n        <Grid.Col>\n          <div className=\"float-right mb-4\">\n            <Button.List>\n              <Button color={(noteType === \"BACKOFFICE\") ? 'primary': 'secondary'}  \n                      size=\"\"\n                      onClick={() => {\n                        setNoteType(\"BACKOFFICE\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.backoffice')}\n              </Button>\n              <Button color={(noteType === \"INSTRUCTORS\") ? 'primary': 'secondary'} \n                      size=\"\" \n                      className=\"ml-2\" \n                      onClick={() => {\n                        setNoteType(\"INSTRUCTORS\")\n                        localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"INSTRUCTORS\")\n                        refetch(get_list_query_variables(accountId))\n                      }\n              }>\n                {t('relations.account.notes.instructors')}\n              </Button>\n            </Button.List>\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n      <LoadMoreOnBottomScroll \n        pageInfo={notes.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: notes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountNotes.edges\n              const pageInfo = fetchMoreResult.accountNotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountNotes: {\n                      __typename: previousResult.accountNotes.__typename,\n                      edges: [ ...previousResult.accountNotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        {notes.edges.map(({ node }) => (\n          <Card>\n            <Card.Body>\n              {(node.injury) ? <Badge color=\"danger\" className=\"float-right\">{t(\"general.injury\")}</Badge> : \"\"}\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.note) }} />\n            </Card.Body>\n            <Card.Footer>\n              <Button \n                color=\"danger\"\n                size=\"sm\"\n                className=\"float-right\"\n                outline\n                onClick={() => {\n                  confirm_delete({\n                    t: t,\n                    msgConfirm: t(\"relations.account.notes.delete_confirm_msg\"),\n                    msgDescription: <p><div dangerouslySetInnerHTML={{__html: node.note}} /></p>,\n                    msgSuccess: t('relations.account.notes.deleted'),\n                    deleteFunction: deleteAccountNote,\n                    functionVariables: { \n                      variables: {\n                        input: {\n                          id: node.id\n                        }\n                      }, \n                      refetchQueries: [\n                        {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId, noteType) },\n                      ]\n                    }\n                  })\n                }}\n              >\n                <Icon name=\"trash-2\" />\n              </Button>\n              <Link to={`/relations/accounts/${match.params.account_id}/notes/edit/${node.id}`}>\n                <Button\n                  color=\"secondary\"\n                  size=\"sm\"\n                  className=\"float-right mr-4\"\n                  outline\n                >\n                  {t(\"general.edit\")}\n                </Button>\n              </Link>              \n              <small className=\"text-muted float-right mr-4\">{moment(node.createdAt).format(dateTimeFormatMoment)}</small>\n              {node.noteBy.fullName} <br />\n            </Card.Footer>\n          </Card>\n        ))}\n      </LoadMoreOnBottomScroll>\n    </AccountNotesBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountNotes))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\n\nconst AccountNoteForm = ({ t, history, isSubmitting, values, errors, setFieldTouched, setFieldValue, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.note')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => { \n              setFieldTouched(\"note\", true)\n              setFieldValue(\"note\", e.target.getContent())\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"injury\" \n                checked={values.injury} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('general.injury')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"injury\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n            {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountNoteForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\n\nimport { \n  GET_ACCOUNT_NOTES_QUERY, \n  CREATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteAdd({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n  let noteType = localStorage.getItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE)\n  if (!noteType) {\n    localStorage.setItem(CSLS.RELATIONS_ACCOUNT_NOTES_NOTE_TYPE, \"BACKOFFICE\") \n  }\n\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_add')\n\n  const [addNote] = useMutation(\n    CREATE_ACCOUNT_NOTE\n  )\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: false,\n            note: \"\"\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              addNote({ variables: {\n                input: {\n                  account: accountId, \n                  noteType: noteType,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteAdd))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { \n  GET_ACCOUNT_NOTE_QUERY, \n  GET_ACCOUNT_NOTES_QUERY, \n  UPDATE_ACCOUNT_NOTE,\n} from './queries'\n// import { ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA } from './yupSchema'\nimport AccountNoteForm from './AccountNoteForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport AccountNotesBase from \"./AccountNotesBase\"\n\nimport { get_list_query_variables } from \"./tools\"\n\n\nfunction AccountNoteEdit({ t, history, match }) {\n  // Set some initial value for noteType, if not found\n\n  const accountId = match.params.account_id\n  const noteId = match.params.id\n  const returnUrl = `/relations/accounts/${accountId}/notes`\n  const cardTitle = t('relations.account.notes.title_edit')\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_NOTE_QUERY, {\n    variables: { id: noteId }\n  })\n  const [updateNote] = useMutation(\n    UPDATE_ACCOUNT_NOTE\n  )\n\n  if (loading) return (\n    <AccountNotesBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </AccountNotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountNotesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </AccountNotesBase>\n    )\n  }\n\n  const note = data.accountNote\n\n  return (\n    <AccountNotesBase showEditBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            injury: note.injury,\n            note: note.note\n          }}\n          // validationSchema={ACCOUNT_FINANCE_PAYMENT_BATCH_CATEGORY_ITEM_SCHEMA}\n          onSubmit={(values, { setSubmitting }, errors) => {\n              console.log('submit values:')\n              console.log(values)\n              console.log(errors)\n\n              updateNote({ variables: {\n                input: {\n                  id: noteId,\n                  injury: values.injury,\n                  note: values.note\n                }\n              }, refetchQueries: [\n                  {query: GET_ACCOUNT_NOTES_QUERY, variables: get_list_query_variables(accountId)}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('relations.account.notes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <AccountNoteForm\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </AccountNoteForm>\n          )}\n        </Formik>\n      </Card>\n    </AccountNotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountNoteEdit))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\n\nfunction AccountOrdersBase({ t, match, history, children, account={} }) {\n  const accountId = match.params.account_id\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.fullName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='orders' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountOrdersBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_ORDERS_QUERY = gql`\n  query FinanceOrders($after: String, $before: String, $status: CostasiellaFinanceOrderStatusChoices, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, status: $status, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          status\n          createdAt\n          total\n          totalDisplay\n          balanceDisplay\n        }\n      }\n    }\n    account(id:$account) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Icon,\n} from \"tabler-react\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_ORDER } from \"../../../finance/orders/queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\n\nfunction AccountClassDelete({t, match, node, account}) {\n  const [deleteOrder] = useMutation(DELETE_FINANCE_ORDER)\n\n  return (\n    <button className=\"icon btn btn-link btn-sm pull-right\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.orders.delete_confirm_msg\"),\n          msgDescription: <p>\n            {t('general.order')}# {node.orderNumber}\n          </p>,\n          msgSuccess: t('relations.account.orders.delete_success'),\n          deleteFunction: deleteOrder,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              }\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_ORDERS_QUERY, \n                variables: { account: account.id } },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountClassDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport AccountOrdersBase from \"./AccountOrdersBase\"\nimport AccountOrderDelete from \"./AccountOrderDelete\"\n\nimport { GET_ACCOUNT_ORDERS_QUERY } from \"./queries\"\n\n\nfunction AccountOrders({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormat = appSettings.dateTimeFormatMoment\n  const cardTitle = t('relations.account.orders.title')\n  const account_id = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_ORDERS_QUERY, {\n    variables: {'account': account_id},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountOrdersBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountOrdersBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountOrdersBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  console.log(\"AccountClasses data:\")\n  console.log(data)\n  const account = data.account\n  const financeOrders = data.financeOrders\n  \n  // Empty list\n  if (!financeOrders.edges.length) {\n    return (\n      <AccountOrdersBase account={account}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.orders.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountOrdersBase>\n    )\n  }\n\n  // Return populated list\n  return (\n    <AccountOrdersBase account={account}>\n      <ContentCard \n        cardTitle={t('relations.account.orders.title')}\n        pageInfo={financeOrders.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeOrders.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeOrders.edges\n              const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeOrders at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeOrders: {\n                      __typename: previousResult.financeOrders.__typename,\n                      edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.order_number')}</Table.ColHeader>\n              <Table.ColHeader>{t('finance.orders.date')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {financeOrders.edges.map(({ node }) => (        \n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <FinanceOrderStatus status={node.status} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    # {node.orderNumber}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.createdAt).format(dateTimeFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.totalDisplay}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                  <AccountOrderDelete node={node} account={account} />\n                    <Link to={\"/finance/orders/edit/\" + node.id}>\n                      <Button className='btn-sm float-right' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountOrdersBase>\n  )\n}\n      \n        \nexport default withTranslation()(withRouter(AccountOrders))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_PRODUCTS_QUERY = gql`\n  query AccountProducts($after: String, $before: String, $accountId: ID!) {\n    accountProducts(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationProduct {\n            id\n            name\n            description\n            urlImageThumbnailSmall\n          }\n          quantity\n          createdAt\n          invoiceItems {\n            edges {\n              node {\n                financeInvoice {\n                  invoiceNumber\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_PRODUCT_QUERY = gql`\n//   query AccountProduct($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountProduct(id:$id) {\n//       id\n//       organizationProduct {\n//         id\n//         name\n//       }\n//       quantity\n//       createdAt\n//     }\n//     organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//       urlImageThumbnailSmall\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ProductInputValues($after: String, $before: String, $accountId: ID!) {\n    organizationProducts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          description\n          priceDisplay\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_PRODUCT = gql`\n  mutation CreateAccountProduct($input: CreateAccountProductInput!) {\n    createAccountProduct(input: $input) {\n      accountProduct {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_PRODUCT = gql`\n  mutation DeleteAccountProduct($input: DeleteAccountProductInput!) {\n    deleteAccountProduct(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Avatar,\n  Icon,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, DELETE_ACCOUNT_PRODUCT } from \"./queries\"\n\n\nfunction AccountProducts({t, match, location}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateTimeFormatMoment = appSettings.dateTimeFormatMoment\n\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title')\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountproduct\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/products/add`} className=\"ml-2\" />\n  </HasPermissionWrapper>\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const {loading, error, data, fetchMore} = useQuery(GET_ACCOUNT_PRODUCTS_QUERY, {\n    variables: { accountId: accountId },\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountProduct] = useMutation(DELETE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountProducts = data.accountProducts\n\n    // Empty list\n    if (!accountProducts.edges.length) {\n      return (\n        <RelationsAccountProfileBase \n          user={account}\n          activeLink={activeLink}\n          pageHeaderButtonList={pageHeaderButtonList}\n        >\n          <Card title={cardTitle}>\n            <Card.Body>\n              <p>{t('relations.account.products.empty_list')}</p>\n            </Card.Body>\n          </Card>\n        </RelationsAccountProfileBase>\n      )\n    }\n\n  return (\n    <RelationsAccountProfileBase \n      user={account}\n      activeLink={activeLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.products.title')}\n        pageInfo={accountProducts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountProducts.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountProducts.edges\n              const pageInfo = fetchMoreResult.accountProducts.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountClasspasses: {\n                      __typename: previousResult.accountProducts.__typename,\n                      edges: [ ...previousResult.accountProducts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader />\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.quantity')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_purchased')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountProducts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    <Avatar size=\"lg\" imageURL={node.organizationProduct.urlImageThumbnailSmall} />\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.organizationProduct.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.quantity}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.createdAt).format(dateTimeFormatMoment)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.invoiceItems.edges.length && \n                      <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                        {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                      </Link>\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.products.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationProduct.name} {moment(node.createdAt).format(dateTimeFormatMoment)}</p>,\n                          msgSuccess: t('relations.account.products.deleted'),\n                          deleteFunction: deleteAccountProduct,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>    \n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountProducts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Text\n} from \"tabler-react\"\n\n\nfunction CSStoreCard({ t, title, subtitle, price, imgUrl, imgAlt, buttonText=\"placeholder\", buttonOnClick=f=>f }) {\n  return (\n      <Card>\n        <Card.Body>\n          <div className='mb-4 text-center'>\n            <img src={imgUrl} alt={imgAlt} />\n          </div>\n          <Card.Title>{title}</Card.Title>\n          <Text className=\"card-subtitle\">{subtitle}</Text>\n\n          <div classname=\"mt-5 d-flex align-items-center\">\n            <div className=\"mt-5 d-flex align-items-center\">\n              <div className=\"product-price\">\n                <strong>{price}</strong>\n              </div>\n              <div className=\"ml-auto\">\n                <Button color=\"primary\" onClick={buttonOnClick}>\n                  <Icon prefix=\"fe\" name=\"plus\" />\n                  {buttonText}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card.Body>\n    </Card>\n  )\n}\n\nexport default withTranslation()(CSStoreCard)\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_PRODUCTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_PRODUCT } from './queries'\n// import { CLASSPASS_SCHEMA } from './yupSchema'\n// import AccountClasspassForm from './AccountClasspassForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase';\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSStoreCard from '../../../ui/CSStoreCard'\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\n\nfunction AccountProductAdd({t, match, history}) {\n  const accountId = match.params.account_id\n  const activeLink = \"products\"\n  const cardTitle = t('relations.account.products.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/products`\n\n  const buttonTextAdd = t(\"general.add\")\n\n  \n  const {loading, error, data, fetchMore} = useQuery(GET_INPUT_VALUES_QUERY, { \n    variables: { accountId: accountId }\n  })\n  const [createAccountProduct] = useMutation(CREATE_ACCOUNT_PRODUCT)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Dimmer loader={true} active={true} />\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n  \n  const organizationProducts = data.organizationProducts\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t(\"relations.account.products.title_add\")}</h4>\n        </Grid.Col>\n      </Grid.Row>\n\n        <LoadMoreOnBottomScroll \n          pageInfo={organizationProducts.pageInfo}\n          onLoadMore={() => {\n            fetchMore({\n              variables: {\n                after: organizationProducts.pageInfo.endCursor\n              },\n              updateQuery: (previousResult, { fetchMoreResult }) => {\n                const newEdges = fetchMoreResult.organizationProducts.edges\n                const pageInfo = fetchMoreResult.organizationProducts.pageInfo\n\n                return newEdges.length\n                  ? {\n                      // Put the new accountClasspasses at the end of the list and update `pageInfo`\n                      // so we have the new `endCursor` and `hasNextPage` values\n                      organizationProducts: {\n                        __typename: previousResult.organizationProducts.__typename,\n                        edges: [ ...previousResult.organizationProducts.edges, ...newEdges ],\n                        pageInfo\n                      }\n                    }\n                  : previousResult\n              }\n            })\n          }} \n        >\n          <Grid.Row>\n            {organizationProducts.edges.map(({ node }) => (\n              <Grid.Col md={4}>\n                {console.log(node)}\n                <CSStoreCard\n                  title={node.name}\n                  subtitle={node.description}\n                  price={node.priceDisplay}\n                  imgUrl={node.urlImageThumbnailLarge}\n                  imgAlt={node.name}\n                  buttonText={buttonTextAdd}\n                  buttonOnClick={() => {\n                    createAccountProduct({ variables: {\n                      input: {\n                        account: accountId,\n                        organizationProduct: node.id,\n                        quantity: 1,\n                      }\n                    }, refetchQueries: [\n                        {query: GET_ACCOUNT_PRODUCTS_QUERY, variables: { accountId: accountId }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data);\n                        history.push(`/relations/accounts/${accountId}/products`)\n                        toast.success((t('relations.account.products.toast_add_success')), {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                      })\n                  }}\n                />\n              </Grid.Col>\n            ))}\n          </Grid.Row>\n        </LoadMoreOnBottomScroll>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationClasspass: \"\",\n              dateStart: new Date(),\n              note: \"\",\n            }}\n            validationSchema={CLASSPASS_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n\n                createAccountClasspass({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationClasspass: values.organizationClasspass,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    note: values.note,\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const classpassId = data.createAccountClasspass.accountClasspass.id\n                    history.push(`/relations/accounts/${accountId}/classpasses/edit/${classpassId}`)\n                    toast.success((t('relations.account.classpasses.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountClasspassForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountClasspassForm>\n            )}\n          </Formik>\n      </Card> */}\n    </RelationsAccountProfileBase>\n  ) \n}\n\nexport default withTranslation()(withRouter(AccountProductAdd))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_QUOTES_QUERY = gql`\n  query FinanceQuotes($after: String, $before: String, $status: CostasiellaFinanceQuoteStatusChoices, $accountId: ID!) {\n    financeQuotes(first: 15, before: $before, after: $after, status: $status, account: $accountId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          quoteNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateExpire\n          total\n          totalDisplay\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      fullName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n// export const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n//   query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n//     accountSubscription(id:$id) {\n//       id\n//       organizationSubscription {\n//         id\n//         name\n//       }\n//       financePaymentMethod {\n//         id\n//         name\n//       }\n//       dateStart\n//       dateEnd\n//       note\n//       registrationFeePaid\n//       createdAt\n//     }\n//     organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//         }\n//       }\n//     }\n//     financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n//       pageInfo {\n//         startCursor\n//         endCursor\n//         hasNextPage\n//         hasPreviousPage\n//       }\n//       edges {\n//         node {\n//           id\n//           archived\n//           name\n//           code\n//         }\n//       }\n//     }\n//     account(id:$accountId) {\n//       id\n//       firstName\n//       lastName\n//       email\n//       phone\n//       mobile\n//       isActive\n//     }\n//   }\n// `\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $accountId: ID!) {\n    financeQuoteGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    businesses(first: 100) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n      invoiceToBusiness {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_QUOTE = gql`\n  mutation CreateFinanceQuote($input: CreateFinanceQuoteInput!) {\n    createFinanceQuote(input: $input) {\n      financeQuote {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\n\nfunction AccountQuotesBase({ t, match, history, children, account={}, pageHeaderButtonList=\"\" }) {\n  const accountId = match.params.account_id\n  let pageHeader\n  if (account) {\n    pageHeader = account.fullName\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={pageHeader} >\n            <div className='page-options d-flex'>\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='quotes' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuotesBase))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\nimport { GET_ACCOUNT_QUOTES_QUERY } from \"./queries\"\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport FinanceQuotesList from '../../../finance/quotes/FinanceQuotesList'\nimport AccountQuotesBase from './AccountQuotesBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\n\nfunction AccountQuotes({ t, location, match, history }) {\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.quotes.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <RelationsAccountsBack />\n    <ButtonAdd addUrl={`/relations/accounts/${accountId}/quotes/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_QUOTES_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n\n  // Loading\n  if (loading) return (\n    <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </AccountQuotesBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <AccountQuotesBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n\n  // Set back location for edit quote\n  localStorage.setItem(CSLS.FINANCE_QUOTES_EDIT_RETURN, location.pathname)\n  let financeQuotes = data.financeQuotes\n  const account = data.account\n\n  // Empty list\n  if (!financeQuotes.edges.length) {\n    return (\n      <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.quotes.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountQuotesBase>\n    )\n  }\n  \n  return (\n    <AccountQuotesBase account={account} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={financeQuotes.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: financeQuotes.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeQuotes.edges\n              const pageInfo = fetchMoreResult.financeQuotes.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new financeQuotes at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeQuotes: {\n                      __typename: previousResult.financeQuotes.__typename,\n                      edges: [ ...previousResult.financeQuotes.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceQuotesList quotes={financeQuotes} />\n      </ContentCard>\n    </AccountQuotesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountQuotes))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\";\n\n\nconst AccountQuoteAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('relations.accounts.quote_to_business')}>\n        <Field component=\"select\" \n              name=\"business\" \n              className={(errors.business) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          <option value=\"\" key={v4()}>{t('relations.accounts.quote_to_account')}</option>\n          {inputData.businesses.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"business\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.finance_quote_group')}>\n        <Field component=\"select\" \n              name=\"financeQuoteGroup\" \n              className={(errors.financeQuoteGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeQuoteGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeQuoteGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button\n            type=\"button\" \n            color=\"link\" \n          >\n              {t('general.cancel')}\n          </Button>\n        </Link>\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountQuoteAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_QUOTE } from './queries'\nimport AccountQuoteAddForm from './AccountQuoteAddForm'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountQuoteAdd({ t, match, history }) {\n  const account_id = match.params.account_id\n  const activeLink = \"quotes\"\n  const cardTitle = t('relations.account.quotes.title_add')\n  const returnUrl = `/relations/accounts/${account_id}/quotes`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        accountId: account_id\n      }\n    }\n  )\n  const [createQuote] = useMutation(CREATE_ACCOUNT_QUOTE, {\n    // onCompleted = () => history.push('/finance/quotes/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.loading_with_dots')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n  }\n  \n  const account = data.account\n  const initialBusiness = account.quoteToBusiness ? account.quoteToBusiness.id : null\n  const financeQuoteGroups = data.financeQuoteGroups\n  const firstQuoteGroup = financeQuoteGroups && financeQuoteGroups.edges && financeQuoteGroups.edges[0].node.id\n\n\n  return (\n    <RelationsAccountProfileBase activeLink={activeLink} user={account} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeQuoteGroup: firstQuoteGroup,\n            business: initialBusiness,\n            summary: \"\"\n          }}\n          // validationSchema={QUOTE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createQuote({ variables: {\n              input: {\n                account: account_id, \n                financeQuoteGroup: values.financeQuoteGroup,\n                business: (values.business) ? values.business : null,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.quotes.title_add')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/quotes/edit/' + data.createFinanceQuote.financeQuote.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <AccountQuoteAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </AccountQuoteAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='quotes'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountQuoteAdd))\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n\nimport RelationsAccountsBack from \"../RelationsAccountsBack\"\n\nimport ProfileMenu from \"../ProfileMenu\"\nimport ProfileCardSmall from \"../../../ui/ProfileCardSmall\"\nimport { GET_ACCOUNT } from \"../../../../queries/accounts/get_account\"\n\n\nfunction AccountScheduleEventTicketsBase({t, history, match, children}) {\n  const accountId = match.params.account_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT, { variables: {\n    accountId: accountId\n  }})\n\n  if (loading) return (\n    <p>\n      {t(\"general.loading_with_dots\")}\n    </p>\n  )\n  if (error) return (\n    <p>\n      {t(\"relations.account.error_loading\")}\n    </p>\n  )\n\n  console.log(data)\n  const account = data.account\n  console.log(account)\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={account.firstName + \" \" + account.lastName} >\n            <div className='page-options d-flex'>\n              <RelationsAccountsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"add\"\n                                    resource=\"accountclasspass\">\n                <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='tickets' \n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountScheduleEventTicketsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\nquery AccountScheduleEventTickets($before:String, $after:String, $scheduleEventTicket:ID!) {\n  accountScheduleEventTickets(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        account {\n          id\n          fullName\n        }\n        cancelled\n        paymentConfirmation\n        infoMailSent\n        invoiceItems {\n          edges {\n            node {\n              financeInvoice {\n                id\n                invoiceNumber\n                summary\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query AccountsAndTicketInfo(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $ticketId: ID!\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n    scheduleEventTicket(id: $ticketId) {\n      id\n      displayPublic\n      name\n      description\n      price\n      scheduleEvent {\n        name\n        dateStart\n      }\n    }\n    accountScheduleEventTickets(first: 1000, scheduleEventTicket: $ticketId) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          cancelled\n          paymentConfirmation\n          infoMailSent\n        }\n      }\n    }\n  }\n`\n\nexport const RESEND_INFO_MAIL_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation ResendTicketInfoMail($input: ResendInfoMailAccountScheduleEventTicketInput!) {\n    resendInfoMailAccountScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n\nexport const ADD_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\nmutation CreateAccountScheduleEventTicket($input:CreateAccountScheduleEventTicketInput!) {\n  createAccountScheduleEventTicket(input: $input) {\n    accountScheduleEventTicket {\n      id\n    }\n  }\n}\n`\n\n\nexport const UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateAccountScheduleEventTicket($input:UpdateAccountScheduleEventTicketInput!) {\n    updateAccountScheduleEventTicket(input: $input) {\n      accountScheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n// export const DELETE_SCHEDULE_EVENT_TICKET = gql`\n//   mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n//     deleteScheduleEventTicket(input: $input) {\n//       ok\n//     }\n//   }\n// `\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query AccountScheduleEventTickets($after: String, $before: String, $account: ID!) {\n    accountScheduleEventTickets(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          cancelled\n          infoMailSent\n          scheduleEventTicket {\n            id\n            name\n            scheduleEvent {\n              id\n              name\n              dateStart\n              organizationLocation {\n                name\n              }\n            }\n          }\n          invoiceItems(first:1) {\n            edges {\n              node {\n                financeInvoice {\n                  id\n                  invoiceNumber\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ContentCard from \"../../../general/ContentCard\"\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport AccountScheduleEventTicketsBase from \"./AccountScheduleEventTicketsBase\"\n\nimport { UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"../../../schedule/events/tickets/customers/queries\"\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\n\nfunction AccountScheduleEventTickets({t, history, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t('relations.account.event_tickets.title')\n\n  const accountId = match.params.account_id\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, { \n    variables: {\n      account: accountId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n\n  if (loading) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"general.loading_with_dots\")}\n    </AccountScheduleEventTicketsBase>\n  )\n  if (error) return (\n    <AccountScheduleEventTicketsBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </AccountScheduleEventTicketsBase>\n  )\n\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!accountScheduleEventTickets.edges.length) {\n    return (\n      <AccountScheduleEventTicketsBase>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.event_tickets.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </AccountScheduleEventTicketsBase>\n    )\n  }\n\n  return (\n    <AccountScheduleEventTicketsBase>\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={accountScheduleEventTickets.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountScheduleEventTickets.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n              const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountScheduleEventTickets at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountScheduleEventTickets: {\n                      __typename: previousResult.accountScheduleEventTickets.__typename,\n                      edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n              <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountScheduleEventTickets.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.scheduleEventTicket.scheduleEvent.name} <br />\n                    <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                    {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.invoiceItems.edges.length) ? \n                      <span>\n                        <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                          {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber}\n                        </Link> <br />\n                        <FinanceInvoicesStatus status={node.invoiceItems.edges[0].node.financeInvoice.status} />\n                        \n                      </span>\n                      : \"\"\n                    }\n                    \n                  </Table.Col>\n                  {/* <Table.Col key={v4()}>\n                    {node.dateStart}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.classesRemainingDisplay}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                  </Table.Col> */}\n                  <Table.Col>\n                    <BadgeBoolean value={node.infoMailSent} />\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.cancelled) ?\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: false\n                            }\n                          }, refetchQueries: [\n                            { \n                              query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                              variables: { account: accountId }\n                            },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            }\n                          )\n                        }\n                      >\n                        {t(\"general.uncancel\")}\n                      </Button>\n                    :\n                      <Button \n                        className=\"pull-right\"\n                        color=\"warning\"\n                        onClick={() =>\n                          updateAccountScheduleEventTicket({ variables: {\n                            input: {\n                              id: node.id,\n                              cancelled: true\n                            }\n                          }, refetchQueries: [\n                              { \n                                query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, \n                                variables: { account: accountId }\n                              },\n                          ]})\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                            })\n                          }\n                        >\n                          {t(\"general.cancel\")}\n                        </Button>\n                    }\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </AccountScheduleEventTicketsBase>\n  )\n}\n\n\n\n// const AccountClasspasses = ({ t, history, match, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Query query={GET_ACCOUNT_CLASSPASSES_QUERY} variables={{ archived: archived, accountId: match.params.account_id }} \n//         fetchPolicy=\"network-only\"> \n//         {({ loading, error, data, refetch, fetchMore }) => {\n//           // Loading\n//           if (loading) return <p>{t('general.loading_with_dots')}</p>\n//           // Error\n//           if (error) {\n//             console.log(error)\n//             return <p>{t('general.error_sad_smiley')}</p>\n//           }\n\n//           const account = data.account\n//           const accountClasspasses = data.accountClasspasses\n\n//           return (\n//             <Container>\n//               <Page.Header title={account.firstName + \" \" + account.lastName} >\n//                 <RelationsAccountsBack />\n//               </Page.Header>\n//               <Grid.Row>\n//                 <Grid.Col md={9}>\n//                   <ContentCard \n//                     cardTitle={t('relations.account.classpasses.title')}\n//                     pageInfo={accountClasspasses.pageInfo}\n//                     onLoadMore={() => {\n//                       fetchMore({\n//                         variables: {\n//                           after: accountClasspasses.pageInfo.endCursor\n//                         },\n//                         updateQuery: (previousResult, { fetchMoreResult }) => {\n//                           const newEdges = fetchMoreResult.accountClasspasses.edges\n//                           const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n//                           return newEdges.length\n//                             ? {\n//                                 // Put the new accountClasspasses at the end of the list and update `pageInfo`\n//                                 // so we have the new `endCursor` and `hasNextPage` values\n//                                 accountClasspasses: {\n//                                   __typename: previousResult.accountClasspasses.__typename,\n//                                   edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n//                                   pageInfo\n//                                 }\n//                               }\n//                             : previousResult\n//                         }\n//                       })\n//                     }} \n//                   >\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row key={v4()}>\n//                           <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n//                           <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader> \n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                           {accountClasspasses.edges.map(({ node }) => (\n//                             <Table.Row key={v4()}>\n//                               <Table.Col key={v4()}>\n//                                 {node.organizationClasspass.name}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateStart}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.dateEnd}\n//                               </Table.Col>\n//                               <Table.Col key={v4()}>\n//                                 {node.classesRemainingDisplay}\n//                               </Table.Col>\n//                               <Table.Col className=\"text-right\" key={v4()}>\n//                                 <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/edit/\" + node.id}>\n//                                   <Button className='btn-sm' \n//                                           color=\"secondary\">\n//                                     {t('general.edit')}\n//                                   </Button>\n//                                 </Link>\n//                               </Table.Col>\n//                               <Mutation mutation={DELETE_ACCOUNT_CLASSPASS} key={v4()}>\n//                                 {(deleteAccountClasspass, { data }) => (\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     <button className=\"icon btn btn-link btn-sm\" \n//                                       title={t('general.delete')} \n//                                       href=\"\"\n//                                       onClick={() => {\n//                                         confirm_delete({\n//                                           t: t,\n//                                           msgConfirm: t(\"relations.account.classpasses.delete_confirm_msg\"),\n//                                           msgDescription: <p>{node.organizationClasspass.name} {node.dateStart}</p>,\n//                                           msgSuccess: t('relations.account.classpasses.deleted'),\n//                                           deleteFunction: deleteAccountClasspass,\n//                                           functionVariables: { variables: {\n//                                             input: {\n//                                               id: node.id\n//                                             }\n//                                           }, refetchQueries: [\n//                                             {query: GET_ACCOUNT_CLASSPASSES_QUERY, variables: { archived: archived, accountId: match.params.account_id }} \n//                                           ]}\n//                                         })\n//                                     }}>\n//                                       <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n//                                     </button>\n//                                   </Table.Col>\n//                                 )}\n//                               </Mutation>\n//                             </Table.Row>\n//                           ))}\n//                       </Table.Body>\n//                     </Table>\n//                   </ContentCard>\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <ProfileCardSmall user={account}/>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"accountclasspass\">\n//                     <Link to={\"/relations/accounts/\" + match.params.account_id + \"/classpasses/add\"}>\n//                       <Button color=\"primary btn-block mb-6\">\n//                               {/* //  onClick={() => history.push(\"/organization/classpasses/add\")}> */}\n//                         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('relations.account.classpasses.add')}\n//                       </Button>\n//                     </Link>\n//                   </HasPermissionWrapper>\n//                   <ProfileMenu \n//                     activeLink='classpasses' \n//                     account_id={match.params.account_id}\n//                   />\n//                 </Grid.Col>\n//               </Grid.Row>\n//             </Container>\n//           )\n//         }}\n//       </Query>\n//     </div>\n//   </SiteWrapper>\n// )\n      \n        \nexport default withTranslation()(withRouter(AccountScheduleEventTickets))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTIONS_QUERY = gql`\n  query AccountSubscriptions($after: String, $before: String, $accountId: ID!) {\n    accountSubscriptions(first: 15, before: $before, after: $after, account: $accountId) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          financePaymentMethod {\n            id\n            name\n          }\n          dateStart\n          dateEnd\n          creditTotal\n          registrationFeePaid\n          createdAt\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!, $accountId: ID!, $after: String, $before: String) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query SubscriptionInputValues($after: String, $before: String, $archived: Boolean!, $accountId: ID!) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    financePaymentMethods(first: 100, before: $before, after: $after, archived: $archived) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          code\n        }\n      }\n    }\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const GET_ACCOUNT_QUERY = gql`\n  query Account($accountId: ID!) {\n    account(id:$accountId) {\n      id\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\nexport const CREATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation CreateAccountSubscription($input: CreateAccountSubscriptionInput!) {\n    createAccountSubscription(input: $input) {\n      accountSubscription {\n        id    \n      }\n    }\n  }\n`\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation UpdateAccountSubscription($input: UpdateAccountSubscriptionInput!) {\n    updateAccountSubscription(input: $input) {\n      accountSubscription {\n        id  \n      }\n    }\n  }\n`\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION = gql`\n  mutation DeleteAccountSubscription($input: DeleteAccountSubscriptionInput!) {\n    deleteAccountSubscription(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Button,\n  Card,\n  Table\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, DELETE_ACCOUNT_SUBSCRIPTION } from \"./queries\"\n\n\nfunction AccountSubscriptions({t, match}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const accountId = match.params.account_id\n  const cardTitle = t('relations.account.subscriptions.title')\n  const activeLink = \"subscriptions\"\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTIONS_QUERY, {\n    variables: {accountId: accountId},\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteAccountSubscription] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const accountSubscriptions = data.accountSubscriptions\n  const pageHeaderButtonList = <HasPermissionWrapper \n    permission=\"add\"\n    resource=\"accountsubscription\">\n      <ButtonAdd addUrl={`/relations/accounts/${accountId}/subscriptions/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  // Empty list\n  if (!accountSubscriptions.edges.length) {\n    return (\n      <RelationsAccountProfileBase\n        activeLink={activeLink}\n        user={account}\n        pageHeaderButtonList={pageHeaderButtonList}\n      >\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.account.subscriptions.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsAccountProfileBase>\n    )\n  }\n\n  console.table(accountSubscriptions.edges)\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={t('relations.account.subscriptions.title')}\n        pageInfo={accountSubscriptions.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: accountSubscriptions.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.accountSubscriptions.edges\n              const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new accountSubscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    accountSubscriptions: {\n                      __typename: previousResult.accountSubscriptions.__typename,\n                      edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.payment_method')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.credits')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader> \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {accountSubscriptions.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.dateEnd && moment(node.dateEnd).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.financePaymentMethod) ? node.financePaymentMethod.name : \"\"}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    { (node.organizationSubscription.unlimited) ? t(\"general.unlimited\") : node.creditTotal }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={\"/relations/accounts/\" + match.params.account_id + \"/subscriptions/edit/\" + node.id}>\n                      <Button className='btn-sm' \n                              color=\"secondary\">\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.delete')} \n                      href=\"\"\n                      onClick={() => {\n                        confirm_delete({\n                          t: t,\n                          msgConfirm: t(\"relations.account.subscriptions.delete_confirm_msg\"),\n                          msgDescription: <p>{node.organizationSubscription.name} {node.dateStart}</p>,\n                          msgSuccess: t('relations.account.subscriptions.deleted'),\n                          deleteFunction: deleteAccountSubscription,\n                          functionVariables: { variables: {\n                            input: {\n                              id: node.id\n                            }\n                          }, refetchQueries: [\n                            {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: { accountId: accountId }} \n                          ]}\n                        })\n                    }}>\n                      <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </RelationsAccountProfileBase>\n  )\n}\n\n        \nexport default withTranslation()(withRouter(AccountSubscriptions))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  organizationSubscription: Yup.string()\n    .required(t('yup.field_required')),\n  financePaymentMethod: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .nullable(),\n  registrationFeePaid: Yup.boolean(),\n  note: Yup.string(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nimport ButtonFormCancel from \"../../../ui/ButtonFormCancel\"\n\n\nconst AccountSubscriptionForm = ({ t, history, create, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, returnUrl }) => (\n  <FoForm>\n    <Card.Body> \n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.subscription')}>\n            <Field component=\"select\" \n                  name=\"organizationSubscription\" \n                  className={(errors.organizationSubscription) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n              {inputData.organizationSubscriptions.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationSubscription\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.payment_method')}>\n            <Field component=\"select\" \n                  name=\"financePaymentMethod\" \n                  className={(errors.financePaymentMethod) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.financePaymentMethods.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"financePaymentMethod\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row> \n      <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n      <Form.Group label={t('general.note')}>\n        <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"note\"\n            initialValue={values.note}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"note\", e.target.getContent())\n              setFieldTouched(\"note\", true, true)\n            }}\n          />\n        <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      {(create) ? \"\" : \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"registrationFeePaid\" \n                checked={values.registrationFeePaid} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('relations.account.subscriptions.registration_fee_paid')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"registrationFeePaid\" component=\"div\" />   \n        </Form.Group> \n      }\n    </Card.Body>\n    <Card.Footer>\n        <Button \n          className=\"pull-right\"\n          color=\"primary\"\n          disabled={isSubmitting}\n          type=\"submit\"\n        >\n          {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionForm))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_ACCOUNT_SUBSCRIPTION } from './queries'\nimport { SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport AccountSubscriptionForm from './AccountSubscriptionForm'\n\nimport {\n  Card,\n} from \"tabler-react\";\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction AccountSubscriptionAdd({t, history, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"subscriptions\"\n  const cardTitle = t('relations.account.subscriptions.title_add')\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    variables: { archived: false, accountId: accountId }\n  })\n  const [createAccountSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  if (loading) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        {t('general.loading_with_dots')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return(\n    <RelationsAccountProfileBase activeLink={activeLink} returnUrl={returnUrl}>\n      {console.log(error)}\n      <Card title={cardTitle}>\n        {t('general.error_sad_smiley')}\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const inputData = data\n  const account = data.account\n\n  return (\n    <RelationsAccountProfileBase\n      activeLink={activeLink}\n      user={account}\n      returnUrl={returnUrl} \n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle}</Card.Title>\n        </Card.Header>\n          <Formik\n            initialValues={{ \n              organizationSubscription: \"\",\n              financePaymentMethod: \"\",\n              dateStart: new Date(),\n              note: \"\",\n              registrationFeePaid: false\n            }}\n            validationSchema={SUBSCRIPTION_SCHEMA}\n            onSubmit={(values, { setSubmitting }, errors) => {\n                console.log('submit values:')\n                console.log(values)\n                console.log(errors)\n\n                \n                let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n\n                createAccountSubscription({ variables: {\n                  input: {\n                    account: accountId, \n                    organizationSubscription: values.organizationSubscription,\n                    financePaymentMethod: values.financePaymentMethod,\n                    dateStart: dateToLocalISO(values.dateStart),\n                    dateEnd: dateEnd,\n                    note: values.note\n                  }\n                }, refetchQueries: [\n                    {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    const subscriptionId = data.createAccountSubscription.accountSubscription.id\n                    history.push(`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}`)\n                    toast.success((t('relations.account.subscriptions.toast_add_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n              <AccountSubscriptionForm\n                create={true}\n                inputData={inputData}\n                isSubmitting={isSubmitting}\n                setFieldValue={setFieldValue}\n                setFieldTouched={setFieldTouched}\n                errors={errors}\n                values={values}\n                returnUrl={returnUrl}\n              >\n                {console.log(errors)}\n              </AccountSubscriptionForm>\n            )}\n          </Formik>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class AccountSubscriptionAdd extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Account subscription add props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const history = this.props.history\n//     const match = this.props.match\n//     const accountId = match.params.accountId\n//     const returnUrl = \"/relations/accounts/\" + accountId + \"/subscriptions\"\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//         <Query query={GET_INPUT_VALUES_QUERY} variables = {{archived: false, accountId: accountId}} >\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return <p>{t('general.loading_with_dots')}</p>\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return <p>{t('general.error_sad_smiley')}</p>\n//             }\n            \n//             console.log('query data')\n//             console.log(data)\n//             const inputData = data\n//             const account = data.account\n\n//             return (\n//               <Container>\n//                <Page.Header title={account.firstName + \" \" + account.lastName} />\n//                <Grid.Row>\n//                   <Grid.Col md={9}>\n//                   <Card>\n//                     <Card.Header>\n//                       <Card.Title>{t('relations.account.subscriptions.title_add')}</Card.Title>\n//                     </Card.Header>\n//                       <Mutation mutation={CREATE_ACCOUNT_SUBSCRIPTION} onCompleted={() => history.push(returnUrl)}> \n//                       {(createSubscription, { data }) => (\n//                           <Formik\n//                               initialValues={{ \n//                                 organizationSubscription: \"\",\n//                                 financePaymentMethod: \"\",\n//                                 dateStart: new Date(),\n//                                 note: \"\",\n//                                 registrationFeePaid: false\n//                               }}\n//                               validationSchema={SUBSCRIPTION_SCHEMA}\n//                               onSubmit={(values, { setSubmitting }, errors) => {\n//                                   console.log('submit values:')\n//                                   console.log(values)\n//                                   console.log(errors)\n\n                                  \n//                                   let dateEnd\n//                                   if (values.dateEnd) {\n//                                     dateEnd = dateToLocalISO(values.dateEnd)\n//                                   } else {\n//                                     dateEnd = values.dateEnd\n//                                   }\n\n//                                   createSubscription({ variables: {\n//                                     input: {\n//                                       account: accountId, \n//                                       organizationSubscription: values.organizationSubscription,\n//                                       financePaymentMethod: values.financePaymentMethod,\n//                                       dateStart: dateToLocalISO(values.dateStart),\n//                                       dateEnd: dateEnd,\n//                                       note: values.note,\n//                                       registrationFeePaid: values.registrationFeePaid\n//                                     }\n//                                   }, refetchQueries: [\n//                                       {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n//                                   ]})\n//                                   .then(({ data }) => {\n//                                       console.log('got data', data)\n//                                       toast.success((t('relations.account.subscriptions.toast_add_success')), {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                     }).catch((error) => {\n//                                       toast.error((t('general.toast_server_error')) +  error, {\n//                                           position: toast.POSITION.BOTTOM_RIGHT\n//                                         })\n//                                       console.log('there was an error sending the query', error)\n//                                       setSubmitting(false)\n//                                     })\n//                               }}\n//                               >\n//                               {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n//                                 <AccountSubscriptionForm\n//                                   inputData={inputData}\n//                                   isSubmitting={isSubmitting}\n//                                   setFieldValue={setFieldValue}\n//                                   setFieldTouched={setFieldTouched}\n//                                   errors={errors}\n//                                   values={values}\n//                                   returnUrl={returnUrl}\n//                                 >\n//                                   {console.log(errors)}\n//                                 </AccountSubscriptionForm>\n//                               )}\n//                           </Formik>\n//                       )}\n//                       </Mutation>\n//                     </Card>\n//                   </Grid.Col>\n//                   <Grid.Col md={3}>\n//                     <HasPermissionWrapper permission=\"add\"\n//                                           resource=\"accountsubscription\">\n//                       <Link to={returnUrl}>\n//                         <Button color=\"primary btn-block mb-6\">\n//                           <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n//                         </Button>\n//                       </Link>\n//                     </HasPermissionWrapper>\n//                     <ProfileMenu \n//                       activeLink='subscriptions'\n//                       accountId={match.params.accountId}\n//                     />\n//                   </Grid.Col>\n//                 </Grid.Row>\n//               </Container>\n//             )}}\n//           </Query>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionAdd))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\n// position: top or bottom\n// tabs: [[name, title, link], ...]\n// active: active tab name\n\nfunction CardTabs({ t, position=\"top\", tabs, active}) {\n  let class_tabs_position = \"card-tabs-top\"\n  switch(position) {\n    case \"top\":\n      break\n    case \"bottom\":\n      class_tabs_position = \"card-tabs-top\"\n      break\n    default:\n      break\n  }   \n\n  return (\n    <div className={`card-tabs ${class_tabs_position}`}>\n      {\n        tabs.map(({name, title, link}) => (\n          <Link key={v4()} to={link} className={`card-tabs-item ${(name === active) ? \"active\": \"\"}`}>\n            <h3 className=\"card-title\"> {title} </h3>\n          </Link>\n        ))\n      }\n    </div>\n  )\n}\n\nexport default withTranslation()(CardTabs)\n\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../../ui/CardTabs\"\n\nfunction AccountSubscriptionEditTabs({ t, active, account_id, subscription_id}) {\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"relations.account.subscriptions.menu.general\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}`\n          },\n          {\n            name: \"pauses\", \n            title: t(\"relations.account.subscriptions.menu.pauses\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/pauses`\n          },\n          {\n            name: \"blocks\", \n            title: t(\"relations.account.subscriptions.menu.blocks\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/blocks`\n          },\n          {\n            name: \"alt_prices\", \n            title: t(\"relations.account.subscriptions.menu.alt_prices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/alt_prices`\n          },\n          {\n            name: \"invoices\", \n            title: t(\"relations.account.subscriptions.menu.invoices\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/invoices`\n          },\n          {\n            name: \"credits\", \n            title: t(\"relations.account.subscriptions.menu.credits\"), \n            link: `/relations/accounts/${account_id}/subscriptions/edit/${subscription_id}/credits`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(AccountSubscriptionEditTabs)\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\n\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nfunction AccountSubscriptionEditBaseBase({t, history, match, children, returnUrl, account=null, subscription=null, activeTab}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n\n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('relations.account.subscriptions.title_edit')} {cardTitle}</Card.Title>\n                </Card.Header>\n                <AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab}\n                />\n                {children}\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              {/* <HasPermissionWrapper permission=\"change\"\n                                    resource=\"accountsubscription\">\n                <Link to={returnUrl}>\n                  <Button color=\"primary btn-block mb-6\">\n                    <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper> */}\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditBaseBase from \"./AccountSubscriptionEditBaseBase\"\n\n\nfunction AccountSubscriptionEditBase({t, history, match, children, activeTab, returnUrl}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBaseBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      returnUrl={returnUrl}  \n    >\n      {children}\n    </AccountSubscriptionEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBase))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTIONS_QUERY, GET_ACCOUNT_SUBSCRIPTION_QUERY, UPDATE_ACCOUNT_SUBSCRIPTION } from '../queries'\nimport { SUBSCRIPTION_SCHEMA } from '../yupSchema'\nimport AccountSubscriptionForm from '../AccountSubscriptionForm'\n\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport AccountSubscriptionEditBase from \"./AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEdit({t, match, history}) {\n  const id = match.params.subscription_id\n  const accountId = match.params.account_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"general\"\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      archived: false,\n      accountId: accountId,\n      id: id\n    }\n  })\n\n  const [ updateSubscription ] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION)\n  \n  if (loading) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditBase>\n  )\n\n  const inputData = data\n  const initialdata = data.accountSubscription\n\n  let initialPaymentMethod = \"\"\n  if (initialdata.financePaymentMethod) {\n    initialPaymentMethod = initialdata.financePaymentMethod.id\n  }\n  \n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialdata.dateStart) {\n    dateStart = new Date(initialdata.dateStart)\n  }\n  if (initialdata.dateEnd) {\n    dateEnd = new Date(initialdata.dateEnd)\n  }\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      <Formik\n        initialValues={{ \n          organizationSubscription: initialdata.organizationSubscription.id,\n          financePaymentMethod: initialPaymentMethod,\n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          note: initialdata.note,\n          registrationFeePaid: initialdata.registrationFeePaid\n        }}\n        validationSchema={SUBSCRIPTION_SCHEMA}\n        onSubmit={(values, { setSubmitting }, errors) => {\n            console.log('submit values:')\n            console.log(values)\n            console.log(errors)\n\n            \n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateSubscription({ variables: {\n              input: {\n                id: id,\n                organizationSubscription: values.organizationSubscription,\n                financePaymentMethod: values.financePaymentMethod,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                note: values.note,\n                registrationFeePaid: values.registrationFeePaid\n              }\n            }, refetchQueries: [\n                {query: GET_ACCOUNT_SUBSCRIPTIONS_QUERY, variables: {accountId: accountId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.account.subscriptions.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n          <AccountSubscriptionForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldValue={setFieldValue}\n            setFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </AccountSubscriptionForm>\n        )}\n      </Formik>\n    </AccountSubscriptionEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEdit))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY = gql`\nquery AccountSubscriptionAltPrices($before:String, $after:String, $accountSubscription: ID!) {\n  accountSubscriptionAltPrices(before: $before, after: $after, accountSubscription:$accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        subscriptionYear\n        subscriptionMonth\n        amount\n        amountDisplay\n        description\n        note\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY = gql`\nquery AccountSubscriptionAltPrice($id: ID!) {\n  accountSubscriptionAltPrice(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    subscriptionYear\n    subscriptionMonth\n    amount\n    description\n    note\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation DeleteAccountSubscriptionAltPrice($input: DeleteAccountSubscriptionAltPriceInput!) {\n    deleteAccountSubscriptionAltPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport AccountSubscriptionEditTabs from \"./AccountSubscriptionEditTabs\"\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ProfileCardSmall from \"../../../../ui/ProfileCardSmall\"\nimport ProfileMenu from \"../../ProfileMenu\"\nimport moment from 'moment'\n\n\nfunction AccountSubscriptionEditBaseBase({\n  t, \n  history, \n  match, \n  children, \n  account=null, \n  subscription=null, \n  pageInfo, \n  onLoadMore, \n  activeTab,\n  returnUrl,\n  pageHeaderButtonList=\"\"}\n){\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  \n  let credits = \"\"\n  if (subscription) {\n    if (subscription.organizationSubscription.unlimited) {\n      credits = t(\"general.unlimited\")\n    } else {\n      credits = subscription.creditTotal\n    }\n  } \n\n  const cardTitle = (subscription) ? \n    <span className=\"text-muted\">\n      - {subscription.organizationSubscription.name + \" \" + moment(subscription.dateStart).format(dateFormat)} - {credits} {t(\"general.credits\")}\n    </span> : \"\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={(account) ? account.firstName + \" \" + account.lastName : \"\"} >\n            <div className='page-options d-flex'>\n              {(returnUrl) ? <ButtonBack returnUrl={returnUrl} /> : \"\"}\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              <ContentCard \n                cardTitle={<span>{t('relations.account.subscriptions.title_edit')} {cardTitle}</span>}\n                pageInfo={pageInfo}\n                onLoadMore={onLoadMore}\n                hasCardBody={false}\n                cardTabs={<AccountSubscriptionEditTabs \n                  account_id={accountId}\n                  subscription_id={subscriptionId}\n                  active={activeTab} /> }\n              >\n                {children}\n              </ContentCard>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ProfileCardSmall user={account}/>\n              <ProfileMenu \n                activeLink='subscriptions'\n                accountId={accountId}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBaseBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from '../queries'\nimport AccountSubscriptionEditListBaseBase from \"./AccountSubscriptionEditListBaseBase\"\n\n\nfunction AccountSubscriptionEditListBase({t, history, match, children, pageInfo, onLoadMore, activeTab, returnUrl, pageHeaderButtonList=\"\"}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: {\n      accountId: accountId,\n      id: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBaseBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBaseBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBaseBase>\n  )\n\n  console.log(data)\n  const account = data.account\n  const subscription = data.accountSubscription\n\n  return (\n    <AccountSubscriptionEditListBaseBase \n      activeTab={activeTab} \n      account={account} \n      subscription={subscription}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      {children}\n    </AccountSubscriptionEditListBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditListBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditAltPriceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionAltPrice] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_ALT_PRICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.alt_prices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.alt_prices.delete_success'),\n          deleteFunction: deleteAccountSubscriptionAltPrice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd'\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditAltPriceDelete from \"./AccountSubscriptionEditAltPriceDelete\"\n\n\nfunction AccountSubscriptionEditAltPrices({t, match, history}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"alt_prices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/add`} \n    className=\"ml-2\"\n   />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionAltPrices = data.accountSubscriptionAltPrices\n  const pageInfo = data.accountSubscriptionAltPrices.pageInfo\n\n    // Empty list\n    if (!accountSubscriptionAltPrices.edges.length) { return (\n      <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card.Body>{t('relations.account.subscriptions.alt_prices.empty_list')}</Card.Body>\n      </AccountSubscriptionEditListBase>\n    )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionAltPrices.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionAltPrices.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionAltPrices.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionAltPrices: {\n                __typename: previousResult.accountSubscriptionAltPrices.__typename,\n                edges: [ ...previousResult.accountSubscriptionAltPrices.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_year')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.subscription_month')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.amount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionAltPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.subscriptionYear}\n                </Table.Col>\n                <Table.Col>\n                  {node.subscriptionMonth}\n                </Table.Col>\n                <Table.Col>\n                  {node.amountDisplay}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditAltPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPrices))\n","import * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA = Yup.object().shape({\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  amount: Yup.number()\n    .required()\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditAltPriceBase({ t, history, match, children}) {\n  const activeTab = \"alt_prices\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\n\n\nfunction AccountSubscriptionEditAltPriceForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.alt_prices.add')\n  } else {\n    title = t('relations.account.subscriptions.alt_prices.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.amount')}>\n                <Field type=\"text\" \n                    name=\"amount\" \n                    className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Field type=\"text\" \n                    name=\"description\" \n                    className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.note')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"note\"\n                initialValue={values.note}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"note\", e.target.getContent())\n                  setFieldTouched(\"note\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation CreateAccountSubscriptionAltPrice($input:CreateAccountSubscriptionAltPriceInput!) {\n    createAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n\n  const [addSubscriptionAltPrice] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: new Date().getFullYear(),\n          subscriptionMonth: new Date().getMonth() + 1,\n          amount: 0,\n          description: \"\",\n          note: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionAltPrice({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditAltPriceBase from \"./AccountSubscriptionEditAltPriceBase\"\nimport AccountSubscriptionEditAltPriceForm from \"./AccountSubscriptionEditAltPriceForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE = gql`\n  mutation UpdateAccountSubscriptionAltPrice($input:UpdateAccountSubscriptionAltPriceInput!) {\n    updateAccountSubscriptionAltPrice(input: $input) {\n      accountSubscriptionAltPrice {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditAltPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/alt_prices/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_ALT_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionAltPrice] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_ALT_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditAltPriceBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditAltPriceBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditAltPriceBase>\n    )\n  }\n\n  const accountSubscriptionAltPrice = data.accountSubscriptionAltPrice\n\n\n  return (\n    <AccountSubscriptionEditAltPriceBase>\n      <Formik\n        initialValues={{ \n          subscriptionYear: accountSubscriptionAltPrice.subscriptionYear,\n          subscriptionMonth: accountSubscriptionAltPrice.subscriptionMonth,\n          amount: accountSubscriptionAltPrice.amount,\n          description: accountSubscriptionAltPrice.description,\n          note: accountSubscriptionAltPrice.note\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_ALT_PRICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionAltPrice({ variables: {\n            input: {\n              id: id,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              amount: values.amount,\n              description: values.description,\n              note: values.note,\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_ALT_PRICES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.alt_prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditAltPriceForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditAltPriceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditAltPriceEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY = gql`\nquery AccountSubscriptionBlocks($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionBlocks(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY = gql`\nquery AccountSubscriptionBlock($id: ID!) {\n  accountSubscriptionBlock(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation DeleteAccountSubscriptionBlock($input: DeleteAccountSubscriptionBlockInput!) {\n    deleteAccountSubscriptionBlock(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_BLOCK, GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditBlockDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionBlock] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_BLOCK)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.blocks.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.blocks.delete_success'),\n          deleteFunction: deleteAccountSubscriptionBlock,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditBlockDelete from \"./AccountSubscriptionEditBlockDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditBlocks({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"blocks\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionBlocks = data.accountSubscriptionBlocks\n  const pageInfo = data.accountSubscriptionBlocks.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionBlocks.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.blocks.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionBlocks.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionBlocks.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionBlocks.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionBlocks: {\n                __typename: previousResult.accountSubscriptionBlocks.__typename,\n                edges: [ ...previousResult.accountSubscriptionBlocks.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionBlocks.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditBlockDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlocks))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditBlockBase({ t, history, match, children}) {\n  const activeTab = \"blocks\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditBlockForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.blocks.add')\n  } else {\n    title = t('relations.account.subscriptions.blocks.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation CreateAccountSubscriptionBlock($input:CreateAccountSubscriptionBlockInput!) {\n    createAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n\n  const [addSubscriptionBlock] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionBlock({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditBlockBase from \"./AccountSubscriptionEditBlockBase\"\nimport AccountSubscriptionEditBlockForm from \"./AccountSubscriptionEditBlockForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK = gql`\n  mutation UpdateAccountSubscriptionBlock($input:UpdateAccountSubscriptionBlockInput!) {\n    updateAccountSubscriptionBlock(input: $input) {\n      accountSubscriptionBlock {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditBlockEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/blocks/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_BLOCK_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionBlock] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_BLOCK, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditBlockBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditBlockBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditBlockBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditBlockBase>\n    )\n  }\n\n  const accountSubscriptionBlock = data.accountSubscriptionBlock\n\n  return (\n    <AccountSubscriptionEditBlockBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionBlock.dateStart),\n          dateEnd: new Date(accountSubscriptionBlock.dateEnd),\n          description: accountSubscriptionBlock.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_BLOCK_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionBlock({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_BLOCKS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.blocks.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditBlockForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditBlockBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditBlockEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY = gql`\nquery AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        advance\n        reconciled\n        accountSubscription {\n          id\n        }\n        description\n        expiration\n        expired\n        scheduleItemAttendance {\n          id\n          date\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationClasstype {\n              id\n              name\n            }\n            organizationLocationRoom {\n              id \n              name\n              organizationLocation {\n                id\n                name\n              }\n            }\n\n          }\n        }\n        createdAt\n      }\n    } \n  }\n  accountSubscription(id: $accountSubscription) {\n    id\n    organizationSubscription {\n      id\n      name\n      unlimited\n    }\n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\nquery AccountSubscriptionCredit($id: ID!) {\n  accountSubscriptionCredit(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    expiration\n    description\n    createdAt\n  }\n}\n`\n\nexport const ADD_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation CreateAccountSubscriptionCredit($input:CreateAccountSubscriptionCreditInput!) {\n    createAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation UpdateAccountSubscriptionCredit($input:UpdateAccountSubscriptionCreditInput!) {\n    updateAccountSubscriptionCredit(input: $input) {\n      accountSubscriptionCredit {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n  mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n    deleteAccountSubscriptionCredit(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { DELETE_ACCOUNT_SUBSCRIPTION_CREDIT, GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditDelete({t, match, history, id}) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionCredit] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_CREDIT)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.credits.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.credits.delete_success'),\n          deleteFunction: deleteAccountSubscriptionCredit,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: query_vars },\n              { query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditCreditDelete from \"./AccountSubscriptionEditCreditDelete\"\n\n\n\nfunction AccountSubscriptionEditCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"credits\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionCredits = data.accountSubscriptionCredits\n  const accountSubscription = data.accountSubscription\n  const pageInfo = data.accountSubscriptionCredits.pageInfo\n\n  // unlimited\n  if (accountSubscription.organizationSubscription.unlimited) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <Card.Alert color=\"primary\">\n          <Icon name=\"check\" /> {t('relations.account.subscriptions.credits.unlimited')}\n        </Card.Alert>\n      </Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  // Empty list\n  if (!accountSubscriptionCredits.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>{t('relations.account.subscriptions.credits.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n\n  console.table(data)\n\n  function onLoadMore() {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionCredits.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionCredits: {\n                __typename: previousResult.accountSubscriptionCredits.__typename,\n                edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.credit')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.expiration')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.class')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionCredits.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.createdAt).format(dateFormat)} <br />\n                  <small className=\"text-muted\">\n                    <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                  </small>\n                  {(node.reconciled) && <small className=\"text-muted\">Reconciled at {moment(node.reconciled).format(dateFormat)}</small>}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.expiration).format(dateFormat)} <br />\n                  {(node.expired && !node.scheduleItemAttendance) ? <Badge color=\"danger\">{t(\"general.expired\")}</Badge> : ''}\n                </Table.Col>\n                <Table.Col>\n                  {/* TODO class info here */}\n                  { node.scheduleItemAttendance && <span>\n                    {moment(node.scheduleItemAttendance.date).format(dateFormat)} {\" \"}\n                    {moment(`${node.scheduleItemAttendance.date} ${node.scheduleItemAttendance.scheduleItem.timeStart}`)\n                      .format(timeFormat)} {\" \"}\n                    {\" - \"}\n                    {node.scheduleItemAttendance.scheduleItem.organizationClasstype.name} <br />\n                    <small className='text-muted'>\n                      {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                    </small>\n                    </span>}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditCreditDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCredits))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA = Yup.object().shape({\n  amount: Yup.number()\n    .required(t('yup.field_required'))\n    .min(1)\n    .max(200)\n  })\n\nexport const ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA = Yup.object().shape({\n  expiration: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditCreditBase({ t, history, match, children}) {\n  const activeTab = \"credits\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditCreditAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  returnUrl \n})   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{t('relations.account.subscriptions.credits.add')}</h5>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.amount')}>\n              <Field type=\"number\" \n                      name=\"amount\" \n                      className={(errors.amount) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"amount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAddForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, ADD_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditAddForm from \"./AccountSubscriptionEditCreditAddForm\"\n\n\nfunction AccountSubscriptionEditCreditAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const [addSubscriptionCredit] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          amount: 1,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_ADD_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionCredit({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              amount: parseInt(values.amount),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <AccountSubscriptionEditCreditAddForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from '../../../../../ui/CSDatePicker';\n\n\nfunction AccountSubscriptionEditCreditForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.credits.add')\n  } else {\n    title = t('relations.account.subscriptions.credits.edit')\n  }\n\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n        {/* TODO: Add expiration date field here */}\n          <Grid.Col>\n            <Form.Group label={t('general.expiration')}>\n              <CSDatePicker \n                className={(errors.expiration) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.expiration}\n                onChange={(date) => {\n                  setFieldValue(\"expiration\", date)\n                  setFieldTouched(\"expiration\", true)\n                }}\n                onBlur={() => setFieldTouched(\"expiration\", true)}\n              />\n              <ErrorMessage name=\"expiration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                  name=\"description\" \n                  className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { \n  GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, \n  GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY,\n  UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditCreditBase from \"./AccountSubscriptionEditCreditBase\"\nimport AccountSubscriptionEditCreditEditForm from \"./AccountSubscriptionEditCreditEditForm\"\n\n\nfunction AccountSubscriptionEditCreditEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/credits/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionCredit] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_CREDIT, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditCreditBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditCreditBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditCreditBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditCreditBase>\n    )\n  }\n\n  console.log('query data')\n  console.log(data)\n  const accountSubscriptionCredit = data.accountSubscriptionCredit\n\n\n  return (\n    <AccountSubscriptionEditCreditBase>\n      <Formik\n        initialValues={{ \n          expiration: new Date(accountSubscriptionCredit.expiration),\n          description: accountSubscriptionCredit.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_CREDIT_EDIT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionCredit({ variables: {\n            input: {\n              id: id,\n              expiration: dateToLocalISO(values.expiration),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_CREDITS_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n                accountId: accountId,\n                id: subscriptionId\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.credits.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditCreditEditForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditCreditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditCreditEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_FINANCE_INVOICE_ITEM_QUERY = gql`\nquery financeInvoiceItem($before: String, $after: String, $accountSubscription: ID!) {\n  financeInvoiceItems(before: $before, after: $after, accountSubscription:$accountSubscription, orderBy: [\"-finance_invoice__date_sent\"]) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        financeInvoice {\n          id\n          invoiceNumber\n          status\n          summary\n          dateSent\n          dateDue\n          total\n          balance\n        }\n        subscriptionYear\n        subscriptionMonth\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n// export const GET_ACCOUNT_SUBSCRIPTION_CREDIT_QUERY = gql`\n// query AccountSubscriptionCredit($id: ID!) {\n//   accountSubscriptionCredit(id:$id) {\n//     id\n//     accountSubscription {\n//       id\n//     }\n//     mutationType\n//     mutationAmount\n//     description\n//     createdAt\n//   }\n// }\n// `\n\n\n// export const DELETE_ACCOUNT_SUBSCRIPTION_CREDIT = gql`\n//   mutation DeleteAccountSubscriptionCredit($input: DeleteAccountSubscriptionCreditInput!) {\n//     deleteAccountSubscriptionCredit(input: $input) {\n//       ok\n//     }\n//   }\n// `\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from \"./queries\"\nimport { DELETE_FINANCE_INVOICE } from \"../../../../../finance/invoices/queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionInvoice] = useMutation(DELETE_FINANCE_INVOICE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"finance.invoices.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('finance.invoices.deleted'),\n          deleteFunction: deleteAccountSubscriptionInvoice,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: query_vars },\n              // { query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Table,\n  Text\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport FinanceInvoicesStatus from \"../../../../../ui/FinanceInvoiceStatus\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY } from './queries'\nimport CSLS from \"../../../../../../tools/cs_local_storage\"\nimport AccountSubscriptionEditInvoiceDelete from \"./AccountSubscriptionEditInvoiceDelete\"\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\nimport moment from 'moment';\n\n\nfunction AccountSubscriptionEditInvoices({t, location, match, history}) {  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"invoices\"\n\n  const pageHeaderButtonList = <ButtonAdd\n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/add`} \n    className=\"ml-2\"  \n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_FINANCE_INVOICE_ITEM_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  // Set back location for edit invoice\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n\n  const financeInvoiceItems = data.financeInvoiceItems\n  const pageInfo = data.financeInvoiceItems.pageInfo\n\n\n  // Empty list\n  if (!financeInvoiceItems.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n\n      <Card.Body>{t('relations.account.subscriptions.invoices.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: financeInvoiceItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.financeInvoiceItems.edges\n        const pageInfo = fetchMoreResult.financeInvoiceItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              financeInvoiceItems: {\n                __typename: previousResult.financeInvoiceItems.__typename,\n                edges: [ ...previousResult.financeInvoiceItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore}\n      returnUrl={returnUrl} \n      pageHeaderButtonList={pageHeaderButtonList}  \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.status')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.invoice_number')} & {t('finance.invoices.summary')}</Table.ColHeader>\n            <Table.ColHeader>{t('finance.invoices.date')} & {t('finance.invoices.due')}</Table.ColHeader>\n            {/* <Table.ColHeader>{t('finance.invoices.due')}</Table.ColHeader> */}\n            <Table.ColHeader>{t('general.total')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.balance')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {financeInvoiceItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  <FinanceInvoicesStatus status={node.financeInvoice.status} />\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.invoiceNumber} <br />\n                  <Text.Small color=\"gray\">{node.financeInvoice.summary.trunc(30)}</Text.Small>\n                </Table.Col>\n\n                <Table.Col key={v4()}>\n                  {moment(node.financeInvoice.dateSent).format('LL')} <br />\n                  {moment(node.financeInvoice.dateDue).format('LL')}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.totalDisplay}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.financeInvoice.balanceDisplay}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Button className='btn-sm' \n                          onClick={() => history.push(\"/finance/invoices/edit/\" + node.financeInvoice.id)}\n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                  <AccountSubscriptionEditInvoiceDelete id={node.financeInvoice.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoices))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA = Yup.object().shape({\n  financeInvoiceGroup: Yup.string()\n    .required(t('yup.field_required')),\n  subscriptionYear: Yup.number()\n    .required()\n    .positive()\n    .min(1000)\n    .max(9999),\n  subscriptionMonth: Yup.number()\n    .required()\n    .positive()\n    .min(1)\n    .max(12),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditInvoiceAddBase({ t, history, match, children}) {\n  const activeTab = \"invoices\"\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditInvoiceAddForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  const title = t('relations.account.subscriptions.invoices.add')\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Form.Group label={t('general.finance_invoice_group')}>\n          <Field component=\"select\" \n                name=\"financeInvoiceGroup\" \n                className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n            {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.summary')}>\n          <Field type=\"text\" \n                  name=\"summary\" \n                  className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n          <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_year')}>\n              <Field type=\"number\" \n                      name=\"subscriptionYear\" \n                      className={(errors.subscriptionYear) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionYear\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_month')}>\n              <Field type=\"number\" \n                      name=\"subscriptionMonth\" \n                      className={(errors.subscriptionMonth) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"subscriptionMonth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            className=\"pull-right\"\n            color=\"primary\"\n            disabled={isSubmitting}\n            type=\"submit\"\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button\n              type=\"button\" \n              color=\"link\" \n            >\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAddForm))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n// import { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"../../queries\"\nimport { GET_FINANCE_INVOICE_ITEM_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { CREATE_ACCOUNT_INVOICE } from \"../../../invoices/queries\"\nimport { ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA } from './yupSchema'\n\nimport AccountSubscriptionEditInvoiceAddBase from \"./AccountSubscriptionEditInvoiceAddBase\"\nimport AccountSubscriptionEditInvoiceAddForm from \"./AccountSubscriptionEditInvoiceAddForm\"\n\n\nfunction AccountSubscriptionEditInvoiceAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/invoices/`\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const [ addFinanceInvoice ] = useMutation(CREATE_ACCOUNT_INVOICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n    // Loading\n    if (queryLoading) return (\n      <AccountSubscriptionEditInvoiceAddBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </AccountSubscriptionEditInvoiceAddBase>\n    )\n    // Error\n    if (queryError) {\n      console.log(queryError)\n      return (\n        <AccountSubscriptionEditInvoiceAddBase>\n          <p>{t('general.error_sad_smiley')}</p>\n        </AccountSubscriptionEditInvoiceAddBase>\n      )\n    }\n    \n    console.log(queryData)\n\n  return (\n    <AccountSubscriptionEditInvoiceAddBase>\n      <Formik\n        initialValues={{ \n          financeInvoiceGroup: \"\",\n          summary: \"\",\n          subscriptionYear: new Date().getFullYear(), \n          subscriptionMonth: new Date().getMonth() + 1,\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_INVOICE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addFinanceInvoice({ variables: {\n            input: {\n              account: accountId,\n              accountSubscription: subscriptionId,\n              financeInvoiceGroup: values.financeInvoiceGroup,\n              subscriptionYear: values.subscriptionYear,\n              subscriptionMonth: values.subscriptionMonth,\n              summary: values.summary,\n            }\n          }, refetchQueries: [\n              {query: GET_FINANCE_INVOICE_ITEM_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n              // {query: GET_ACCOUNT_SUBSCRIPTION_QUERY, variables: {\n              //   accountId: accountId,\n              //   id: subscriptionId\n              // }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              const financeInvoiceId = data.createFinanceInvoice.financeInvoice.id\n              history.push(`/finance/invoices/edit/${financeInvoiceId}`)\n              toast.success((t('relations.account.subscriptions.invoices.toast_add_success')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n              toast.success((t('relations.account.subscriptions.invoices.toast_you_are_now_editing')), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditInvoiceAddForm\n            inputData={queryData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditInvoiceAddBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditInvoiceAdd))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY = gql`\nquery AccountSubscriptionPauses($before: String, $after: String, $accountSubscription: ID!) {\n  accountSubscriptionPauses(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        accountSubscription {\n          id\n        }\n        dateStart\n        dateEnd\n        description\n        createdAt\n      }\n    } \n  }\n}\n`\n\nexport const GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY = gql`\nquery AccountSubscriptionPause($id: ID!) {\n  accountSubscriptionPause(id:$id) {\n    id\n    accountSubscription {\n      id\n    }\n    dateStart\n    dateEnd\n    description\n  }\n}\n`\n\n\nexport const DELETE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation DeleteAccountSubscriptionPause($input: DeleteAccountSubscriptionPauseInput!) {\n    deleteAccountSubscriptionPause(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_ACCOUNT_SUBSCRIPTION_PAUSE, GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction AccountSubscriptionEditPauseDelete({t, match, history, id}) {\n  const subscriptionId = match.params.subscription_id\n  const [deleteAccountSubscriptionPause] = useMutation(DELETE_ACCOUNT_SUBSCRIPTION_PAUSE)\n  const query_vars = {\n    accountSubscription: subscriptionId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"relations.account.subscriptions.pauses.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('relations.account.subscriptions.pauses.delete_success'),\n          deleteFunction: deleteAccountSubscriptionPause,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../../context/AppSettingsContext'\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from './queries'\nimport AccountSubscriptionEditListBase from \"../AccountSubscriptionEditListBase\"\nimport AccountSubscriptionEditPauseDelete from \"./AccountSubscriptionEditPauseDelete\"\nimport moment from 'moment';\nimport ButtonAdd from '../../../../../ui/ButtonAdd';\n\n\nfunction AccountSubscriptionEditPauses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions`\n  const activeTab = \"pauses\"\n\n  const pageHeaderButtonList = <ButtonAdd \n    addUrl={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/add`} \n    className='ml-2'\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, {\n    variables: {\n      accountSubscription: subscriptionId\n    }\n  })\n  \n  if (loading) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {t(\"general.loading_with_dots\")}\n    </AccountSubscriptionEditListBase>\n  )\n  if (error) return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </AccountSubscriptionEditListBase>\n  )\n\n  const accountSubscriptionPauses = data.accountSubscriptionPauses\n  const pageInfo = data.accountSubscriptionPauses.pageInfo\n\n  // Empty list\n  if (!accountSubscriptionPauses.edges.length) { return (\n    <AccountSubscriptionEditListBase activeTab={activeTab} returnUrl={returnUrl} pageHeaderButtonList={pageHeaderButtonList} >\n      {/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n      <Card.Body>{t('relations.account.subscriptions.pauses.empty_list')}</Card.Body>\n    </AccountSubscriptionEditListBase>\n  )}\n  // const inputData = data\n  // const account = data.account\n  // const initialdata = data.accountSubscription\n\n  // let initialPaymentMethod = \"\"\n  // if (initialdata.financePaymentMethod) {\n  //   initialPaymentMethod = initialdata.financePaymentMethod.id\n  // }\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: accountSubscriptionPauses.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.accountSubscriptionPauses.edges\n        const pageInfo = fetchMoreResult.accountSubscriptionPauses.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              accountSubscriptionPauses: {\n                __typename: previousResult.accountSubscriptionPauses.__typename,\n                edges: [ ...previousResult.accountSubscriptionPauses.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <AccountSubscriptionEditListBase \n      activeTab={activeTab} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      returnUrl={returnUrl}\n      pageHeaderButtonList={pageHeaderButtonList} \n    >\n      <br />\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>{/* <div className=\"pull-right\">{buttonAdd}</div> */}\n      {/* <h5>{t('relations.account.subscriptions.pauses.title_list')}</h5> */}\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {accountSubscriptionPauses.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <AccountSubscriptionEditPauseDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </AccountSubscriptionEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauses))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  })","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport AccountSubscriptionEditBase from \"../AccountSubscriptionEditBase\"\n\n\nfunction AccountSubscriptionEditPauseBase({ t, history, match, children}) {\n  const activeTab = \"pauses\"\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  return (\n    <AccountSubscriptionEditBase activeTab={activeTab} returnUrl={returnUrl}>\n      {children}\n    </AccountSubscriptionEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction AccountSubscriptionEditPauseForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  let title\n  if ( formTitle === \"create\" ) {\n    title = t('relations.account.subscriptions.pauses.add')\n  } else {\n    title = t('relations.account.subscriptions.pauses.edit')\n  }\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <h5>{title}</h5>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst ADD_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation CreateAccountSubscriptionPause($input:CreateAccountSubscriptionPauseInput!) {\n    createAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const [addSubscriptionPause] = useMutation(ADD_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          description: \"\"\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addSubscriptionPause({ variables: {\n            input: {\n              accountSubscription: subscriptionId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY } from \"./queries\"\nimport { ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA } from './yupSchema'\nimport { dateToLocalISO } from '../../../../../../tools/date_tools'\n\nimport AccountSubscriptionEditPauseBase from \"./AccountSubscriptionEditPauseBase\"\nimport AccountSubscriptionEditPauseForm from \"./AccountSubscriptionEditPauseForm\"\n\n\nconst UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE = gql`\n  mutation UpdateAccountSubscriptionPause($input:UpdateAccountSubscriptionPauseInput!) {\n    updateAccountSubscriptionPause(input: $input) {\n      accountSubscriptionPause {\n        id\n      }\n    }\n  }\n`\n\n\nfunction AccountSubscriptionEditPauseEdit({ t, history, match }) {\n  const id = match.params.id\n  const accountId = match.params.account_id\n  const subscriptionId = match.params.subscription_id\n  const returnUrl = `/relations/accounts/${accountId}/subscriptions/edit/${subscriptionId}/pauses/`\n\n  const { loading, error, data, } = useQuery(GET_ACCOUNT_SUBSCRIPTION_PAUSE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateSubscriptionPause] = useMutation(UPDATE_ACCOUNT_SUBSCRIPTION_PAUSE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <AccountSubscriptionEditPauseBase>\n        <p>{t('general.loading_with_dots')}</p>\n    </AccountSubscriptionEditPauseBase>\n  )\n  // Error\n  if (error) {\n    return (\n      <AccountSubscriptionEditPauseBase>\n          { console.log(error) }\n          <p>{t('general.error_sad_smiley')}</p>\n      </AccountSubscriptionEditPauseBase>\n    )\n  }\n\n  const accountSubscriptionPause = data.accountSubscriptionPause\n\n  return (\n    <AccountSubscriptionEditPauseBase>\n      <Formik\n        initialValues={{ \n          dateStart: new Date(accountSubscriptionPause.dateStart),\n          dateEnd: new Date(accountSubscriptionPause.dateEnd),\n          description: accountSubscriptionPause.description\n        }}\n        validationSchema={ACCOUNT_SUBSCRIPTION_PAUSE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateSubscriptionPause({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              description: values.description\n            }\n          }, refetchQueries: [\n              {query: GET_ACCOUNT_SUBSCRIPTION_PAUSES_QUERY, variables: {\n                accountSubscription: subscriptionId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('relations.account.subscriptions.pauses.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <AccountSubscriptionEditPauseForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </AccountSubscriptionEditPauseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(AccountSubscriptionEditPauseEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY = gql`\n  query AccountInstructorProfileQuery($id: ID!) {\n    accountInstructorProfiles(account:$id) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          account {\n            id\n          }\n          classes\n          appointments\n          events\n          role\n          education\n          bio\n          urlBio\n          urlWebsite   \n        }\n      }\n    }\n    account(id:$id) {\n      id\n      instructor\n      firstName\n      lastName\n      email\n      phone\n      mobile\n      isActive\n      urlImageThumbnailSmall\n    }\n  }\n`\n\n\nexport const UPDATE_ACCOUNT_INSTRUCTOR_PROFILE = gql`\n  mutation UpdateAccountInstructorProfile($input:UpdateAccountInstructorProfileInput!) {\n    updateAccountInstructorProfile(input: $input) {\n      accountInstructorProfile {\n        id\n      }\n    }\n  }\n`\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA = Yup.object().shape({\n  classes: Yup.boolean(),  \n  appointments: Yup.boolean(),  \n  events: Yup.boolean(),  \n  role: Yup.string(),\n  education: Yup.string(),\n  bio: Yup.string(),\n  urlBio: Yup.string()\n    .url(t('yup.url')),\n  urlWebsite: Yup.string()\n    .url(t('yup.url')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\nconst RelationsAccountInstructorProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"classes\" \n                  checked={values.classes} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.classes')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"classes\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"events\" \n                  checked={values.events} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.events')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"events\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"appointments\" \n                  checked={values.appointments} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('relations.account.instructor_profile.appointments')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"appointments\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.role')}>\n              <Field type=\"text\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.education')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"education\"\n              initialValue={values.education}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"education\", true)\n                setFieldValue(\"education\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"education\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('general.bio')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"bio\"\n              initialValue={values.bio}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldTouched(\"bio\", true)\n                setFieldValue(\"bio\", e.target.getContent())\n              }}\n            />\n          <ErrorMessage name=\"bio\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_bio')}>\n              <Field type=\"text\" \n                      name=\"urlBio\" \n                      className={(errors.urlBio) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlBio\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.instructor_profile.url_website')}>\n              <Field type=\"text\" \n                      name=\"urlWebsite\" \n                      className={(errors.urlWebsite) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"urlWebsite\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfileForm))\n\n","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, UPDATE_ACCOUNT_INSTRUCTOR_PROFILE } from './queries'\nimport { ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA } from './yupSchema'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport RelationsAccountProfileForm from \"./RelationsAccountInstructorProfileForm\"\nimport RelationsAccountProfileBase from '../RelationsAccountProfileBase'\n\n\nfunction RelationsAccountInstructorProfile({ t, match}) {\n  const accountId = match.params.account_id\n  const activeLink = \"instructor_profile\"\n  const { loading, error, data } = useQuery(GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, {\n    variables: { id: accountId },\n    fetchPolicy: \"network-only\"\n  })\n  const [updateAccountInstructorProfile] = useMutation(UPDATE_ACCOUNT_INSTRUCTOR_PROFILE)\n\n  if (loading) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>  \n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  if (error) return (\n    <RelationsAccountProfileBase activeLink={activeLink}>\n      {console.log(error)}\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </RelationsAccountProfileBase>\n  )\n\n  const account = data.account\n  const initialData = data.accountInstructorProfiles.edges[0].node\n\n  return (\n    <RelationsAccountProfileBase\n      user={account}\n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('relations.accounts.profile')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={{ \n            classes: initialData.classes, \n            appointments: initialData.appointments, \n            events: initialData.events, \n            role: initialData.role, \n            education: initialData.education, \n            bio: initialData.bio,\n            urlBio: initialData.urlBio,\n            urlWebsite: initialData.urlWebsite,\n          }}\n          validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              updateAccountInstructorProfile({ variables: {\n                input: {\n                  account: initialData.account.id,\n                  classes: values.classes, \n                  appointments: values.appointments, \n                  events: values.events, \n                  role: values.role, \n                  education: values.education, \n                  bio: values.bio,\n                  urlBio: values.urlBio,\n                  urlWebsite: values.urlWebsite,\n                }\n              }, refetchQueries: [\n                  // Refresh local cached results for this account instructor profile\n                  {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: accountId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsAccountProfileForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>    \n      </Card>\n    </RelationsAccountProfileBase>\n  )\n}\n\n\n// class RelationsAccountInstructorProfile extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Organization profile props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const account_id = match.params.account_id\n//     console.log(account_id)\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Container>\n//             <Query query={GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY} variables={{ id: account_id }} >\n//               {({ loading, error, data, refetch }) => {\n//                   // Loading\n//                   if (loading) return <p>{t('general.loading_with_dots')}</p>\n//                   // Error\n//                   if (error) {\n//                     console.log(error)\n//                     return <p>{t('general.error_sad_smiley')}</p>\n//                   }\n\n//                   console.log('query data')\n//                   console.log(data)\n                  \n//                   const account = data.account\n//                   const initialData = data.accountInstructorProfiles.edges[0].node\n//                   console.log(initialData)\n\n\n//                   return (\n//                     <div>\n//                       <Page.Header title={account.firstName + \" \" + account.lastName}>\n//                         <RelationsAccountsBack />\n//                       </Page.Header>\n//                       <Grid.Row>\n//                         <Grid.Col md={9}>\n//                         <Card>\n//                           <Card.Header>\n//                             <Card.Title>{t('relations.account.instructor_profile.title')}</Card.Title>\n//                             {console.log(match.params.account_id)}\n//                           </Card.Header>\n//                         <Mutation mutation={UPDATE_ACCOUNT_INSTRUCTOR_PROFILE}> \n//                          {(updateAccountInstructorProfile, { data }) => (\n//                           <Formik\n//                             initialValues={{ \n//                               classes: initialData.classes, \n//                               appointments: initialData.appointments, \n//                               events: initialData.events, \n//                               role: initialData.role, \n//                               education: initialData.education, \n//                               bio: initialData.bio,\n//                               urlBio: initialData.urlBio,\n//                               urlWebsite: initialData.urlWebsite,\n//                             }}\n//                             validationSchema={ACCOUNT_INSTRUCTOR_PROFILE_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n//                                 console.log('submit values:')\n//                                 console.log(values)\n\n//                                 updateAccountInstructorProfile({ variables: {\n//                                   input: {\n//                                     account: initialData.account.id,\n//                                     classes: values.classes, \n//                                     appointments: values.appointments, \n//                                     events: values.events, \n//                                     role: values.role, \n//                                     education: values.education, \n//                                     bio: values.bio,\n//                                     urlBio: values.urlBio,\n//                                     urlWebsite: values.urlWebsite,\n//                                   }\n//                                 }, refetchQueries: [\n//                                     // Refresh local cached results for this account instructor profile\n//                                     {query: GET_ACCOUNT_INSTRUCTOR_PROFILE_QUERY, variables: {id: account_id}}\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data)\n//                                     toast.success((t('relations.account.instructor_profile.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     setSubmitting(false)\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <RelationsAccountProfileForm\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                               />\n//                             )}\n//                           </Formik>\n//                         )}\n//                       </Mutation>\n//                     </Card>\n//                     </Grid.Col>                                    \n//                     <Grid.Col md={3}>\n//                       <ProfileCardSmall user={account}/>\n//                       <ProfileMenu \n//                         activeLink='instructor_profile'\n//                         account_id={account_id}\n//                       /> \n//                     </Grid.Col>\n//                   </Grid.Row>\n//                 </div>\n//               )}}\n//             </Query>\n//           </Container>\n//         </div>\n//     </SiteWrapper>\n//     )}\n//   }\n\n\nexport default withTranslation()(withRouter(RelationsAccountInstructorProfile))","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let queryVars = {}\n\n  let search = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SEARCH)\n  let showArchived = localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)\n  \n  if (search) {\n    queryVars.name = search\n  }\n  if (showArchived === \"true\") {\n    queryVars.archived = true\n  } else {\n    queryVars.archived = false\n  }\n  \n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n    Page,\n    Grid,\n    Container,\n  } from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport InputSearch from \"../../general/InputSearch\"\nimport { get_list_query_variables } from \"./tools\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport SiteWrapper from \"../../SiteWrapper\"\n\n\nconst RelationsB2BBase = ({t, history, refetch, children }) => (\n  <SiteWrapper>\n    <div className=\"my-3 my-md-5\">\n      <Container>\n        <Page.Header title={t(\"relations.title\")}>\n          <div className=\"page-options d-flex\">\n            <InputSearch \n              initialValueKey={CSLS.RELATIONS_BUSINESSES_SEARCH}\n              placeholder=\"Search...\"\n              onChange={(value) => {\n                console.log(value)\n                localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SEARCH, value)\n                refetch(get_list_query_variables())\n              }}\n            />\n            <ButtonAdd addUrl=\"/relations/b2b/add\" className='ml-2 '/>\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </div>\n  </SiteWrapper>\n)\n\n\n  export default withTranslation()(withRouter(RelationsB2BBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_BUSINESSES_QUERY = gql`\n  query Businesses($before:String, $after:String, $name:String, $archived: Boolean!) {\n    businesses(first:15, before:$before, after:$after, b2b:true, name_Icontains:$name, archived:$archived) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          b2b\n          supplier\n          vip\n          name\n          address\n          postcode\n          city\n          country\n          phone\n          phone2\n          emailContact\n          emailBilling\n          registration\n          taxRegistration\n          mollieCustomerId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_BUSINESS_QUERY = gql`\n  query Business($id: ID!) {\n    business(id:$id) {\n      id\n      archived\n      supplier\n      vip\n      name\n      address\n      postcode\n      city\n      country\n      phone\n      phone2\n      emailContact\n      emailBilling\n      registration\n      taxRegistration\n      mollieCustomerId\n    }\n  }\n`\n\nexport const UPDATE_BUSINESS = gql`\n  mutation UpdateBusiness($input: UpdateBusinessInput!) {\n    updateBusiness(input: $input) {\n      business {\n        id\n        archived\n      }\n    }\n  }\n`\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ContentCard from \"../../general/ContentCard\"\nimport RelationsB2BBase from \"./RelationsB2BBase\"\nimport { GET_BUSINESSES_QUERY, UPDATE_BUSINESS } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\n\n\nconst DELETE_BUSINESS = gql`\n  mutation DeleteBusiness($input: DeleteBusinessInput!) {\n    deleteBusiness(input: $input) {\n      ok\n    }\n  }\n`\n\n\nfunction RelationsB2B({ t, history }) {\n  // Set some initial value for archived, if not found\n  if (!localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE)) {\n    localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false) \n  }\n\n  // Go back to the listing, clear any other paths in the local storage\n  localStorage.removeItem(CSLS.RELATIONS_BUSINESS_EDIT_RETURN)\n\n  // Fetch data\n  const { loading, error, data, fetchMore, refetch } = useQuery(GET_BUSINESSES_QUERY, { \n    variables: get_list_query_variables()\n  })\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const [deleteBusiness] = useMutation(DELETE_BUSINESS)\n\n  const headerOptions = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard>\n        {t(\"general.loading_with_dots\")}\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n  if (error) return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}>\n        <p>{t('relations.b2b.error_loading')}</p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )\n\n  let businesses = data.businesses\n\n  // Empty list\n  if (!businesses.edges.length) { return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                   headerContent={headerOptions}>\n        <p>\n          {(localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") ? \n            t('relations.b2b.empty_archive') : \n            t(\"relations.b2b.empty_list\")}\n        </p>\n      </ContentCard>\n    </RelationsB2BBase>\n  )}\n\n  return (\n    <RelationsB2BBase refetch={refetch}>\n      <ContentCard cardTitle={t('relations.b2b.title')}\n                    headerContent={headerOptions}\n                    hasCardBody={false}\n                    pageInfo={businesses.pageInfo}\n                    onLoadMore={() => {\n                      fetchMore({\n                        variables: {\n                          after: businesses.pageInfo.endCursor\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                          const newEdges = fetchMoreResult.businesses.edges\n                          const pageInfo = fetchMoreResult.businesses.pageInfo \n\n                          return newEdges.length\n                            ? {\n                                // Put the new businesses at the end of the list and update `pageInfo`\n                                // so we have the new `endCursor` and `hasNextPage` values\n                                businesses: {\n                                  __typename: previousResult.businesses.__typename,\n                                  edges: [ ...previousResult.businesses.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {data.businesses.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {(node.vip) ? <span>\n                      <Badge color=\"warning\" className=\"mr-1\"><Icon name=\"star\"/> {t(\"general.vip\")}</Badge>\n                    </span> : null}\n                    {(node.supplier) ? <span>\n                      <Badge color=\"primary\" className=\"mr-1\">{t(\"general.supplier\")}</Badge>\n                    </span> : null}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    {(node.archived) ? \n                      <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <Link to={`/relations/b2b/${node.id}/edit`}>\n                        <Button className='btn-sm' \n                                color=\"secondary\">\n                          {t('general.edit')}\n                        </Button>\n                      </Link>\n                    }\n                    {/* Archive / restore buttons */}\n                    <button className=\"icon btn btn-link btn-sm\" \n                      title={t('general.archive')} \n                      href=\"\"\n                      onClick={() => {\n                        let id = node.id\n                        let show_archive\n                        if (localStorage.getItem(CSLS.RELATIONS_BUSINESSES_SHOW_ARCHIVE) === \"true\") {\n                          show_archive = true\n                        } else {\n                          show_archive = false\n                        }\n\n                        updateBusiness({ variables: {\n                          input: {\n                            id,\n                            archived: !node.archived // invert, as we need the opposite from the list currently displayed\n                          }}, \n                          refetchQueries: [\n                        {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]}).then(({ data }) => {\n                          toast.success(\n                            (!show_archive) ? t('relations.b2b.archived'): t('relations.b2b.restored'), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error);\n                        })\n                        }}>\n                      {\n                        (!node.archived) ?\n                          <Icon prefix=\"fa\" name=\"inbox\" /> :\n                          t(\"general.restore\")\n                      }\n                    </button>\n\n                  {/* Delete button shown when archived */}\n                    {\n                      (!node.archived) ? '' :\n                        <button className=\"icon btn btn-link btn-sm\" \n                          title={t('general.delete')} \n                          href=\"\"\n                          onClick={() => {\n                            confirm_delete({\n                              t: t,\n                              msgConfirm: t(\"relations.b2b.delete_confirm_msg\"),\n                              msgDescription: <span><br /><br /><ul><li>{node.name}</li></ul></span>,\n                              msgSuccess: t('relations.b2b.deleted'),\n                              deleteFunction: deleteBusiness,\n                              functionVariables: { variables: {\n                                input: {\n                                  id: node.id\n                                }\n                              }, refetchQueries: [\n                                {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                              ]}\n                            })\n                          }}\n                        >\n                          <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n                        </button>\n                    }\n                    </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>  \n    </RelationsB2BBase>  \n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2B))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst RelationsB2BAddFrom = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(RelationsB2BAddFrom))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport { GET_BUSINESSES_QUERY } from './queries'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack';\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BAddForm from \"./RelationB2BAddForm\"\n\n\nconst ADD_BUSINESS = gql`\n  mutation CreateBusiness($input:CreateBusinessInput!) {\n    createBusiness(input: $input) {\n      business {\n        id\n      }\n    }\n  }\n`\n\nconst returnUrl = \"/relations/b2b\"\n\nfunction RelationsB2BAdd({ t, history }) {\n  const [addBusiness] = useMutation(ADD_BUSINESS)\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('relations.title')} >\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n            <Card>\n              <Card.Header>\n                <Card.Title>{t('relations.b2b.title_add')}</Card.Title>\n              </Card.Header>\n                <Formik\n                    initialValues={{ name: '' }}\n                    // validationSchema={B2BADD_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        addBusiness({ variables: {\n                          input: {\n                            name: values.name,\n                            b2b: true\n                          }\n                        }, refetchQueries: [\n                            {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()}\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data)\n                            const businessId = data.createBusiness.business.id\n                            history.push(`/relations/b2b/${businessId}/edit`)\n                            toast.success((t('relations.b2b.toast_add_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, errors }) => (\n                        <RelationsB2BAddForm\n                          isSubmitting={isSubmitting}\n                          errors={errors}\n                          returnUrl={returnUrl}\n                        />\n                    )}\n                </Formik>\n            </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nfunction RelationsB2BEditMenu({t, businessId, activeLink}) {\n    return (\n      <List.Group transparent={true}>     \n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/relations/b2b/\" + businessId + \"/edit\"}\n            icon=\"home\"\n            active={(activeLink === 'edit')}\n        >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            permission=\"view\"\n            resource=\"financeinvoice\">\n            <List.GroupItem\n                key={v4()}\n                className=\"d-flex align-items-center\"\n                to={\"#/relations/b2b/\" + businessId + \"/invoices\"}\n                icon=\"file-text\"\n                active={(activeLink === 'invoices')}\n                >\n            {t('general.invoices')}\n            </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n  )\n}\n\nexport default withTranslation()(RelationsB2BEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\nimport RelationsB2BEditMenu from './RelationsB2BEditMenu'\n\n\nfunction RelationsB2BEditBase({ \n  t, match, history, children, pageTitle=\"\", activeLink=\"\", returnUrl=\"/relations/b2b\", pageHeaderButtonList=\"\" \n}) {\n  const businessId = match.params.business_id\n  const titleB2B = t(\"relations.b2b.title\")\n\n  returnUrl = localStorage.getItem(CSLS.RELATIONS_BUSINESS_EDIT_RETURN)\n  if (!returnUrl) {\n    returnUrl = '/relations/b2b'\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={`${titleB2B} - ${pageTitle}`}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl} />\n              { pageHeaderButtonList }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={9}>\n              {children}\n            </Grid.Col> \n            <Grid.Col md={3}>\n              <RelationsB2BEditMenu businessId={businessId} activeLink={activeLink} />\n            </Grid.Col>                               \n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\nimport ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nfunction RelationsB2BEditForm({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) {\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"vip\" \n                  checked={values.vip} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.vip')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"vip\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"supplier\" \n                  checked={values.supplier} \n                />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('general.supplier')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"supplier\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.email_contact')}>\n              <Field type=\"text\" \n                      name=\"emailContact\" \n                      className={(errors.emailContact) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailContact\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.email_billing')}>\n              <Field type=\"text\" \n                      name=\"emailBilling\" \n                      className={(errors.emailBilling) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"emailBilling\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('general.phone2')}>\n              <Field type=\"text\" \n                      name=\"phone2\" \n                      className={(errors.phone2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                      name=\"postcode\" \n                      className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                    name=\"country\" \n                    className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"country\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('finance.invoices.relation_company_registration')}>\n              <Field type=\"text\" \n                      name=\"registration\" \n                      className={(errors.registration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"registration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n          <Form.Group label={t('finance.invoices.relation_company_tax_registration')}>\n              <Field type=\"text\" \n                      name=\"taxRegistration\" \n                      className={(errors.taxRegistration) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"taxRegistration\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            // className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          \n          {/* <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n              {t('general.cancel')}\n          </Button> */}\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(RelationsB2BEditForm))\n\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_BUSINESSES_QUERY, GET_BUSINESS_QUERY, UPDATE_BUSINESS } from './queries'\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\nimport RelationsB2BEditBase from './RelationsB2BEditBase'\nimport RelationsB2BEditForm from \"./RelationsB2BEditForm\"\n\n// \n// import ProfileMenu from \"./ProfileMenu\"\n\nfunction RelationsB2BEdit({ t, match, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'edit'\n  const cardTitle = t('relations.b2b.title_edit')\n  const [updateBusiness] = useMutation(UPDATE_BUSINESS)\n  const { loading, error, data } = useQuery(GET_BUSINESS_QUERY, {\n    variables: {\n      id: businessId\n    }\n  })\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body><Dimmer active={true} loader={true} /></Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const initialData = data.business\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={initialData.name}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            vip: initialData.vip,\n            supplier: initialData.supplier,\n            name: initialData.name,\n            phone: initialData.phone,\n            phone2: initialData.phone2,\n            address: initialData.address,\n            postcode: initialData.postcode,\n            city: initialData.city,\n            country: initialData.country,\n            emailBilling: initialData.emailBilling,\n            emailContact: initialData.emailContact,\n            registration: initialData.registration,\n            taxRegistration: initialData.taxRegistration\n          }}\n          // validationSchema={ACCOUNT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let input_vars = {\n                id: businessId,\n                vip: values.vip,\n                supplier: values.supplier,\n                name: values.name,\n                phone: values.phone,\n                phone2: values.phone2,\n                address: values.address,\n                postcode: values.postcode,\n                city: values.city,\n                country: values.country,\n                emailBilling: values.emailBilling,\n                emailContact: values.emailContact,\n                registration: values.registration,\n                taxRegistration: values.taxRegistration\n              }\n\n              updateBusiness({ variables: {\n                input: input_vars\n              }, refetchQueries: [\n                  // Refetch list\n                  {query: GET_BUSINESSES_QUERY, variables: get_list_query_variables()},\n                  // Refresh local cached results for this account\n                  {query: GET_BUSINESS_QUERY, variables: {\"id\": businessId}}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('relations.b2b.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <RelationsB2BEditForm\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_INVOICES_QUERY = gql`\n  query FinanceInvoices($after: String, $before: String, $status: CostasiellaFinanceInvoiceStatusChoices, $business: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, status: $status, business: $business) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InvoiceInputValues($after: String, $before: String, $business: ID!) {\n    financeInvoiceGroups(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    business(id: $business) {\n      id\n      name\n    }\n  }\n`\n\nexport const CREATE_B2B_INVOICE = gql`\n  mutation CreateFinanceInvoice($input: CreateFinanceInvoiceInput!) {\n    createFinanceInvoice(input: $input) {\n      financeInvoice {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport ContentCard from '../../../general/ContentCard';\nimport FinanceInvoicesList from '../../../finance/invoices/FinanceInvoicesList'\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\nimport { GET_INVOICES_QUERY } from './queries'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\nfunction RelationsB2BInvoices({ t, match, location, history}) {\n  const businessId = match.params.business_id\n  const activeLink = 'invoices'\n  const cardTitle = t('finance.invoices.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_INVOICES_QUERY, {\n    variables: {\n      business: businessId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const pageHeaderButtonList = <ButtonAdd \n    className='ml-2'\n    addUrl={`/relations/b2b/${businessId}/invoices/add`} \n  />\n\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.loading_with_dots')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={cardTitle}>\n        <Card.Body>{t('general.error_sad_smiley')}</Card.Body>\n      </Card>\n    </RelationsB2BEditBase>\n  }\n\n  const business = data.business\n  const invoices = data.financeInvoices\n  \n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('relations.b2b.invoices.empty_list')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n    )\n  } \n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={cardTitle}\n        hasCardBody={false}\n        pageInfo={invoices.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: invoices.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.financeInvoices.edges\n              const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new invoices at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    financeInvoices: {\n                      __typename: previousResult.financeInvoices.__typename,\n                      edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} \n      >\n        <FinanceInvoicesList \n          invoices={invoices} \n          showColRelation={true}\n        />\n      </ContentCard>\n    </RelationsB2BEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from \"uuid\"\n\nimport {\n  Card,\n  Form,\n} from \"tabler-react\";\n\nimport ButtonFormCancel from '../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../ui/ButtonFormSubmit'\n\n\nconst B2BInvoiceAddForm = ({ t, inputData, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Form.Group label={t('general.finance_invoice_group')}>\n        <Field component=\"select\" \n              name=\"financeInvoiceGroup\" \n              className={(errors.financeInvoiceGroup) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n          {/* <option value=\"\" key={v4()}>{t('general.please_select')}</option> */}\n          {inputData.financeInvoiceGroups.edges.map(({ node }) =>\n            <option value={node.id} key={v4()}>{node.name}</option>\n          )}\n        </Field>\n        <ErrorMessage name=\"financeInvoiceGroup\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.summary')}>\n        <Field type=\"text\" \n                name=\"summary\" \n                className={(errors.summary) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"summary\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n    </Card.Body>\n    <Card.Footer>\n      <ButtonFormSubmit disabled={isSubmitting} />\n      <ButtonFormCancel returnUrl={returnUrl} />\n    </Card.Footer>\n  </FoForm>\n)\n\n\nexport default withTranslation()(withRouter(B2BInvoiceAddForm))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_INPUT_VALUES_QUERY, CREATE_B2B_INVOICE, GET_INVOICES_QUERY } from './queries'\nimport B2BInvoiceAddForm from './RelationsB2BInvoiceAddForm'\nimport RelationsB2BEditBase from '../RelationsB2BEditBase'\n\n\nfunction RelationsB2BInvoiceAdd({ t, match, history }) {\n  const businessId = match.params.business_id\n  const activeLink = \"invoices\"\n  const cardTitle = t('relations.b2b.invoices.title_add')\n  const returnUrl = `/relations/b2b/${businessId}/invoices`\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n      variables: {\n        business: businessId\n      }\n    }\n  )\n  const [createInvoice] = useMutation(CREATE_B2B_INVOICE, {\n    // onCompleted = () => history.push('/finance/invoices/edit/')\n  }) \n\n  // Query\n  // Loading\n  if (loading) {\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loader={true} active={true} />\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  // Error\n  if (error) {\n    console.log(error)\n    return <RelationsB2BEditBase activeLink={activeLink} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <p>{t('general.error_sad_smiley')}</p>\n          </Card.Body>\n        </Card>\n      </RelationsB2BEditBase>\n  }\n  \n  const business = data.business\n  const financeInvoiceGroups = data.financeInvoiceGroups\n  const firstInvoiceGroup = financeInvoiceGroups && financeInvoiceGroups.edges && financeInvoiceGroups.edges[0].node.id\n\n\n  return (\n    <RelationsB2BEditBase activeLink={activeLink} pageTitle={business.name} returnUrl={returnUrl}>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{\n            financeInvoiceGroup: firstInvoiceGroup,\n            summary: \"\"\n          }}\n          // validationSchema={INVOICE_GROUP_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            createInvoice({ variables: {\n              input: {\n                business: businessId, \n                financeInvoiceGroup: values.financeInvoiceGroup,\n                summary: values.summary\n              }\n            }, refetchQueries: [\n              {query: GET_INVOICES_QUERY, variables: {business: businessId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('relations.b2b.invoices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                history.push('/finance/invoices/edit/' + data.createFinanceInvoice.financeInvoice.id)\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n            }}\n        >\n          {({ isSubmitting, errors, values, submitForm, setFieldTouched, setFieldValue }) => (\n            <B2BInvoiceAddForm\n              inputData={data}\n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              submitForm={submitForm}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            >\n            </B2BInvoiceAddForm>   \n          )}\n        </Formik>\n      </Card>\n    </RelationsB2BEditBase>\n\n    // <SiteWrapper>\n    //   <div className=\"my-3 my-md-5\">\n    //     <Container>\n    //       <Page.Header title={account.firstName + \" \" + account.lastName} />\n    //       <Grid.Row>\n    //           <Grid.Col md={9}>\n                \n    //           </Grid.Col>\n    //           <Grid.Col md={3}>\n    //             <ProfileMenu \n    //               activeLink='invoices'\n    //               accountId={match.params.account_id}\n    //             />\n    //           </Grid.Col>\n    //         </Grid.Row>\n    //       </Container>\n    //   </div>\n    // </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(RelationsB2BInvoiceAdd))\n","import React, {Component } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport HomeItemButton from \"../../ui/HomeItemButton\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\n\nclass ScheduleHome extends Component {\n  constructor(props) {\n    super(props)\n    console.log(\"Schedule home props:\")\n    console.log(props)\n  }\n\n  render() {\n    const t = this.props.t\n    const linkTitle = t('general.manage')\n\n    return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                <Grid.Row>\n                  <HasPermissionWrapper\n                    resource=\"scheduleclass\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6} md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.classes.title\")}</h5>\n                          {t(\"schedule.classes.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/classes\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleevent\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.events.title\")}</h5>\n                          {t(\"schedule.events.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/events\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  <HasPermissionWrapper\n                    resource=\"scheduleshift\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col xs={12} sm={6}  md={3} lg={3}>\n                      <Card>\n                        <Card.Body>\n                          <h5>{t(\"schedule.shifts.title\")}</h5>\n                          {t(\"schedule.shifts.explanation\")}\n                          <br /><br />\n                          <HomeItemButton linkTitle={linkTitle} link=\"/schedule/shifts\" />\n                        </Card.Body>\n                      </Card>\n                    </Grid.Col>\n                  </HasPermissionWrapper>\n                  {/* <HasPermissionWrapper\n                    resource=\"scheduleappointment\"\n                    permission=\"view\"\n                  >\n                    <Grid.Col md={3} lg={3}>\n                      <Link to='/schedule/appointments')}>\n                        <StampCard header={<small>{t('schedule.appointments.title')}</small>} footer={t('')} color=\"blue\" icon=\"calendar\" />\n                      </div>\n                    </Grid.Col>\n                  </HasPermissionWrapper> */}\n                </Grid.Row>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapper>\n    )}\n  }\n\n\nexport default withTranslation()(withRouter(ScheduleHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n} from \"tabler-react\"\n\nfunction ButtonListWeekChooser({ t, className, onClickPrevious=f=>f, onClickNext=f=>f, onClickCurrent=f=>f, showCurrent=true}) {\n  return (\n    <Button.List className={className}>\n      <Button \n        icon=\"chevron-left\"\n        color=\"secondary\"\n        onClick={ onClickPrevious }\n      />\n      { showCurrent && \n      <Button \n        icon=\"sunset\"\n        color=\"secondary\"\n        onClick={ onClickCurrent }\n      /> }\n      <Button \n        icon=\"chevron-right\"\n        color=\"secondary\"\n        onClick={ onClickNext }\n      />\n    </Button.List> \n  )\n}\n\nexport default withTranslation()(withRouter(ButtonListWeekChooser))","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleClassesFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION))\n  let [classtype, setClasstype] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE))\n  let [instructor, setInstructor] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR))\n  let [level, setLevel] = useState(getDefaultValue(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL))\n\n  return (\n    <div className=\"mb-4\">\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n              setLocation(\"\")\n              setInstructor(\"\")\n              setClasstype(\"\")\n              setLevel(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.reset_filter\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12}>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Classtypes */}\n          <select \n            className={selectClass}\n            value={classtype}\n            onChange={ (event) => {\n              setClasstype(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_classtypes\")}</option>\n            {data.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            value={instructor}\n            onChange={ (event) => {\n              setInstructor(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col xs={12}>\n          {/* Levels */}\n          <select \n            className={selectClass}\n            value={level}\n            onChange={ (event) => {\n              setLevel(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_CLASSES_FILTER_LEVEL,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.classes.filter_all_levels\")}</option>\n            {data.organizationLevels.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </div>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesFilter))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Page,\n  Grid,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport ButtonAdd from '../../ui/ButtonAdd';\nimport ButtonListWeekChooser from '../../ui/ButtonListWeekChooser';\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassesFilter from \"./ScheduleClassesFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClassesBase ({ t, history, children, data, refetch }) {\n  function onClickPrevious() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickNext() {\n    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n    \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n    refetch(get_list_query_variables())\n  }\n\n  function onClickCurrent() {\n    let currentWeekFrom = moment()\n    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n    \n    refetch(get_list_query_variables())\n  }\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.classes.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <ButtonListWeekChooser \n                className=\"schedule-list-page-options-btn-list\"\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n                onClickCurrent={onClickCurrent}\n              />\n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleclass\">\n                <ButtonAdd addUrl={\"/schedule/classes/add\"} className=\"ml-2\" />\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n          <Grid.Col md={12}>\n            {(data) ? \n              <ScheduleClassesFilter data={data} refetch={refetch} />\n            : \"\"}\n            {children}\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { confirmAlert } from 'react-confirm-alert'\nimport { toast } from 'react-toastify'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport { capitalize } from '../../../tools/string_tools'\nimport BadgePublic from '../../ui/BadgePublic'\nimport ScheduleClassesBase from './ScheduleClassesBase'\n\nimport { GET_CLASSES_QUERY } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_class_status,\n  represent_instructor \n} from './tools'\n\nimport moment from 'moment'\n\n\nconst DELETE_SCHEDULE_CLASS = gql`\n  mutation DeleteScheduleClass($input: DeleteScheduleClassInput!) {\n    deleteScheduleClass(input: $input) {\n      ok\n    }\n  }\n`\n\n\nconst confirm_delete = ({t, msgConfirm, msgDescription, msgSuccess, deleteFunction, functionVariables}) => {\n  confirmAlert({\n    customUI: ({ onClose }) => {\n      return (\n        <div key={v4()} className='custom-ui'>\n          <h1>{t('general.confirm_delete')}</h1>\n          {msgConfirm}\n          {msgDescription}\n          <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('general.confirm_delete_no')}</button>\n          <button\n            className=\"btn btn-danger\"\n            onClick={() => {\n              deleteFunction(functionVariables)\n                .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success(\n                    msgSuccess, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error);\n                })\n              onClose()\n            }}\n          >\n            <Icon name=\"trash-2\" /> {t('general.confirm_delete_yes')}\n          </button>\n        </div>\n      )\n    }\n  })\n}\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleClasses ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleClass] = useMutation(DELETE_SCHEDULE_CLASS)\n\n  if (loading) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassesBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleClassesBase>\n    )\n  }\n\n  const classes = data.scheduleClasses\n       \n  // Empty list\n  if (!classes.length) { return (\n    <ScheduleClassesBase>\n      <p>\n        {t('schedule.classes.empty_list')}\n      </p>\n    </ScheduleClassesBase>\n  )} \n\n  return (\n    <ScheduleClassesBase data={data} refetch={refetch}>\n      { data.scheduleClasses.map(({ date, classes }) => (\n        <React.Fragment key={v4()}>\n          <h3>\n            {capitalize(moment(date).format(\"dddd\"))} {' '}\n            <small className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n            </small>\n          </h3>\n          {!(classes.length) ? <Card>\n              <Card.Body>\n                <h5>{t('schedule.classes.empty_list')} <i className=\"fa fa-beach\"/></h5>\n              </Card.Body>\n            </Card> \n          :\n            classes.map((\n              { scheduleItemId, \n                frequencyType,\n                date, \n                status,\n                holiday,\n                holidayName,\n                description,\n                account, \n                role,\n                account2,\n                role2,\n                organizationLocationRoom, \n                organizationClasstype, \n                organizationLevel,\n                timeStart, \n                timeEnd,\n                spaces,\n                countAttendingAndBooked,\n                displayPublic }) => (\n                  <Card key={v4()}>\n                    <Card.Body>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              <h5>\n                                {represent_class_status(status)}\n                                <span className='mr-2'>\n                                {/* Class type */}\n                                {organizationClasstype.name} { ' ' }\n                                {/* Start & end time */}\n                                {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                                </span>\n                                {organizationLevel && <small className=\"text-muted\">\n                                  {organizationLevel.name}\n                                </small>}\n                              </h5>\n                            </Grid.Col>\n                          </Grid.Row>\n                          <Grid.Row>\n                            <Grid.Col xs={12}>\n                              {/* Instructor(s) */}\n                              { (account) ? \n                                  represent_instructor(account.fullName, role) : \n                                  <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                              } <br />\n                              <small className=\"text-muted\">\n                                {(account2) ? represent_instructor(account2.fullName, role2) : \"\"}\n                              </small>\n                            </Grid.Col>\n                            <Grid.Col xs={12}>\n                              {/* Location */}\n                              <Icon name=\"home\" /> {organizationLocationRoom.organizationLocation.name} \n                              <small className=\"text-muted\"> | {organizationLocationRoom.name}</small>\n                            </Grid.Col>\n                          </Grid.Row>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          <Dropdown\n                            key={v4()}\n                            className=\"float-right\"\n                            type=\"link\"\n                            position=\"left\"\n                            toggle={false}\n                            // color=\"secondary\"\n                            // triggerClassName=\"btn btn-pill btn-outline-primary btn-sm \"\n                            triggerContent={                                \n                              <Button \n                                outline\n                                color=\"primary\"\n                                size=\"sm\"\n                              > \n                                <span className=\"d-xs-none\">{t(\"general.manage\")}</span>\n                                <span className=\"d-sm-none d-md-none d-lg-none d-xl-none\"><Icon name=\"more-vertical\" /></span>\n                              </Button>\n                            }\n                            items={[\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"check-circle\"\n                                  >\n                                      {t(\"general.attendance\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemattendance\">\n                                <Link to={'/schedule/classes/class/attendance_chart/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"bar-chart-2\">\n                                      {t(\"schedule.classes.class.attendance_chart.title\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                                <Link to={'/schedule/classes/class/edit/' + scheduleItemId + '/' + date}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    icon=\"edit-3\"\n                                  >\n                                    {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <Link to={'/schedule/classes/all/edit/' + scheduleItemId}>\n                                  <Dropdown.Item\n                                    key={v4()}\n                                    badge={t('schedule.classes.all_classes_in_series')}\n                                    badgeType=\"secondary\"\n                                    icon=\"edit-3\"\n                                  >\n                                      {t(\"general.edit\")}\n                                  </Dropdown.Item>\n                                </Link>\n                              </HasPermissionWrapper>,\n                              <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleclass\">\n                                <Dropdown.ItemDivider key={v4()} />\n                                <span className=\"text-red\">\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.classes.all_classes_in_series')}\n                                  badgeType=\"danger\"\n                                  icon=\"trash-2\"\n                                  onClick={() => {\n                                    confirm_delete({\n                                      t: t,\n                                      msgConfirm: t(\"schedule.classes.delete_confirm_msg\"),\n                                      msgDescription: <p key={v4()}>\n                                        {moment(date + ' ' + timeStart).format('LT')} {' - '}\n                                        {moment(date + ' ' + timeEnd).format('LT')} {' '} @ {' '}\n                                        {organizationLocationRoom.organizationLocation.name} {' '}\n                                        {organizationLocationRoom.name}\n                                        {organizationClasstype.Name}\n                                        </p>,\n                                      msgSuccess: t('schedule.classes.deleted'),\n                                      deleteFunction: deleteScheduleClass,\n                                      functionVariables: { variables: {\n                                        input: {\n                                          id: scheduleItemId\n                                        }\n                                      }, refetchQueries: [\n                                        { query: GET_CLASSES_QUERY, variables: get_list_query_variables() }\n                                      ]}\n                                    })\n                                  }}>\n                                {t(\"general.delete\")}\n                                </Dropdown.Item>\n                                </span>\n                              </HasPermissionWrapper>\n                            ]}\n                            />\n                        </Grid.Col>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Grid.Col xs={9} sm={9} md={10}>\n                          <div className=\"mt-1\">\n                            <BadgePublic className=\"mr-2\" isPublic={displayPublic} />\n                            {(frequencyType === 'SPECIFIC') ? \n                              <Badge color=\"primary\" className=\"mr-2\">{t('general.once')}</Badge> : \n                              null } \n                            {(frequencyType === 'LAST_WEEKDAY_OF_MONTH') ? \n                              <Badge color=\"success\" className=\"mr-2\">{t('general.monthly')}</Badge> : \n                              null } \n                            {(status === \"CANCELLED\") ? \n                              <Badge color=\"warning\" className=\"mr-2\">{t('general.cancelled')}</Badge> : \n                              null } \n                              <small className=\"text-muted\"><br />{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                          </div>\n                        </Grid.Col>\n                        <Grid.Col xs={3} sm={3} md={2}>\n                          {/* Attendance */}\n                          <HasPermissionWrapper permission=\"view\" resource=\"scheduleitemattendance\">\n                            <Link to={'/schedule/classes/class/attendance/' + scheduleItemId + '/' + date}>\n                              <small className='float-right mt-1'><Icon name=\"users\" /> {countAttendingAndBooked}/{spaces}</small>\n                            </Link>\n                          </HasPermissionWrapper>\n                        </Grid.Col>\n                      </Grid.Row>\n                    </Card.Body>\n                  </Card>\n                )\n            )}\n        </React.Fragment >\n      ))}\n    </ScheduleClassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClasses))\n\n//     <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         <Query query={GET_CLASSES_QUERY} variables={get_list_query_variables()}>\n//           {({ loading, error, data, refetch }) => {\n//             // Loading\n//             if (loading) return (\n//               <Container>\n//                 <p>{t('general.loading_with_dots')}</p>\n//               </Container>\n//             )\n//             // Error\n//             if (error) {\n//               console.log(error)\n//               return (\n//                 <Container>\n//                   <p>{t('general.error_sad_smiley')}</p>\n//                 </Container>\n//               )\n//             }\n//             const headerOptions = <Card.Options>\n//               {/* <Button color={(!archived) ? 'primary': 'secondary'}  \n//                       size=\"sm\"\n//                       onClick={() => {archived=false; refetch({archived});}}>\n//                 {t('general.current')}\n//               </Button>\n//               <Button color={(archived) ? 'primary': 'secondary'} \n//                       size=\"sm\" \n//                       className=\"ml-2\" \n//                       onClick={() => {archived=true; refetch({archived});}}>\n//                 {t('general.archive')}\n//               </Button> */}\n//             </Card.Options>\n            \n//             // Empty list\n//             if (!data.scheduleClasses.length) { return (\n//               <ContentCard cardTitle={t('schedule.classes.title')}\n//                             headerContent={headerOptions}\n//                             hasCardBody={true}>\n//                 <p>\n//                   {t('schedule.classes.empty_list')}\n//                 </p>\n//               </ContentCard>\n//             )} else {   \n\n//             console.log(data)\n//             // Life's good! :)\n//             return (\n//               <Container>\n//                 <Page.Header title={t(\"schedule.title\")}>\n//                   <div className=\"page-options d-flex\">\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n//                       <Button \n//                         icon=\"home\"\n//                         tooltip=\"text\"\n//                         className=\"mr-2\"\n//                         color={\n//                           ((localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY))) ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"location\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n//                       <Button \n//                         icon=\"clock\"\n//                         className=\"mr-2\"\n//                         color={\n//                           (localStorage.getItem(CSLS.SCHEDULE_CLASSES_ORDER_BY) === \"starttime\") ?\n//                           \"azure\" : \"secondary\"\n//                         }\n//                         onClick={() => {\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_ORDER_BY, \"starttime\")\n//                           refetch(get_list_query_variables())\n//                         }}\n//                       />\n//                     </span>\n//                     <CSDatePicker \n//                       className=\"form-control schedule-list-csdatepicker mr-2\"\n//                       selected={new Date(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM))}\n//                       isClearable={false}\n//                       onChange={(date) => {\n//                         let nextWeekFrom = moment(date)\n//                         let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                         console.log(get_list_query_variables())\n\n//                         refetch(get_list_query_variables())\n//                       }}\n//                       placeholderText={t('schedule.classes.go_to_date')}\n//                     />\n//                     <Button.List className=\"schedule-list-page-options-btn-list\">\n//                       <Button \n//                         icon=\"chevron-left\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).subtract(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"sunset\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let currentWeekFrom = moment()\n//                           let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                          \n//                           refetch(get_list_query_variables())\n//                       }} />\n//                       <Button \n//                         icon=\"chevron-right\"\n//                         color=\"secondary\"\n//                         onClick={ () => {\n//                           let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_CLASSES_DATE_FROM)).add(7, 'days')\n//                           let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                          \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n//                           localStorage.setItem(CSLS.SCHEDULE_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n//                           refetch(get_list_query_variables())\n//                       }} />\n//                     </Button.List> \n//                   </div>\n//                 </Page.Header>\n//                 <Grid.Row>\n//                   <Grid.Col md={9}>\n//                     {\n                      \n//                       ))}\n//                 </Grid.Col>\n//                 <Grid.Col md={3}>\n//                   <HasPermissionWrapper permission=\"add\"\n//                                         resource=\"scheduleclass\">\n//                     <Button color=\"primary btn-block mb-1\"\n//                             onClick={() => history.push(\"/schedule/classes/add\")}>\n//                       <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.add')}\n//                     </Button>\n//                   </HasPermissionWrapper>\n//                   <div>\n//                     <Button\n//                       className=\"pull-right\"\n//                       color=\"link\"\n//                       size=\"sm\"\n//                       onClick={() => {\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_CLASSTYPE, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LEVEL, \"\")\n//                         localStorage.setItem(CSLS.SCHEDULE_CLASSES_FILTER_LOCATION, \"\")\n//                         refetch(get_list_query_variables())\n//                       }}\n//                     >\n//                       {t(\"general.clear\")}\n//                     </Button>\n//                   </div>\n//                   <h5 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h5>\n//                   <ScheduleClassesFilter data={data} refetch={refetch} />\n//               </Grid.Col>\n//             </Grid.Row>\n//           </Container>\n//         )}}}\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//   )\n// }\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const CLASS_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationClasstype: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .typeError(t('yup.date_required'))\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    spaces: Yup.number()\n      .required(t('yup.field_required')),\n    walkInSpaces: Yup.number()\n      .required(t('yup.field_required')),\n    enrollmentSpaces: Yup.number()\n      .required(t('yup.field_required')),\n  })\n","import React, { useContext } from 'react'\nimport DatePicker from \"react-datepicker\"\nimport { withTranslation } from 'react-i18next'\n\nimport AppSettingsContext from '../context/AppSettingsContext'\n\nfunction CSTimePicker({t, selected, onChange=f=>f, onBlur=f=>f, className=\"form-control\", clearable=true, placeholderText=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  return (\n    <DatePicker \n      dateFormat={timeFormat}\n      selected={selected}\n      placeholderText={(placeholderText) ? placeholderText : t('datepicker.placeholder_time')}\n      isClearable={clearable}\n      showTimeSelect\n      showTimeSelectOnly\n      timeIntervals={15}\n      timeCaption={t(\"general.time\")}\n      className={className}\n      dropdownMode=\"select\"\n      onChange={(date) => onChange(date)}\n      onBlur={() => onBlur()}\n    />\n  )\n}\n\nexport default withTranslation()(CSTimePicker)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleClassForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n            <option value=\"LAST_WEEKDAY_OF_MONTH\" key={v4()}>{t('schedule.classes.select_last_weekday_of_month')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_enrollments')}>\n              <Field type=\"text\" \n                    name=\"enrollmentSpaces\" \n                    className={(errors.enrollmentSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"enrollmentSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ScheduleClassAddBase({t, children}) {\n  const returnUrl = \"/schedule/classes\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"general.classes\")}>\n            <div className='page-options d-flex'>\n              <ButtonBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_INPUT_VALUES_QUERY, CREATE_CLASS } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { CLASS_SCHEMA } from './yupSchema'\nimport ScheduleClassForm from './ScheduleClassForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleClassAddBase from './ScheduleClassAddBase'\n\n\nfunction ScheduleClassAdd({t, history}) {\n  const cardTitle = t('schedule.classes.title_add')\n  const returnUrl = \"/schedule/classes\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleClass ] = useMutation(CREATE_CLASS)\n  \n\n  if (loading) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleClassAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleClassAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationClasstype: \"\",\n            organizationLevel: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n            spaces: \"\",\n            walkInSpaces: \"\",\n            enrollmentSpaces: 0\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleClass({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval && parseInt(frequencyInterval),\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  const classId = data.createScheduleClass.scheduleItem.id\n                  history.push(`/schedule/classes/all/edit/${classId}`)\n                  toast.success((t('schedule.classes.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleClassForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleClassForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleClassAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_CLASS = gql`\nmutation UpdateScheduleClass($input:UpdateScheduleClassInput!) {\n  updateScheduleClass(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ClassEditMenu = ({ t, activeLink, classId }) => (\n    <List.Group transparent={true}>\n        <List.GroupItem\n            key={v4()}\n            className=\"d-flex align-items-center\"\n            to={\"#/schedule/classes/all/edit/\" + classId}\n            icon=\"edit-3\"\n            active={activeLink === 'edit'}\n            >\n            {t('general.edit')}\n        </List.GroupItem>\n        <HasPermissionWrapper \n            resource=\"scheduleitemaccount\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/instructors/\" + classId}\n              icon=\"users\"\n              active={activeLink === 'instructors'}\n              >\n              {t('general.instructors')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemenrollment\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/enrollments/\" + classId}\n              icon=\"check-square\"\n              active={activeLink === 'enrollments'}\n              >\n              {t('general.enrollments')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemprice\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/prices/\" + classId}\n              icon=\"copy\"\n              active={activeLink === 'prices'}\n              >\n              {t('schedule.classes.prices.title')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationsubscriptiongroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/subscriptions/\" + classId}\n              icon=\"edit\"\n              active={activeLink === 'subscriptions'}\n              >\n              {t('general.subscriptions')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemorganizationclasspassgroup\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/all/classpasses/\" + classId}\n              icon=\"credit-card\"\n              active={activeLink === 'classpasses'}\n              >\n              {t('general.classpasses')}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n    </List.Group>\n);\n\nexport default withTranslation()(ClassEditMenu)\n\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ClassEditMenu from './ClassEditMenu'\n\n\nfunction ClassEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const classId = match.params.class_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className='page-options d-flex'>\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ClassEditMenu activeLink={menuActiveLink} classId={classId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClassEditBaseBase))","import moment from 'moment'\n\nimport { getWeekdayNames } from '../../../../tools/date_tools'\n\nexport function class_edit_all_subtitle({t, location, locationRoom, classtype, starttime, dateStart, frequencyType, frequencyInterval}) {\n  const weekdayNames = getWeekdayNames(t)\n\n  // Weekday for type single\n  let isoWeekday\n  if (frequencyType === \"SINGLE\") {\n    isoWeekday = moment(dateStart).isoWeekday()\n  } else {\n    // Weekly (recurring)\n    isoWeekday = frequencyInterval\n  }\n\n  const weekdayName = weekdayNames[isoWeekday-1]\n\n  // return t('general.class') + ': ' + location + ' (' + locationRoom + ') - ' + classtype + ' @ ' +  moment(starttime).format('LT')\n  return t('general.class') + ': ' + weekdayName + ' ' + moment(starttime).format('LT') + ' - ' + classtype + ' - ' + location + ' [' + locationRoom + ']'\n}\n\nexport function represent_instructor_role(t, role) {\n  console.log(role)\n  switch (role) {\n    case \"SUB\":\n      return t('schedule.classes.instructor_roles.sub')\n    case \"ASSISTANT\":\n      return t('schedule.classes.instructor_roles.assistant')\n    case \"KARMA\":\n      return t('schedule.classes.instructor_roles.karma')\n    default:\n      return \"\"\n  }\n}\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_CLASS_QUERY } from \"../queries\"\n\nimport ClassEditBaseBase from './ClassEditBaseBase'\nimport { class_edit_all_subtitle } from \"./tools\"\n\n\nfunction ClassEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const classId = match.params.class_id\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, { variables: {\n    id: classId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.classes.title_edit')\n  }\n\n  if (loading) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ClassEditBaseBase>\n  )\n\n  if (error) return (\n    <ClassEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = class_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    classtype: initialValues.organizationClasstype.name,\n    starttime: initialTimeStart,\n    dateStart: initialValues.dateStart,\n    frequencyType: initialValues.frequencyType,\n    frequencyInterval: initialValues.frequencyInterval\n  })\n\n  return (\n    <ClassEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ClassEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ClassEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_CLASSES_QUERY, GET_CLASS_QUERY } from '../../queries'\nimport { UPDATE_CLASS } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { CLASS_SCHEMA } from '../../yupSchema'\nimport ScheduleClassForm from '../../ScheduleClassForm'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ClassEditBase from '../ClassEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassEditAll({t, match}) {\n  const id = match.params.class_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/classes\"\n  const cardTitle = t('schedule.classes.title_edit')\n  const { loading, error, data } = useQuery(GET_CLASS_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleClass ] = useMutation(UPDATE_CLASS)\n\n  const pageHeaderButtonList = <ButtonBack returnUrl=\"/schedule/classes\" />\n\n  if (loading) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  let initialLevelID = \"\"\n  if (initialValues.organizationLevel) {\n    initialLevelID = initialValues.organizationLevel.id\n  }\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialValues.displayPublic,\n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationClasstype: initialValues.organizationClasstype.id,\n            organizationLevel: initialLevelID,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n            spaces: initialValues.spaces,\n            walkInSpaces: initialValues.walkInSpaces,\n            enrollmentSpaces: initialValues.enrollmentSpaces,\n            infoMailEnabled: initialValues.infoMailEnabled,\n            infoMailContent: initialValues.infoMailContent\n          }}\n          validationSchema={CLASS_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleClass({ variables: {\n                input: {\n                  id: id,\n                  displayPublic: values.displayPublic,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: parseInt(frequencyInterval),\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationClasstype: values.organizationClasstype,\n                  organizationLevel: values.organizationLevel,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                  spaces: parseInt(values.spaces),\n                  walkInSpaces: parseInt(values.walkInSpaces),\n                  enrollmentSpaces: parseInt(values.enrollmentSpaces),\n                  infoMailEnabled: values.infoMailEnabled,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  {query: GET_CLASSES_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.classes.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleClassForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ClassEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEditAll))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\nconst ClassEditBack = ({ t, className }) => (\n  <ButtonBack returnUrl=\"/schedule/classes\" className={className} />\n)\n\nexport default withTranslation()(ClassEditBack)","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ScheduleClassEnrollmentDelete from \"./ScheduleClassEnrollmentDelete\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\nimport ButtonEdit from '../../../../ui/ButtonEdit'\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassEnrollments({ t, match, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const [showCurrent, setShowCurrent] = useState(true)\n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('general.enrollments')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, {\n      variables: getEnrollmentsListQueryVariables(scheduleItemId)\n    }\n  )\n\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN, location.pathname)\n\n//   const headerOptions = <Card.Options>\n//   <div className='float-right'>\n//     <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n//     <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n//     {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n//   </div>\n// </Card.Options>\n\n  const ButtonAddEnrollment = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemenrollment\">\n    <ButtonAdd addUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/search`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddEnrollment}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.enrollments.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const scheduleItem = data.scheduleItem\n  const enrollments = scheduleItem.enrollments\n  const countEnrollments = enrollments.edges.length\n\n  const headerOptions = <Card.Options>\n    <div className='mr-2'>\n      <Badge color=\"success\">{countEnrollments} {t(\"schedule.classes.enrollments.enrolled\")}</Badge> {\" \"}\n      <Badge color=\"default\">{scheduleItem.enrollmentSpaces - countEnrollments} {t(\"schedule.classes.enrollments.available_enrollment_spaces\")}</Badge> {\" \"}\n    </div>\n    <Button color={(showCurrent) ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              setShowCurrent(true); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.current')}\n    </Button>\n    <Button color={(!showCurrent) ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              setShowCurrent(false); \n              let queryVars = getEnrollmentsListQueryVariables(scheduleItemId, true)\n              console.log(queryVars)\n              refetch(queryVars); \n            }}\n    >\n      {t('general.ended')}\n    </Button>\n  </Card.Options>\n\n  // Empty list\n  if (!enrollments.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <p>{t('schedule.classes.enrollments.empty_list')}</p>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={enrollments.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: enrollments.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItem.enrollments.edges\n                        const pageInfo = fetchMoreResult.scheduleItem.enrollments.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.scheduleItem.enrollments.__typename,\n                                  edges: [ ...previousResult.scheduleItem.enrollments.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.subscription')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {enrollments.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col>\n                    {node.accountSubscription.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.accountSubscription.organizationSubscription.name}\n                  </Table.Col>\n                  <Table.Col>\n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col>\n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\">\n                    {/* Edit */}\n                    <ButtonEdit editUrl={`/schedule/classes/all/enrollments/${scheduleItemId}/edit/${node.id}`} />\n                    {/* Delete */}\n                    <ScheduleClassEnrollmentDelete node={node} />\n                    {/* <ScheduleClassEnrollmentsDelete node={node} /> */}                            \n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollments))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String,\n    $instructor: Boolean,\n    $employee: Boolean\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true,\n      instructor: $instructor,\n      employee: $employee\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\n\n\nfunction ScheduleClassEnrollmentsSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH))\n  \n  const scheduleItemId = match.params.class_id\n  const cardTitle = t('schedule.classes.enrollments.search.title')\n  const menuActiveLink = \"enrollments\"\n  \n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(searchName)\n    }\n  )\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_SEARCH, value)\n        setSearchName(value)\n        refetch(getAccountsQueryVariables(value))\n      }}\n    />\n  </Card.Options>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ButtonBack returnUrl={`/schedule/classes/all/enrollments/${scheduleItemId}`} />\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Alert type=\"danger\">{t('schedule.classes.enrollments.search.error_loading')}</Alert>\n      </Card.Body>\n    </ClassEditBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n\n  // No search name entered\n  if (!searchName) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.classes.enrollments.search.search_to_find_customers_to_enroll')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  // Empty list / No search results\n  if (!accounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.classes.enrollments.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ClassEditBase>\n  )\n\n  \n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryEnrollmentsData: {\n                                scheduleItemEnrollments: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <Link to={`/schedule/classes/all/enrollments/${scheduleItemId}/options/${node.id}`}>\n                    <Button color=\"secondary\">\n                      {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </Link>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentsSearch))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react';\n\nimport CSLS from '../../../../../tools/cs_local_storage';\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY, GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, CREATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\nimport ButtonBack from '../../../../ui/ButtonBack';\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentAdd({ t, history, match }) {\n  const accountId = match.params.account_id\n  const classId = match.params.class_id\n  const accountSubscriptionId = match.params.account_subscription_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/options/${accountId}`\n  const nextUrl = localStorage.getItem(CSLS.SCHEDULE_CLASSES_ENROLLMENT_RETURN) || `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_add')\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: accountSubscriptionId}\n  })\n  const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  const account = data.accountSubscription.account\n  const accountSubscription = data.accountSubscription\n  const using = t(\"general.using\")\n  cardTitle = `${cardTitle} ${account.fullName} ${using} ${accountSubscription.organizationSubscription.name}`\n  \n  // TODO: Add account subscription to sent values\n  \n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassEnrollment({ variables: {\n              input: {\n                scheduleItem: classId,\n                accountSubscription: accountSubscriptionId,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(nextUrl)\n                toast.success((t('schedule.classes.enrollments.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassEnrollmentBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/enrollments/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, UPDATE_SCHEDULE_ITEM_ENROLLMENT } from './queries'\nimport { SCHEDULE_CLASS_ENROLLMENT_SCHEMA } from './yupSchema'\nimport ScheduleClassEnrollmentForm from './ScheduleClassEnrollmentForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassEnrollmentBack from \"./ScheduleClassEnrollmentBack\"\nimport { getEnrollmentsListQueryVariables } from \"./tools\"\n\n\nfunction ScheduleClassEnrollmentEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}`\n  let cardTitle = t('schedule.classes.enrollments.title_edit')\n  const menuActiveLink = \"enrollments\"\n  const pageHeaderButtonList = <ScheduleClassEnrollmentBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleClassEnrollment] = useMutation(UPDATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const using = t(\"general.using\")\n  cardTitle = `\n    ${cardTitle}  \n    ${data.scheduleItemEnrollment.accountSubscription.account.fullName} \n    ${using} \n    ${data.scheduleItemEnrollment.accountSubscription.organizationSubscription.name}\n  `\n\n  const scheduleItemEnrollment = data.scheduleItemEnrollment\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (scheduleItemEnrollment.dateStart) {\n    dateStart = new Date(scheduleItemEnrollment.dateStart)\n  }\n  \n  let dateEnd = null\n  if (scheduleItemEnrollment.dateEnd) {\n    dateEnd = new Date(scheduleItemEnrollment.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"enrollments\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n        }}\n        validationSchema={SCHEDULE_CLASS_ENROLLMENT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassEnrollment({ variables: {\n              input: {\n                id: match.params.id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_ENROLLMENTS_QUERY, variables: getEnrollmentsListQueryVariables(classId)},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.enrollments.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassEnrollmentForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassEnrollmentForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentEdit))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n// import SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassEnrollSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions\n}) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col md={4}>\n        {console.log(subscription)}\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {moment(subscription.dateStart).format(dateFormat)}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.enroll.subscription_not_allowed') :\n            <Link to={`/schedule/classes/all/enrollments/${classId}/add/${accountId}/${subscription.accountSubscription.id}`}>\n              <Button \n                block \n                outline \n                color=\"success\" \n              >\n                {t(\"general.enroll\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Link>\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollSubscriptions))\n\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Dimmer, Grid } from 'tabler-react';\n\nimport ScheduleClassEnrollSubscriptions from \"./ScheduleClassEnrollSubscriptions\"\nimport { GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY } from './queries'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ScheduleClassEnrollmentOptions({ t, history, match }) {\n  const classId = match.params.class_id\n  const accountId = match.params.account_id\n  const returnUrl = `/schedule/classes/all/enrollments/${classId}/search`\n  const menuActiveLink = \"enrollments\" \n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n  const { loading, error, data } = useQuery(GET_SCHEDULE_ITEM_ENROLLMENT_OPTIONS_QUERY, {\n    variables: {\n      account: accountId,\n      scheduleItem: classId,\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [addScheduleClassEnrollment] = useMutation(CREATE_SCHEDULE_ITEM_ENROLLMENT)\n\n  if (loading) return (\n    <ClassEditBase\n    defaultCard={false}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer loader={true} active={true} />\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n  \n  const account = data.account\n  const subscriptions = data.scheduleClassEnrollmentOptions.subscriptions\n\n  \n  return (\n    <ClassEditBase\n      defaultCard={false}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <h4>{t('schedule.classes.enrollments.enrollment_options_for')} {account.fullName}</h4>\n      <Grid.Row cards deck>\n        <ScheduleClassEnrollSubscriptions subscriptions={subscriptions} />\n      </Grid.Row>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassEnrollmentOptions))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\n\nconst FormHelp = ({ t, message }) => (\n    <span className=\"form-help\" \n          data-toggle=\"popover\" \n          data-placement=\"top\" \n          data-content={message} \n          data-original-title=\"\" \n          title={message} \n          aria-describedby={'popover23432'}>\n        ?\n    </span>\n)\n\nexport default withTranslation()(FormHelp)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassClasspassForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.classpasses.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={(values.shopBook)}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { (values.shopBook) ? <div>\n                <Text.Small>{t('schedule.classes.classpasses.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.classpasses.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassClasspassForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_CLASSPASS_SCHEMA = Yup.object().shape({\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_CLASSPASSES_QUERY = gql`\n  query ScheduleItemOrganizationClasspassGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationClasspassGroups(before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationClasspassGroup {\n            id\n            name\n          }\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_CLASSPASS = gql`\n  mutation UpdateScheduleItemOrganizationClasspassGroup($input: UpdateScheduleItemOrganizationClasspassGroupInput!) {\n    updateScheduleItemOrganizationClasspassGroup(input:$input) {\n      scheduleItemOrganizationClasspassGroup {\n        id\n      } \n    }\n  }\n`","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassClasspassForm from \"./ScheduleClassClasspassForm\"\n\nimport { SCHEDULE_CLASS_CLASSPASS_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, UPDATE_SCHEDULE_CLASS_CLASSPASS } from \"./queries\"\n\n\nfunction ScheduleClassClasspasses({ t, match }) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"classpasses\"\n  const cardTitle = t('schedule.classes.classpasses.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_CLASSPASSES_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassClasspass ] = useMutation(UPDATE_SCHEDULE_CLASS_CLASSPASS)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationClasspassGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.classpasses.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      defaultCard={false} \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n      hasCardBody={false}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n          const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemOrganizationClasspassGroups: {\n                    __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n                    edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.classpass_group')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {node.organizationClasspassGroup.name}\n                </Table.Col>\n                <Table.Col>\n                <Formik\n                    initialValues={{  \n                      shopBook: node.shopBook,\n                      attend: node.attend\n                    }}\n                    validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n                        console.log(values)\n\n                        updateScheduleClassClasspass({ variables: {\n                            input: {\n                              id: node.id,\n                              shopBook: values.shopBook,\n                              attend: values.attend\n                            }\n                          }, refetchQueries: [\n                            { query: GET_SCHEDULE_CLASS_CLASSPASSES_QUERY,\n                              variables: { scheduleItem: classId }\n                            }],\n                          // Mutation is \"complete\" when refetchQueries finish\n                          awaitRefetchQueries: true\n                        })\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                            setSubmitting(false)\n                          })\n                    }}\n                    >\n                    {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                      <ScheduleClassClasspassForm\n                        isSubmitting={isSubmitting}\n                        setSubmitting={setSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                        submitForm={submitForm}\n                      >\n                        {console.log(errors)}\n                        {console.log(values)}\n                        test\n                      </ScheduleClassClasspassForm>\n                    )}\n                </Formik>\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassClasspasses extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule classs classpasses props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const classId = match.params.class_id\n\n//     const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemclasspass\">\n//       <Link to={\"/schedule/classes/all/classpasses/\" + classId + \"/add\" } >\n//         <Button color=\"primary btn-block mb-6\">\n//         <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('schedule.classes.classpasses.add')}\n//         </Button>\n//       </Link>\n//     </HasPermissionWrapper>\n\n//     return (\n//       <SiteWrapper>\n//       <div className=\"my-3 my-md-5\">\n//         {console.log('ID here:')}\n//         {console.log(classId)}\n//         <Query query={GET_SCHEDULE_CLASS_CLASSPASSES_QUERY} variables={{ scheduleItem: classId }}>\n//           {({ loading, error, data, refetch, fetchMore }) => {\n  \n//             // Loading\n//             if (loading) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <Dimmer active={true} loader={true} />\n//               </ClassEditBase>\n//             )\n//             // Error\n//             if (error) return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.error_loading')}</p>\n//               </ClassEditBase>\n//             )\n  \n//             const initialTimeStart = TimeStringToJSDateOBJ(data.scheduleItem.timeStart)\n//             const subtitle = class_edit_all_subtitle({\n//               t: t,\n//               location: data.scheduleItem.organizationLocationRoom.organizationLocation.name,\n//               locationRoom: data.scheduleItem.organizationLocationRoom.name,\n//               classtype: data.scheduleItem.organizationClasstype.name,\n//               starttime: initialTimeStart\n//             })\n  \n//             // Empty list\n//             if (!data.scheduleItemOrganizationClasspassGroups.edges.length) { return (\n//               <ClassEditBase menu_activeLink=\"classpasses\" card_title={t('schedule.classes.classpasses.title')} sidebar_button={ButtonAdd}>\n//                 <p>{t('schedule.classes.classpasses.empty_list')}</p>\n//               </ClassEditBase>\n//             )} else {   \n//             // Life's good! :)\n//               return (\n//                 <ClassEditBase \n//                   menu_activeLink=\"classpasses\" \n//                   default_card={false} \n//                   subtitle={subtitle}\n//                   sidebar_button={ButtonAdd}\n//                 >\n//                 <ContentCard \n//                   cardTitle={t('schedule.classes.title_edit')}\n//                   // headerContent={headerOptions}\n//                   pageInfo={data.scheduleItemOrganizationClasspassGroups.pageInfo}\n//                   onLoadMore={() => {\n//                   fetchMore({\n//                     variables: {\n//                       after: data.scheduleItemOrganizationClasspassGroups.pageInfo.endCursor\n//                     },\n//                     updateQuery: (previousResult, { fetchMoreResult }) => {\n//                       const newEdges = fetchMoreResult.scheduleItemOrganizationClasspassGroups.edges\n//                       const pageInfo = fetchMoreResult.scheduleItemOrganizationClasspassGroups.pageInfo\n  \n//                       return newEdges.length\n//                         ? {\n//                             // Put the new locations at the end of the list and update `pageInfo`\n//                             // so we have the new `endCursor` and `hasNextPage` values\n//                             data: { \n//                               scheduleItemOrganizationClasspassGroups: {\n//                                 __typename: previousResult.scheduleItemOrganizationClasspassGroups.__typename,\n//                                 edges: [ ...previousResult.scheduleItemOrganizationClasspassGroups.edges, ...newEdges ],\n//                                 pageInfo\n//                               }\n//                             }\n//                           }\n//                         : previousResult\n//                       }\n//                     })\n//                   }} >\n//                   <div>\n//                     <Table>\n//                       <Table.Header>\n//                         <Table.Row>\n//                           <Table.ColHeader>{t('general.classpass')}</Table.ColHeader>\n//                           <Table.ColHeader></Table.ColHeader>\n//                         </Table.Row>\n//                       </Table.Header>\n//                       <Table.Body>\n//                         {data.scheduleItemOrganizationClasspassGroups.edges.map(({ node }) => (\n//                           <Table.Row key={v4()}>\n//                             {console.log(node)}\n//                             <Table.Col key={v4()}> \n//                               {node.organizationClasspassGroup.name}\n//                             </Table.Col>\n//                             <Table.Col>\n//                             <Mutation mutation={UPDATE_SCHEDULE_CLASS_CLASSPASS}> \n//                               {(updateScheduleClassClasspass, { data }) => (\n//                                 <Formik\n//                                     initialValues={{  \n//                                       shopBook: node.shopBook,\n//                                       attend: node.attend\n//                                     }}\n//                                     validationSchema={SCHEDULE_CLASS_CLASSPASS_SCHEMA}\n//                                     onSubmit={(values, { setSubmitting }) => {\n//                                         console.log(values)\n\n//                                         updateScheduleClassClasspass({ variables: {\n//                                           input: {\n//                                             id: node.id,\n//                                             shopBook: values.shopBook,\n//                                             attend: values.attend\n//                                           }\n//                                         }, refetchQueries: [\n//                                             // {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                             // {query: GET_CLASSPASSES_QUERY, variables: {\"archived\": false }},\n//                                         ]})\n//                                         .then(({ data }) => {\n//                                             console.log('got data', data);\n//                                             toast.success((t('schedule.classes.classpasses.toast_edit_success')), {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             setSubmitting(false)\n//                                           }).catch((error) => {\n//                                             toast.error((t('general.toast_server_error')) +  error, {\n//                                                 position: toast.POSITION.BOTTOM_RIGHT\n//                                               })\n//                                             console.log('there was an error sending the query', error)\n//                                             setSubmitting(false)\n//                                           })\n//                                     }}\n//                                     >\n//                                     {({ isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n//                                       <ScheduleClassClasspassForm\n//                                         isSubmitting={isSubmitting}\n//                                         setFieldTouched={setFieldTouched}\n//                                         setFieldValue={setFieldValue}\n//                                         errors={errors}\n//                                         values={values}\n//                                         submitForm={submitForm}\n//                                       >\n//                                         {console.log(errors)}\n//                                         {console.log(values)}\n//                                         test\n//                                       </ScheduleClassClasspassForm>\n//                                     )}\n//                                 </Formik>\n//                               )}\n//                             </Mutation>\n//                             </Table.Col>\n//                           </Table.Row>\n//                         ))}\n//                       </Table.Body>\n//                     </Table>\n//                     </div>\n//                   </ContentCard>\n//                 </ClassEditBase>\n//             )}}\n//           }\n//         </Query>\n//       </div>\n//     </SiteWrapper>\n//     )\n//   }\n\n// };\n\nexport default withTranslation()(withRouter(ScheduleClassClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Grid,\n  Form,\n  Text\n} from \"tabler-react\"\n\nimport FormHelp from \"../../../../ui/FormHelp\"\n\n\nconst ScheduleClassSubscriptionForm = ({ t, history, match, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"enroll\" \n                onChange={() => {\n                  setFieldValue('enroll', !values.enroll)\n                  setFieldTouched('enroll', true)\n                  if (!values.enroll) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.enroll} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.enroll')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"enroll\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"shopBook\" \n                onChange={() => {\n                  setFieldValue('shopBook', !values.shopBook)\n                  setFieldTouched('shopBook', true)\n                  if (!values.shopBook) {\n                    setFieldValue('attend', true)\n                    setFieldTouched('attend', true)\n                  }\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.shopBook} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('schedule.classes.subscriptions.shop_book')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"shopBook\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group className='mb-0'>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"attend\" \n                disabled={((values.shopBook) || (values.enroll))}\n                onChange={() => {\n                  setFieldValue('attend', !values.attend)\n                  setFieldTouched('attend', true)\n                  setSubmitting(true)\n                  setTimeout(() => {submitForm()}, 200)\n                }}\n                checked={values.attend} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.attend')}</span>\n            </Form.Label>\n            {/* Show message to inform user they can't disable attend while enroll or shopBook is enabled*/}\n            { ((values.shopBook) || (values.enroll)) ? <div>\n                <Text.Small>{t('schedule.classes.subscriptions.attend_disabled')}</Text.Small> { ' ' }\n                <FormHelp message={t('schedule.classes.subscriptions.attend_disabled_help')} />\n              </div> : \"\" }\n            <ErrorMessage name=\"attend\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n    </Dimmer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptionForm))","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n  enroll: Yup.boolean(),\n  shopBook: Yup.boolean(),\n  attend: Yup.boolean(),\n})\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY = gql`\n  query ScheduleItemOrganizationSubscriptionGroups($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemOrganizationSubscriptionGroups(first: 100, before: $before, after: $after, scheduleItem:$scheduleItem) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleItem {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          enroll\n          shopBook\n          attend\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_CLASS_SUBSCRIPTION = gql`\nmutation UpdateScheduleItemOrganizationSubscriptionGroup($input: UpdateScheduleItemOrganizationSubscriptionGroupInput!) {\n  updateScheduleItemOrganizationSubscriptionGroup(input:$input) {\n    scheduleItemOrganizationSubscriptionGroup {\n      id\n    } \n  }\n}\n`\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\n\nimport {\n  Dimmer,\n  Card,\n  Table\n} from \"tabler-react\";\n\nimport { toast } from 'react-toastify'\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from '../ClassEditBack'\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassSubscriptionForm from \"./ScheduleClassSubscriptionForm\"\n\nimport { SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA } from './yupSchema'\nimport { GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, UPDATE_SCHEDULE_CLASS_SUBSCRIPTION } from \"./queries\"\n\n\nfunction ScheduleClassSubscriptions({t, match, history}) {\n  const classId = match.params.class_id\n  const menuActiveLink = \"subscriptions\"\n  const cardTitle = t('schedule.classes.subscriptions.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, { \n    variables: { scheduleItem: classId }\n  })\n  const [ updateScheduleClassSubscription ] = useMutation(UPDATE_SCHEDULE_CLASS_SUBSCRIPTION)\n\n  const pageHeaderButtonList = <ClassEditBack />\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemOrganizationSubscriptionGroups.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.subscriptions.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        // headerContent={headerOptions}\n        pageInfo={data.scheduleItemOrganizationSubscriptionGroups.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemOrganizationSubscriptionGroups.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.edges\n            const pageInfo = fetchMoreResult.scheduleItemOrganizationSubscriptionGroups.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemOrganizationSubscriptionGroups: {\n                      __typename: previousResult.scheduleItemOrganizationSubscriptionGroups.__typename,\n                      edges: [ ...previousResult.scheduleItemOrganizationSubscriptionGroups.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemOrganizationSubscriptionGroups.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {node.organizationSubscriptionGroup.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <Formik\n                      initialValues={{  \n                        enroll: node.enroll,\n                        shopBook: node.shopBook,\n                        attend: node.attend\n                      }}\n                      validationSchema={SCHEDULE_CLASS_SUBSCRIPTION_SCHEMA}\n                      onSubmit={(values, { setSubmitting }) => {\n                          console.log(values)\n                          updateScheduleClassSubscription({ \n                            variables: {\n                              input: {\n                                id: node.id,\n                                enroll: values.enroll,\n                                shopBook: values.shopBook,\n                                attend: values.attend\n                              }\n                            }, \n                            refetchQueries: [\n                              { query: GET_SCHEDULE_CLASS_SUBSCRIPTIONS_QUERY, \n                                variables: { scheduleItem: classId }\n                            }],\n                            // Mutation is \"complete\" when refetchQueries finish\n                            awaitRefetchQueries: true\n                          })\n                          .then(({ data }) => {\n                              console.log('got data', data);\n                              toast.success((t('schedule.classes.subscriptions.toast_edit_success')), {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              setSubmitting(false)\n                            }).catch((error) => {\n                              toast.error((t('general.toast_server_error')) +  error, {\n                                  position: toast.POSITION.BOTTOM_RIGHT\n                                })\n                              console.log('there was an error sending the query', error)\n                              setSubmitting(false)\n                            })\n                      }}\n                      >\n                      {({ isSubmitting, setSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm }) => (\n                        <ScheduleClassSubscriptionForm\n                          isSubmitting={isSubmitting}\n                          setSubmitting={setSubmitting}\n                          setFieldTouched={setFieldTouched}\n                          setFieldValue={setFieldValue}\n                          errors={errors}\n                          values={values}\n                          submitForm={submitForm}\n                        >\n                          {console.log(errors)}\n                          {console.log(values)}\n                        </ScheduleClassSubscriptionForm>\n                      )}\n                    </Formik>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>\n      </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassSubscriptions))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      role\n      account2 {\n        id\n        fullName\n      }\n      role2\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_CLASS_INSTRUCTOR = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport { represent_instructor_role } from \"../tools\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport ButtonAdd from '.././../../../ui/ButtonAdd'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, DELETE_SCHEDULE_CLASS_INSTRUCTOR } from \"./queries\"\n\n\nfunction ScheduleClassInstructors({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const classId = match.params.class_id\n  const menuActiveLink = \"instructors\"\n  const cardTitle = t('schedule.classes.instructors.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: classId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  const ButtonAddInstructor = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <ButtonAdd addUrl={`/schedule/classes/all/instructors/${classId}/add`} className='ml-2' />\n  </HasPermissionWrapper>\n\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    {ButtonAddInstructor}\n  </React.Fragment>\n\n  // Loading\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.instructors.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.instructor_2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName} <br />\n                    <span className=\"text-muted\">\n                      {represent_instructor_role(t, node.role)}\n                    </span>\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account2 ?\n                      <span>\n                        {node.account2.fullName} <br />\n                        <span className=\"text-muted\">\n                          {represent_instructor_role(t, node.role2)}\n                        </span>\n                      </span> : \"\"\n                    }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/classes/all/instructors/${classId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.classes.instructors.delete_confirm_msg'),\n                            msgDescription: <p>{t('schedule.classes.instructors.delete_confirm_description')}</p>,\n                            msgSuccess: t('schedule.classes.instructors.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n          </div>\n        </ContentCard>      \n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructors))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_INSTRUCTOR_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  role: Yup.string(),\n  account2: Yup.string(),\n  role2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassInstructorForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassInstructorBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={ \"/schedule/classes/all/instructors/\" + classId } />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorBack))","// @flow\n\nimport React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\n\n\nfunction ScheduleClassInstructorAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_add')\n  const menuActiveLink = \"instructors\" \n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY, {\n    fetchPolicy: \"network-only\"\n  })\n  const [addScheduleClassInstructor] = useMutation(ADD_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          price: \"\", \n          dateStart: new Date() ,\n          account: \"\",\n          role: \"\",\n          account2: \"\",\n          role2: \"\",\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassInstructor({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorAdd))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, UPDATE_SCHEDULE_CLASS_INSTRUCTOR } from './queries'\nimport { SCHEDULE_CLASS_INSTRUCTOR_SCHEMA } from './yupSchema'\nimport ScheduleClassInstructorForm from './ScheduleClassInstructorForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassInstructorBack from \"./ScheduleClassInstructorBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleClassInstructorEdit({ t, match, history }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/instructors/${classId}`\n  const cardTitle = t('schedule.classes.instructors.title_edit')\n  const menuActiveLink = \"instructors\"\n  const pageHeaderButtonList = <ScheduleClassInstructorBack classId={classId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [updateScheduleClassInstructor] = useMutation(UPDATE_SCHEDULE_CLASS_INSTRUCTOR)\n\n  if (loading) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  if (error) return (\n    <ClassEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ClassEditBase \n      cardTitle={cardTitle}\n      menuActiveLink=\"instructors\"\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          role: initialData.role,\n          account2: initialAccount2,\n          role2: initialData.role2,\n        }}\n        validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleClassInstructor({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                role: values.role,\n                account2: values.account2,\n                role2: values.role2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassInstructorForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleClassInstructorForm>\n        )}\n      </Formik>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassInstructorEdit))","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Dimmer,\n  Icon,\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport { get_accounts_query_variables } from \"./tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY } from \"../../../../../queries/accounts/account_search_queries\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\n\nfunction ScheduleClassAttendanceSearch({ t, match, history, checkedInIds, classStatus }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH}\n      placeholder={t(\"schedule.classes.class.attendance.placeholder_search\")}\n      onChange={(value) => {\n        localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"schedule.classes.class.attendance.search_customer_not_found\")}</strong> {\" - \"}\n        {t(\"schedule.classes.class.attendance.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(checkedInIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                    <Link to={\"/schedule/classes/class/book/\" + schedule_item_id + \"/\" + class_date + \"/\" + node.id}>\n                      <Button color=\"secondary pull-right\">\n                        {t('general.checkin')} <Icon name=\"chevron-right\" />\n                      </Button>\n                    </Link>       \n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceSearch))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleClassBack = ({ t, classId }) => (\n  <ButtonBack className=\"mr-2\" returnUrl=\"/schedule/classes\" />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBack))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nfunction ClassMenu ({ t, scheduleItemId, classDate, activeLink }) {\n  let attendance_active = false\n  let attendancechart_active = false\n  let edit_active = false\n\n  switch (activeLink) {\n    case \"attendance\":\n      attendance_active = true\n      break\n    case \"attendancechart\":\n      attendancechart_active = true\n      break\n    case \"edit\":\n      edit_active = true\n      break\n    default:\n      break\n  }\n\n  return (\n    <div>\n      <List.Group transparent={true}>   \n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"check-circle\"\n              active={attendance_active}\n              >\n              {t(\"general.attendance\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemattendance\"\n            permission=\"view\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/attendance_chart/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"bar-chart-2\"\n              active={attendancechart_active}\n              >\n              {t(\"schedule.classes.class.attendance_chart.title\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n        <HasPermissionWrapper \n            resource=\"scheduleitemweeklyotc\"\n            permission=\"change\" \n        >\n          <List.GroupItem\n              key={v4()}\n              className=\"d-flex align-items-center\"\n              to={\"#/schedule/classes/class/edit/\" + scheduleItemId + \"/\" + classDate}\n              icon=\"edit-3\"\n              active={edit_active}\n              >\n              {t(\"schedule.classes.class.menu.edit_this_class\")}\n          </List.GroupItem>\n        </HasPermissionWrapper>\n\n      </List.Group>\n    </div>\n  )\n}\n\nexport default withTranslation()(ClassMenu)","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from \"moment\"\n\nimport {\n  Button,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../../tools/refresh_token_and_open_export_link';\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser';\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\nfunction ScheduleClassAttendanceBaseBase({ t, match, history, children, pageSubTitle, refetch=f=>f }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const exportUrl = `/d/export/schedule_item_attendance/mailinglist/${scheduleItemId}/${classDate}`\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/attendance/${scheduleItemId}/${previousWeek}`)\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={pageSubTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              {/* Export Mailinglist */}\n              <Button\n                color=\"secondary\"\n                icon=\"download-cloud\"\n                className=\"mr-2\"\n                onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                  t, doTokenRefresh, history, exportUrl\n                )}\n              >\n                {t('general.mailing_list')} \n              </Button>\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col xs={12} sm={12} md={9}>\n                {children}\n              </Grid.Col>\n              <Grid.Col xs={12} sm={12} md={3}>\n                <ClassMenu \n                  scheduleItemId={scheduleItemId}\n                  classDate={classDate}\n                  activeLink=\"attendance\"\n                />\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBaseBase))\n","import moment from 'moment'\n\nexport function class_subtitle({t, location, locationRoom, classtype, timeStart, date}) {\n  return t('general.class') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         classtype + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ScheduleClassAttendanceBaseBase from './ScheduleClassAttendanceBaseBase'\nimport { class_subtitle } from \"../tools\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceBase({ t, match, history, children, refetch }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const cardTitle=t('general.attendance')\n  const { loading, error, data } = useQuery(\n    GET_SCHEDULE_CLASS_QUERY, {\n      variables: { scheduleItem: schedule_item_id, date: class_date }\n    }\n  )\n\n  if (loading) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  if (error) return (\n    <ScheduleClassAttendanceBaseBase refetch={refetch}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('schedule.classes.class.attendance.error_loading')}</p>\n      </ContentCard>\n    </ScheduleClassAttendanceBaseBase>\n  )\n\n  const scheduleClass = data.scheduleClass\n\n  const pageSubTitle = class_subtitle({\n    t: t,\n    location: scheduleClass.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleClass.organizationLocationRoom.name,\n    classtype: scheduleClass.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleClass.timeStart), \n    date: class_date\n  })\n  \n  console.log(scheduleClass.status)\n  \n  return (\n    <ScheduleClassAttendanceBaseBase pageSubTitle={pageSubTitle}  refetch={refetch}>\n      {children}\n    </ScheduleClassAttendanceBaseBase>\n\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { get_attendance_list_query_variables } from \"./tools\"\nimport { DELETE_SCHEDULE_CLASS_ATTENDANCE, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction ScheduleClassAttendanceDelete({t, match, node}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteScheduleItemAttendance ] = useMutation(DELETE_SCHEDULE_CLASS_ATTENDANCE)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"schedule.classes.class.attendance.delete_confirm_msg\"),\n            msgDescription: <p>{node.account.fullName}</p>,\n            msgSuccess: t('schedule.classes.class.attendance.delete_success'),\n            deleteFunction: deleteScheduleItemAttendance,\n            functionVariables: { \n              variables: {\n                input: {\n                  id: node.id\n                }\n              }, \n              refetchQueries: [\n                { query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n                  variables: get_attendance_list_query_variables(schedule_item_id, class_date) },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceDelete))\n","import React, { useState } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Badge,\n  Card,\n  Dimmer,\n  Icon,\n  Table\n} from \"tabler-react\";\nimport { get_attendance_list_query_variables } from \"./tools\"\n\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\nimport ButtonConfirm from '../../../../ui/ButtonConfirm'\nimport ScheduleClassAttendanceSearch from \"./ScheduleClassAttendanceSearch\"\nimport ScheduleClassAttendanceBase from \"./ScheduleClassAttendanceBase\"\nimport ScheduleClassAttendanceDelete from \"./ScheduleClassAttendanceDelete\"\nimport ScheduleClassAttendanceItemCheckinAndStatus from './ScheduleClassAttendanceItemCheckinAndStatus'\nimport { \n  GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n  RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE \n} from \"./queries\"\n\n\n// function sleepFor(sleepDuration){\n//   var now = new Date().getTime();\n//   while(new Date().getTime() < now + sleepDuration){ /* Do nothing */ }\n// }\n\n\nfunction ScheduleClassAttendance({ t, match, location }) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [attendanceRefetching, setAttendanceRefetching] = useState(false)\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(schedule_item_id, class_date),\n      fetchPolicy: \"network-only\"\n    }\n  )\n  const [ resendInfoMail ] = useMutation(RESEND_INFO_MAIL_SCHEDULE_ITEM_ATTENDANCE)\n\n  // Inform account profile how to come back here using the back button\n  // From attendance list to customer profile\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n  // Inform attendance registration components to come back here\n  // From customer profile to attendance list\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_BOOK_RETURN, location.pathname)\n\n  // Loading\n  if (loading) return <ScheduleClassAttendanceBase>\n      <ContentCard cardTitle={t('general.attendance')}>\n        <Dimmer loader={true} active={true} />\n      </ContentCard>\n  </ScheduleClassAttendanceBase>\n  // Error\n  if (error) {\n    console.log(error)\n    return <ScheduleClassAttendanceBase>{t('general.error_sad_smiley')}</ScheduleClassAttendanceBase>\n  }\n  \n  const scheduleClass = data.scheduleClass\n  console.log(scheduleClass)\n  let checkedInIds = []\n  data.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n\n  const headerOptions = <Card.Options>\n    <div className='float-right'>\n      <Badge color=\"success\">{scheduleClass.countAttending} {t(\"schedule.classes.class.attendance.attending\")}</Badge> {\" \"}\n      <Badge color=\"primary\">{scheduleClass.countBooked} {t(\"schedule.classes.class.attendance.booked\")}</Badge> {\" \"}\n      {/* <Badge color=\"info\">{t(\"general.spaces\")}: {scheduleClass.spaces}</Badge>  */}\n    </div>\n  </Card.Options>\n\n\n  return (\n    <ScheduleClassAttendanceBase refetch={refetch}>\n      {(scheduleClass.status === 'CANCELLED') ? \n        <Alert type=\"warning\">\n          <strong>{t(\"schedule.classes.class.attendance.this_class_is_cancelled\")}</strong> - {\" \"}\n          {t(\"schedule.classes.class.attendance.unable_to_add_attendance\")}\n        </Alert>  \n        : \n        <ScheduleClassAttendanceSearch \n          checkedInIds={checkedInIds}\n        />\n      }\n      <ContentCard \n        cardTitle={t('general.attendance')}\n        pageInfo={data.scheduleItemAttendances.pageInfo}\n        headerContent={headerOptions}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n          variables: {\n            after: data.scheduleItemAttendances.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n            const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n            return newEdges.length\n              ? {\n                  // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: {\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }}>\n        { !(data.scheduleItemAttendances.edges.length) ? \n          <Card.Body>\n            <p>{t('schedule.classes.class.attendance.empty_list')}</p>\n          </Card.Body>\n          :\n          <Dimmer active={attendanceRefetching} loader={true}>\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {data.scheduleItemAttendances.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                          {node.account.fullName}\n                        </Link> <br />\n                        {console.table(node)}\n                        {node.accountClasspass && \n                          <small className='text-muted'>\n                            {node.accountClasspass.organizationClasspass.name} { \" \" }\n                          </small>\n                        }\n                        {node.accountClasspass && \n                        node.accountClasspass.organizationClasspass.trialPass && \n                        <Badge color=\"success\">{t('schedule.classes.class.attendance.trial')}</Badge>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <BadgeBookingStatus status={node.bookingStatus} />\n                        <ButtonConfirm \n                              title={t(\"schedule.classes.class.attendance.confirm_resending_info_mail_title\")}\n                              msgConfirm={<p>{t(\"schedule.classes.class.attendance.confirm_resending_info_mail_to\")}</p>}\n                              msgDescription={<p><b>{node.account.fullName}</b></p>}\n                              msgSuccess={t(\"schedule.classes.class.attendance.resend_success\")}\n                              actionFunction={resendInfoMail}\n                              actionFunctionVariables={{variables: {input: {id: node.id}}}}\n                              buttonClass=\"btn-link float-right\"\n                              buttonIcon={<Icon name=\"send\" />}\n                              buttonText={t(\"schedule.classes.class.attendance.resend_info_mail\")}\n                              buttonTextColor=\"\"\n                          />\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Delete */}\n                        <ScheduleClassAttendanceDelete node={node} />\n                        {/* Status dropdown */}\n                        <ScheduleClassAttendanceItemCheckinAndStatus\n                          setAttendanceRefetching={setAttendanceRefetching}\n                          scheduleItemAttendanceNode={node}\n                          refetchScheduleItemAttendance={true}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n          </Dimmer>\n        }\n      </ContentCard>\n    </ScheduleClassAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassAttendance))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleClassBack from \"./ScheduleClassBack\"\nimport ClassMenu from \"./ClassMenu\"\n\n\nfunction ScheduleClassEditBase({ t, match, history, children, subTitle=\"\", menuActiveLink=\"\" }) {\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={9} md={9}>\n              {children}\n            </Grid.Col>\n            <Grid.Col xs={12} sm={3} md={3}>\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink={menuActiveLink}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEditBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_ATTENDANCE_COUNT_YEAR = gql`\n  query InsightClassAttendanceCountYear($scheduleItem:ID!, $year: Int!) {\n    insightClassAttendanceCountYear(scheduleItem: $scheduleItem, year: $year) {\n      year\n      scheduleItem {\n        id\n      }\n      weeks {\n        week\n        attendanceCountCurrentYear\n        attendanceCountPreviousYear\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { BarChart, Bar, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts'\n\nimport {\n    colors,\n    Card,\n  } from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport { class_subtitle } from \"../tools\"\nimport ScheduleClassEditBase from '../ScheduleClassEditBase'\n\n\nimport { GET_CLASS_ATTENDANCE_COUNT_YEAR } from \"./queries\"\n\n\nfunction ScheduleClassAttendanceChart({t, history, match}) {\n  const classDate = match.params.date\n  const scheduleItemId = match.params.class_id\n  const menuActiveLink = \"attendancechart\"\n  const year = parseInt(classDate.substring(0, 4))\n\n  const { loading, error, data } = useQuery(GET_CLASS_ATTENDANCE_COUNT_YEAR, {\n    variables: {\n      year: year,\n      scheduleItem: scheduleItemId\n    }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.loading_with_dots')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleClassEditBase menuActiveLink={menuActiveLink}>\n          {t('general.error_sad_smiley')}\n      </ScheduleClassEditBase>\n    )\n  }\n\n  // Add month name to data\n  const chartData = data.insightClassAttendanceCountYear.weeks.map((item, index) => (\n    { ...item, weekName: `${t(\"general.week\")} ${item.week}` }\n  ))\n\n  const scheduleItem = data.scheduleItem\n  const subTitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n\n  return (\n    <ScheduleClassEditBase menuActiveLink={menuActiveLink} subTitle={subTitle}>\n      <Card title={t('schedule.classes.class.attendance_chart.title')}>\n        <ResponsiveContainer width=\"100%\" aspect={2.6}>\n          <BarChart\n            width={500}\n            height={300}\n            data={chartData}\n            margin={{\n              top: 10,\n              right: 20,\n              left: 0,\n              bottom: 10,\n            }}\n          >\n            <XAxis dataKey=\"weekName\" interval={4} />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"attendanceCountCurrentYear\" name={year} fill={colors['azure']} />\n            <Bar dataKey=\"attendanceCountPreviousYear\" name={year-1} fill={colors['azure-lighter']} />\n          </BarChart>\n        </ResponsiveContainer>\n      </Card>\n    </ScheduleClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassAttendanceChart))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleClassBookBack = () => (\n  <ButtonBack returnUrl={localStorage.getItem(CSLS.SCHEDULE_CLASSES_BOOK_RETURN)} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassBookBack))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      alreadyBooked\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        blocked\n        paused\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import CSLS from \"../../../../../tools/cs_local_storage\"\n\nexport function getUrlFromReturnTo() {\n  // let returnUrl\n\n  return localStorage.getItem(CSLS.SCHEDULE_CLASSES_BOOK_RETURN)\n\n  // if (returnTo === \"schedule_classes\") {\n  //   returnUrl = '/schedule/classes/class/attendance/' + schedule_item_id + \"/\" + class_date\n  // } else if (returnTo === \"selfcheckin\") {\n  //   returnUrl = '/selfcheckin/checkin/' + locationId + \"/\" + schedule_item_id + \"/\" + class_date\n  // }\n  \n  // return returnUrl\n}","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ClasspassCheckinButton({t, match, history, classpass, returnTo, locationId=null}) {\n  console.log(classpass)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo()\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ClasspassCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card\n} from \"tabler-react\";\n\nimport ClasspassCheckinButton from \"./ScheduleClassBookClasspassBtn\"\n\n\nfunction ScheduleClassBookClasspasses({ \n  t, \n  match, \n  history, \n  classpasses,  \n  locationId,\n  onClickCheckin=f=>f ,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ClasspassCheckinButton classpass={classpass} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Icon\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\n\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction SubscriptionCheckinButton({t, match, history, subscription, returnTo, locationId=null}) {\n  console.log(subscription)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo()\n\n  if (subscription.blocked) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"alert-triangle\" />\n        {t(\"schedule.classes.class.book.subscription_blocked\")}\n      </p>\n    )\n  }\n\n  if (subscription.paused) {\n    return (\n      <p className=\"text-muted\">\n        <Icon name=\"pause\" />\n        {t(\"schedule.classes.class.book.subscription_paused\")}\n      </p>\n    )\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SubscriptionCheckinButton))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport SubscriptionCheckinButton from \"./ScheduleClassBookSubscriptionBtn\"\n\n\nfunction ScheduleClassBookSubscriptions({ \n  t, \n  match, \n  history, \n  subscriptions, \n  locationId,\n  returnTo=\"schedule_classes\"\n}) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <SubscriptionCheckinButton subscription={subscription} returnTo={returnTo} locationId={locationId} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookSubscriptions))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { get_attendance_list_query_variables } from \"../attendance/tools\"\nimport { GET_SCHEDULE_CLASS_ATTENDANCE_QUERY } from \"../attendance/queries\"\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { getUrlFromReturnTo } from \"./tools\"\n\n\nfunction ScheduleClassBookPriceBtn({t, match, history, price, returnTo, locationId=null}) {\n  console.log(price)\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"account\": account_id,\n    \"scheduleItem\": schedule_item_id,\n    \"organizationClasspass\": price.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS_BUY_AND_BOOK\",\n    \"bookingStatus\": \"ATTENDING\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return <Button \n      block \n      outline \n      disabled={true}\n      color=\"success\" \n    >\n      {t(\"schedule.classes.class.processing_checkin\")}\n    </Button>\n  }\n\n  if (error) {\n    console.log(error)\n    return <Alert type=\"danger\">\n      {t(\"schedule.classes.class.unable_to_book_class\")}\n    </Alert>\n  }\n\n  const returnUrl = getUrlFromReturnTo()\n\n  return (\n    <Button \n      block \n      outline \n      color=\"success\" \n      icon=\"check\"\n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect back to attendance list\n            history.push(returnUrl)\n            // show message to user\n            toast.success((t('schedule.classes.class.book.toast_success')), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.checkin\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\nfunction ScheduleClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceDropin')\n  console.log(priceDropin)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceDropin} returnTo={returnTo} locationID={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceDropin))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleClassBookPriceBtn from \"./ScheduleClassBookPriceBtn\"\n\n\nfunction ScheduleClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial, \n  locationId,\n  onClickCheckin=f=>f,\n  returnTo=\"schedule_classes\"\n}) {\n  console.log('priceTrial')\n  console.log(priceTrial)\n\n  return (\n    <Grid.Col xs={12} sm={6} md={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"schedule.classes.class.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ScheduleClassBookPriceBtn price={priceTrial} returnTo={returnTo} locationId={locationId} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBookPriceTrial))\n\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport { TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport ScheduleClassBookBack from \"./ScheduleClassBookBack\"\nimport ScheduleClassBookClasspasses from \"./ScheduleClassBookClasspasses\"\nimport ScheduleClassBookSubscriptions from \"./ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"./ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"./ScheduleClassBookPriceTrial\"\nimport CSLS from \"../../../../../tools/cs_local_storage\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassBook({ t, match, history }) {\n  // Clear attendance search\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_CLASS_ATTENDANCE_SEARCH, \"\")\n  \n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: class_date\n  })\n\n  console.log(prices)\n  \n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">   \n              <ScheduleClassBookBack classId={schedule_item_id} date={class_date} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n              <Grid.Col md={12}>\n                <h4>{t('general.booking_options')} {account.fullName}</h4>\n                <div className=\"mt-6\">\n                <Grid.Row cards deck>\n                  <ScheduleClassBookSubscriptions subscriptions={subscriptions} />\n                  <ScheduleClassBookClasspasses classpasses={classpasses} />\n                  {(prices) ?\n                    (prices.organizationClasspassDropin) ? \n                      <ScheduleClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n                    : \"\" }\n                  {(prices) ?\n                    ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n                      <ScheduleClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n                    : \"\" }\n                </Grid.Row>\n                </div>\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassBook))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleClassWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationClasstype {\n            id\n            name\n          }\n          organizationLevel {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n          spaces\n          walkInSpaces\n          infoMailEnabled\n          infoMailContent\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationClasstypes(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation DeleteScheduleClassWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_CLASS_WEEKLY_OTC = gql`\n  mutation UpdateScheduleClassWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_CLASS_EDIT_OTC_SCHEMA = Yup.object().shape({\n  spaces: Yup.number().nullable().notRequired(),\n  walkInSpaces: Yup.number().nullable().notRequired(),\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../../plugin_config/tinymce\"\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\n\nconst ScheduleClassEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"infoMailEnabled\" \n                    checked={values.infoMailEnabled} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.classes.info_mail_enabled')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"infoMailEnabled\" component=\"div\" />  \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role')}>\n              <Field component=\"select\" \n                      name=\"role\" \n                      className={(errors.role) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor_role2')}>\n              <Field component=\"select\" \n                      name=\"role2\" \n                      className={(errors.role2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                <option value=\"SUB\" key={v4()}>{t('schedule.classes.instructor_roles.sub')}</option>\n                <option value=\"ASSISTANT\" key={v4()}>{t('schedule.classes.instructor_roles.assistant')}</option>\n                <option value=\"KARMA\" key={v4()}>{t('schedule.classes.instructor_roles.karma')}</option>\n              </Field>\n              <ErrorMessage name=\"role2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.level')}>\n              <Field component=\"select\" \n                    name=\"organizationLevel\" \n                    className={(errors.organizationLevels) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLevels.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLevels\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.class')}>\n          <Field component=\"select\" \n                name=\"organizationClasstype\" \n                className={(errors.organizationClasstype) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n            {inputData.organizationClasstypes.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </Field>\n          <ErrorMessage name=\"organizationClasstype\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> \n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces')}>\n              <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.spaces_walk_in')}>\n              <Field type=\"text\" \n                    name=\"walkInSpaces\" \n                    className={(errors.walkInSpaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"walkInSpaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Form.Group label={t('general.info_mail')}>\n          <Editor\n            tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n            textareaName=\"infoMailContent\"\n            initialValue={values.infoMailContent}\n            init={tinymceBasicConf}\n            onBlur={(e) => {\n              setFieldValue(\"infoMailContent\", e.target.getContent())\n              setFieldTouched(\"infoMailContent\", true, true)\n            }}\n          />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Button color=\"link\" onClick={() => history.push(returnUrl)}>\n            {t('general.cancel')}\n        </Button>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleClassEditForm))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_CLASS_WEEKLY_OTC, GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleClassWeeklyOTCDelete({t, match, history}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const [deleteClassOTC] = useMutation(DELETE_SCHEDULE_CLASS_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/classes/\") }\n  })\n  const query_vars = {\n    scheduleItem: schedule_item_id,\n    date: class_date\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger mb-3\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.classes.class.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.classes.class.edit.delete_success'),\n          deleteFunction: deleteClassOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: schedule_item_id,\n                date: class_date\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_CLASSES_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.classes.class.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_CLASS_WEEKLY_OTC } from './queries'\nimport { GET_CLASSES_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleClassEditForm from './ScheduleClassEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { class_subtitle } from \"../tools\"\n\nimport SiteWrapper from \"../../../../SiteWrapper\"\nimport ButtonListWeekChooser from '../../../../ui/ButtonListWeekChooser'\nimport ScheduleClassWeeklyOTCDelete from './ScheduleClassWeeklyOTCDelete'\nimport ScheduleClassBack from \"../ScheduleClassBack\"\nimport ClassMenu from \"../ClassMenu\"\n\n\nfunction ScheduleClassEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  console.log(scheduleItemId)\n  console.log(classDate)\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: classDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleClassWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_CLASS_WEEKLY_OTC)\n\n  function onClickPrevious() {\n    const previousWeek = moment(classDate).subtract(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n  function onClickNext () {\n    const previousWeek = moment(classDate).add(7, \"days\").format('YYYY-MM-DD')\n    history.push(`/schedule/classes/class/edit/${scheduleItemId}/${previousWeek}`)\n  }\n\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = class_subtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    classtype: scheduleItem.organizationClasstype.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: classDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    initialValues.role = initialData.role || \"\"\n    initialValues.role2 = initialData.role2 || \"\"\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationClasstype) {\n      initialValues.organizationClasstype = initialData.organizationClasstype.id\n    }\n    if (initialData.organizationLevel) {\n      initialValues.organizationLevel = initialData.organizationLevel.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    if (initialData.spaces) {\n      initialValues.spaces = initialData.spaces\n    }\n    if (initialData.walkInSpaces) {\n      initialValues.walkInSpaces = initialData.walkInSpaces\n    }\n    if (initialData.infoMailEnabled) {\n      initialValues.infoMailEnabled = initialData.infoMailEnabled\n    }\n    if (initialData.infoMailContent) {\n      initialValues.infoMailContent = initialData.infoMailContent\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.role = \"\"\n    initialValues.account2 = \"\"\n    initialValues.role2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationClasstype = \"\"\n    initialValues.organizationLevel = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n    initialValues.infoMailEnabled = false\n    initialValues.infoMailContent = \"\"\n  }\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subtitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleClassBack />\n              <ButtonListWeekChooser \n                showCurrent={false}\n                onClickPrevious={onClickPrevious}\n                onClickNext={onClickNext}\n              />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={9}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>{t('general.edit')}</Card.Title>\n                </Card.Header>\n                <Card.Body>\n                  <Formik\n                    initialValues={initialValues}\n                    validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n                    onSubmit={(values, { setSubmitting }) => {\n\n                        console.log(\"SUBMIT VALUES\")\n                        console.log(values)\n\n                        let timeStart = undefined\n                        let timeEnd = undefined\n                        if (values.timeStart) {\n                          timeStart = dateToLocalISOTime(values.timeStart)\n                        }\n                        \n                        if (values.timeEnd) {\n                          timeEnd = dateToLocalISOTime(values.timeEnd)  \n                        }\n                        \n\n                        updateScheduleClassWeeklyOTC({ variables: {\n                          input: {\n                            scheduleItem: scheduleItemId,\n                            date: classDate,\n                            status: values.status,\n                            description: values.description,\n                            account: values.account,\n                            role: values.role,\n                            account2: values.account2,\n                            role2: values.role2,\n                            organizationLocationRoom: values.organizationLocationRoom,\n                            organizationClasstype: values.organizationClasstype,\n                            organizationLevel: values.organizationLevel,\n                            timeStart: timeStart,\n                            timeEnd: timeEnd,\n                            spaces: parseInt(values.spaces),\n                            walkInSpaces: parseInt(values.walkInSpaces),\n                            infoMailEnabled: values.infoMailEnabled,\n                            infoMailContent: values.infoMailContent\n                          }\n                        }, refetchQueries: [\n                            {query: GET_SCHEDULE_CLASS_WEEKLY_OTCS_QUERY, variables: query_vars},\n                            {query: GET_CLASSES_QUERY, variables: get_list_query_variables()},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            toast.success((t('schedule.classes.class.edit.toast_edit_success')), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          console.log('there was an error sending the query', error.graphQLErrors)\n                          setSubmitting(false)\n                        })\n                      }\n                    }\n                    >\n                    {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n                      <ScheduleClassEditForm\n                        inputData={queryData}\n                        isSubmitting={isSubmitting}\n                        setFieldTouched={setFieldTouched}\n                        setFieldValue={setFieldValue}\n                        errors={errors}\n                        values={values}\n                      >\n                        {console.log(errors)}\n                      </ScheduleClassEditForm>\n                    )}\n                  </Formik>\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col xs={12} sm={12} md={3}>\n              {(showDelete) ? \n                <ScheduleClassWeeklyOTCDelete /> : \"\"\n              }\n              <ClassMenu \n                scheduleItemId={scheduleItemId}\n                classDate={classDate}\n                activeLink=\"edit\"\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_PRICES_QUERY = gql`\n  query ScheduleItemPrices($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemPrices(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          organizationClasspassDropin {\n            id\n            name\n          }\n          organizationClasspassTrial {\n            id\n            name\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY = gql`\nquery ScheduleItemPrice($before: String, $after: String, $id: ID!) {\n  scheduleItemPrice(id: $id) {\n    id\n    organizationClasspassDropin {\n      id\n      name\n    }\n    organizationClasspassTrial {\n      id\n      name\n    }\n    dateStart\n    dateEnd       \n  }\n  organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n      }\n    }\n  }\n}\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const ADD_SCHEDULE_ITEM_PRICE = gql`\n  mutation CreateScheduleItemPrice($input:CreateScheduleItemPriceInput!) {\n    createScheduleItemPrice(input:$input) {\n      scheduleItemPrice {\n        id\n      } \n    }\n  }\n`\n\nexport const UPDATE_SCHEDULE_ITEM_PRICE = gql`\nmutation UpdateScheduleItemPrice($input: UpdateScheduleItemPriceInput!) {\n  updateScheduleItemPrice(input:$input) {\n    scheduleItemPrice {\n      id\n    } \n  }\n}\n`\n\nexport const DELETE_SCHEDULE_ITEM_PRICE = gql`\n  mutation DeleteScheduleItemPrice($input: DeleteScheduleItemPriceInput!) {\n    deleteScheduleItemPrice(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_ITEM_PRICE, GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\nimport ButtonDelete from '../../../../ui/ButtonDelete';\n\n\nfunction ScheduleClassPriceDelete({t, match, history, id}) {\n  const classId = match.params.class_id\n  const [deleteClassPrice] = useMutation(DELETE_SCHEDULE_ITEM_PRICE)\n  const query_vars = {\n    scheduleItem: classId\n  }\n\n  return (\n    <ButtonDelete \n      msgConfirm={t(\"schedule.classes.prices.delete_confirm_msg\")}\n      msgDescription={\"\"}\n      msgSuccess={t('schedule.classes.prices.delete_success')}\n      deleteFunction={deleteClassPrice}\n      deleteFunctionVariables={\n        { \n          variables: {\n            input: {\n              id: id\n            },\n          }, \n          refetchQueries: [\n            { query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: query_vars },\n          ]\n        }\n      }\n    />\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Table,\n  Card\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ButtonAdd from \"../../../../ui/ButtonAdd\"\nimport ButtonEdit from \"../../../../ui/ButtonEdit\"\n\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ClassEditBack from \"../ClassEditBack\"\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceDelete from './ScheduleClassPriceDelete'\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY } from \"./queries\"\n\n\nfunction ScheduleClassPrices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const classId = match.params.class_id\n  const menuActiveLink = \"prices\" \n  const cardTitle = t('schedule.classes.prices.title')\n  const pageHeaderButtonList = <React.Fragment>\n    <ClassEditBack />\n    <ButtonAdd addUrl={`/schedule/classes/all/prices/${classId}/add`} className=\"ml-2\" />\n  </React.Fragment>\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_PRICES_QUERY, {\n    variables: { scheduleItem: classId }\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.error_loading')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemPrices.edges.length) { return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.classes.prices.empty_list')}</p>\n      </Card.Body>\n    </ClassEditBase>\n  )}\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={false}\n    >\n    <ContentCard \n      cardTitle={cardTitle}\n      // headerContent={headerOptions}\n      hasCardBody={false}\n      pageInfo={data.scheduleItemPrices.pageInfo}\n      onLoadMore={() => {\n      fetchMore({\n        variables: {\n          after: data.scheduleItemPrices.pageInfo.endCursor\n        },\n        updateQuery: (previousResult, { fetchMoreResult }) => {\n          const newEdges = fetchMoreResult.scheduleItemPrices.edges\n          const pageInfo = fetchMoreResult.scheduleItemPrices.pageInfo\n\n          return newEdges.length\n            ? {\n                // Put the new locations at the end of the list and update `pageInfo`\n                // so we have the new `endCursor` and `hasNextPage` values\n                data: { \n                  scheduleItemPrices: {\n                    __typename: previousResult.scheduleItemPrices.__typename,\n                    edges: [ ...previousResult.scheduleItemPrices.edges, ...newEdges ],\n                    pageInfo\n                  }\n                }\n              }\n            : previousResult\n          }\n        })\n      }} >\n      <div>\n        <Table cards>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.dropin')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.trial')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.scheduleItemPrices.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                {console.log(node)}\n                <Table.Col key={v4()}> \n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col key={v4()}> \n                  {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassDropin) ? node.organizationClasspassDropin.name : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {(node.organizationClasspassTrial) ? node.organizationClasspassTrial.name : \"\"}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <ButtonEdit editUrl={`/schedule/classes/all/prices/${classId}/edit/${node.id}`} />\n                  <ScheduleClassPriceDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n        </div>\n      </ContentCard>\n    </ClassEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleClassPrices))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\nimport ButtonFormSubmit from '../../../../ui/ButtonFormSubmit'\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleClassPriceForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_dropin')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassDropin\" \n                      className={(errors.organizationClasspassDropin) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class price form:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassDropin\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.classes.classpass_trial')}>\n              <Field component=\"select\" \n                      name=\"organizationClasspassTrial\" \n                      className={(errors.organizationClasspassTrial) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                {inputData.organizationClasspasses.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationClasspassTrial\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <ButtonFormSubmit disabled={isSubmitting} />\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleClassPriceForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\n\nconst ScheduleClassPriceBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={`/schedule/classes/all/prices/${classId}`} />\n)\n\nexport default withTranslation()(withRouter(ScheduleClassPriceBack))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\n\nfunction ScheduleClassPriceAdd({ t, history, match }) {\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const cardTitle = t('schedule.classes.prices.title_add')\n  const menuActiveLink = \"prices\"\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleClassPrice] = useMutation(ADD_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n\n  return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          organizationClasspassDropin: \"\",\n          organizationClasspassTrial: \"\",\n        }}\n        // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleClassPrice({ variables: {\n              input: {\n                scheduleItem: match.params.class_id,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd,\n                organizationClasspassDropin: values.organizationClasspassDropin,\n                organizationClasspassTrial: values.organizationClasspassTrial\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.classes.prices.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleClassPriceForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n    </Formik>\n  </ClassEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleClassPriceAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_ITEM_PRICES_QUERY, GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, UPDATE_SCHEDULE_ITEM_PRICE } from './queries'\nimport ScheduleClassPriceForm from './ScheduleClassPriceForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ClassEditBase from \"../ClassEditBase\"\nimport ScheduleClassPriceBack from \"./ScheduleClassPriceBack\"\n\nfunction ScheduleClassPriceEdit({ t, history, match }) {\n  const id = match.params.id\n  const classId = match.params.class_id\n  const returnUrl = `/schedule/classes/all/prices/${classId}`\n  const menuActiveLink = \"prices\"\n  const cardTitle = t('schedule.classes.prices.title_edit')\n  const pageHeaderButtonList = <ScheduleClassPriceBack classId={classId} />\n  const { loading, error, data, } = useQuery(GET_SINGLE_SCHEDULE_ITEM_PRICE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [editScheduleClassPrice] = useMutation(UPDATE_SCHEDULE_ITEM_PRICE, {\n    onCompleted: () => history.push(returnUrl)\n  })\n\n\n  if (loading) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Dimmer active={true} loader={true} />\n    </ClassEditBase>\n  )\n  // Error\n  if (error) return (\n    <ClassEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n    </ClassEditBase>\n  )\n\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  let initialOrganizationClasspassDropin\n  let initialOrganizationClasspassTrial\n\n  if (inputData.scheduleItemPrice.organizationClasspassDropin) {\n    initialOrganizationClasspassDropin = inputData.scheduleItemPrice.organizationClasspassDropin.id\n  }\n\n  if (inputData.scheduleItemPrice.organizationClasspassTrial) {\n    initialOrganizationClasspassTrial = inputData.scheduleItemPrice.organizationClasspassTrial.id\n  }\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (inputData.scheduleItemPrice.dateStart) {\n    dateStart = new Date(inputData.scheduleItemPrice.dateStart)\n  }\n  if (inputData.scheduleItemPrice.dateEnd) {\n    dateEnd = new Date(inputData.scheduleItemPrice.dateEnd)\n  }\n\n\n  return (\n  <ClassEditBase \n    cardTitle={cardTitle}\n    menuActiveLink={menuActiveLink}\n    pageHeaderButtonList={pageHeaderButtonList}\n  >\n    <Formik\n      initialValues={{ \n        dateStart: dateStart,\n        dateEnd: dateEnd,\n        organizationClasspassDropin: initialOrganizationClasspassDropin,\n        organizationClasspassTrial: initialOrganizationClasspassTrial,\n      }}\n      // validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n      onSubmit={(values, { setSubmitting }) => {\n\n          let dateEnd\n          if (values.dateEnd) {\n            dateEnd = dateToLocalISO(values.dateEnd)\n          } else {\n            dateEnd = values.dateEnd\n          }\n\n          editScheduleClassPrice({ variables: {\n            input: {\n              id: id,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateEnd,\n              organizationClasspassDropin: values.organizationClasspassDropin,\n              organizationClasspassTrial: values.organizationClasspassTrial\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_ITEM_PRICES_QUERY, variables: { scheduleItem: match.params.class_id }},\n              // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.classes.prices.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n      >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <ScheduleClassPriceForm\n          inputData={inputData}\n          isSubmitting={isSubmitting}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          errors={errors}\n          values={values}\n          returnUrl={returnUrl}\n        />\n      )}\n  </Formik>\n</ClassEditBase>\n  )\n}\n\n\n// class ScheduleClassInstructorEdit extends Component {\n//   constructor(props) {\n//     super(props)\n//     console.log(\"Schedule class instructor edit props:\")\n//     console.log(props)\n//   }\n\n//   render() {\n//     const t = this.props.t\n//     const match = this.props.match\n//     const history = this.props.history\n//     const id = match.params.id\n//     const class_id = match.params.class_id\n//     const returnUrl = \"/schedule/classes/all/instructors/\" + class_id\n\n//     return (\n//       <SiteWrapper>\n//         <div className=\"my-3 my-md-5\">\n//           <Query query={GET_SINGLE_SCHEDULE_CLASS_ACCOUNTS_QUERY} variables={{id: id}}>\n//             {({ loading, error, data, refetch }) => {\n//               // Loading\n//               if (loading) return <p>{t('general.loading_with_dots')}</p>\n//               // Error\n//               if (error) {\n//                 console.log(error)\n//                 return <p>{t('general.error_sad_smiley')}</p>\n//               }\n    \n//               console.log('query data')\n//               console.log(data)\n//               const inputData = data\n//               const initialData = data.scheduleItemAccount\n\n//               let initialAccount2 = \"\"\n//               if (initialData.account2) {\n//                 initialAccount2 =  initialData.account2.id\n//               } \n    \n//               return (\n//                 <ClassEditBase \n//                   card_title={t('schedule.classes.instructors.title_edit')}\n//                   menu_activeLink=\"instructors\"\n//                   sidebar_button={<ScheduleClassInstructorBack classId={class_id} />}\n//                 >\n//                   <Mutation mutation={UPDATE_SCHEDULE_CLASS_INSTRUCTOR} onCompleted={() => history.push(returnUrl)}> \n//                     {(addScheduleClassInstructor, { data }) => (\n//                         <Formik\n//                             initialValues={{  \n//                               dateStart: initialData.dateStart,\n//                               dateEnd: initialData.dateEnd,\n//                               account: initialData.account.id,\n//                               role: initialData.role,\n//                               account2: initialAccount2,\n//                               role2: initialData.role2,\n//                             }}\n//                             validationSchema={SCHEDULE_CLASS_INSTRUCTOR_SCHEMA}\n//                             onSubmit={(values, { setSubmitting }) => {\n    \n//                                 let dateEnd\n//                                 if (values.dateEnd) {\n//                                   dateEnd = dateToLocalISO(values.dateEnd)\n//                                 } else {\n//                                   dateEnd = values.dateEnd\n//                                 }\n    \n//                                 addScheduleClassInstructor({ variables: {\n//                                   input: {\n//                                     id: match.params.id,\n//                                     account: values.account,\n//                                     role: values.role,\n//                                     account2: values.account2,\n//                                     role2: values.role2,\n//                                     dateStart: dateToLocalISO(values.dateStart),\n//                                     dateEnd: dateEnd\n//                                   }\n//                                 }, refetchQueries: [\n//                                     {query: GET_SCHEDULE_CLASS_ACCOUNTS_QUERY, variables: { scheduleItem: match.params.class_id }},\n//                                     // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n//                                 ]})\n//                                 .then(({ data }) => {\n//                                     console.log('got data', data);\n//                                     toast.success((t('schedule.classes.instructors.toast_edit_success')), {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                   }).catch((error) => {\n//                                     toast.error((t('general.toast_server_error')) +  error, {\n//                                         position: toast.POSITION.BOTTOM_RIGHT\n//                                       })\n//                                     console.log('there was an error sending the query', error)\n//                                     setSubmitting(false)\n//                                   })\n//                             }}\n//                             >\n//                             {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n//                               <ScheduleClassInstructorForm\n//                                 inputData={inputData}\n//                                 isSubmitting={isSubmitting}\n//                                 setFieldTouched={setFieldTouched}\n//                                 setFieldValue={setFieldValue}\n//                                 errors={errors}\n//                                 values={values}\n//                                 returnUrl={returnUrl}\n//                               >\n//                                 {console.log(errors)}\n//                               </ScheduleClassInstructorForm>\n//                             )}\n//                         </Formik>\n//                     )}\n//                   </Mutation>\n//                 </ClassEditBase>\n//               )\n//             }}\n//           </Query>\n//         </div>\n//       </SiteWrapper>\n//     )\n//   }\n// }\n\n\nexport default withTranslation()(withRouter(ScheduleClassPriceEdit))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\n// import ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ScheduleEventsBase({ t, match, history, children, pageHeaderButtonList=\"\" }) {\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.events.title\")}>\n              <div className=\"page-options d-flex\">\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={12}>\n              { children }\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventsBase))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String, $archived:Boolean!, $orderBy: String!) {\n    scheduleEvents(first: 15, before: $before, after:$after, archived:$archived, orderBy: [$orderBy]) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\n  query ScheduleEvent($id: ID!, $before: String, $after: String) {\n    scheduleEvent(id: $id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      autoSendInfoMail\n      organizationLocation {\n        id\n        name\n      }\n      name\n      tagline\n      preview\n      description\n      organizationLevel {\n        id\n        name\n      }\n      instructor {\n        id \n        fullName\n      }\n      instructor2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      infoMailContent\n      scheduleItems {\n        edges {\n          node {\n            id\n          }\n        }\n      }\n      createdAt\n      updatedAt\n    }\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventInputValues($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationLevels(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\nexport const ARCHIVE_SCHEDULE_EVENT = gql`\n  mutation ArchiveScheduleEvent($input: ArchiveScheduleEventInput!) {\n    archiveScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n\nexport const DUPLICATE_SCHEDULE_EVENT = gql`\n  mutation DuplicateScheduleEvent($input: DuplicateScheduleEventInput!) {\n    duplicateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n      }\n    }\n  }\n`\n","import CSLS from \"../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n  let archived = localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)\n  if (archived === null) {\n    archived = false\n  }\n\n  let queryVars = {\n    archived: (archived === \"true\") ? true : false,\n    orderBy: (archived === \"true\") ? \"-date_start\": \"date_start\",\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { ARCHIVE_SCHEDULE_EVENT, GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\nimport { get_list_query_variables } from './tools'\n\nimport ButtonArchive from '../../ui/ButtonArchive'\nimport ButtonUnArchive from '../../ui/ButtonUnArchive'\n\n\nfunction ScheduleEventArchive({t, match, history, node}) {\n  const [archiveScheduleEvent] = useMutation(ARCHIVE_SCHEDULE_EVENT)\n  const refetchQueries = [\n    { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() },\n  ]\n\n  if (!node.archived) {\n    return (\n      <ButtonArchive\n        msgConfirm={t(\"schedule.events.archive_confirm_msg\")}\n        msgSuccess={t(\"general.archived\")}\n        archiveFunction={archiveScheduleEvent}\n        archiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: true\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n\n  } else {\n    return (\n      <ButtonUnArchive\n        msgConfirm={t(\"schedule.events.unarchive_confirm_msg\")}\n        msgSuccess={t(\"general.unarchived\")}\n        unArchiveFunction={archiveScheduleEvent}\n        unArchiveFunctionVariables={{ \n            variables: {\n              input: {\n                id: node.id,\n                archived: false\n              },\n            }, \n            refetchQueries: refetchQueries,\n          }\n        }\n      />\n    )\n  }\n}\n\nexport default withTranslation()(withRouter(ScheduleEventArchive))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBoolean from \"../../ui/BadgeBoolean\"\n\nimport ContentCard from \"../../general/ContentCard\"\nimport ScheduleEventsBase from \"./ScheduleEventsBase\"\nimport ScheduleEventArchive from \"./ScheduleEventArchive\"\n\nimport ButtonAdd from '../../ui/ButtonAdd'\nimport ButtonConfirm from '../../ui/ButtonConfirm'\nimport ButtonEdit from '../../ui/ButtonEdit'\nimport { GET_SCHEDULE_EVENTS_QUERY, DUPLICATE_SCHEDULE_EVENT } from \"./queries\"\nimport { get_list_query_variables } from \"./tools\"\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED)) {\n  localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false) \n} \n\n\nfunction ScheduleEvents({t, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading, error, data, refetch, fetchMore } = useQuery(GET_SCHEDULE_EVENTS_QUERY, {\n    variables: get_list_query_variables()\n  })\n  const [duplicateScheduleEvent] = useMutation(DUPLICATE_SCHEDULE_EVENT)\n\n  const pageHeaderButtonList = <HasPermissionWrapper permission=\"add\" resource=\"scheduleevent\">\n    <ButtonAdd addUrl=\"/schedule/events/add\" />\n  </HasPermissionWrapper>\n\n  const cardHeaderContent = <Card.Options>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"false\") ? 'primary': 'secondary'}  \n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, false)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.current')}\n    </Button>\n    <Button color={(localStorage.getItem(CSLS.SCHEDULE_EVENTS_ARCHIVED) === \"true\") ? 'primary': 'secondary'} \n            size=\"sm\" \n            className=\"ml-2\" \n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_EVENTS_ARCHIVED, true)\n              refetch(get_list_query_variables())\n            }\n    }>\n      {t('general.archive')}\n    </Button>\n  </Card.Options>\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <ContentCard \n          cardTitle={t('schedule.events.title')}\n          headerContent={cardHeaderContent}\n        >\n          {t(\"schedule.events.error_loading_data\")}\n        </ContentCard>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(data)\n\n  const scheduleEvents = data.scheduleEvents\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <ContentCard \n        cardTitle={t('schedule.events.title')}\n        headerContent={cardHeaderContent}\n        hasCardBody={false}\n        pageInfo={scheduleEvents.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: scheduleEvents.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.scheduleEvents.edges\n                  const pageInfo = fetchMoreResult.scheduleEvents.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        scheduleEvents: {\n                          __typename: previousResult.scheduleEvents.__typename,\n                          edges: [ ...previousResult.scheduleEvents.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.event')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.shop')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>  \n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            { scheduleEvents.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  { moment(node.dateStart).format(dateFormat) } <br /> \n                </Table.Col>\n                <Table.Col>\n                  <span title={ node.name }>{ node.name.trunc(36) }</span> <br />\n                  <small className=\"text-muted\">\n                    { node.organizationLocation.name }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {\n                    (node.instructor) ? node.instructor.fullName.trunc(30) : \"\"\n                  }\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayShop} />\n                </Table.Col>\n                {/* <Table.Col>\n                  { node.scheduleItem.organizationLocationRoom.organizationLocation.name } <br />\n                  <span className=\"text-muted\">\n                    { node.scheduleItem.organizationLocationRoom.name }\n                  </span> \n                </Table.Col> */}\n                <Table.Col className=\"text-right\" key={v4()}>\n                  <HasPermissionWrapper key={v4()} permission=\"add\" resource=\"scheduleevent\">\n                    <ButtonConfirm\n                      title={t(\"schedule.events.confirm_duplicate\")}\n                      msgConfirm={<p>{node.name} { moment(node.dateStart).format(dateFormat) }</p>}\n                      msgSuccess={(t(\"schedule.events.toast_duplicate_success\"))}\n                      actionFunction={duplicateScheduleEvent} \n                      actionFunctionVariables={{\n                        variables: {input: {id: node.id}},\n                        refetchQueries: [\n                          { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n                        ]\n                      }}\n                      buttonClass=\"btn-secondary\"\n                      buttonIcon={<Icon name=\"copy\" />}\n                      buttonText={t(\"general.duplicate\")}\n                      buttonTextColor=\"\"\n                    />\n                  </HasPermissionWrapper>\n                  {(node.archived) ? \n                    <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n                      <ButtonEdit editUrl={`/schedule/events/edit/${node.id}`} />\n                  }\n                  <ScheduleEventArchive node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEvents))\n\n\n// const ScheduleEvents = ({ t, history, archived=false }) => (\n//   <SiteWrapper>\n//     <div className=\"my-3 my-md-5\">\n//       <Container>\n//         <Page.Header title={t(\"organization.title\")} />\n//         <Grid.Row>\n//           <Grid.Col md={9}>\n//             <Query query={GET_LEVELS_QUERY} variables={{ archived }}>\n//              {({ loading, error, data: {organizationLevels: levels}, refetch, fetchMore }) => {\n//                 // Loading\n//                 if (loading) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <Dimmer active={true}\n//                             loader={true}>\n//                     </Dimmer>\n//                   </ContentCard>\n//                 )\n//                 // Error\n//                 if (error) return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}>\n//                     <p>{t('organization.levels.error_loading')}</p>\n//                   </ContentCard>\n//                 )\n//                 const headerOptions = <Card.Options>\n//                   <Button color={(!archived) ? 'primary': 'secondary'}  \n//                           size=\"sm\"\n//                           onClick={() => {archived=false; refetch({archived});}}>\n//                     {t('general.current')}\n//                   </Button>\n//                   <Button color={(archived) ? 'primary': 'secondary'} \n//                           size=\"sm\" \n//                           className=\"ml-2\" \n//                           onClick={() => {archived=true; refetch({archived});}}>\n//                     {t('general.archive')}\n//                   </Button>\n//                 </Card.Options>\n                \n//                 // Empty list\n//                 if (!levels.edges.length) { return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}>\n//                     <p>\n//                     {(!archived) ? t('organization.levels.empty_list') : t(\"organization.levels.empty_archive\")}\n//                     </p>\n                   \n//                   </ContentCard>\n//                 )} else {   \n//                 // Life's good! :)\n//                 return (\n//                   <ContentCard cardTitle={t('organization.levels.title')}\n//                                headerContent={headerOptions}\n//                                pageInfo={levels.pageInfo}\n//                                onLoadMore={() => {\n//                                 fetchMore({\n//                                   variables: {\n//                                     after: levels.pageInfo.endCursor\n//                                   },\n//                                   updateQuery: (previousResult, { fetchMoreResult }) => {\n//                                     const newEdges = fetchMoreResult.organizationLevels.edges\n//                                     const pageInfo = fetchMoreResult.organizationLevels.pageInfo\n\n//                                     return newEdges.length\n//                                       ? {\n//                                           // Put the new levels at the end of the list and update `pageInfo`\n//                                           // so we have the new `endCursor` and `hasNextPage` values\n//                                           organizationLevels: {\n//                                             __typename: previousResult.organizationLevels.__typename,\n//                                             edges: [ ...previousResult.organizationLevels.edges, ...newEdges ],\n//                                             pageInfo\n//                                           }\n//                                         }\n//                                       : previousResult\n//                                   }\n//                                 })\n//                               }} >\n//                     <Table>\n//                           <Table.Header>\n//                             <Table.Row key={v4()}>\n//                               <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n//                             </Table.Row>\n//                           </Table.Header>\n//                           <Table.Body>\n//                               {levels.edges.map(({ node }) => (\n//                                 <Table.Row key={v4()}>\n//                                   <Table.Col key={v4()}>\n//                                     {node.name}\n//                                   </Table.Col>\n//                                   <Table.Col className=\"text-right\" key={v4()}>\n//                                     {(node.archived) ? \n//                                       <span className='text-muted'>{t('general.unarchive_to_edit')}</span> :\n//                                       <Button className='btn-sm' \n//                                               onClick={() => history.push(\"/organization/levels/edit/\" + node.id)}\n//                                               color=\"secondary\">\n//                                         {t('general.edit')}\n//                                       </Button>\n//                                     }\n//                                   </Table.Col>\n//                                   <Mutation mutation={ARCHIVE_LEVEL} key={v4()}>\n//                                     {(archiveCostcenter, { data }) => (\n//                                       <Table.Col className=\"text-right\" key={v4()}>\n//                                         <button className=\"icon btn btn-link btn-sm\" \n//                                            title={t('general.archive')} \n//                                            href=\"\"\n//                                            onClick={() => {\n//                                              console.log(\"clicked archived\")\n//                                              let id = node.id\n//                                              archiveCostcenter({ variables: {\n//                                                input: {\n//                                                 id,\n//                                                 archived: !archived\n//                                                }\n//                                         }, refetchQueries: [\n//                                             {query: GET_LEVELS_QUERY, variables: {\"archived\": archived }}\n//                                         ]}).then(({ data }) => {\n//                                           console.log('got data', data);\n//                                           toast.success(\n//                                             (archived) ? t('general.unarchived'): t('general.archived'), {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                         }).catch((error) => {\n//                                           toast.error((t('general.toast_server_error')) +  error, {\n//                                               position: toast.POSITION.BOTTOM_RIGHT\n//                                             })\n//                                           console.log('there was an error sending the query', error);\n//                                         })\n//                                         }}>\n//                                           <Icon prefix=\"fa\" name=\"inbox\" />\n//                                         </button>\n//                                       </Table.Col>\n//                                     )}\n//                                   </Mutation>\n//                                 </Table.Row>\n//                               ))}\n//                           </Table.Body>\n//                         </Table>\n//                   </ContentCard>\n//                 )}}\n//              }\n//             </Query>\n//           </Grid.Col>\n//           <Grid.Col md={3}>\n//             <HasPermissionWrapper permission=\"add\"\n//                                   resource=\"organizationlevel\">\n//               <Button color=\"primary btn-block mb-6\"\n//                       onClick={() => history.push(\"/organization/levels/add\")}>\n//                 <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('organization.levels.add')}\n//               </Button>\n//             </HasPermissionWrapper>\n//           </Grid.Col>\n//         </Grid.Row>\n//       </Container>\n//     </div>\n//   </SiteWrapper>\n// );\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EDIT_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  displayShop: Yup.boolean(),\n  autoSendInfoMail: Yup.boolean(),\n  organizationLocation: Yup.string()\n    .required(t('yup.field_required')),\n  organizationLevel: Yup.string(),\n  instructor: Yup.string(),\n  instructor2: Yup.string(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  tagline: Yup.string(),\n  preview: Yup.string(),\n  description: Yup.string(),\n  infoMailContent: Yup.string()\n})\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\n\nconst ScheduleEventForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, values, errors, returnUrl }) => (\n  <FoForm>\n    <Card.Body>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                  className=\"custom-switch-input\"\n                  type=\"checkbox\" \n                  name=\"displayPublic\" \n                  checked={values.displayPublic} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.public')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"displayShop\" \n                checked={values.displayShop} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.shop')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"displayShop\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group>\n            <Form.Label className=\"custom-switch\">\n                <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"autoSendInfoMail\" \n                checked={values.autoSendInfoMail} />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('schedule.events.auto_send_info_mail')}</span>\n            </Form.Label>\n            <ErrorMessage name=\"autoSendInfoMail\" component=\"div\" />   \n          </Form.Group>  \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.location')}>\n            <Field component=\"select\" \n                  name=\"organizationLocation\" \n                  className={(errors.organizationLocation) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.location_please_select\")}</option>\n              {inputData.organizationLocations.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLocation\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.level')}>\n            <Field component=\"select\" \n                  name=\"organizationLevel\" \n                  className={(errors.organizationLevel) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.organizationLevels.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.name}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"organizationLevel\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor')}>\n            <Field component=\"select\" \n                  name=\"instructor\" \n                  className={(errors.instructor) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}>{t(\"schedule.event.instructor_please_select\")}</option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n        <Grid.Col>\n          <Form.Group label={t('general.instructor2')}>\n            <Field component=\"select\" \n                  name=\"instructor2\" \n                  className={(errors.instructor2) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"\" key={v4()}></option>\n              {inputData.accounts.edges.map(({ node }) =>\n                <option value={node.id} key={v4()}>{node.fullName}</option>\n              )}\n            </Field>\n            <ErrorMessage name=\"instructor2\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group> \n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.name')}>\n            <Field type=\"text\" \n                    name=\"name\" \n                    className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.tagline')}>\n            <Field type=\"text\" \n                    name=\"tagline\" \n                    className={(errors.tagline) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n            <ErrorMessage name=\"tagline\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.preview')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"preview\"\n              initialValue={values.preview}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"preview\", e.target.getContent())\n                setFieldTouched(\"preview\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"preview\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          <Form.Group label={t('general.infoMailContent')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"infoMailContent\"\n              initialValue={values.infoMailContent}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"infoMailContent\", e.target.getContent())\n                setFieldTouched(\"infoMailContent\", true, true)\n              }}\n              />\n            <ErrorMessage name=\"infoMailContent\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Grid.Col>\n      </Grid.Row>\n    </Card.Body>\n    <Card.Footer>\n      <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('general.submit')}\n      </Button>\n      <Link to={returnUrl}>\n        <Button color=\"link\">\n          {t('general.cancel')}\n        </Button>\n      </Link>\n    </Card.Footer>\n  </FoForm>\n)\n  \n  \nexport default withTranslation()(withRouter(ScheduleEventForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\"\n\nimport { get_list_query_variables } from \"./tools\"\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_INPUT_VALUES_QUERY } from './queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from './yupSchema'\nimport ScheduleEventForm from './ScheduleEventForm'\nimport ScheduleEventsBase from './ScheduleEventsBase'\nimport ButtonBack from '../../ui/ButtonBack';\n\n\nconst CREATE_SCHEDULE_EVENT = gql`\n  mutation CreateScheduleEvent($input:CreateScheduleEventInput!) {\n    createScheduleEvent(input: $input) {\n      scheduleEvent{\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventAdd({ t, history }) {\n  const returnUrl = \"/schedule/events\"\n  const pageHeaderButtonList = <ButtonBack returnUrl={returnUrl} />\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY, {\n    fetchPolicy: \"network-only\"\n  })\n  const [ createScheduleEvent ] = useMutation(CREATE_SCHEDULE_EVENT)\n\n  if (loading) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n        <Card title={t(\"schedule.events.add\")}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventsBase>\n    )\n  }\n\n  console.log(\"CREATE SCHEDULE EVENT INPUT DATA\")\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ScheduleEventsBase pageHeaderButtonList={pageHeaderButtonList}>\n      <Card title={t(\"schedule.events.add\")}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            displayShop: true,\n            name: \"\",\n            description: \"\",\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              createScheduleEvent({ variables: {\n                input: {\n                  displayPublic: values.displayPublic,\n                  displayShop: values.displayShop,\n                  autoSentInfoMail: values.autoSentInfoMail,\n                  organizationLocation: values.organizationLocation,\n                  organizationLevel: values.organizationLevel,\n                  name: values.name,\n                  tagline: values.tagline,\n                  preview: values.preview,\n                  description: values.description,\n                  instructor: values.instructor,\n                  instructor2: values.instructor2,\n                  infoMailContent: values.infoMailContent,\n                }\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  history.push(returnUrl)\n                  toast.success((t('schedule.events.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n      </Card>\n    </ScheduleEventsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventAdd))","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport {\n  List\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\nconst ScheduleEventMenu = ({ t, eventId, activeLink }) => (\n  <List.Group transparent={true}>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"change\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}`}\n          icon=\"edit-2\"\n          active={(activeLink === 'general')}\n          >\n          {t('schedule.events.edit.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventticket\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/tickets`}\n          icon=\"clipboard\"\n          active={(activeLink === 'tickets')}\n          >\n          {t('schedule.events.tickets.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleevent\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/activities`}\n          icon=\"calendar\"\n          active={(activeLink === 'activities')}\n          >\n          {t('schedule.events.activities.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventmedia\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/media`}\n          icon=\"image\"\n          active={(activeLink === 'media')}\n          >\n          {t('schedule.events.media.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventearlybird\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/earlybirds`}\n          icon=\"clock\"\n          active={(activeLink === 'earlybirds')}\n          >\n          {t('schedule.events.earlybirds.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n    <HasPermissionWrapper \n        resource=\"scheduleeventsubscriptiongroupdiscount\"\n        permission=\"view\" \n    >\n      <List.GroupItem\n          key={v4()}\n          className=\"d-flex align-items-center\"\n          to={`#/schedule/events/edit/${eventId}/subscription_group_discounts`}\n          icon=\"edit\"\n          active={(activeLink === 'subscription_group_discounts')}\n          >\n          {t('schedule.events.subscription_group_discounts.title')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ScheduleEventMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container,\n  Grid\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ScheduleEventEditMenu from \"./ScheduleEventEditMenu\"\nimport ButtonBack from '../../../ui/ButtonBack';\n\nfunction ScheduleEventEditBaseBase({ \n  t, \n  match, \n  history, \n  children, \n  returnUrl=\"/schedule/events\", \n  pageHeaderOptions, \n  activeLink,\n  pageSubTitle\n }) {\n  const eventId = match.params.event_id\n\n  return (\n      <SiteWrapper>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"schedule.events.title\")} subTitle={pageSubTitle}>\n              <div className=\"page-options d-flex\">\n                {/* Page options can go here... */}\n                <ButtonBack returnUrl={returnUrl} />\n                { pageHeaderOptions }\n              </div>\n            </Page.Header>\n            <Grid.Row>\n            <Grid.Col md={9}>\n              { children }\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <ScheduleEventEditMenu activeLink={activeLink} eventId={eventId}/>\n            </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n      </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditBaseBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditBase({\n    t, \n    match, \n    history, \n    activeTab, \n    children, \n    activeLink, \n    cardTitle, \n    pageHeaderOptions,\n    returnUrl=\"/schedule/events\"}) \n  {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const eventId = match.params.event_id\n\n  // Set default card title\n  if (!cardTitle) {\n    cardTitle = t(\"schedule.events.edit.title\")\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl} activeLink={activeLink}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase \n      cardTitle={cardTitle} \n      pageHeaderOptions={pageHeaderOptions} \n      returnUrl={returnUrl} \n      activeLink={activeLink}\n    >\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n    )\n  }\n\nexport default withTranslation()(withRouter(ScheduleEventEditBase))","import React from 'react'\nimport { gql } from \"@apollo/client\"\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENTS_QUERY, GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport { SCHEDULE_EVENT_EDIT_SCHEMA } from '../yupSchema'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport ScheduleEventEditBase from \"./ScheduleEventEditBase\"\nimport ScheduleEventForm from \"../ScheduleEventForm\"\nimport { get_list_query_variables } from \"../tools\"\n\n\nconst UPDATE_SCHEDULE_EVENT = gql`\n  mutation UpdateScheduleEvent($input: UpdateScheduleEventInput!) {\n    updateScheduleEvent(input: $input) {\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n\nfunction ScheduleEventEdit({t, match, history}) {\n  const id = match.params.event_id\n  const returnUrl = \"/schedule/events\"\n  const activeLink = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateScheduleEvent ] = useMutation(UPDATE_SCHEDULE_EVENT)\n\n\n  if (loading) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleEventEditBase activeLink={activeLink}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </ScheduleEventEditBase>\n    )\n  }\n\n  const initialData = data.scheduleEvent\n  const inputData = data\n\n  let initialOrgranizationlevel = \"\"\n  if (initialData.organizationLevel) {\n    initialOrgranizationlevel = initialData.organizationLevel.id\n  }\n\n  let initialInstructor = \"\"\n  if (initialData.instructor) {\n    initialInstructor = initialData.instructor.id\n  }\n\n  let initialInstructor2 = \"\"\n  if (initialData.instructor2) {\n    initialInstructor2 = initialData.instructor2.id\n  }\n\n  return (\n    <ScheduleEventEditBase activeLink={activeLink}>\n        <Formik\n          initialValues={{ \n            displayPublic: initialData.displayPublic,\n            displayShop: initialData.displayShop,\n            autoSendInfoMail: initialData.autoSendInfoMail,\n            organizationLocation: initialData.organizationLocation.id,\n            organizationLevel: initialOrgranizationlevel,\n            name: initialData.name,\n            tagline: initialData.tagline,\n            preview: initialData.preview,\n            description: initialData.description,\n            instructor: initialInstructor,\n            instructor2: initialInstructor2,\n            infoMailContent: initialData.infoMailContent,\n          }}\n          validationSchema={SCHEDULE_EVENT_EDIT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let inputValues = {\n                id: id,\n                displayPublic: values.displayPublic,\n                displayShop: values.displayShop,\n                autoSendInfoMail: values.autoSendInfoMail,\n                organizationLocation: values.organizationLocation,\n                organizationLevel: values.organizationLevel,\n                name: values.name,\n                tagline: values.tagline,\n                preview: values.preview,\n                description: values.description,\n                infoMailContent: values.infoMailContent,\n              }\n\n              if (values.instructor) {\n                inputValues['instructor'] = values.instructor\n              }\n\n              if (values.instructor2) {\n                inputValues['instructor2'] = values.instructor2\n              }\n\n              updateScheduleEvent({ variables: {\n                input: inputValues\n              }, refetchQueries: [\n                  { query: GET_SCHEDULE_EVENTS_QUERY, variables: get_list_query_variables() }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.events.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values }) => (\n            <ScheduleEventForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_ACTIVITIES_QUERY = gql`\nquery ScheduleItem($before:String, $after:String, $scheduleEvent:ID!) {\n  scheduleItems(first:100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        displayPublic\n        scheduleEvent {\n          id\n          name\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        name\n        spaces\n        countAttendingAndBooked\n        dateStart\n        timeStart\n        timeEnd\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const GET_SCHEDULE_EVENT_ACTIVITY_QUERY = gql`\nquery ScheduleEventActivity($before:String, $after:String, $id:ID!) {\n  scheduleItem(id: $id) {\n    id\n    displayPublic\n    name\n    spaces\n    dateStart\n    timeStart\n    timeEnd\n    organizationLocationRoom {\n      id\n      name\n      organizationLocation {\n        id\n        name\n      }\n    }\n    account {\n      id\n      fullName\n    }\n    account2 {\n      id\n      fullName\n    }\n  }\n  accounts(first: 100, before: $before, after: $after, isActive:true, instructor: true) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        fullName\n      }\n    }\n  }\n  organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n    pageInfo {\n      startCursor\n      endCursor\n      hasNextPage\n      hasPreviousPage\n    }\n    edges {\n      node {\n        id\n        name\n        organizationLocation {\n          id \n          name\n        }\n      }\n    }\n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ContentCard from \"../../../general/ContentCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"./ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventEditListBase({\n  t, \n  match, \n  history, \n  activeTab, \n  pageInfo, \n  onLoadMore, \n  activeLink, \n  children, \n  pageHeaderOptions=\"\",\n  pageSubTitle=\"\",\n  returnUrl=\"/schedule/events\"\n}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.edit.title\")\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n\nif (loading) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          <Dimmer loading={true} active={true} />\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nif (error) {\n  return (\n    <ScheduleEventEditBaseBase \n      pageHeaderOptions={pageHeaderOptions} \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <Card title={cardTitle}>\n        <Card.Body>\n          {t(\"schedule.events.error_loading\")}\n        </Card.Body>\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nconst event = data.scheduleEvent\nconst dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\nconst cardSubTitle = (event) ? \n<span className=\"text-muted\">\n  - {event.name + \" \" + dateStart}\n</span> : \"\"\n\nreturn (\n  <ScheduleEventEditBaseBase \n    pageHeaderOptions={pageHeaderOptions} \n    activeLink={activeLink} \n    pageSubTitle={pageSubTitle}\n    returnUrl={returnUrl}\n  >\n    <ContentCard \n      cardTitle={<span>{cardTitle} {cardSubTitle}</span>}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n      hasCardBody={false}\n    >\n      {children}\n    </ContentCard>\n  </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEditListBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_ACTIVITY, GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventActivity] = useMutation(DELETE_SCHEDULE_EVENT_ACTIVITY)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.activities.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.activities.delete_success'),\n          deleteFunction: deleteScheduleEventActivity,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityDelete))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport { TOKEN_REFRESH } from '../../../../queries/system/auth';\nimport { refreshTokenAndOpenExportLinkInNewTab } from '../../../../tools/refresh_token_and_open_export_link';\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventActivityDelete from \"./ScheduleEventActivityDelete\"\nimport moment from 'moment';\n\n\nfunction ScheduleItems({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"activities\"\n  const exportUrl = `/d/export/schedule_event/activities/attendance/${eventId}`\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  const pageHeaderOptions = <React.Fragment>\n    {/* Export Active Accounts */}\n    <Button\n      color=\"secondary\"\n      icon=\"download-cloud\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, exportUrl\n      )}\n    >\n      {t('general.export')} \n    </Button>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/activities/add`} className=\"ml-2\" />\n  </React.Fragment>\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleItems = data.scheduleItems\n  const pageInfo = data.scheduleItems.pageInfo\n\n  // Empty list\n  if (!scheduleItems.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItems.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItems.edges\n        const pageInfo = fetchMoreResult.scheduleItems.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItems: {\n                __typename: previousResult.scheduleItems.__typename,\n                edges: [ ...previousResult.scheduleItems.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.instructor')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.filled')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleItems.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)} <br />\n                  {/* Start & end time */}\n                  <small className=\"text-muted\">\n                    {moment(node.dateStart + ' ' + node.timeStart).format(timeFormat)} {' - '}\n                    {moment(node.dateStart + ' ' + node.timeEnd).format(timeFormat)} { ' ' }\n                  </small>\n                </Table.Col>\n                <Table.Col>\n                  {node.name} <br />\n                  <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n                </Table.Col>\n                <Table.Col>\n                  {node.organizationLocationRoom.organizationLocation.name} <br />\n                  <small className=\"text-muted\">{node.organizationLocationRoom.name}</small>\n                </Table.Col>\n                <Table.Col>\n                  {node.account && node.account.fullName} \n                  {(node.account2) ? <span className=\"text-muted\"><br />{node.account2.fullName}</span> : \"\"}\n                </Table.Col>\n                <Table.Col>\n                  {node.countAttendingAndBooked}/{node.spaces}\n                </Table.Col>\n                <Table.Col>\n                  <BadgeBoolean value={node.displayPublic} />\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/activities/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventActivityDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleItems))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_ACTIVITY_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  spaces: Yup.number()\n    .required(t('yup.field_required')),\n  organizationLocationRoom: Yup.string()\n    .required(t('yup.field_required')),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  timeStart: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')),\n  timeEnd: Yup.date()\n    .typeError(t('yup.time_required'))\n    .required(t('yup.field_required')), \n  account: Yup.string(),\n  account2: Yup.string(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventActivityBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../../ui/CSTimePicker\"\n\nfunction ScheduleEventActivityForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.activities.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              {/* {errors.timeStart}\n              {errors.timeStart && touched.timeStart ? (\n                <span className=\"invalid-feedback\">{errors.timeStart} - hacky thingy</span>\n              ) : null} */}\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.spaces')}>\n                <Field type=\"text\" \n                    name=\"spaces\" \n                    className={(errors.spaces) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"spaces\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Dimmer\n} from \"tabler-react\"\n\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst ADD_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation CreateScheduleItem($input:CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventActivityAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeLink = 'activities'\n  const cardTitle = t(\"schedule.events.activities.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_ACTIVITY, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n  console.log(inputData)\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          spaces: '',\n          organizationLocationRoom: '',\n          dateStart: new Date(),\n          // Set defaults as date objects\n          timeStart: new Date(2000, 1, 1, 9, 0),\n          timeEnd: new Date(2000, 1, 1, 10, 0),\n          account: '',\n          account2: ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              frequencyType: \"SPECIFIC\",\n              frequencyInterval: 0,\n              scheduleItemType: \"EVENT_ACTIVITY\",\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventActivityTabs({ t, activeTab, eventId, scheduleItemId}) {\n  console.log(activeTab)\n\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}`\n          },\n          {\n            name: \"attendance\", \n            title: t(\"schedule.events.tickets.edit_menu.attendance\"), \n            link: `/schedule/events/edit/${eventId}/activities/edit/${scheduleItemId}/attendance`\n          },\n      ]}\n      active={activeTab}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventActivityTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"./ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase sidebarContent={sidebarContent}  returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEditBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\nimport { GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_ACTIVITY_SCHEMA } from './yupSchema'\n\nimport ScheduleEventActivityBack from \"./ScheduleEventActivityBack\"\nimport ScheduleEventActivityEditBase from \"./ScheduleEventActivityEditBase\"\nimport ScheduleEventActivityForm from \"./ScheduleEventActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_ACTIVITY = gql`\n  mutation UpdateScheduleItem($input:UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\n\nfunction ScheduleEventActivityEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_ACTIVITY)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n  }})\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityEditBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityEditBase>\n  )\n\n  const inputData = data\n  const scheduleItem = data.scheduleItem\n  console.log(inputData)\n\n// DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleItem.dateStart) {\n    initialDateStart = new Date(scheduleItem.dateStart)\n  }\n\n  let initialTimeStart = null\n  if (scheduleItem.timeStart) {\n    initialTimeStart = TimeStringToJSDateOBJ(scheduleItem.timeStart)\n  }\n  let initialTimeEnd = null\n  if (scheduleItem.timeEnd) {\n    initialTimeEnd = TimeStringToJSDateOBJ(scheduleItem.timeEnd)\n  }\n\n\n  return (\n    <ScheduleEventActivityEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleItem.displayPublic,\n          name: scheduleItem.name,\n          spaces: scheduleItem.spaces,\n          organizationLocationRoom: scheduleItem.organizationLocationRoom.id,\n          dateStart: initialDateStart,\n          timeStart: initialTimeStart,\n          timeEnd: initialTimeEnd,\n          account: (scheduleItem.account) ? scheduleItem.account.id : '',\n          account2: (scheduleItem.account2) ? scheduleItem.account2.id : ''\n        }}\n        validationSchema={SCHEDULE_EVENT_ACTIVITY_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: scheduleItemId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              spaces: parseInt(values.spaces),\n              organizationLocationRoom: values.organizationLocationRoom,\n              account: values.account,\n              account2: values.account2,\n              dateStart: dateToLocalISO(values.dateStart),\n              timeStart: dateToLocalISOTime(values.timeStart),\n              timeEnd: dateToLocalISOTime(values.timeEnd),\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_ACTIVITIES_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.activities.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventActivityForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventActivityEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_ITEM_ATTENDANCES_QUERY = gql`\nquery ScheduleItemAttendances($before:String, $after:String, $schedule_item:ID!) {\n  scheduleItemAttendances(first: 100, before: $before, after: $after, scheduleItem:$schedule_item) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        bookingStatus\n        account {\n          id\n          fullName\n        }\n        accountScheduleEventTicket {\n          id\n          scheduleEventTicket {\n            name\n          }\n          cancelled\n        }\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ContentCard from \"../../../../general/ContentCard\"\n\nimport { GET_SCHEDULE_EVENT_ACTIVITY_QUERY } from '../queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../../queries'\n\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventEditBaseBase from \"../../edit/ScheduleEventEditBaseBase\"\nimport ScheduleEventActivityTabs from \"../ScheduleEventActivityTabs\"\n\n\nfunction ScheduleEventActivityAttendanceBase({t, match, history, activeTab, onLoadMore, pageInfo, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  console.log(activeTab)\n\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities`\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingActivity, error: errorActivity, data: dataActivity } = useQuery(GET_SCHEDULE_EVENT_ACTIVITY_QUERY, {\n    variables: {\n      id: scheduleItemId\n    }\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading || loadingActivity) {\n    return (\n      <ScheduleEventEditBaseBase  activeLink={activeLink} sidebarContent={sidebarContent} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorActivity) {\n    return (\n      <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n          <Card.Body>\n            {t(\"schedule.event.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleItem = dataActivity.scheduleItem\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleItem) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleItem) ?\n  <span className=\"text-muted\">\n    - {scheduleItem.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} sidebarContent={sidebarContent} returnUrl={returnUrl}>\n      <ContentCard \n        cardTitle={<span>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</span>}\n        cardTabs={<ScheduleEventActivityTabs activeTab={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>}\n        hasCardBody={false}\n        pageInfo={pageInfo}\n        onLoadMore={onLoadMore}\n      >\n        \n        {children}\n      </ContentCard>\n      {/* <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventActivityTabs active={activeTab} eventId={eventId} scheduleItemId={scheduleItemId}/>\n        {children}\n      </Card> */}\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendanceBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Card,\n  Table\n} from \"tabler-react\"\n\nimport { GET_SCHEDULE_ITEM_ATTENDANCES_QUERY } from \"./queries\"\nimport ScheduleEventActivityBack from \"../ScheduleEventActivityBack\"\nimport ScheduleEventActivityAttendanceBase from \"./ScheduleEventActivityAttendanceBase\"\nimport BadgeBookingStatus from \"../../../../ui/BadgeBookingStatus\"\n\n\nfunction ScheduleEventActivityAttendance({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleItemId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/activities/`\n  const activeTab = 'attendance'\n  const cardTitle = t(\"schedule.events.activities.edit\")\n  const activeLink = \"activities\"\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_ITEM_ATTENDANCES_QUERY, {\n    variables: {\n      schedule_item: scheduleItemId\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const sidebarContent = <ScheduleEventActivityBack />\n\n  if (loading) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventActivityAttendanceBase>\n  )\n  if (error) return (\n    <ScheduleEventActivityAttendanceBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventActivityAttendanceBase>\n  )\n\n  const scheduleItemAttendances = data.scheduleItemAttendances\n  console.log(data)\n  const pageInfo = scheduleItemAttendances.pageInfo\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) { return (\n    <ScheduleEventActivityAttendanceBase activeLink={activeLink} activeTab={activeTab} sidebarContent={sidebarContent}>\n      <Card.Body>\n        <p>{t('schedule.events.activities.attendance.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventActivityAttendanceBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleItemAttendances.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new attendance items at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleItemAttendances: {\n                __typename: previousResult.scheduleItemAttendances.__typename,\n                edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventActivityAttendanceBase \n      // sidebarContent={sidebarContent} \n      // cardTitle={cardTitle} \n      activeTab={activeTab}\n      pageInfo={pageInfo}\n      onLoadMore={onLoadMore}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleItemAttendances.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                  {node.account.fullName}\n                </Link>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBookingStatus status={node.bookingStatus} />\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventActivityAttendanceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventActivityAttendance))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventEarlybirds(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          discountPercentage\n          dateStart\n          dateEnd\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_EARLYBIRD_QUERY = gql`\n  query ScheduleEventEarlybird($id:ID!) {\n    scheduleEventEarlybird(id: $id) {\n      id\n      discountPercentage\n      dateStart\n      dateEnd\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation CreateScheduleEventEarlybird($input:CreateScheduleEventEarlybirdInput!) {\n    createScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_EARLYBIRD = gql`\n  mutation UpdateScheduleEventEarlybird($input:UpdateScheduleEventEarlybirdInput!) {\n    updateScheduleEventEarlybird(input: $input) {\n      scheduleEventEarlybird {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_EARLYBIRD   = gql`\n  mutation DeleteScheduleEventEarlybird($input: DeleteScheduleEventEarlybirdInput!) {\n    deleteScheduleEventEarlybird(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventEarlybirdDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventEarlybird] = useMutation(DELETE_SCHEDULE_EVENT_EARLYBIRD)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.earlybirds.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.earlybirds.delete_success'),\n          deleteFunction: deleteScheduleEventEarlybird,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdDelete))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment';\n\nimport {\n  Button,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventEarlybirdDelete from \"./ScheduleEventEarlybirdDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventEarlybirds({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"earlybirds\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/earlybirds/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventEarlybirds = data.scheduleEventEarlybirds\n  const pageInfo = data.scheduleEventEarlybirds.pageInfo\n\n  // Empty list\n  if (!scheduleEventEarlybirds.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.earlybirds.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventEarlybirds.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventEarlybirds.edges\n        const pageInfo = fetchMoreResult.scheduleEventEarlybirds.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventEarlybirds: {\n                __typename: previousResult.scheduleEventEarlybirds.__typename,\n                edges: [ ...previousResult.scheduleEventEarlybirds.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventEarlybirds.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {moment(node.dateStart).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {moment(node.dateEnd).format(dateFormat)}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/earlybirds/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventEarlybirdDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirds))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_EARLYBIRDS_SCHEMA = Yup.object().shape({\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  dateEnd: Yup.date()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n  .required(t('yup.field_required')),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                className={(errors.dateEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateEnd}\n                onChange={(date) => {\n                  setFieldValue(\"dateEnd\", date)\n                  setFieldTouched(\"dateEnd\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { ADD_SCHEDULE_EVENT_EARLYBIRD, GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.add\")\n\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_EARLYBIRD)\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { dateToLocalISO } from '../../../../tools/date_tools'\n\nimport { \n  GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, \n  GET_SCHEDULE_EVENT_EARLYBIRD_QUERY,\n  UPDATE_SCHEDULE_EVENT_EARLYBIRD\n } from \"./queries\"\nimport { SCHEDULE_EVENT_EARLYBIRDS_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventEarlybirdForm\"\n\n\nfunction ScheduleEventEarlybirdEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventEarlybirdId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/earlybirds/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.earlybirds.edit\")\n\n  const [updateScheduleEventEarlybird] = useMutation(UPDATE_SCHEDULE_EVENT_EARLYBIRD)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_EARLYBIRD_QUERY, {\n    variables: {\n      id: scheduleEventEarlybirdId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventEarlybird = data.scheduleEventEarlybird\n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let initialDateStart = null\n  if (scheduleEventEarlybird.dateStart) {\n    initialDateStart = new Date(scheduleEventEarlybird.dateStart)\n  }\n\n  let initialDateEnd = null\n  if (scheduleEventEarlybird.dateEnd) {\n    initialDateEnd = new Date(scheduleEventEarlybird.dateEnd)\n  }\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: initialDateStart,\n          dateEnd: initialDateEnd,\n          discountPercentage: scheduleEventEarlybird.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_EARLYBIRDS_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventEarlybird({ variables: {\n            input: {\n              id: scheduleEventEarlybirdId,\n              dateStart: dateToLocalISO(values.dateStart),\n              dateEnd: dateToLocalISO(values.dateEnd),\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_EARLYBIRDS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.earlybirds.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventEarlybirdEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_MEDIAS_QUERY = gql`\n  query ScheduleEventMedias($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventMedias(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          sortOrder\n          description\n          urlImage\n          urlImageThumbnailSmall\n          image\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_MEDIA_QUERY = gql`\n  query ScheduleEventMedia($id:ID!) {\n    scheduleEventMedia(id: $id) {\n      id\n      sortOrder\n      description\n      image\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_MEDIA   = gql`\n  mutation DeleteScheduleEventMedia($input: DeleteScheduleEventMediaInput!) {\n    deleteScheduleEventMedia(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventActivityInputValues($after: String, $before: String) {\n    accounts(first: 100, before: $before, after: $after, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_MEDIA, GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventMedia] = useMutation(DELETE_SCHEDULE_EVENT_MEDIA)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.media.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.media.delete_success'),\n          deleteFunction: deleteScheduleEventMedia,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaDelete))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Avatar,\n  Button,\n  Table,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventMediaDelete from \"./ScheduleEventMediaDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventMedia({t, match, history}) {\n  const eventId = match.params.event_id\n  const activeLink = \"media\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/media/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_MEDIAS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventMedias = data.scheduleEventMedias\n  const pageInfo = data.scheduleEventMedias.pageInfo\n\n  // Empty list\n  if (!scheduleEventMedias.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.media.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventMedias.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventMedias.edges\n        const pageInfo = fetchMoreResult.scheduleEventMedias.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventMedias: {\n                __typename: previousResult.scheduleEventMedias.__typename,\n                edges: [ ...previousResult.scheduleEventMedias.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader></Table.ColHeader> \n            <Table.ColHeader>{t('general.description')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.sort_order')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventMedias.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  <Avatar size=\"lg\" imageURL={node.urlImageThumbnailSmall} />\n                </Table.Col>\n                <Table.Col>\n                  {node.description}\n                </Table.Col>\n                <Table.Col>\n                  {node.sortOrder}\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/media/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventMediaDelete id={node.id} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMedia))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_MEDIA_SCHEMA = Yup.object().shape({\n  description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  sortOrder: Yup.number(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventMediaBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nimport { customFileInputLabelStyle } from \"../../../../tools/custom_file_input_label_style\"\n\nfunction ScheduleEventMediaForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputFileName, \n  fileInputLabel, \n  handleFileInputChange=f=>f\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.sort_order')}>\n              <Field type=\"text\" \n                    name=\"sortOrder\" \n                    className={(errors.sortOrder) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"sortOrder\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.custom_file_input_label')}>\n              <div className=\"custom-file\">\n                <input type=\"file\" ref={inputFileName} className=\"custom-file-input\" onChange={handleFileInputChange} />\n                <label className=\"custom-file-label\" style={customFileInputLabelStyle}>\n                  {fileInputLabel}\n                </label>\n              </div>\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaForm))","import React, { useState, useRef } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst ADD_SCHEDULE_EVENT_MEDIA = gql`\n  mutation CreateScheduleEventMedia($input:CreateScheduleEventMediaInput!) {\n    createScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeLink = 'media'\n  const cardTitle = t(\"schedule.events.media.add\")\n\n  const [addScheduleEventMedia] = useMutation(ADD_SCHEDULE_EVENT_MEDIA, {\n    onCompleted: () => history.push(returnUrl),\n  })\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: \"\",\n          sortOrder: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            scheduleEvent: eventId,\n            description: values.description,\n            sortOrder: values.sortOrder,\n            imageFileName: fileName,\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n\n            addScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            toast.error(t(\"general.please_select_a_file\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          }\n        }}\n      >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaAdd))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_MEDIA_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventMediaEditBase({t, match, history, activeTab, children}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const cardTitle = t(\"schedule.events.media.edit\")\n  const activeLink = \"media\"\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingMedia, error: errorMedia, data: dataMedia } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n    }\n  })\n\n  if (loading || loadingMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorMedia) {\n    return (\n      <ScheduleEventEditBaseBase returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const scheduleEventMedia = dataMedia.scheduleEventMedia\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (scheduleEventMedia) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardActivitySubtitle = (scheduleEventMedia) ?\n  <span className=\"text-muted\">\n    - {scheduleEventMedia.description}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase activeLink={activeLink} returnUrl={returnUrl}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardActivitySubtitle}</Card.Title>\n        </Card.Header>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEditBase))","import React, { useState, useRef } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_MEDIAS_QUERY, GET_SCHEDULE_EVENT_MEDIA_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_MEDIA_SCHEMA } from './yupSchema'\n\nimport ScheduleEventMediaBack from \"./ScheduleEventMediaBack\"\nimport ScheduleEventMediaEditBase from \"./ScheduleEventMediaEditBase\"\nimport ScheduleEventMediaForm from \"./ScheduleEventMediaForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_MEDIA = gql`\n  mutation UpdateScheduleEventMedia($input:UpdateScheduleEventMediaInput!) {\n    updateScheduleEventMedia(input: $input) {\n      scheduleEventMedia {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventMediaEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventMediaId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/media/`\n  const activeTab = 'general'\n  const cardTitle = t(\"schedule.events.media.edit\")\n\n  const [updateScheduleEventMedia] = useMutation(UPDATE_SCHEDULE_EVENT_MEDIA)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_MEDIA_QUERY, {\n    variables: {\n      id: scheduleEventMediaId\n  }})\n\n  const sidebarContent = <ScheduleEventMediaBack />\n\n  // Vars for document file input field start\n  const [fileName, setFileName] = useState(\"\")\n  const inputFileName = useRef(null)\n  const fileInputLabel = fileName || t(\"general.custom_file_input_inner_label\")\n\n  const handleFileInputChange = (event) => {\n    console.log('on change triggered')\n    setFileName(event.target.files[0].name)\n  }\n\n  if (loading) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventMediaEditBase>\n  )\n  if (error) return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventMediaEditBase>\n  )\n\n  const inputData = data\n  const scheduleEventMedia = data.scheduleEventMedia\n  console.log(inputData)\n\n  return (\n    <ScheduleEventMediaEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeTab={activeTab} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          description: scheduleEventMedia.description,\n          sortOrder: scheduleEventMedia.sortOrder\n        }}\n        validationSchema={SCHEDULE_EVENT_MEDIA_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n          console.log(fileName)\n\n          let inputVars = {\n            id: scheduleEventMediaId,\n            description: values.description,\n            sortOrder: values.sortOrder\n          }\n\n          function updateMedia() {\n            updateScheduleEventMedia({ variables: {\n              input: inputVars\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_EVENT_MEDIAS_QUERY, variables: {scheduleEvent: eventId}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                toast.success((t('schedule.events.media.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n\n          let reader = new FileReader()\n          reader.onload = function(reader_event) {\n            console.log(reader_event.target.result)\n            let b64_enc_file = reader_event.target.result\n            console.log(b64_enc_file)\n            // Add uploaded document b64 encoded blob to input vars\n            inputVars.image = b64_enc_file\n            inputVars.imageFileName = fileName\n\n            updateMedia()\n          }\n          \n          let file = inputFileName.current.files[0]\n          if (file && file.size < 5242880) {\n            reader.readAsDataURL(file)\n          } else if (file && file.size > 5242880) { \n            toast.error(t(\"error_messages.selected_file_exceeds_max_filesize\"), {\n              position: toast.POSITION.BOTTOM_RIGHT\n            })\n            setSubmitting(false)\n          } else {\n            updateMedia()\n          }\n        }}\n        >\n        {({ isSubmitting, errors, values }) => (\n          <ScheduleEventMediaForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputFileName={inputFileName}\n            fileInputLabel={fileInputLabel}\n            handleFileInputChange={handleFileInputChange}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventMediaEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventMediaEdit))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY = gql`\n  query ScheduleEventEarlybirds($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventSubscriptionGroupDiscounts(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          organizationSubscriptionGroup {\n            id\n            name\n          }\n          discountPercentage\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query OrganizationSubscriptionGroups {\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY = gql`\n  query ScheduleEventSubscriptionGroupDiscount($id:ID!) {\n    scheduleEventSubscriptionGroupDiscount(id: $id) {\n      id\n      discountPercentage\n      organizationSubscriptionGroup {\n        id\n        name\n      }\n    }\n    organizationSubscriptionGroups(first: 1000) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation CreateScheduleEventSubscriptionGroupDiscount($input:CreateScheduleEventSubscriptionGroupDiscountInput!) {\n    createScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT = gql`\n  mutation UpdateScheduleEventSubscriptionGroupDiscount($input:UpdateScheduleEventSubscriptionGroupDiscountInput!) {\n    updateScheduleEventSubscriptionGroupDiscount(input: $input) {\n      scheduleEventSubscriptionGroupDiscount {\n        id\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT   = gql`\n  mutation DeleteScheduleEventSubscriptionGroupDiscount($input: DeleteScheduleEventSubscriptionGroupDiscountInput!) {\n    deleteScheduleEventSubscriptionGroupDiscount(input: $input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { \n  DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY \n} from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountDelete({t, match, history, node}) {\n  const eventId = match.params.event_id\n  const [deleteScheduleEventSubscriptionGroupDiscount] = useMutation(\n    DELETE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n  )\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.subscription_group_discounts.delete_confirm_msg\"),\n          msgDescription: <p>{node.organizationSubscriptionGroup.name} - {node.discountPercentage} %</p>,\n          msgSuccess: t('schedule.events.subscription_group_discounts.delete_success'),\n          deleteFunction: deleteScheduleEventSubscriptionGroupDiscount,\n          functionVariables: { \n            variables: {\n              input: {\n                id: node.id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountDelete))\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\n// import ScheduleEventTicketListBase from \"./ScheduleEventTicketListBase\"\nimport ScheduleEventSubscriptionGroupDiscountDelete from \"./ScheduleEventSubscriptionGroupDiscountDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\n\n\nfunction ScheduleEventSubscriptionGroupDiscounts({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  // const dateFormat = appSettings.dateFormat\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"subscription_group_discounts\"\n\n  const pageHeaderOptions = <ButtonAdd \n    addUrl={`/schedule/events/edit/${eventId}/subscription_group_discounts/add`} \n    className=\"ml-2\"\n  />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n\n  const scheduleEventSubscriptionGroupDiscounts = data.scheduleEventSubscriptionGroupDiscounts\n  const pageInfo = data.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n  // Empty list\n  if (!scheduleEventSubscriptionGroupDiscounts.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <Card.Body>\n        <p>{t('schedule.events.subscription_group_discounts.empty_list')}</p>\n      </Card.Body>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventSubscriptionGroupDiscounts.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.edges\n        const pageInfo = fetchMoreResult.scheduleEventSubscriptionGroupDiscounts.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventSubscriptionGroupDiscounts: {\n                __typename: previousResult.scheduleEventSubscriptionGroupDiscounts.__typename,\n                edges: [ ...previousResult.scheduleEventSubscriptionGroupDiscounts.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase \n      activeLink={activeLink} \n      pageInfo={pageInfo} \n      onLoadMore={onLoadMore} \n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.subscription_group')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.earlybirds.discountPercentage')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n            {scheduleEventSubscriptionGroupDiscounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {/* {moment(node.dateStart).format(dateFormat)} */}\n                  {node.organizationSubscriptionGroup.name}\n                </Table.Col>\n                <Table.Col>\n                  {node.discountPercentage} %\n                </Table.Col>\n                <Table.Col className=\"text-right\">\n                  <Link to={`/schedule/events/edit/${eventId}/subscription_group_discounts/edit/${node.id}`}>\n                    <Button className='btn-sm' \n                            color=\"secondary\">\n                      {t('general.edit')}\n                    </Button>\n                  </Link>\n                  <ScheduleEventSubscriptionGroupDiscountDelete node={node} />\n                </Table.Col>\n              </Table.Row>\n            ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscounts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA = Yup.object().shape({\n  organizationSubscriptionGroup: Yup.string()\n    .required(t('yup.field_required')),\n  discountPercentage: Yup.number()\n    .required(t('yup.field_required')),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from \"react-router-dom\"\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\n\nfunction ScheduleEventSubscriptionGroupDiscountForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  returnUrl,\n  inputData,\n  setFieldTouched,\n  setFieldValue,\n})   \n{\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.subscription_group')}>\n              <Field component=\"select\" \n                    name=\"organizationSubscriptionGroup\" \n                    className={(errors.organizationSubscriptionGroup) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationSubscriptionGroups.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationSubscriptionGroup\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('schedule.events.earlybirds.discountPercentage')}>\n              <Field type=\"text\" \n                    name=\"discountPercentage\" \n                    className={(errors.discountPercentage) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n              <ErrorMessage name=\"discountPercentage\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountForm))\n","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { \n  Card,\n  Dimmer\n} from 'tabler-react'\n\nimport { \n  ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY,\n  GET_INPUT_VALUES_QUERY\n} from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventEarlybirdForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\n\nfunction ScheduleEventSubscriptionGroupDiscountAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'earlybirds'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.add\")\n\n\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleEventEarlybird] = useMutation(ADD_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer loader={true} active={true} />\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n        <p>{error.message}</p>\n      </Card.Body>\n    </ScheduleEventEditBase>\n  )\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date(),\n          dateEnd: \"\",\n          discountPercentage: 0,\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          addScheduleEventEarlybird({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n      >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventEarlybirdForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupDiscountAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react'\n\nimport { \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, \n  GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY,\n  UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT\n } from \"./queries\"\nimport { SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA } from './yupSchema'\n\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventSubscriptionGroupDiscountForm from \"./ScheduleEventSubscriptionGroupDiscountForm\"\n\n\nfunction ScheduleEventSubscriptionGroupEdit({ t, history, match }) {\n  const eventId = match.params.event_id\n  const scheduleEventSubscriptionGroupDiscountId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/subscription_group_discounts/`\n  const activeLink = 'subscription_group_discounts'\n  const cardTitle = t(\"schedule.events.subscription_group_discounts.edit\")\n\n  const [updateScheduleEventSubscriptionGroupDiscount] = useMutation(UPDATE_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT)\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_QUERY, {\n    variables: {\n      id: scheduleEventSubscriptionGroupDiscountId\n  }})\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Dimmer active={true} loader={true} />\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const scheduleEventSubscriptionGroupDiscount = data.scheduleEventSubscriptionGroupDiscount\n\n\n  return (\n    <ScheduleEventEditBase \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          organizationSubscriptionGroup: scheduleEventSubscriptionGroupDiscount.organizationSubscriptionGroup.id,\n          discountPercentage: scheduleEventSubscriptionGroupDiscount.discountPercentage\n        }}\n        validationSchema={SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"Submit values\")\n          console.log(values)\n\n          updateScheduleEventSubscriptionGroupDiscount({ variables: {\n            input: {\n              id: scheduleEventSubscriptionGroupDiscountId,\n              organizationSubscriptionGroup: values.organizationSubscriptionGroup,\n              discountPercentage: values.discountPercentage   \n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_SUBSCRIPTION_GROUP_DISCOUNTS_QUERY, variables: {scheduleEvent: eventId}}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              history.push(returnUrl)\n              toast.success((t('schedule.events.subscription_group_discounts.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventSubscriptionGroupDiscountForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n            values={values}\n            inputData={data}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventSubscriptionGroupEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKETS_QUERY = gql`\n  query ScheduleEventTickets($before:String, $after:String, $scheduleEvent:ID!) {\n    scheduleEventTickets(first: 100, before:$before, after:$after, scheduleEvent:$scheduleEvent) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          scheduleEvent {\n            id\n          }\n          fullEvent\n          deletable\n          displayPublic\n          name\n          description\n          price\n          priceDisplay\n          isSoldOut\n          financeTaxRate {\n            id\n            name\n          }\n          financeGlaccount {\n            id\n            name\n          }\n          financeCostcenter {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n    scheduleEventTicket(id: $id) {\n      id\n      displayPublic\n      name\n      description\n      price\n      financeTaxRate {\n        id\n        name\n      }\n      financeGlaccount {\n        id\n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_EVENT_TICKET = gql`\n  mutation DeleteScheduleEventTicket($input: DeleteScheduleEventTicketInput!) {\n    deleteScheduleEventTicket(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleEventTicketInputValues($after: String, $before: String) {\n    financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n    financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_SCHEDULE_EVENT_TICKET, GET_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketDelete({t, match, history, id}) {\n  const eventId = match.params.event_id\n  const [ deleteScheduleEventTicket ] = useMutation(DELETE_SCHEDULE_EVENT_TICKET)\n  const query_vars = {\n    scheduleEvent: eventId\n  }\n\n  return (\n    <button className=\"icon btn btn-link btn-sm mb-3 pull-right\" \n      title={t('general.delete')} \n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.events.tickets.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.events.tickets.delete_success'),\n          deleteFunction: deleteScheduleEventTicket,\n          functionVariables: { \n            variables: {\n              input: {\n                id: id\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: query_vars },\n            ]\n          }\n        })\n    }}>\n      <Icon prefix=\"fe\" name=\"trash-2\" />\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketDelete))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport {\n  Badge\n} from \"tabler-react\"\n\n\nfunction BadgeSoldOut({ t }) {\n  return <Badge color=\"warning\">{t('general.sold_out')}</Badge> \n}\n\nexport default withTranslation()(BadgeSoldOut)","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBoolean from \"../../../ui/BadgeBoolean\"\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY } from './queries'\nimport ScheduleEventEditListBase from \"../edit/ScheduleEventEditListBase\"\nimport ScheduleEventTicketDelete from \"./ScheduleEventTicketDelete\"\nimport ButtonAdd from '../../../ui/ButtonAdd';\nimport BadgeSoldOut from '../../../ui/BadgeSoldOut';\n\n\nfunction ScheduleEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  console.log(appSettings)\n  \n  const eventId = match.params.event_id\n  const activeLink = \"tickets\"\n\n  const pageHeaderOptions = <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/add`} className=\"ml-2\" />\n\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEvent: eventId\n    }\n  })\n  \n  if (loading) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditListBase>\n  )\n  if (error) return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditListBase>\n  )\n\n  const scheduleEventTickets = data.scheduleEventTickets\n  const pageInfo = data.scheduleEventTickets.pageInfo\n\n  // Empty list\n  if (!scheduleEventTickets.edges.length) { return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageHeaderOptions={pageHeaderOptions}>\n      <p>{t('schedule.events.tickets.empty_list')}</p>\n    </ScheduleEventEditListBase>\n  )}\n\n  const onLoadMore = () => {\n    fetchMore({\n      variables: {\n        after: scheduleEventTickets.pageInfo.endCursor\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        const newEdges = fetchMoreResult.scheduleEventTickets.edges\n        const pageInfo = fetchMoreResult.scheduleEventTickets.pageInfo\n\n        return newEdges.length\n          ? {\n              // Put the new invoices at the end of the list and update `pageInfo`\n              // so we have the new `endCursor` and `hasNextPage` values\n              scheduleEventTickets: {\n                __typename: previousResult.scheduleEventTickets.__typename,\n                edges: [ ...previousResult.scheduleEventTickets.edges, ...newEdges ],\n                pageInfo\n              }\n            }\n          : previousResult\n      }\n    })\n  }\n\n  return (\n    <ScheduleEventEditListBase activeLink={activeLink} pageInfo={pageInfo} onLoadMore={onLoadMore} pageHeaderOptions={pageHeaderOptions}>\n      <Table cards>\n        <Table.Header>\n          <Table.Row key={v4()}>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.price')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.public')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.glaccount')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.costcenter')}</Table.ColHeader>\n            <Table.ColHeader></Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              {/* <Table.Col>\n                {moment(node.dateStart).format(dateFormat)}\n              </Table.Col>\n              <Table.Col>\n                {moment(node.dateEnd).format(dateFormat)}\n              </Table.Col> */}\n              <Table.Col>\n                {node.name} <br />\n                <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(node.description) }} className=\"text-muted\"/>\n              </Table.Col>\n              <Table.Col>\n                {node.priceDisplay} <br />\n                {(node.isSoldOut) ? <BadgeSoldOut /> : \"\"}\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.displayPublic} />\n              </Table.Col>\n              <Table.Col>\n                {(node.financeGlaccount) ? node.financeGlaccount.name : \"\"}\n              </Table.Col>\n              <Table.Col>\n                {(node.financeCostcenter) ? node.financeCostcenter.name : \"\"}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                <Link to={`/schedule/events/edit/${eventId}/tickets/edit/${node.id}`}>\n                  <Button className='btn-sm' \n                          color=\"secondary\">\n                    {t('general.edit')}\n                  </Button>\n                </Link>\n                {/* Check for fullEvent / deletable before showing delete button */}\n                {(node.deletable) ? <ScheduleEventTicketDelete id={node.id} /> : \"\"}\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventEditListBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTickets))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEMA = Yup.object().shape({\n  displayPublic: Yup.boolean(),\n  name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  description: Yup.string(),\n  price: Yup.number(),\n  financeTaxRate: Yup.string(),\n  financeGlaccount: Yup.string(),\n  financeCostcenter: Yup.string(),\n})","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleEventTicketBack({ t, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets`\n\n  return (\n    <Link to={returnUrl}>\n      <Button color=\"primary btn-block mb-6\">\n        <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n      </Button>\n    </Link>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketBack))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n// import CSDatePicker from \"../../../../../ui/CSDatePicker\"\n\nfunction ScheduleEventTicketForm ({ \n  t, \n  history, \n  match, \n  isSubmitting, \n  errors, \n  values, \n  inputData, \n  returnUrl, \n  setFieldTouched, \n  setFieldValue, \n  formTitle=\"create\" })   \n{\n\n  return (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group>\n              <Form.Label className=\"custom-switch\">\n                  <Field \n                    className=\"custom-switch-input\"\n                    type=\"checkbox\" \n                    name=\"displayPublic\" \n                    checked={values.displayPublic} />\n                  <span className=\"custom-switch-indicator\" ></span>\n                  <span className=\"custom-switch-description\">{t('schedule.events.tickets.public')}</span>\n              </Form.Label>\n              <ErrorMessage name=\"displayPublic\" component=\"div\" />   \n            </Form.Group>  \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.name')}>\n              <Field type=\"text\" \n                      name=\"name\" \n                      className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.price')}>\n                <Field type=\"text\" \n                    name=\"price\" \n                    className={(errors.price) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\" />\n                <ErrorMessage name=\"price\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.taxrate')}>\n              <Field component=\"select\" \n                      name=\"financeTaxRate\" \n                      className={(errors.financeTaxRate) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in subscription price add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.financeTaxRates.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.percentage}% {node.rateType})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeTaxRate\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.glaccount')}>\n              <Field component=\"select\" \n                    name=\"financeGlaccount\" \n                    className={(errors.financeGlaccount) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeGlaccounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeGlaccount\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.costcenter')}>\n              <Field component=\"select\" \n                    name=\"financeCostcenter\" \n                    className={(errors.financeCostcenter) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.financeCostcenters.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name} ({node.code})</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"financeCostcenter\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Button color=\"link\" onClick={() => history.push(returnUrl)} role=\"button\">\n              {t('general.cancel')}\n          </Button>\n      </Card.Footer>\n    </FoForm>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_INPUT_VALUES_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventEditBase from \"../edit/ScheduleEventEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst ADD_SCHEDULE_EVENT_TICKET = gql`\n  mutation CreateScheduleEventTicket($input:CreateScheduleEventTicketInput!) {\n    createScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketAdd({ t, history, match }) {\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeLink = 'tickets'\n  const cardTitle = t(\"schedule.events.tickets.add\")\n\n  const [addScheduleEventTicket] = useMutation(ADD_SCHEDULE_EVENT_TICKET, {\n    onCompleted: () => history.push(returnUrl),\n  })\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  if (loading) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventEditBase>\n  )\n  if (error) return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventEditBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleEventEditBase \n      sidebarContent={sidebarContent} \n      cardTitle={cardTitle} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: true,\n          name: '',\n          description: '',\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          addScheduleEventTicket({ variables: {\n            input: {\n              scheduleEvent: eventId,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_add_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            inputData={inputData}\n            returnUrl={returnUrl}\n            formTitle=\"create\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketAdd))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport CardTabs from \"../../../ui/CardTabs\"\n\nfunction ScheduleEventTicketTabs({ t, active, eventId, ticketId}) {\n  return (\n    <CardTabs \n      position=\"top\"\n      tabs={[\n          {\n            name: \"general\", \n            title: t(\"schedule.events.tickets.edit_menu.general\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}`\n          },\n          {\n            name: \"activities\", \n            title: t(\"schedule.events.tickets.edit_menu.activities\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/activities`\n          },\n          {\n            name: \"customers\", \n            title: t(\"schedule.events.tickets.edit_menu.customers\"), \n            link: `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n          },\n      ]}\n      active={active}\n    />\n  )\n}\n\nexport default withTranslation()(ScheduleEventTicketTabs)\n","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from './queries'\nimport { GET_SCHEDULE_EVENT_QUERY } from '../queries'\nimport ScheduleEventTicketTabs from \"./ScheduleEventTicketTabs\"\nimport ScheduleEventEditBaseBase from \"../edit/ScheduleEventEditBaseBase\"\n\n\nfunction ScheduleEventTicketEditBase({t, match, history, activeTab, children, pageHeaderOptions=\"\", searchResults=\"\"}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const eventId = match.params.event_id\n  const ticketId = match.params.id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const cardTitle = t(\"schedule.events.tickets.edit\")\n  const activeLink = \"tickets\"\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId }\n  })\n\n  const { loading: loadingTicket, error: errorTicket, data: dataTicket } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: ticketId\n    }\n  })\n\n  if (loading || loadingTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId}  ticketId={ticketId}/>\n          <Card.Body>\n            <Dimmer loading={true} active={true} />\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  if (error || errorTicket) {\n    return (\n      <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} returnUrl={returnUrl}>\n        <Card title={cardTitle}>\n          <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n          <Card.Body>\n            {t(\"schedule.events.error_loading\")}\n          </Card.Body>\n        </Card>\n      </ScheduleEventEditBaseBase>\n    )\n  }\n\n  const event = data.scheduleEvent\n  const ticket = dataTicket.scheduleEventTicket\n  const dateStart = (event.dateStart) ? moment(event.dateStart).format(dateFormat) : \"\"\n  const cardSubTitle = (event) ? \n  <span className=\"text-muted\">\n    - {event.name + \" \" + dateStart}\n  </span> : \"\"\n\n  const cardTicketSubtitle = (ticket) ?\n  <span className=\"text-muted\">\n    - {ticket.name}\n  </span> : \"\"\n\n  return (\n    <ScheduleEventEditBaseBase pageHeaderOptions={pageHeaderOptions} activeLink={activeLink} returnUrl={returnUrl} >\n      {searchResults}\n      <Card>\n        <Card.Header>\n          <Card.Title>{cardTitle} {cardSubTitle} {cardTicketSubtitle}</Card.Title>\n        </Card.Header>\n        <ScheduleEventTicketTabs active={activeTab} eventId={eventId} ticketId={ticketId}/>\n        {children}\n      </Card>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditBase))","// @flow\n\nimport React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_EVENT_TICKETS_QUERY, GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEMA } from './yupSchema'\n\nimport ScheduleEventTicketBack from \"./ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"./ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketForm from \"./ScheduleEventTicketForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET = gql`\n  mutation UpdateScheduleEventTicket($input:UpdateScheduleEventTicketInput!) {\n    updateScheduleEventTicket(input: $input) {\n      scheduleEventTicket {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEdit({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"general\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n\n  const [updateScheduleEventTicket] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const scheduleEventTicket = data.scheduleEventTicket\n\n\n  let initialFinanceTaxRate = \"\"\n  if (scheduleEventTicket.financeTaxRate) {\n    initialFinanceTaxRate = scheduleEventTicket.financeTaxRate.id\n  }\n\n  let initialFinanceGlaccount = \"\"\n  if (scheduleEventTicket.financeGlaccount) {\n    initialFinanceGlaccount = scheduleEventTicket.financeGlaccount.id\n  }\n\n  let initialFinanceCostcenter = \"\"\n  if (scheduleEventTicket.financeCostcenter) {\n    initialFinanceCostcenter = scheduleEventTicket.financeCostcenter.id\n  }\n\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Formik\n        initialValues={{ \n          displayPublic: scheduleEventTicket.displayPublic,\n          name: scheduleEventTicket.name,\n          description: scheduleEventTicket.description,\n          price: scheduleEventTicket.price,\n          financeTaxRate: initialFinanceTaxRate,\n          financeGlaccount: initialFinanceGlaccount,\n          financeCostcenter: initialFinanceCostcenter\n        }}\n        validationSchema={SCHEDULE_EVENT_TICKET_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n          console.log(\"submit values\")\n          console.log(values)\n\n          updateScheduleEventTicket({ variables: {\n            input: {\n              id: id,\n              displayPublic: values.displayPublic,\n              name: values.name,\n              description: values.description,\n              price: values.price,\n              financeTaxRate: values.financeTaxRate,\n              financeGlaccount: values.financeGlaccount,\n              financeCostcenter: values.financeCostcenter\n            }\n          }, refetchQueries: [\n              {query: GET_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                scheduleEvent: eventId\n              }},\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data);\n              toast.success((t('schedule.events.tickets.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleEventTicketForm\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            inputData={inputData}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n            formTitle=\"update\"\n          />\n        )}\n      </Formik>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY = gql`\nquery ScheduleEventTicketScheduleItem($before:String, $after:String, $scheduleEventTicket:ID!) {\n  scheduleEventTicketScheduleItems(first: 100, before: $before, after: $after, scheduleEventTicket:$scheduleEventTicket) {\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        scheduleEventTicket {\n          id\n          name\n          fullEvent\n        }\n        scheduleItem {\n          id\n          name\n        }\n        included\n      }\n    }\n  }\n}\n`\n\n// export const GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM_QUERY = gql`\n// query ScheduleEventTicket($before:String, $after:String, $id:ID!) {\n//   scheduleEventTicket(id: $id) {\n//     id\n//     displayPublic\n//     name\n//     description\n//     price\n//     financeTaxRate {\n//       id\n//       name\n//     }\n//     financeGlaccount {\n//       id\n//       name\n//     }\n//     financeCostcenter {\n//       id\n//       name\n//     }\n//   }\n//   financeTaxRates(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeGlaccounts(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n//   financeCostcenters(first: 100, before: $before, after: $after, archived: false) {\n//     pageInfo {\n//       startCursor\n//       endCursor\n//       hasNextPage\n//       hasPreviousPage\n//     }\n//     edges {\n//       node {\n//         id\n//         name\n//       }\n//     }\n//   }\n// }\n// `\n\n","import * as Yup from 'yup'\n\nexport const SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA = Yup.object().shape({\n  included: Yup.boolean(),\n})","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Dimmer,\n  Form,\n} from \"tabler-react\"\n\n\nconst ScheduleEventTicketEditActivityForm = ({ t, history, match, disabled, isSubmitting, setSubmitting, submitForm, errors, values, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Dimmer active={isSubmitting} loader={isSubmitting} >\n      <Form.Group className='mb-0'>\n        <Form.Label className=\"custom-switch\">\n          <Field \n            className=\"custom-switch-input\"\n            type=\"checkbox\" \n            name=\"included\" \n            onChange={() => {\n              setFieldValue('included', !values.included)\n              setFieldTouched('included', true)\n              setSubmitting(true)\n              setTimeout(() => {submitForm()}, 200)\n            }}\n            checked={values.included} \n            disabled={disabled} \n          />\n          <span className=\"custom-switch-indicator\" ></span>\n          <span className=\"custom-switch-description\">{t('general.included')}</span>\n        </Form.Label>\n        <ErrorMessage name=\"included\" component=\"div\" />   \n      </Form.Group>  \n    </Dimmer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivityForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { gql } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\n\nimport {\n  Table,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY } from \"./queries\"\nimport { SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA } from \"./yupSchema\"\n\nimport ScheduleEventTicketBack from \"../ScheduleEventTicketBack\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ScheduleEventTicketEditActivityForm from \"./ScheduleEventTicketEditActivityForm\"\n\n\nconst UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM = gql`\n  mutation UpdateScheduleEventTicketScheduleItem($input:UpdateScheduleEventTicketScheduleItemInput!) {\n    updateScheduleEventTicketScheduleItem(input: $input) {\n      scheduleEventTicketScheduleItem {\n        id\n      }\n    }\n  }\n`\n\n\nfunction ScheduleEventTicketEditActivities({ t, history, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"activities\"\n  const activeLink = 'tickets'\n  const sidebarContent = <ScheduleEventTicketBack />\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  const scheduleEventTicketActivities = data.scheduleEventTicketScheduleItems\n\n  return (\n    <ScheduleEventTicketEditBase \n      sidebarContent={sidebarContent} \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader className=\"text-right\">{t('general.included')}</Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {scheduleEventTicketActivities.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                {node.scheduleItem.name}\n              </Table.Col>  \n              <Table.Col className=\"text-right\">\n                <Formik\n                  initialValues={{ \n                    included: node.included,\n                  }}\n                  validationSchema={SCHEDULE_EVENT_TICKET_SCHEDLE_ITEM_SCHEMA}\n                  onSubmit={(values, { setSubmitting }) => {\n                    console.log(\"submit values\")\n                    console.log(values)\n\n                    updateScheduleEventTicketScheduleItem({ variables: {\n                      input: {\n                          id: node.id,\n                          included: values.included\n                        }\n                      }, \n                      refetchQueries: [\n                          {query: GET_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEMS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                        ]\n                      })\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.activities.toast_edit_success')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          setSubmitting(false)\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                          setSubmitting(false)\n                        })\n                  }}\n                  >\n                  {({  isSubmitting, errors, values, setFieldTouched, setFieldValue, submitForm, setSubmitting }) => (\n                    <ScheduleEventTicketEditActivityForm\n                      isSubmitting={isSubmitting}\n                      setFieldTouched={setFieldTouched}\n                      setFieldValue={setFieldValue}\n                      errors={errors}\n                      values={values}\n                      disabled={node.scheduleEventTicket.fullEvent}\n                      setSubmitting={setSubmitting}\n                      submitForm={submitForm}\n                    >\n                      {/* {console.log(errors)}\n                      {console.log(values)} */}\n                    </ScheduleEventTicketEditActivityForm>\n                  )}\n                </Formik>\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditActivities))","import React from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Badge,\n  Button,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET } from \"./queries\"\nimport CSLS from '../../../../../tools/cs_local_storage'\nimport BadgeBoolean from \"../../../../ui/BadgeBoolean\"\nimport ScheduleEventTicketEditBase from \"../ScheduleEventTicketEditBase\"\nimport ButtonAdd from '../../../../ui/ButtonAdd'\n\n\n\nfunction ScheduleEventTicketEditCustomers({ t, history, location, match }) {\n  const id = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/`\n  const activeTab = \"customers\"\n  const activeLink = 'tickets'\n\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    variables: {\n      scheduleEventTicket: id\n    }\n  })\n\n  const [updateAccountScheduleEventTicket] = useMutation(UPDATE_ACCOUNT_SCHEDULE_EVENT_TICKET)\n  // const [updateScheduleEventTicketScheduleItem] = useMutation(UPDATE_SCHEDULE_EVENT_TICKET_SCHEDULE_ITEM)\n\n  // set returnURL for invoice links\n  localStorage.setItem(CSLS.FINANCE_INVOICES_EDIT_RETURN, location.pathname)\n  localStorage.setItem(CSLS.RELATIONS_ACCOUNT_PROFILE_RETURN, location.pathname)\n\n    // `/schedule/events/edit/${eventId}/tickets/edit/${id}/customers`)\n\n  if (loading) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      {t(\"general.loading_with_dots\")}\n    </ScheduleEventTicketEditBase>\n  )\n  if (error) return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n    >\n      <p>{t('general.error_sad_smiley')}</p>\n      <p>{error.message}</p>\n    </ScheduleEventTicketEditBase>\n  )\n\n  console.log(data)\n\n  const pageHeaderOptions = <React.Fragment>\n    <ButtonAdd addUrl={`/schedule/events/edit/${eventId}/tickets/edit/${id}/customers/search`}\n      className=\"ml-2\" />\n  </React.Fragment>\n\n\n  // Data\n  return (\n    <ScheduleEventTicketEditBase \n      activeTab={activeTab} \n      activeLink={activeLink} \n      returnUrl={returnUrl}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <Table cards>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n            <Table.ColHeader>{t('general.invoice')}</Table.ColHeader>\n            <Table.ColHeader>{t('schedule.events.tickets.info_mail_sent')}</Table.ColHeader> \n            <Table.ColHeader></Table.ColHeader> \n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.accountScheduleEventTickets.edges.map(({ node }) => (\n            <Table.Row key={v4()}>\n              <Table.Col>\n                <Link to={`/relations/accounts/${node.account.id}/profile`}>\n                  {node.account.fullName}\n                </Link> <br />\n                {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n              </Table.Col>  \n              <Table.Col>\n                { node.invoiceItems.edges.length ? <Link to={`/finance/invoices/edit/${node.invoiceItems.edges[0].node.financeInvoice.id}`}>\n                    {node.invoiceItems.edges[0].node.financeInvoice.invoiceNumber } <br />\n                  </Link> : \"\"\n                }\n                <small className=\"text-muted\">\n                  { node.invoiceItems.edges.length ? node.invoiceItems.edges[0].node.financeInvoice.summary.trunc(40) : \"\"} <br />\n                </small>\n              </Table.Col>\n              <Table.Col>\n                <BadgeBoolean value={node.infoMailSent} /> <br />\n                {/* TODO: resend link here */}\n              </Table.Col>\n              <Table.Col>\n                {(node.cancelled) ?\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: false\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.uncancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        }\n                      )\n                    }\n                  >\n                    {t(\"general.uncancel\")}\n                  </Button>\n                :\n                  <Button \n                    className=\"pull-right\"\n                    color=\"warning\"\n                    onClick={() =>\n                      updateAccountScheduleEventTicket({ variables: {\n                        input: {\n                          id: node.id,\n                          cancelled: true\n                        }\n                      }, refetchQueries: [\n                          {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                            scheduleEventTicket: id\n                          }},\n                      ]})\n                      .then(({ data }) => {\n                          console.log('got data', data);\n                          toast.success((t('schedule.events.tickets.customers.cancelled')), {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                        }).catch((error) => {\n                          toast.error((t('general.toast_server_error')) +  error, {\n                              position: toast.POSITION.BOTTOM_RIGHT\n                            })\n                          console.log('there was an error sending the query', error)\n                        })\n                      }\n                    >\n                      {t(\"general.cancel\")}\n                    </Button>\n                }\n              </Table.Col>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    </ScheduleEventTicketEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomers))","export function getAccountsQueryVariables(ticketId, searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n    ticketId: ticketId\n  }\n\n  queryVars.searchName = searchName\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n// export function get_attendance_list_query_variables(schedule_item_id, date) {\n//   return {\n//     scheduleItem: schedule_item_id,\n//     date: date\n//   }\n// }\n","import React, { useState, useContext } from 'react'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Badge,\n  Icon,\n  Button,\n  Card,\n  Dimmer,\n  Table\n} from \"tabler-react\";\nimport { getAccountsQueryVariables } from \"./tools\"\n\nimport CSLS from \"../../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport ScheduleEventEditBaseBase from '../../edit/ScheduleEventEditBaseBase'\nimport ContentCard from \"../../../../general/ContentCard\"\nimport InputSearch from \"../../../../general/InputSearch\"\nimport { GET_ACCOUNTS_QUERY, ADD_ACCOUNT_SCHEDULE_EVENT_TICKET, GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"./queries\"\n\n\nfunction ScheduleEventTicketEditCustomersSearch({ t, match, history }) {\n  let [searchName, setSearchName] = useState(\"\")\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  \n  const ticketId = match.params.id\n  const eventId = match.params.event_id\n  const returnUrl = `/schedule/events/edit/${eventId}/tickets/edit/${ticketId}/customers`\n  const activeLink = 'tickets'\n  const cardTitle = t('schedule.events.tickets.customers.search.title')\n\n  const { loading, error, data, refetch, fetchMore } = useQuery(\n    GET_ACCOUNTS_QUERY, {\n      variables: getAccountsQueryVariables(ticketId, searchName)\n    }\n  )\n  const [ addAccountScheduleEventTicket ] = useMutation(ADD_ACCOUNT_SCHEDULE_EVENT_TICKET)\n\n  const headerOptions = <Card.Options>\n    <InputSearch \n      initialValueKey={CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH}\n      placeholder=\"Search...\"\n      onChange={(value) => {\n        console.log(value)\n        localStorage.setItem(CSLS.SCHEDULE_EVENTS_TICKETS_CUSTOMERS_SEARCH, value)\n        setSearchName(value)\n        console.log(\"Executing refetch\")\n        refetch({ variables: getAccountsQueryVariables(ticketId, value)})\n      }}\n    />\n  </Card.Options>\n\n  // Loading\n  if (loading) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )\n  // Error\n  if (error) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      returnUrl={returnUrl}\n    >\n      <Card.Body>\n        <p>{t('schedule.events.tickets.customers.search.error_loading')}</p>\n      </Card.Body>\n    </ScheduleEventEditBaseBase>\n  )  \n\n  console.log(data)\n  const accounts = data.accounts\n  const ticket = data.scheduleEventTicket\n  const event = ticket.scheduleEvent\n  const accountScheduleEventTickets = data.accountScheduleEventTickets\n  const dateStart = moment(event.dateStart).format(dateFormat)\n  // TODO: Add date to page subtitle\n  const pageSubTitle = `${ticket.scheduleEvent.name} ${dateStart} - ${ticket.name}`\n  let accountIdsWithTickets = []\n  accountScheduleEventTickets.edges.map(({ node }) => (\n    accountIdsWithTickets.push(node.account.id)\n  ))\n  console.log(accountIdsWithTickets)\n\n  // No search name entered\n  if (!searchName) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"primary\" icon=\"info\">\n            {t('schedule.events.tickets.customers.search.search_to_find_customers_to_sell_to')}\n          </Alert> \n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  // Empty list\n  if (!accounts.edges.length) return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n      >\n        <Card.Body>\n          <Alert type=\"secondary\">{t('schedule.events.tickets.customers.search.empty_list')}</Alert>\n        </Card.Body>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n\n  \n  return (\n    <ScheduleEventEditBaseBase \n      activeLink={activeLink} \n      cardTitle={cardTitle} \n      pageSubTitle={pageSubTitle}\n      returnUrl={returnUrl}\n    >\n      <ContentCard cardTitle={cardTitle}\n                   pageInfo={accounts.pageInfo}\n                   hasCardBody={false}\n                   headerContent={headerOptions}\n                   onLoadMore={() => {\n                      fetchMore({\n                      variables: {\n                        after: accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemEnrollments at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              data: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} \n      >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col className=\"text-right\" key={v4()}>\n                  {(accountIdsWithTickets.includes(node.id)) ? \n                    <Badge color=\"success\" className=\"pull-right\">{t(\"schedule.events.tickets.customers.search_results_already_bought\")}</Badge> :\n                    <Button a\n                      color=\"primary\"\n                      outline\n                      onClick={() =>\n                        addAccountScheduleEventTicket({ variables: {\n                          input: {\n                            account: node.id,\n                            scheduleEventTicket: ticketId\n                          }                            \n                        }, refetchQueries: [\n                            {query: GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, variables: {\n                              scheduleEventTicket: ticketId\n                            }},\n                        ]})\n                        .then(({ data }) => {\n                            console.log('got data', data);\n                            history.push(returnUrl)\n                            toast.success((`${t('schedule.events.tickets.customers.toast_add_success')} ${node.fullName}`), {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                          }).catch((error) => {\n                            toast.error((t('general.toast_server_error')) +  error, {\n                                position: toast.POSITION.BOTTOM_RIGHT\n                              })\n                            console.log('there was an error sending the query', error)\n                          })\n                      }\n                    >\n                      {t(\"general.sell\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  }\n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </ScheduleEventEditBaseBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleEventTicketEditCustomersSearch))\n","import React from \"react\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport StatusIcon from \"../../ui/StatusIcon\"\n\n\nexport function get_list_query_variables() {\n  let orderBy\n  let organizationShift\n  let organizationLocation\n\n  let queryVars = {\n    dateFrom: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM), \n    dateUntil: localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL)\n  }\n\n  orderBy = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY)\n  if (orderBy) {\n    queryVars.orderBy = orderBy\n  }\n\n  organizationShift = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT)\n  if (organizationShift) {\n    queryVars.organizationShift = organizationShift\n  } else {\n    queryVars.organizationShift = \"\"\n  }\n\n  organizationLocation = localStorage.getItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION)\n  if (organizationLocation) {\n    queryVars.organizationLocation = organizationLocation\n  } else {\n    queryVars.organizationLocation = \"\"\n  }\n\n  console.log(queryVars)\n\n  return queryVars\n}\n\n\nexport function represent_instructor(name, role) {\n  let textColor = false\n\n  switch (role) {\n    case \"SUB\":\n      textColor = \"text-blue\"\n      break\n    case \"ASSISTANT\":\n      textColor = \"text-green\"\n      break\n    case \"KARMA\":\n      textColor = \"text-orange\"\n      break\n    default:\n      break\n  }\n\n  if (textColor) {\n    return <span className={textColor}>{name}</span>\n  } else {\n    return name\n  }\n}\n\n\nexport function represent_shift_status(status) {\n  let color\n\n  switch (status) {\n    case \"SUB\":\n      color = \"primary\"\n      break\n    case \"CANCELLED\":\n      color = \"warning\"\n      break\n    case \"OPEN\":\n      color = \"danger\"\n      break\n    default:\n      color = \"success\"\n  }\n\n  return <StatusIcon color={color} />\n}\n\n\nexport function get_class_messages(t, status, description, holiday, holidayName) {\n  if (holiday) {\n    return <span>{t(\"general.holiday\")} ({holidayName})</span>\n  }\n\n  if (status === 'CANCELED') {\n    return description\n  }\n}","import React, { useState } from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Button, Grid,\n} from \"tabler-react\";\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\n\nfunction ScheduleShiftsFilter({ t, history, data, refetch }) {\n  let [location, setLocation] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION))\n  let [shift, setShift] = useState(getDefaultValue(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT))\n\n  return (\n    <React.Fragment>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Button\n            className=\"float-right\"\n            color=\"link\"\n            size=\"sm\"\n            onClick={() => {\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION, \"\")\n              localStorage.setItem(CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT, \"\")\n              setLocation(\"\")\n              setShift(\"\")\n              refetch(get_list_query_variables())\n            }}\n          >\n            {t(\"general.clear\")}\n          </Button>\n          <h6 className=\"mt-2 pt-1\">{t(\"general.filter\")}</h6 >\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col>\n          {/* Locations */}\n          <select \n            className={selectClass}\n            value={location}\n            onChange={ (event) => {\n              setLocation(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_LOCATION,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_locations\")}</option>\n            {data.organizationLocations.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n        <Grid.Col>\n          {/* Shifts */}\n          <select \n            className={selectClass}\n            value={shift}\n            onChange={ (event) => {\n              setShift(event.target.value)\n              updateLocalStorageAndRefetch(\n                CSLS.SCHEDULE_SHIFTS_FILTER_SHIFT,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"schedule.shifts.filter_all_shifts\")}</option>\n            {data.organizationShifts.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.name}</option>\n            )}\n          </select>\n        </Grid.Col>\n      </Grid.Row>\n    </React.Fragment>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsFilter))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Page,\n  Grid,\n  Icon,\n  Button,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsFilter from \"./ScheduleShiftsFilter\"\n\nimport { \n  get_list_query_variables, \n} from './tools'\n\nimport moment from 'moment'\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShiftsBase ({ t, history, children, data, refetch }) {\n  \n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <span title={t(\"schedule.classes.tooltip_sort_by_location\")}>\n                <Button \n                  icon=\"home\"\n                  tooltip=\"text\"\n                  className=\"mr-2\"\n                  color={\n                    ((localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"location\") || (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY))) ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"location\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <span title={t(\"schedule.classes.tooltip_sort_by_starttime\")}>\n                <Button \n                  icon=\"clock\"\n                  className=\"mr-2\"\n                  color={\n                    (localStorage.getItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY) === \"starttime\") ?\n                    \"azure\" : \"secondary\"\n                  }\n                  onClick={() => {\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_ORDER_BY, \"starttime\")\n                    refetch(get_list_query_variables())\n                  }}\n                />\n              </span>\n              <CSDatePicker \n                className=\"form-control schedule-list-csdatepicker mr-2\"\n                selected={new Date(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM))}\n                isClearable={false}\n                onChange={(date) => {\n                  let nextWeekFrom = moment(date)\n                  let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n\n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                  console.log(get_list_query_variables())\n\n                  refetch(get_list_query_variables())\n                }}\n                placeholderText={t('schedule.classes.go_to_date')}\n              />\n              <Button.List className=\"schedule-list-page-options-btn-list\">\n                <Button \n                  icon=\"chevron-left\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).subtract(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"sunset\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let currentWeekFrom = moment()\n                    let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n                    \n                    refetch(get_list_query_variables())\n                }} />\n                <Button \n                  icon=\"chevron-right\"\n                  color=\"secondary\"\n                  onClick={ () => {\n                    let nextWeekFrom = moment(localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)).add(7, 'days')\n                    let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n                    \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n                    localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n                    refetch(get_list_query_variables())\n                }} />\n              </Button.List> \n              <HasPermissionWrapper permission=\"add\"\n                                    resource=\"scheduleshift\">\n                <Link to={\"/schedule/shifts/add\"}>\n                  <Button color=\"primary btn-block ml-2\">\n                    <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n                  </Button>\n                </Link>\n              </HasPermissionWrapper>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {(data) ? \n                <ScheduleShiftsFilter data={data} refetch={refetch} />\n              : \"\"}\n              {children}\n            </Grid.Col>\n        </Grid.Row>\n      </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SHIFTS_QUERY = gql`\n  query ScheduleShifts(\n    $dateFrom: Date!, \n    $dateUntil:Date!, \n    $orderBy: String, \n    $organizationShift: ID,\n    $organizationLocation: ID,\n  ){\n    scheduleShifts(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationShift: $organizationShift,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      shifts {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        holiday\n        holidayName\n        account {\n          id\n          fullName\n        }\n        account2 {\n          id\n          fullName\n        }\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n      }\n    }\n    organizationLocations(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SHIFT_QUERY = gql`\n  query ScheduleItem($id: ID!) {\n    scheduleItem(id:$id) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query ScheduleShiftInputValues($after: String, $before: String) {\n    organizationLocationRooms(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_SHIFT = gql`\n  mutation CreateScheduleShift($input:CreateScheduleShiftInput!) {\n    createScheduleShift(input: $input) {\n      scheduleItem {\n        id\n        scheduleItemType\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationShift {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    }\n  }\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT = gql`\n  mutation DeleteScheduleShift($input: DeleteScheduleShiftInput!) {\n    deleteScheduleShift(input: $input) {\n      ok\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport {\n  Badge,\n  Dropdown,\n  Card,\n  Table,\n} from \"tabler-react\";\n\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport confirm_delete from \"../../../tools/confirm_delete\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport ScheduleShiftsBase from './ScheduleShiftsBase'\n\nimport { GET_SHIFTS_QUERY, DELETE_SCHEDULE_SHIFT } from \"./queries\"\nimport { \n  get_class_messages,\n  get_list_query_variables, \n  represent_shift_status\n} from './tools'\n\nimport moment from 'moment'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SCHEDULE_SHIFTS_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} \n\n\nfunction ScheduleShifts ({ t, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const {loading, error, data, refetch} = useQuery(GET_SHIFTS_QUERY, {\n    variables: get_list_query_variables(),\n    fetchPolicy: \"network-only\"\n  })\n  const [deleteScheduleShift] = useMutation(DELETE_SCHEDULE_SHIFT)\n\n  if (loading) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.loading_with_dots')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  if (error) {\n    return (\n      <ScheduleShiftsBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftsBase>\n    )\n  }\n\n  const shifts = data.scheduleShifts\n  console.log(shifts)\n       \n  // Empty list\n  if (!shifts.length) { return (\n    <ScheduleShiftsBase>\n      <p>\n        {t('schedule.shifts.empty_list')}\n      </p>\n    </ScheduleShiftsBase>\n  )} \n\n  return (\n    <ScheduleShiftsBase data={data} refetch={refetch}>\n      { data.scheduleShifts.map(({ date, shifts }) => (\n        <div key={v4()}>\n          <Card>\n            <Card.Header>\n              <Card.Title>\n                <b>{moment(date).format(\"dddd\")}</b> {' '}\n                <span className=\"text-muted\">\n                  {moment(date).format(\"LL\")} \n                </span>\n              </Card.Title>\n            </Card.Header>\n            {!(shifts.length) ? <Card.Body>{t('schedule.shifts.empty_list')}</Card.Body> :\n              <Table cards>\n                <Table.Header>\n                  <Table.Row key={v4()}>\n                    <Table.ColHeader /> \n                    <Table.ColHeader>{t('general.time')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.shift')}</Table.ColHeader>\n                    <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                    <Table.ColHeader></Table.ColHeader>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {shifts.map((\n                    { scheduleItemId, \n                      frequencyType,\n                      date, \n                      status,\n                      holiday,\n                      holidayName,\n                      description,\n                      account, \n                      account2,\n                      organizationLocationRoom, \n                      organizationShift, \n                      timeStart, \n                      timeEnd }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {represent_shift_status(status)}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Start & end time */}\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n                        {(frequencyType === 'SPECIFIC') ? <Badge color=\"primary\">{t('general.once')}</Badge> : null } <br />\n                        <small className=\"text-muted\">{get_class_messages(t, status, description, holiday, holidayName)}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Location */}\n                        {organizationLocationRoom.organizationLocation.name} <br />\n                        <small className=\"text-muted\">{organizationLocationRoom.name}</small>\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Shift and level */}\n                        {organizationShift.name}\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Employee(s) */}\n                        { (account) ? \n                            account.fullName : \n                            <span className=\"text-red\">{t(\"schedule.shifts.no_employee\")}</span>\n                        } <br />\n                        <small className=\"text-muted\">\n                          {(account2) ? account2.fullName : \"\"}\n                        </small>\n                      </Table.Col>\n                      <Table.Col>\n                        <Dropdown\n                          key={v4()}\n                          className=\"pull-right\"\n                          type=\"button\"\n                          toggle\n                          color=\"secondary btn-sm\"\n                          triggerContent={t(\"general.actions\")}\n                          items={[\n                            <HasPermissionWrapper key={v4()} permission=\"view\" resource=\"scheduleitemweeklyotc\">\n                              <Link to={'/schedule/shifts/shift/edit/' + scheduleItemId + '/' + date}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  icon=\"edit-3\"\n                                >\n                                  {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <Link to={'/schedule/shifts/all/edit/' + scheduleItemId}>\n                                <Dropdown.Item\n                                  key={v4()}\n                                  badge={t('schedule.shifts.all_shifts_in_series')}\n                                  badgeType=\"secondary\"\n                                  icon=\"edit-3\"\n                                >\n                                    {t(\"general.edit\")}\n                                </Dropdown.Item>\n                              </Link>\n                            </HasPermissionWrapper>,\n                            <HasPermissionWrapper key={v4()} permission=\"delete\" resource=\"scheduleshift\">\n                              <Dropdown.ItemDivider key={v4()} />\n                              <span className=\"text-red\">\n                              <Dropdown.Item\n                                key={v4()}\n                                badge={t('schedule.shifts.all_shifts_in_series')}\n                                badgeType=\"danger\"\n                                icon=\"trash-2\"\n                                onClick={() => {\n                                  confirm_delete({\n                                    t: t,\n                                    msgConfirm: t(\"schedule.shifts.delete_confirm_msg\"),\n                                    msgDescription: <p key={v4()}>\n                                      {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                                      {moment(date + ' ' + timeEnd).format(timeFormat)} {' '} \n                                      {organizationShift.name} {' '} @ {' '}\n                                      {organizationLocationRoom.organizationLocation.name} {' '}\n                                      {organizationLocationRoom.name}\n                                      </p>,\n                                    msgSuccess: t('schedule.shifts.deleted'),\n                                    deleteFunction: deleteScheduleShift,\n                                    functionVariables: { variables: {\n                                      input: {\n                                        id: scheduleItemId\n                                      }\n                                    }, refetchQueries: [\n                                      { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() }\n                                    ]}\n                                  })\n                                }}>\n                              {t(\"general.delete\")}\n                              </Dropdown.Item>\n                              </span>\n                            </HasPermissionWrapper>\n                          ]}\n                        />\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n              </Table>\n            }\n          </Card>\n        </div>\n      ))}\n    </ScheduleShiftsBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShifts))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SHIFT_SCHEMA = Yup.object().shape({\n    frequencyType: Yup.string()\n      .required(t('yup.field_required')),\n    organizationLocationRoom: Yup.string()\n      .required(t('yup.field_required')),\n    organizationShift: Yup.string()\n      .required(t('yup.field_required')),\n    dateStart: Yup.date()\n      .required(t('yup.field_required')),\n    timeStart: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n    timeEnd: Yup.date()\n      .typeError(t('yup.time_required'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n// import { Editor } from '@tinymce/tinymce-react'\n// import { tinymceBasicConf } from \"../../../plugin_config/tinymce\"\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport CSTimePicker from \"../../ui/CSTimePicker\"\n\nconst ScheduleShiftForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Form.Group label={t('schedule.classes.frequencyType')}>\n          <Field component=\"select\" \n                name=\"frequencyType\" \n                className={(errors.frequencyType) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\">\n            <option value=\"SPECIFIC\" key={v4()}>{t('schedule.classes.select_specific')}</option>\n            <option value=\"WEEKLY\" key={v4()}>{t('schedule.classes.select_weekly')}</option>\n          </Field>\n          <ErrorMessage name=\"frequencyType\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n          <Form.Group label={t('schedule.classes.frequencyInterval')}>\n            <Field component=\"select\" \n                  name=\"frequencyInterval\" \n                  className={(errors.frequencyInterval) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\">\n              <option value=\"1\" key={v4()}>{t('general.monday')}</option>\n              <option value=\"2\" key={v4()}>{t('general.tuesday')}</option>\n              <option value=\"3\" key={v4()}>{t('general.wednesday')}</option>\n              <option value=\"4\" key={v4()}>{t('general.thursday')}</option>\n              <option value=\"5\" key={v4()}>{t('general.friday')}</option>\n              <option value=\"6\" key={v4()}>{t('general.saturday')}</option>\n              <option value=\"7\" key={v4()}>{t('general.sunday')}</option>\n            </Field>\n            <ErrorMessage name=\"frequencyInterval\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        }\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.please_select\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={(values.frequencyType === \"SPECIFIC\") ? t('general.date') : t('general.date_start')}>\n              <CSDatePicker \n                className={(errors.dateStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.dateStart}\n                onChange={(date) => {\n                  setFieldValue(\"dateStart\", date)\n                  setFieldTouched(\"dateStart\", true)\n                }}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          { (values.frequencyType === \"SPECIFIC\") ? \"\" :\n            <Grid.Col>\n              <Form.Group label={t('general.date_end')}>\n                <CSDatePicker \n                  selected={values.dateEnd}\n                  onChange={(date) => {\n                    setFieldValue(\"dateEnd\", date)\n                    setFieldTouched(\"dateEnd\", true)\n                  }}\n                  onBlur={() => setFieldTouched(\"dateEnd\", true)}\n                  placeholderText={t('schedule.classes.placeholder_enddate')}\n                />\n                <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          }\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        {/* <Form.Group label={t('general.note')}>\n          <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"note\"\n              initialValue={values.note}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"note\", e.target.getContent())\n                setFieldTouched(\"note\", true, true)\n              }}\n            />\n          <ErrorMessage name=\"note\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group> */}\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <Link to={returnUrl}>\n          <Button color=\"link\">\n              {t('general.cancel')}\n          </Button>\n        </Link>\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../SiteWrapper\"\nimport ButtonBack from '../../ui/ButtonBack'\n\nfunction ScheduleShiftAddBase({t, children}) {\n  const returnUrl = \"/schedule/shifts\"\n\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"schedule.title\")} subTitle={t(\"schedule.shifts.title\")}>\n            <div className=\"page-options d-flex\">\n              <ButtonBack returnUrl={returnUrl}/>\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAddBase))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_INPUT_VALUES_QUERY, CREATE_SHIFT } from './queries'\nimport { get_list_query_variables } from './tools'\nimport { SHIFT_SCHEMA } from './yupSchema'\nimport ScheduleShiftForm from './ScheduleShiftForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\nimport { dateToLocalISO, dateToLocalISOTime } from '../../../tools/date_tools'\n\nimport ScheduleShiftAddBase from './ScheduleShiftAddBase'\n\n\nfunction ScheduleShiftAdd({t, history}) {\n  const cardTitle = t('schedule.shifts.title_add')\n  const returnUrl = \"/schedule/shifts\"\n  const { loading, error, data } = useQuery(GET_INPUT_VALUES_QUERY)\n  const [ createScheduleShift ] = useMutation(CREATE_SHIFT)\n  \n\n  if (loading) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.loading_with_dots')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  if (error) return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Card.Body>\n          <p>{t('general.error_sad_smiley')}</p>\n        </Card.Body>\n      </Card>\n    </ScheduleShiftAddBase>\n  )\n\n  const inputData = data\n\n  return (\n    <ScheduleShiftAddBase>\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            displayPublic: true,\n            frequencyType: \"WEEKLY\",\n            frequencyInterval: 1,\n            organizationLocationRoom: \"\",\n            organizationShift: \"\",\n            dateStart: new Date(),\n            timeStart: new Date(),\n            timeEnd: new Date(),\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }\n              \n              createScheduleShift({ variables: {\n                input: {\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd)\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  history.push(returnUrl)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n                <ScheduleShiftForm\n                  inputData={inputData}\n                  isSubmitting={isSubmitting}\n                  setFieldValue={setFieldValue}\n                  setFieldTouched={setFieldTouched}\n                  errors={errors}\n                  values={values}\n                  touched={touched}\n                  returnUrl={returnUrl}\n                >\n                </ScheduleShiftForm>\n              )\n           }\n        </Formik>\n      </Card>      \n    </ScheduleShiftAddBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftAdd))","import { gql } from \"@apollo/client\"\n\nexport const UPDATE_SHIFT = gql`\nmutation UpdateScheduleShift($input:UpdateScheduleShiftInput!) {\n  updateScheduleShift(input: $input) {\n    scheduleItem {\n      id\n    }\n  }\n}\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\n\nimport ButtonBack from '../../../ui/ButtonBack';\n\nconst ShiftEditBack = ({ t }) => (\n    <ButtonBack returnUrl=\"/schedule/shifts\" />\n)\n\nexport default withTranslation()(ShiftEditBack)","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\n\n\nimport {\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\n\n\nconst ShiftEditMenu = ({ t, activeLink, shiftId }) => (\n  <List.Group transparent={true}>\n    <List.GroupItem\n      key={v4()}\n      className=\"d-flex align-items-center\"\n      to={\"#/schedule/shifts/all/edit/\" + shiftId}\n      icon=\"edit-3\"\n      active={(activeLink===\"edit\")}\n      >\n      {t('general.edit')}\n    </List.GroupItem>\n    <HasPermissionWrapper permission=\"view\"\n                          resource=\"scheduleitemaccount\">\n      <List.GroupItem\n        key={v4()}\n        className=\"d-flex align-items-center\"\n        to={\"#/schedule/shifts/all/employees/\" + shiftId}\n        icon=\"users\"\n        active={activeLink===\"employees\"}\n        >\n        {t('general.employees')}\n      </List.GroupItem>\n    </HasPermissionWrapper>\n  </List.Group>\n);\n\nexport default withTranslation()(ShiftEditMenu)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\"\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ShiftEditMenu from './ShiftEditMenu'\n\n\nfunction ShiftEditBaseBase({t, match, children, subTitle=\"\", cardTitle=\"\", defaultCard=true, menuActiveLink=\"\", pageHeaderButtonList=\"\"}) {\n  const shiftId = match.params.shift_id\n  \n  return (\n    <SiteWrapper>\n      <Container>\n        <Page.Header \n          title={t(\"schedule.title\")} \n          subTitle={subTitle}\n        >\n          <div className=\"page-options d-flex\">\n            {pageHeaderButtonList}\n          </div>\n        </Page.Header>\n        <Grid.Row>\n          <Grid.Col md={9}>\n            {(!defaultCard) ? children :\n              <Card title={cardTitle}>\n                {children}\n              </Card>\n            }\n          </Grid.Col>\n          <Grid.Col md={3}>\n            <ShiftEditMenu activeLink={menuActiveLink} shiftId={shiftId}/>\n          </Grid.Col>\n        </Grid.Row>\n      </Container>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShiftEditBaseBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\n\n// import HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\n\nimport { GET_SHIFT_QUERY } from \"../queries\"\n\nimport ShiftEditBaseBase from './ShiftEditBaseBase'\nimport { shift_edit_all_subtitle } from \"./tools\"\n\n\nfunction ShiftEditBase({t, match, children, menuActiveLink=\"\", defaultCard=true, pageHeaderButtonList=\"\", cardTitle=\"\"}) {\n  const shiftId = match.params.shift_id\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, { variables: {\n    id: shiftId\n  }})\n\n  if (!cardTitle) {\n    cardTitle = t('schedule.shifts.title_edit')\n  }\n\n  if (loading) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      <p>{t('general.loading_with_dots')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  if (error) return (\n    <ShiftEditBaseBase \n      cardTitle={cardTitle}\n      defaultCard={true}\n      pageHeaderButtonList={pageHeaderButtonList}\n      menuActiveLink={menuActiveLink}\n    >\n      {console.log(error)}\n      <p>{t('general.error_sad_smiley')}</p>\n    </ShiftEditBaseBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const subTitle = shift_edit_all_subtitle({\n    t: t,\n    location: initialValues.organizationLocationRoom.organizationLocation.name,\n    locationRoom: initialValues.organizationLocationRoom.name,\n    shift: initialValues.organizationShift.name,\n    starttime: initialTimeStart\n  })\n\n  return (\n    <ShiftEditBaseBase \n      subTitle={subTitle}\n      cardTitle={cardTitle}\n      pageHeaderButtonList={pageHeaderButtonList}\n      defaultCard={defaultCard}\n      menuActiveLink={menuActiveLink}\n    >\n      {children}\n    </ShiftEditBaseBase>\n  )\n\n}\n\nexport default withTranslation()(withRouter(ShiftEditBase))","import moment from 'moment'\n\nexport function shift_edit_all_subtitle({t, location, locationRoom, shift, starttime}) {\n  return t('general.shift') + ': ' + location + ' (' + locationRoom + ') - ' + shift + ' @ ' + moment(starttime).format('LT')\n}\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\n\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHIFTS_QUERY, GET_SHIFT_QUERY } from '../../queries'\nimport { UPDATE_SHIFT } from './queries'\n\nimport { get_list_query_variables } from '../../tools'\nimport { SHIFT_SCHEMA } from '../../yupSchema'\nimport ScheduleShiftForm from '../../ScheduleShiftForm'\n\nimport { dateToLocalISO, dateToLocalISOTime, TimeStringToJSDateOBJ } from '../../../../../tools/date_tools'\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from '../ShiftEditBase'\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEditAll({t, match}) {\n  const id = match.params.shift_id\n  const menuActiveLink = \"edit\"\n  const returnUrl = \"/schedule/shifts\"\n  const cardTitle = t('schedule.shifts.title_edit')\n  const pageHeaderButtonList = <ShiftEditBack />\n  const { loading, error, data } = useQuery(GET_SHIFT_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateScheduleShift ] = useMutation(UPDATE_SHIFT)\n\n  if (loading) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase menu_activeLink={menuActiveLink} pageHeaderButtonList={pageHeaderButtonList}>\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialValues = data.scheduleItem\n\n  const initialTimeStart = TimeStringToJSDateOBJ(initialValues.timeStart)\n  const initialTimeEnd = TimeStringToJSDateOBJ(initialValues.timeEnd)\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  let dateEnd = null\n  if (initialValues.dateStart) {\n    dateStart = new Date(initialValues.dateStart)\n  }\n  if (initialValues.dateEnd) {\n    dateEnd = new Date(initialValues.dateEnd)\n  }\n\n\n  return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink}\n      defaultCard={false}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card title={cardTitle}>\n        <Formik\n          initialValues={{ \n            frequencyType: initialValues.frequencyType,\n            frequencyInterval: initialValues.frequencyInterval,\n            organizationLocationRoom: initialValues.organizationLocationRoom.id,\n            organizationShift: initialValues.organizationShift.id,\n            dateStart: dateStart,\n            dateEnd: dateEnd,\n            timeStart: initialTimeStart,\n            timeEnd: initialTimeEnd,\n          }}\n          validationSchema={SHIFT_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              console.log('submit values:')\n              console.log(values)\n\n              let frequencyInterval = values.frequencyInterval\n              if (values.frequencyType === 'SPECIFIC')\n                frequencyInterval = 0\n\n              let dateEnd\n                if (values.dateEnd) {\n                  dateEnd = dateToLocalISO(values.dateEnd)\n                } else {\n                  dateEnd = values.dateEnd\n                }  \n\n              updateScheduleShift({ variables: {\n                input: {\n                  id: id,\n                  frequencyType: values.frequencyType,\n                  frequencyInterval: frequencyInterval,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  dateStart: dateToLocalISO(values.dateStart),\n                  dateEnd: dateEnd,\n                  timeStart: dateToLocalISOTime(values.timeStart),\n                  timeEnd: dateToLocalISOTime(values.timeEnd),\n                }\n              }, refetchQueries: [\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  toast.success((t('schedule.shifts.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldValue, setFieldTouched, errors, values, touched }) => (\n            <ScheduleShiftForm\n              inputData={inputData}\n              isSubmitting={isSubmitting}\n              setFieldValue={setFieldValue}\n              setFieldTouched={setFieldTouched}\n              errors={errors}\n              values={values}\n              touched={touched}\n              returnUrl={returnUrl}\n            />\n          )}\n        </Formik>      \n      </Card>\n    </ShiftEditBase>   \n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEditAll))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY = gql`\n  query ScheduleShiftWeeklyOTCs($scheduleItem: ID!, $date: Date!) {\n    scheduleItemWeeklyOtcs(first:1, scheduleItem: $scheduleItem, date:$date) {\n      edges {\n        node {\n          id \n          date\n          status\n          description\n          account {\n            id\n            fullName\n          }\n          role\n          account2 {\n            id\n            fullName\n          }\n          role2\n          organizationLocationRoom {\n            id\n            name\n          }\n          organizationShift {\n            id\n            name\n          }\n          timeStart\n          timeEnd\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n    accounts(first: 100, isActive: true, instructor: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n    organizationLocationRooms(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n      }\n    }\n    organizationShifts(first: 100, archived: false) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation DeleteScheduleItemWeeklyOTC($input: DeleteScheduleItemWeeklyOTCInput!) {\n    deleteScheduleItemWeeklyOtc(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_WEEKLY_OTC = gql`\n  mutation UpdateScheduleItemWeeklyOTC($input: UpdateScheduleItemWeeklyOTCInput!) {\n    updateScheduleItemWeeklyOtc(input:$input) {\n      scheduleItemWeeklyOtc {\n        id\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\n\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport CSTimePicker from \"../../../../ui/CSTimePicker\"\nimport ButtonFormCancel from '../../../../ui/ButtonFormCancel'\n\nconst ScheduleShiftEditForm = ({ t, history, inputData, isSubmitting, setFieldValue, setFieldTouched, errors, values, touched, returnUrl }) => (\n    <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.status')}>\n              <Field component=\"select\" \n                      name=\"status\" \n                      className={(errors.status) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t('')}</option>\n                <option value=\"CANCELLED\" key={v4()}>{t('general.cancelled')}</option>\n                <option value=\"OPEN\" key={v4()}>{t('schedule.classes.no_instructor')}</option>\n              </Field>\n              <ErrorMessage name=\"status\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.description')}>\n              <Field type=\"text\" \n                      name=\"description\" \n                      className={(errors.description) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule class instructor add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.instructor2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.location')}>\n              <Field component=\"select\" \n                    name=\"organizationLocationRoom\" \n                    className={(errors.organizationLocationRoom) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationLocationRooms.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.organizationLocation.name} - {node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationLocationRoom\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.shift')}>\n              <Field component=\"select\" \n                    name=\"organizationShift\" \n                    className={(errors.organizationShift) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\" key={v4()}>{t(\"general.no_change\")}</option>\n                {inputData.organizationShifts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"organizationShift\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n           <Form.Group label={t('general.time_start')}>\n              <CSTimePicker \n                className={(errors.timeStart) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeStart}\n                onChange={(date) => setFieldValue(\"timeStart\", date)}\n                onBlur={() => setFieldTouched(\"timeStart\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n           <Form.Group label={t('general.time_end')}>\n              <CSTimePicker \n                className={(errors.timeEnd) ? \"form-control is-invalid\" : \"form-control\"} \n                selected={values.timeEnd}\n                onChange={(date) => setFieldValue(\"timeEnd\", date)}\n                onBlur={() => setFieldTouched(\"timeEnd\", true)}\n                clearable={false}\n              />\n              <ErrorMessage name=\"timeEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n        <Button \n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n        >\n        {t('general.submit')}\n        </Button>\n        <ButtonFormCancel returnUrl={returnUrl} />\n      </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(ScheduleShiftEditForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../ui/ButtonBack'\n\n\nconst ScheduleShiftBack = ({ t, classId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts\"} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\n// import HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ScheduleShiftBack from \"./ScheduleShiftBack\"\n\n\nfunction ScheduleShiftEditBase({ t, match, history, children, pageHeaderButtonList=\"\", subTitle=\"\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('schedule.title')} subTitle={subTitle}>\n            <div className=\"page-options d-flex\">       \n              <ScheduleShiftBack />\n              {pageHeaderButtonList}\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEditBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\nimport { DELETE_SCHEDULE_ITEM_WEEKLY_OTC, GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY } from \"./queries\"\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\nfunction ScheduleItemWeeklyOTCDelete({t, match, history}) {\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const [deleteScheduleShiftOTC] = useMutation(DELETE_SCHEDULE_ITEM_WEEKLY_OTC, {\n    onCompleted: () => { history.push(\"/schedule/shifts/\") }\n  })\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  return (\n    <button className=\"icon btn-block btn btn-danger ml-2\" \n      title={t('general.delete')} \n      href=\"\"\n      onClick={() => {\n        confirm_delete({\n          t: t,\n          msgConfirm: t(\"schedule.shifts.shift.edit.delete_confirm_msg\"),\n          msgDescription: <p></p>,\n          msgSuccess: t('schedule.shifts.shift.edit.delete_success'),\n          deleteFunction: deleteScheduleShiftOTC,\n          functionVariables: { \n            variables: {\n              input: {\n                scheduleItem: scheduleItemId,\n                date: shiftDate\n              },\n            }, \n            refetchQueries: [\n              { query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars },\n              { query: GET_SHIFTS_QUERY, variables: get_list_query_variables() },\n            ]\n          }\n        })\n    }}>\n      <span className=\"text-white\"><Icon prefix=\"fe\" name=\"trash-2\" /> {\" \"} {t(\"schedule.shifts.shift.edit.delete_all_changes\")}</span>\n    </button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleItemWeeklyOTCDelete))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, UPDATE_SCHEDULE_ITEM_WEEKLY_OTC } from './queries'\nimport { GET_SHIFTS_QUERY } from '../../queries'\nimport { get_list_query_variables } from '../../tools'\n// import { SCHEDULE_CLASS_EDIT_OTC_SCHEMA } from './yupSchema'\nimport ScheduleShiftEditForm from './ScheduleShiftEditForm'\nimport { TimeStringToJSDateOBJ, dateToLocalISOTime } from '../../../../../tools/date_tools'\n\nimport { shiftSubtitle } from \"../tools\"\n\nimport ScheduleShiftEditBase from \"../ScheduleShiftEditBase\"\nimport ScheduleShiftWeeklyOTCDelete from './ScheduleShiftWeeklyOTCDelete'\n\n\nfunction ScheduleShiftEdit({ t, match, history }) {\n  let showDelete = false\n  const scheduleItemId = match.params.shift_id\n  const shiftDate = match.params.date\n  const returnUrl = \"/schedule/shifts\"\n\n  const query_vars = {\n    scheduleItem: scheduleItemId,\n    date: shiftDate\n  }\n\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, {\n    variables: query_vars,\n  })\n  const [ updateScheduleITEMWeeklyOTC ] = useMutation(UPDATE_SCHEDULE_ITEM_WEEKLY_OTC)\n\n  if (queryLoading) return (\n    <ScheduleShiftEditBase>\n      <p>{t('general.loading_with_dots')}</p>\n    </ScheduleShiftEditBase>\n  )\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return (\n      <ScheduleShiftEditBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ScheduleShiftEditBase>\n    )\n  }\n\n  console.log('queryData')\n  console.log(queryData)\n\n  const scheduleItem = queryData.scheduleItem\n  const subtitle = shiftSubtitle({\n    t: t,\n    location: scheduleItem.organizationLocationRoom.organizationLocation.name, \n    locationRoom: scheduleItem.organizationLocationRoom.name,\n    shift: scheduleItem.organizationShift.name, \n    timeStart: TimeStringToJSDateOBJ(scheduleItem.timeStart), \n    date: shiftDate\n  })\n  \n  let initialData\n  var initialValues = {}\n  if (queryData.scheduleItemWeeklyOtcs.edges.length) {\n    showDelete = true\n\n    initialData = queryData.scheduleItemWeeklyOtcs.edges[0].node\n\n    initialValues.status = initialData.status\n    initialValues.description = initialData.description\n    if (initialData.account) {\n      initialValues.account = initialData.account.id\n    }\n    if (initialData.account2) {\n      initialValues.account2 = initialData.account2.id\n    }\n    if (initialData.organizationLocationRoom) {\n      initialValues.organizationLocationRoom = initialData.organizationLocationRoom.id\n    }\n    if (initialData.organizationShift) {\n      initialValues.organizationShift = initialData.organizationShift.id\n    }\n    if (initialData.timeStart) {\n      initialValues.timeStart = TimeStringToJSDateOBJ(initialData.timeStart)\n    }\n    if (initialData.timeEnd) {\n      initialValues.timeEnd = TimeStringToJSDateOBJ(initialData.timeEnd)\n    }\n    \n  } else {\n    console.log('setting initial values')\n    initialValues.status = \"\"\n    initialValues.description = \"\"\n    initialValues.account = \"\"\n    initialValues.account2 = \"\"\n    initialValues.organizationLocationRoom = \"\"\n    initialValues.organizationShift = \"\"\n    initialValues.timeStart = \"\"\n    initialValues.timeEnd = \"\"\n  }\n\n\n  return (\n    <ScheduleShiftEditBase subTitle={subtitle} pageHeaderButtonList={(showDelete) ? <ScheduleShiftWeeklyOTCDelete/> : \"\"}>\n      <Card>\n        <Card.Header>\n          <Card.Title>{t('general.edit')}</Card.Title>\n        </Card.Header>\n        <Formik\n          initialValues={initialValues}\n          // validationSchema={SCHEDULE_CLASS_EDIT_OTC_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              console.log(\"SUBMIT VALUES\")\n              console.log(values)\n\n              let timeStart = undefined\n              let timeEnd = undefined\n              if (values.timeStart) {\n                timeStart = dateToLocalISOTime(values.timeStart)\n              }\n              \n              if (values.timeEnd) {\n                timeEnd = dateToLocalISOTime(values.timeEnd)  \n              }\n              \n\n              updateScheduleITEMWeeklyOTC({ variables: {\n                input: {\n                  scheduleItem: scheduleItemId,\n                  date: shiftDate,\n                  status: values.status,\n                  description: values.description,\n                  account: values.account,\n                  account2: values.account2,\n                  organizationLocationRoom: values.organizationLocationRoom,\n                  organizationShift: values.organizationShift,\n                  timeStart: timeStart,\n                  timeEnd: timeEnd,\n                }\n              }, refetchQueries: [\n                  {query: GET_SCHEDULE_SHIFT_WEEKLY_OTCS_QUERY, variables: query_vars},\n                  {query: GET_SHIFTS_QUERY, variables: get_list_query_variables()},\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  toast.success((t('schedule.shifts.shift.edit.toast_edit_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                console.log('there was an error sending the query', error.graphQLErrors)\n                setSubmitting(false)\n              })\n            }\n          }\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <ScheduleShiftEditForm\n              inputData={queryData}\n              isSubmitting={isSubmitting}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              errors={errors}\n              values={values}\n              returnUrl={returnUrl}\n            >\n              {console.log(errors)}\n            </ScheduleShiftEditForm>\n          )}\n        </Formik>\n      </Card>\n    </ScheduleShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEdit))","import moment from 'moment'\n\nexport function shiftSubtitle({t, location, locationRoom, shift, timeStart, date}) {\n  return t('general.shift') + ': ' + \n         location + ' (' + locationRoom + ') - ' + \n         shift + ' @ ' + \n         moment(date).format('LL') + ' ' + moment(timeStart).format('LT')\n}\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccounts($after: String, $before: String, $scheduleItem: ID!) {\n    scheduleItemAccounts(first: 15, before: $before, after: $after, scheduleItem: $scheduleItem) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          account2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd       \n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationShift {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n    }\n  }\n`\n\nexport const GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY = gql`\n  query ScheduleItemAccount($before: String, $after: String, $id: ID!) {\n    scheduleItemAccount(id: $id) {\n      id\n      account {\n        id\n        fullName\n      }\n      account2 {\n        id\n        fullName\n      }\n      dateStart\n      dateEnd       \n    }\n    accounts(first: 100, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_INPUT_VALUES_QUERY = gql`\n  query InputValues($after: String, $before: String) {\n    accounts(first: 1000, before: $before, after: $after, isActive: true, employee: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          fullName\n        }\n      }\n    }\n  }\n`\n\n\nexport const ADD_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation CreateScheduleItemAccount($input:CreateScheduleItemAccountInput!) {\n  createScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const UPDATE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation UpdateScheduleItemAccount($input: UpdateScheduleItemAccountInput!) {\n  updateScheduleItemAccount(input:$input) {\n    scheduleItemAccount {\n      id\n    } \n  }\n}\n`\n\n\nexport const DELETE_SCHEDULE_SHIFT_ACCOUNT = gql`\nmutation DeleteScheduleClassInstructor($input: DeleteScheduleItemAccountInput!) {\n  deleteScheduleItemAccount(input: $input) {\n    ok\n  }\n}\n`","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Icon,\n  Dimmer,\n  Button,\n  Table,\n  Card,\n  List\n} from \"tabler-react\";\nimport HasPermissionWrapper from \"../../../../HasPermissionWrapper\"\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\n\nimport confirm_delete from \"../../../../../tools/confirm_delete\"\nimport ContentCard from \"../../../../general/ContentCard\"\nimport ShiftEditBack from \"../ShiftEditBack\"\nimport ShiftEditBase from \"../ShiftEditBase\"\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, DELETE_SCHEDULE_SHIFT_ACCOUNT } from \"./queries\"\n\n\nfunction ScheduleShiftEmployees({ t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  const shiftId = match.params.shift_id\n  const menuActiveLink = \"employees\"\n  const cardTitle = t('schedule.shifts.employees.title')\n  const ButtonAdd = <HasPermissionWrapper permission=\"add\" resource=\"scheduleitemaccount\">\n    <Link to={`/schedule/shifts/all/employees/${shiftId}/add` } >\n      <Button color=\"primary ml-2\">\n      <Icon prefix=\"fe\" name=\"plus-circle\" /> {t('general.add')}\n      </Button>\n    </Link>\n  </HasPermissionWrapper>\n  const pageHeaderButtonList = <Button.List>\n    <ShiftEditBack />\n    {ButtonAdd}\n  </Button.List>\n  const { loading, error, data, fetchMore } = useQuery(GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: {scheduleItem: shiftId}\n  })\n  const [ deleteScheduleItemAccount ] = useMutation(DELETE_SCHEDULE_SHIFT_ACCOUNT)\n\n\n\n  // Loading\n  if (loading) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <Dimmer active={true} loader={true} />\n      </Card.Body>\n    </ShiftEditBase>\n  )\n  // Error\n  if (error) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.error_loading')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  // Empty list\n  if (!data.scheduleItemAccounts.edges.length) return (\n    <ShiftEditBase \n      menuActiveLink={menuActiveLink} \n      cardTitle={cardTitle} \n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('schedule.shifts.employees.empty_list')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  return (\n    <ShiftEditBase \n    menuActiveLink={menuActiveLink} \n    defaultCard={false}\n    pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <ContentCard \n        cardTitle={cardTitle}\n        pageInfo={data.scheduleItemAccounts.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n        fetchMore({\n          variables: {\n            after: data.scheduleItemAccounts.pageInfo.endCursor\n          },\n          updateQuery: (previousResult, { fetchMoreResult }) => {\n            const newEdges = fetchMoreResult.scheduleItemAccounts.edges\n            const pageInfo = fetchMoreResult.scheduleItemAccounts.pageInfo\n\n            return newEdges.length\n              ? {\n                  // Put the new locations at the end of the list and update `pageInfo`\n                  // so we have the new `endCursor` and `hasNextPage` values\n                  data: { \n                    scheduleItemAccounts: {\n                      __typename: previousResult.scheduleItemAccounts.__typename,\n                      edges: [ ...previousResult.scheduleItemAccounts.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                }\n              : previousResult\n            }\n          })\n        }} \n      >\n        <div>\n          <Table cards>\n            <Table.Header>\n              <Table.Row>\n                <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.employee2')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {data.scheduleItemAccounts.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  {console.log(node)}\n                  <Table.Col key={v4()}> \n                    {moment(node.dateStart).format(dateFormat)}\n                  </Table.Col>\n                  <Table.Col key={v4()}> \n                    {(node.dateEnd) ? moment(node.dateEnd).format(dateFormat) : \"\"}\n                  </Table.Col>\n                  <Table.Col>\n                    {node.account.fullName}\n                  </Table.Col>\n                  <Table.Col>\n                    { node.account2 ? node.account2.fullName : \"\" }\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <Link to={`/schedule/shifts/all/employees/${shiftId}/edit/${node.id}`}>\n                      <Button className='btn-sm' \n                              color=\"secondary\"\n                      >\n                        {t('general.edit')}\n                      </Button>\n                    </Link>\n                    <button className=\"icon btn btn-link btn-sm\" \n                        title={t('general.delete')} \n                        href=\"\"\n                        onClick={() => {\n                          confirm_delete({\n                            t: t,\n                            msgConfirm: t('schedule.shifts.employees.delete_confirm_msg'),\n                            msgDescription: <List>\n                                <List.Item>{t(\"general.start\")}: {moment(node.dateStart).format(dateFormat)}</List.Item>\n                                <List.Item>{node.account.fullName} </List.Item>\n                               {(node.account2) ? <List.Item>{node.account2.fullName}</List.Item> : \"\"}\n                              </List>,\n                            msgSuccess: t('schedule.shifts.employees.deleted'),\n                            deleteFunction: deleteScheduleItemAccount,\n                            functionVariables: { variables: {\n                              input: {\n                                id: node.id\n                              }\n                            }, refetchQueries: [\n                              {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }}\n                            ]}\n                        })}}\n                    >\n                      <span className=\"text-red\">\n                        <Icon prefix=\"fe\" name=\"trash-2\" />\n                      </span>\n                    </button>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        </div>\n      </ContentCard>      \n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployees))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const SCHEDULE_SHIFT_EMPLOYEE_SCHEMA = Yup.object().shape({\n  account: Yup.string()\n    .required(t('yup.field_required')),\n  account2: Yup.string(),\n  dateStart: Yup.date()\n    .required(t('yup.field_required')),\n  // dateEnd: Yup.date()\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Grid,\n  Form,\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../../../ui/CSDatePicker\"\n\nconst ScheduleShiftEmployeeForm = ({ t, history, match, isSubmitting, errors, values, inputData, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.date_start')}>\n              <CSDatePicker \n                selected={values.dateStart}\n                onChange={(date) => setFieldValue(\"dateStart\", date)}\n                onBlur={() => setFieldTouched(\"dateStart\", true)}\n              />\n              <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.date_end')}>\n              <CSDatePicker \n                selected={values.dateEnd}\n                onChange={(date) => setFieldValue(\"dateEnd\", date)}\n                onBlur={() => setFieldTouched(\"dateEnd\", true)}\n              />\n              <ErrorMessage name=\"dateEnd\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('general.employee')}>\n              <Field component=\"select\" \n                      name=\"account\" \n                      className={(errors.account) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                {console.log(\"query data in schedule shift employee add:\")}\n                {console.log(inputData)}\n                <option value=\"\" key={v4()}>{t('general.please_select')}</option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('general.employee2')}>\n              <Field component=\"select\" \n                      name=\"account2\" \n                      className={(errors.account2) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\">\n                <option value=\"\" key={v4()}></option>\n                {inputData.accounts.edges.map(({ node }) =>\n                  <option value={node.id} key={v4()}>{node.fullName}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"account2\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\" role=\"button\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n  </FoForm>\n);\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeForm))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ButtonBack from '../../../../ui/ButtonBack'\n\nconst ScheduleShiftEmployeeBack = ({ t, shiftId }) => (\n  <ButtonBack returnUrl={\"/schedule/shifts/all/employees/\" + shiftId} />\n)\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeBack))","import React from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport { Card } from 'tabler-react';\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_INPUT_VALUES_QUERY, ADD_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\n\n\nfunction ScheduleShiftEmployeeAdd({ t, history, match }) {\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_add')\n  const menuActiveLink = \"employees\" \n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_INPUT_VALUES_QUERY)\n  const [addScheduleShiftAccount] = useMutation(ADD_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n\n  return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{ \n          dateStart: new Date() ,\n          account: \"\",\n          account2: \"\",\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            addScheduleShiftAccount({ variables: {\n              input: {\n                scheduleItem: shiftId,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_add_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          />\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, UPDATE_SCHEDULE_SHIFT_ACCOUNT } from './queries'\nimport { SCHEDULE_SHIFT_EMPLOYEE_SCHEMA } from './yupSchema'\nimport ScheduleShiftEmployeeForm from './ScheduleShiftEmployeeForm'\nimport { dateToLocalISO } from '../../../../../tools/date_tools'\n\nimport ShiftEditBase from \"../ShiftEditBase\"\nimport ScheduleShiftEmployeeBack from \"./ScheduleShiftEmployeeBack\"\nimport { Card } from 'tabler-react';\n\n\nfunction ScheduleShiftEmployeeEdit({ t, match, history }) {\n  const id = match.params.id\n  const shiftId = match.params.shift_id\n  const returnUrl = `/schedule/shifts/all/employees/${shiftId}`\n  const cardTitle = t('schedule.shifts.employees.title_edit')\n  const menuActiveLink = \"employees\"\n  const pageHeaderButtonList = <ScheduleShiftEmployeeBack shiftId={shiftId} />\n\n  const {loading, error, data} = useQuery(GET_SINGLE_SCHEDULE_SHIFT_ACCOUNTS_QUERY, {\n    variables: { id: id }\n  })\n  const [updateScheduleShiftAccount] = useMutation(UPDATE_SCHEDULE_SHIFT_ACCOUNT)\n\n  if (loading) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.loading_with_dots')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  if (error) return (\n    <ShiftEditBase\n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Card.Body>\n        <p>{t('general.error_sad_smiley')}</p>\n      </Card.Body>\n    </ShiftEditBase>\n  )\n\n  console.log('query data')\n  console.log(data)\n  const inputData = data\n  const initialData = data.scheduleItemAccount\n\n  let initialAccount2 = \"\"\n  if (initialData.account2) {\n    initialAccount2 =  initialData.account2.id\n  } \n\n  // DatePicker doesn't like a string as an initial value\n  // This makes it a happy DatePicker :)\n  let dateStart = null\n  if (initialData.dateStart) {\n    dateStart = new Date(initialData.dateStart)\n  }\n  \n  let dateEnd = null\n  if (initialData.dateEnd) {\n    dateEnd = new Date(initialData.dateEnd)\n  }\n\n  return (\n    <ShiftEditBase \n      cardTitle={cardTitle}\n      menuActiveLink={menuActiveLink}\n      pageHeaderButtonList={pageHeaderButtonList}\n    >\n      <Formik\n        initialValues={{  \n          dateStart: dateStart,\n          dateEnd: dateEnd,\n          account: initialData.account.id,\n          account2: initialAccount2,\n        }}\n        validationSchema={SCHEDULE_SHIFT_EMPLOYEE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n\n            let dateEnd\n            if (values.dateEnd) {\n              dateEnd = dateToLocalISO(values.dateEnd)\n            } else {\n              dateEnd = values.dateEnd\n            }\n\n            updateScheduleShiftAccount({ variables: {\n              input: {\n                id: match.params.id,\n                account: values.account,\n                account2: values.account2,\n                dateStart: dateToLocalISO(values.dateStart),\n                dateEnd: dateEnd\n              }\n            }, refetchQueries: [\n                {query: GET_SCHEDULE_SHIFT_ACCOUNTS_QUERY, variables: { scheduleItem: shiftId }},\n                // {query: GET_SUBSCRIPTIONS_QUERY, variables: {\"archived\": false }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data);\n                history.push(returnUrl)\n                toast.success((t('schedule.shifts.employees.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <ScheduleShiftEmployeeForm\n            inputData={inputData}\n            isSubmitting={isSubmitting}\n            setFieldTouched={setFieldTouched}\n            setFieldValue={setFieldValue}\n            errors={errors}\n            values={values}\n            returnUrl={returnUrl}\n          >\n            {console.log(errors)}\n          </ScheduleShiftEmployeeForm>\n        )}\n      </Formik>\n    </ShiftEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ScheduleShiftEmployeeEdit))","import * as React from \"react\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router-dom\"\nimport { useQuery } from \"@apollo/client\"\nimport { ToastContainer, Slide } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport 'react-confirm-alert/src/react-confirm-alert.css'\n\nimport CSStandalonePageLoader from \"./ui/CSStandalonePageLoader\"\nimport GET_USER from \"../queries/system/get_user\"\n\nimport {\n  Site,\n  Grid,\n  RouterContextProvider,\n} from \"tabler-react\";\n\n// import type { NotificationProps } from \"tabler-react\";\n\n// type Props = {|\n//   +children: React.Node,\n// |};\n\n// type State = {|\n//   notificationsObjects: Array<NotificationProps>,\n// |};\n\n// type subNavItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +LinkComponent?: React.ElementType,\n// |};\n\n// type navItem = {|\n//   +value: string,\n//   +to?: string,\n//   +icon?: string,\n//   +active?: boolean,\n//   +LinkComponent?: React.ElementType,\n//   +subItems?: Array<subNavItem>,\n//   +useExact?: boolean,\n// |};\n\nconst now = new Date()\n\nfunction SiteWrapperSelfCheckin({t, match, history, children}) {\n  const { error, loading, data } = useQuery(GET_USER)\n\n  if (loading) return <CSStandalonePageLoader />\n  if (error) return <p>{t('system.user.error_loading')}</p>; \n\n  console.log(data)\n\n  return (\n    <Site.Wrapper\n      headerProps={{\n        href: \"/\",\n        alt: \"Costasiella\",\n        imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n        // navItems: (\n        //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n        //     <Link to=\"/settings/general\">\n        //       <Button\n        //         icon=\"settings\"\n        //         outline\n        //         size=\"sm\"\n        //         color=\"primary\"\n        //       >\n        //         {this.props.t('general.settings')}\n        //       </Button>\n        //     </Link>\n        //   </Nav.Item>\n        // ),\n        // notificationsTray: {\n        //   notificationsObjects,\n        //   markAllAsRead: () =>\n        //     this.setState(\n        //       () => ({\n        //         notificationsObjects: this.state.notificationsObjects.map(\n        //           v => ({ ...v, unread: false })\n        //         ),\n        //       }),\n        //       () =>\n        //         setTimeout(\n        //           () =>\n        //             this.setState({\n        //               notificationsObjects: this.state.notificationsObjects.map(\n        //                 v => ({ ...v, unread: true })\n        //               ),\n        //             }),\n        //           5000\n        //         )\n        //     ),\n        //   unread: unreadCount,\n        // },\n        accountDropdown: {\n        avatarURL: \"#\",\n        name: data.user.firstName + ' ' + data.user.lastName,\n        description: \"\",\n        options: [\n          // { icon: \"user\", value: \"Profile\" },\n          { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n          { isDivider: true },\n          { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n        ],\n      },\n      }}\n      // navProps={{ itemsObjects: navBarItems }}\n      // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n      routerContextComponentType={withRouter(RouterContextProvider)}\n      footerProps={{\n        // links: [\n        //   <a href=\"#\">First Link</a>,\n        //   <a href=\"#\">Second Link</a>,\n        //   <a href=\"#\">Third Link</a>,\n        //   <a href=\"#\">Fourth Link</a>,\n        //   <a href=\"#\">Five Link</a>,\n        //   <a href=\"#\">Sixth Link</a>,\n        //   <a href=\"#\">Seventh Link</a>,\n        //   <a href=\"#\">Eigth Link</a>,\n        // ],\n        // note:\n        //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n        copyright: (\n          <React.Fragment>\n            <small>\n              Peacefully powered by\n              <a\n                href=\"https://costasiella.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {\" \"}\n                Costasiella\n              </a>{\". \"}\n              All rights reserved © {now.getFullYear()}.\n            </small>\n          </React.Fragment>\n        ),\n        nav: (\n          <React.Fragment>\n            <Grid.Col auto={true}>\n              {/* <List className=\"list-inline list-inline-dots mb-0\">\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./docs/index.html\">Documentation</a>\n                </List.Item>\n                <List.Item className=\"list-inline-item\">\n                  <a href=\"./faq.html\">FAQ</a>\n                </List.Item>\n              </List> */}\n            </Grid.Col>\n            <Grid.Col auto={true}>\n              {/* <Button\n                href=\"https://github.com/tabler/tabler-react\"\n                size=\"sm\"\n                outline\n                color=\"primary\"\n                RootComponent=\"a\"\n              >\n                Source code\n              </Button> */}\n            </Grid.Col>\n          </React.Fragment>\n        ),\n      }}\n    >\n      {children}\n      <ToastContainer \n        autoClose={5000} \n        transition={Slide}\n      />\n    </Site.Wrapper> \n  )\n}\n\n\n// class SiteWrapperSelfCheckin extends React.Component<Props, State> {\n//   state = {}  \n\n//   render(): React.Node {\n//     return (\n//       <Query query={GET_USER} >\n//         {({ loading, error, data }) => {\n//           if (loading) return <p>{this.props.t('general.loading_with_dots')}</p>;\n//           if (error) return <p>{this.props.t('system.user.error_loading')}</p>; \n          \n//           console.log('user data in site wrapper')\n//           console.log(data)\n      \n//           return <Site.Wrapper\n//             headerProps={{\n//                 href: \"/\",\n//                 alt: \"Costasiella\",\n//                 imageURL: \"/d/static/logos/stock/logo_stock_backend.png\", // Set logo url here\n//                 // navItems: (\n//                 //   <Nav.Item type=\"div\" className=\"d-none d-md-flex\">\n//                 //     <Link to=\"/settings/general\">\n//                 //       <Button\n//                 //         icon=\"settings\"\n//                 //         outline\n//                 //         size=\"sm\"\n//                 //         color=\"primary\"\n//                 //       >\n//                 //         {this.props.t('general.settings')}\n//                 //       </Button>\n//                 //     </Link>\n//                 //   </Nav.Item>\n//                 // ),\n//                 // notificationsTray: {\n//                 //   notificationsObjects,\n//                 //   markAllAsRead: () =>\n//                 //     this.setState(\n//                 //       () => ({\n//                 //         notificationsObjects: this.state.notificationsObjects.map(\n//                 //           v => ({ ...v, unread: false })\n//                 //         ),\n//                 //       }),\n//                 //       () =>\n//                 //         setTimeout(\n//                 //           () =>\n//                 //             this.setState({\n//                 //               notificationsObjects: this.state.notificationsObjects.map(\n//                 //                 v => ({ ...v, unread: true })\n//                 //               ),\n//                 //             }),\n//                 //           5000\n//                 //         )\n//                 //     ),\n//                 //   unread: unreadCount,\n//                 // },\n//                 accountDropdown: {\n//                 avatarURL: \"#\",\n//                 name: data.user.firstName + ' ' + data.user.lastName,\n//                 description: \"\",\n//                 options: [\n//                   // { icon: \"user\", value: \"Profile\" },\n//                   { icon: \"lock\", value: \"Change password\", to: \"/#/user/password/change/\" },\n//                   { isDivider: true },\n//                   { icon: \"log-out\", value: \"Sign out\", to: \"/#/user/logout/\" },\n//                 ],\n//               },\n//               }}\n//               // navProps={{ itemsObjects: navBarItems }}\n//               // navProps={{ itemsObjects: getNavBarItems(this.props.t, data.user) }}\n//               routerContextComponentType={withRouter(RouterContextProvider)}\n//               footerProps={{\n//                 // links: [\n//                 //   <a href=\"#\">First Link</a>,\n//                 //   <a href=\"#\">Second Link</a>,\n//                 //   <a href=\"#\">Third Link</a>,\n//                 //   <a href=\"#\">Fourth Link</a>,\n//                 //   <a href=\"#\">Five Link</a>,\n//                 //   <a href=\"#\">Sixth Link</a>,\n//                 //   <a href=\"#\">Seventh Link</a>,\n//                 //   <a href=\"#\">Eigth Link</a>,\n//                 // ],\n//                 // note:\n//                 //   \"Premium and Open Source dashboard template with responsive and high quality UI. For Free!\",\n//                 copyright: (\n//                   <React.Fragment>\n//                     Copyleft © {now.getFullYear()}.\n//                     <a\n//                       href=\"https://www.costasiella.com\"\n//                       target=\"_blank\"\n//                       rel=\"noopener noreferrer\"\n//                     >\n//                       {\" \"}\n//                       Edwin van de Ven\n//                     </a>{\". \"}\n//                     All rights reserved.\n//                   </React.Fragment>\n//                 ),\n//                 nav: (\n//                   <React.Fragment>\n//                     <Grid.Col auto={true}>\n//                       {/* <List className=\"list-inline list-inline-dots mb-0\">\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./docs/index.html\">Documentation</a>\n//                         </List.Item>\n//                         <List.Item className=\"list-inline-item\">\n//                           <a href=\"./faq.html\">FAQ</a>\n//                         </List.Item>\n//                       </List> */}\n//                     </Grid.Col>\n//                     <Grid.Col auto={true}>\n//                       {/* <Button\n//                         href=\"https://github.com/tabler/tabler-react\"\n//                         size=\"sm\"\n//                         outline\n//                         color=\"primary\"\n//                         RootComponent=\"a\"\n//                       >\n//                         Source code\n//                       </Button> */}\n//                     </Grid.Col>\n//                   </React.Fragment>\n//                 ),\n//               }}\n//             >\n//               {this.props.children}\n//               <ToastContainer \n//                 autoClose={5000} \n//                 transition={Slide}\n//               />\n//             </Site.Wrapper>\n//           }}\n//         </Query>\n//     );\n//   }\n// }\n\nexport default withTranslation()(SiteWrapperSelfCheckin)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapperSelfCheckin from \"../SiteWrapperSelfCheckin\"\n\n\nfunction SelfCheckinBase({ t, match, history, children, title, subTitle=\"\" }) {\n\n  return (\n    <SiteWrapperSelfCheckin>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={title} subTitle={subTitle} />\n            <Grid.Row>\n              <Grid.Col md={12}>\n                { children }\n              </Grid.Col>\n            </Grid.Row>\n          </Container>\n        </div>\n    </SiteWrapperSelfCheckin>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNTS_QUERY = gql`\n  query Accounts(\n    $after: String, \n    $before: String, \n    $searchName: String\n  ) {\n    accounts(\n      first: 25, \n      before: $before, \n      after: $after, \n      isActive: true, \n      fullName_Icontains: $searchName,\n      customer: true\n    ) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          fullName\n          email\n          isActive\n        }\n      }\n    }\n  }\n`\n\n\nexport const GET_SCHEDULE_CLASS_ATTENDANCE_QUERY = gql`\n  query ScheduleItemAttendances($after: String, $before: String, $scheduleItem: ID!, $date: Date!) {\n    scheduleItemAttendances(first: 1000, before: $before, after: $after, scheduleItem: $scheduleItem, date: $date) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }     \n          accountClasspass {\n            organizationClasspass {\n              name\n              trialPass\n            }\n          }\n          attendanceType\n          bookingStatus\n        }\n      }\n    }\n    scheduleItem(id:$scheduleItem) {\n      id\n      frequencyType\n      frequencyInterval\n      organizationLocationRoom {\n        id\n        name\n        organizationLocation {\n          id\n          name\n        }\n      }\n      organizationClasstype {\n        id\n        name\n      }\n      organizationLevel {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      timeStart\n      timeEnd\n      displayPublic\n    }\n  }\n`\n\nexport const DELETE_SCHEDULE_CLASS_ATTENDANCE = gql`\n  mutation DeleteScheduleItemAttendance($input: DeleteScheduleItemAttendanceInput!) {\n    deleteScheduleItemAttendance(input: $input) {\n      ok\n    }\n  }\n`\n\n\nexport const UPDATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation UpdateScheduleItemAttendance($input: UpdateScheduleItemAttendanceInput!) {\n    updateScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`\n","import moment from 'moment'\n\nexport function get_accounts_query_variables(searchName) {\n  let queryVars = {\n    searchName: undefined\n  }\n\n  queryVars.searchName = searchName\n\n  return queryVars\n}\n\nexport function get_attendance_list_query_variables(scheduleItemId, date) {\n  return {\n    scheduleItem: scheduleItemId,\n    date: date\n  }\n}\n\nexport function getSubtitle(classDate, scheduleItem, dateTimeFormat) {\n  return <span>\n    {scheduleItem.organizationLocationRoom.organizationLocation.name} { \" - \" }\n    {moment(classDate + \" \" +  scheduleItem.timeStart).format(dateTimeFormat)} { \" \" } \n    {scheduleItem.organizationClasstype.name} { \" \" }\n  </span> \n}\n","import React, { useContext, useState } from 'react'\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { toast } from 'react-toastify'\n\nimport {\n  Badge,\n  Button,\n  Card,\n  Dimmer,\n  Dropdown,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\nimport { GET_ACCOUNTS_QUERY, GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"./queries\"\nimport { get_attendance_list_query_variables, get_accounts_query_variables, getSubtitle } from \"./tools\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport BadgeBookingStatus from \"../../ui/BadgeBookingStatus\"\nimport ContentCard from \"../../general/ContentCard\"\nimport InputSearch from \"../../general/InputSearch\"\n\n\nfunction setAttendanceStatus({t, updateAttendance, node, status, scheduleItemId, classDate, setRefetchingAttendance}) {\n  setRefetchingAttendance(true)\n\n  updateAttendance({\n    variables: { \n      input: {\n        id: node.id, \n        bookingStatus: status\n      }\n    },\n    refetchQueries: [\n      {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, \n        variables: get_attendance_list_query_variables(scheduleItemId, classDate)}\n    ],\n    awaitRefetchQueries: true,\n  }).then(({ data }) => {\n    console.log('got data', data);\n    setRefetchingAttendance(false)\n    toast.success(\n      t('schedule.classes.class.attendance.status_saved'), {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n  }).catch((error) => {\n    setRefetchingAttendance(false)\n    toast.error((t('general.toast_server_error')) +  error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n    console.log('there was an error sending the query', error);\n  })\n}\n\n\nfunction SelfCheckinCheckin({ t, match, location }) {\n  const [showSearch, setShowSearch] = useState(false)\n  const [refetchingAttendance, setRefetchingAttendance] = useState(false)\n  const [searchName, setSearchName] = useState(undefined)\n  const locationId = match.params.location_id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  // Return here after registering attendance using the schedule class attendance components\n  localStorage.setItem(CSLS.SCHEDULE_CLASSES_BOOK_RETURN, location.pathname)\n\n  const { \n    // refetch: refetchAttendance, \n    loading: queryAttendanceLoading, \n    error: queryAttendanceError, \n    data: queryAttendanceData \n  } = useQuery(\n    GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, {\n      variables: get_attendance_list_query_variables(scheduleItemId, classDate),\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  const [ updateAttendance ] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  const [ getAccounts, \n    { fetchMore: fetchMoreAccounts,\n      loading: queryAccountsLoading, \n      error: queryAccountsError, \n      data: queryAccountsData \n    }] = useLazyQuery( GET_ACCOUNTS_QUERY, { fetchPolicy: \"network-only\"} )\n\n  console.log('queryAccountsData')\n  console.log(queryAccountsData)\n\n  if (queryAttendanceLoading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (queryAttendanceError) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.checkin.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(queryAttendanceData)\n  let checkedInIds = []\n  queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n    checkedInIds.push(node.account.id)\n  ))\n  console.log(checkedInIds)\n  const scheduleItem = queryAttendanceData.scheduleItem\n\n  const subTitle = getSubtitle(\n    classDate,\n    scheduleItem,\n    dateTimeFormat\n  )\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <ContentCard cardTitle={t('general.attendance')}\n                   hasCardBody={false}\n                    pageInfo={queryAttendanceData.scheduleItemAttendances.pageInfo}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                      variables: {\n                        after: queryAttendanceData.scheduleItemAttendances.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n                        const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new scheduleItemAttendances at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAttendanceData: {\n                                scheduleItemAttendances: {\n                                  __typename: previousResult.scheduleItemAttendances.__typename,\n                                  edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n        }} >\n        { (!queryAttendanceData.scheduleItemAttendances.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.empty_list')}</Card.Body> : \n          <Dimmer active={refetchingAttendance} loader={true} >\n          <Table cards>\n            <Table.Header>\n              <Table.Row key={v4()}>\n                <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                <Table.ColHeader>{t('general.booking_status')}</Table.ColHeader>\n                <Table.ColHeader></Table.ColHeader>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {queryAttendanceData.scheduleItemAttendances.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.account.fullName} <br />\n                      {node.accountClasspass && \n                        <small className='text-muted'>\n                          {node.accountClasspass.organizationClasspass.name} { \" \" }\n                        </small>\n                      }\n                      {node.accountClasspass && \n                       node.accountClasspass.organizationClasspass.trialPass && \n                       <Badge color=\"success\">{t('schedule.classes.class.attendance.trial')}</Badge>\n                      }\n                    </Table.Col>\n                    <Table.Col>\n                      <BadgeBookingStatus status={node.bookingStatus} />\n                    </Table.Col>\n                    <Table.Col>\n                      {/* Delete */}\n                      {/* <ScheduleClassAttendanceDelete node={node} /> */}\n                      {/* Status dropdown */}\n                      <Dropdown\n                        key={v4()}\n                        className=\"pull-right\"\n                        type=\"button\"\n                        toggle\n                        color=\"secondary\"\n                        triggerContent={t(\"general.status\")}\n                        items={[\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"check\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'ATTENDING',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.ATTENDING')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"calendar\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'BOOKED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.BOOKED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                          <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                            <Dropdown.Item\n                              key={v4()}\n                              icon=\"x\"\n                              onClick={() => {\n                                setAttendanceStatus({\n                                  t: t, \n                                  updateAttendance: updateAttendance,\n                                  node: node,\n                                  status: 'CANCELLED',\n                                  scheduleItemId: scheduleItemId,\n                                  classDate: classDate,\n                                  setRefetchingAttendance: setRefetchingAttendance\n                                })\n                              }}>\n                                {t('schedule.classes.class.attendance.booking_status.CANCELLED')}\n                            </Dropdown.Item>\n                          </HasPermissionWrapper>,\n                        ]}\n                      />\n                      {(node.bookingStatus === \"BOOKED\") ?\n                        <HasPermissionWrapper key={v4()} permission=\"change\" resource=\"scheduleitemattendance\">\n                          <Button\n                            key={v4()}\n                            className=\"pull-right\"\n                            color=\"success\"\n                            size=\"\"\n                            onClick={() => {\n                              setAttendanceStatus({\n                                t: t, \n                                updateAttendance: updateAttendance,\n                                node: node,\n                                status: 'ATTENDING',\n                                scheduleItemId: scheduleItemId,\n                                classDate: classDate,\n                                setRefetchingAttendance: setRefetchingAttendance\n                              })\n                            }}>\n                              {t('general.checkin')}\n                          </Button>\n                        </HasPermissionWrapper>  : \"\" }\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n            </Table.Body>\n          </Table>\n          </Dimmer>\n      }\n      </ContentCard>\n      <h3>{t(\"selfcheckin.checkin.title_not_on_list\")}</h3>\n      <InputSearch \n        initialValueKey={searchName}\n        placeholder={t(\"search\")}\n        onChange={(value) => {\n          console.log(value)\n          localStorage.setItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH, value)\n          if (value) {\n            // {console.log('showSearch')}\n            // {console.log(showSearch)}\n            setShowSearch(true)\n            setSearchName(value)\n            getAccounts({ variables: get_accounts_query_variables(value)})\n          } else {\n            setShowSearch(false)\n            setSearchName(undefined)\n          }\n        }}\n      /> <br />\n      {/* Search results */}\n      {(showSearch && (queryAccountsData) && (!queryAccountsLoading) && (!queryAccountsError)) ?\n        <ContentCard cardTitle={t('general.search_results')}\n                    pageInfo={queryAccountsData.accounts.pageInfo}\n                    hasCardBody={false}\n                    onLoadMore={() => {\n                      fetchMoreAccounts({\n                        variables: {\n                        after: queryAccountsData.accounts.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.accounts.edges\n                        const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                        return newEdges.length\n                          ? {\n                              // Put the new accounts at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              queryAccountsData: {\n                                accounts: {\n                                  __typename: previousResult.accounts.__typename,\n                                  edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                  pageInfo\n                                }\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n          { (!queryAccountsData.accounts.edges.length) ? \n            <Card.Body>{t('schedule.classes.class.attendance.search_result_empty')}</Card.Body> : \n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n                  <Table.ColHeader></Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {queryAccountsData.accounts.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col key={v4()}>\n                      {node.fullName}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {node.email}\n                    </Table.Col>\n                    <Table.Col key={v4()}>\n                      {(checkedInIds.includes(node.id)) ? \n                        <span className=\"pull-right\">{t(\"schedule.classes.class.attendance.search_results_already_checked_in\")}</span> :\n                        <Link to={\"/selfcheckin/book/\" + locationId + \"/\" + scheduleItemId + \"/\" + classDate + \"/\" + node.id}>\n                          <Button color=\"secondary pull-right\">\n                            {t('general.checkin')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>       \n                      }   \n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          }\n        </ContentCard>\n        : \"\"\n      }\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinCheckin))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($account: ID!, $scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClassBookingOptions(account: $account, scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      account {\n        id\n        fullName\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n\nexport const CREATE_SCHEDULE_ITEM_ATTENDANCE = gql`\n  mutation CreateScheduleItemAttendance($input: CreateScheduleItemAttendanceInput!) {\n    createScheduleItemAttendance(input:$input) {\n      scheduleItemAttendance {\n        id\n      }\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { getSubtitle } from \"../Checkin/tools\"\n\nimport ScheduleClassBookClasspasses from \"../../schedule/classes/class/book/ScheduleClassBookClasspasses\"\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport ScheduleClassBookSubscriptions from \"../../schedule/classes/class/book/ScheduleClassBookSubscriptions\"\nimport ScheduleClassBookPriceDropin from \"../../schedule/classes/class/book/ScheduleClassBookPriceDropin\"\nimport ScheduleClassBookPriceTrial from \"../../schedule/classes/class/book/ScheduleClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction SelfCheckinBookingOptions({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + \" \" + timeFormat\n\n  const account_id = match.params.account_id\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const locationId = match.params.location_id\n  const { loading: queryLoading, error: queryError, data: queryData } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        account: account_id,\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"ATTEND\"\n      }\n    }\n  )\n\n  // Remove search in checkin component\n  localStorage.removeItem(CSLS.SELFCHECKIN_CHECKIN_SEARCH)\n\n  // Query\n  // Loading\n  if (queryLoading) return <p>{t('general.loading_with_dots')}</p>\n  // Error\n  if (queryError) {\n    console.log(queryError)\n    return <p>{t('general.error_sad_smiley')}</p>\n  }\n  \n  console.log(queryData)\n  const account = queryData.scheduleClassBookingOptions.account\n  const classpasses = queryData.scheduleClassBookingOptions.classpasses\n  const subscriptions = queryData.scheduleClassBookingOptions.subscriptions\n  const prices = queryData.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = queryData.scheduleClassBookingOptions.scheduleItem\n  console.log(prices)\n  \n  const subTitle = getSubtitle(\n    class_date,\n    scheduleItem,\n    dateTimeFormat\n  )\n  \n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Grid.Row>\n          <Grid.Col md={12}>\n            <h4>{t('general.booking_options')} {account.fullName}</h4>\n            <div className=\"mt-6\">\n            <Grid.Row cards deck>\n              <ScheduleClassBookSubscriptions \n                subscriptions={subscriptions} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              <ScheduleClassBookClasspasses \n                classpasses={classpasses} \n                returnTo=\"selfcheckin\" \n                locationId={locationId}\n              />\n              {(prices) ?\n                (prices.organizationClasspassDropin) ? \n                  <ScheduleClassBookPriceDropin \n                    priceDropin={prices.organizationClasspassDropin}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n              {(prices) ?\n                (prices.organizationClasspassTrial) ? \n                  <ScheduleClassBookPriceTrial \n                    priceTrial={prices.organizationClasspassTrial}\n                    returnTo=\"selfcheckin\" \n                    locationId={locationId}\n                  /> : \"\" \n                : \"\" }\n            </Grid.Row>\n            </div>\n          </Grid.Col>\n        </Grid.Row>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SelfCheckinBookingOptions))\n\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_LOCATIONS_QUERY = gql`\n  query Organizationlocations($after: String, $before: String) {\n    organizationLocations(first: 100, before: $before, after: $after, archived: false) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          rooms(first: 100, archived: false) {\n            edges {\n              node {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  List\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport { GET_ORGANIZATION_LOCATIONS_QUERY } from \"./queries\"\n\n\nfunction Locations({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_LOCATIONS_QUERY);\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.locations.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.home.title\")}>\n      <h4>{t(\"selfcheckin.locations.please_select\")}</h4>\n        <List.Group>\n          {\n            data.organizationLocations.edges.map(({node}) =>\n              <List.GroupItem action>\n                <Link to={\"/selfcheckin/location/\" + node.id}>\n                  <div>\n                    <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n                    <Icon name=\"home\" /> {node.name}\n                  </div>\n                </Link>\n              </List.GroupItem>\n          )}\n        </List.Group>\n\n          {/* //  List location rooms\n          // <div>\n          //   <h3>{node.name}</h3>\n          //   <List.Group>\n          //     {\n          //       node.organizationlocationroomSet.edges.map(({node}) =>\n          //         <List.GroupItem action>\n          //           <Link to={\"/selfcheckin/room/\" + node.id}>\n          //             <div>\n          //               <span className=\"pull-right\"><Icon name=\"chevron-right\" /></span>\n          //               {node.name}\n          //             </div>\n          //           </Link>\n          //         </List.GroupItem>\n          //       )\n          //     }\n          //   </List.Group>\n          //   <br />\n          // </div>\n        // ) */}\n      \n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(Locations))","import { gql } from \"@apollo/client\"\n\nexport const GET_LOCATION_CLASSES_QUERY = gql`\n  query ScheduleClasses(\n      $dateFrom: Date!, \n      $dateUntil:Date!, \n      $orderBy: String, \n      $organizationClasstype: ID,\n      $organizationLevel: ID,\n      $organizationLocation: ID!,\n    ){\n    scheduleClasses(\n        dateFrom:$dateFrom, \n        dateUntil: $dateUntil, \n        orderBy: $orderBy, \n        organizationClasstype: $organizationClasstype,\n        organizationLevel: $organizationLevel,\n        organizationLocation: $organizationLocation,\n    ){\n      date\n      classes {\n        scheduleItemId\n        frequencyType\n        date\n        status\n        description\n        account {\n          id\n          fullName\n        }\n        role\n        account2 {\n          id\n          fullName\n        }\n        role2\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        timeStart\n        timeEnd\n        displayPublic\n      }\n    }\n    organizationLocation(id: $organizationLocation) {\n      id\n      name\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Card,\n  Icon,\n  Table\n} from \"tabler-react\";\n\nimport SelfCheckinBase from \"../SelfCheckinBase\"\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport { GET_LOCATION_CLASSES_QUERY } from \"./queries\"\n\n\nfunction LocationClasses({ t, match, history }) {\n  const locationId = match.params.location_id\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n  const today = moment().format('YYYY-MM-DD')\n\n  const { loading, error, data } = useQuery(GET_LOCATION_CLASSES_QUERY, {\n    variables: {\n      dateFrom: today,\n      dateUntil: today,\n      organizationLocation: locationId,\n    }\n  })\n\n  if (loading) return (\n    <SelfCheckinBase>\n      {t(\"general.loading_with_dots\")}\n    </SelfCheckinBase>\n  )\n  if (error) return (\n    <SelfCheckinBase>\n      {t(\"selfcheckin.classes.error_loading\")}\n    </SelfCheckinBase>\n  )\n\n  console.log(data)\n  const subTitle = data.organizationLocation.name\n\n  return (\n    <SelfCheckinBase title={t(\"selfcheckin.classes.title\")} subTitle={subTitle}>\n      <Card>\n      <Table>\n        <Table.Header>\n          <Table.Row>\n            <Table.ColHeader>\n              { t(\"general.time\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.room\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.class\") }\n            </Table.ColHeader>\n            <Table.ColHeader>\n              { t(\"general.instructor\") }\n            </Table.ColHeader>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {\n            data.scheduleClasses.map(({ date, classes }) => \n              classes.map((\n                { scheduleItemId, \n                  frequencyType,\n                  date, \n                  status,\n                  description,\n                  account, \n                  role,\n                  account2,\n                  role2,\n                  organizationLocationRoom, \n                  organizationClasstype, \n                  organizationLevel,\n                  timeStart, \n                  timeEnd,\n                  displayPublic }) => (\n                    // console.log(scheduleItemId)\n                    <Table.Row>\n                      <Table.Col>\n                        {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                        {moment(date + ' ' + timeEnd).format(timeFormat)}\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationLocationRoom.name }\n                      </Table.Col>\n                      <Table.Col>\n                        { organizationClasstype.name }\n                      </Table.Col>\n                      <Table.Col>\n                        {/* Instructor(s) */}\n                        { (account) ? account.fullName : \n                          <span className=\"text-red\">{t(\"schedule.classes.no_instructor\")}</span>\n                        }\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/selfcheckin/checkin/\" + locationId + \"/\" + scheduleItemId + \"/\" + date}>\n                          <Button color=\"secondary\" className=\"pull-right\">\n                            {t(\"selfcheckin.classes.go_to_checkin\")}\n                            <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  )\n                )\n            )\n          }\n        </Table.Body>\n      </Table>\n      </Card>\n    </SelfCheckinBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(LocationClasses))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SYSTEM_SETTINGS_QUERY = gql`\n  query SystemSettings($setting: String!) {\n    systemSettings(setting: $setting) {\n      edges {\n        node {\n          id\n          setting\n          value\n        }\n      }\n    }\n  }\n`\n\n\nexport const UPDATE_SYSTEM_SETTING = gql`\n  mutation UpdateSystemSetting($input: UpdateSystemSettingInput!) {\n    updateSystemSetting(input: $input) {\n      systemSetting {\n        id\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../ui/ButtonBack\"\n\n\nfunction SettingsBack({ t, returnUrl=\"/settings\" }) { \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(SettingsBack)","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Card,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../SiteWrapper\"\nimport SettingsBack from \"./SettingsBack\"\n\n\nfunction SettingsBase({ t, children, headerSubTitle=\"\", cardTitle, alertBanner=\"\", returnUrl=\"/settings\" }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} subTitle={headerSubTitle}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl={returnUrl} />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {alertBanner}\n              <Card>\n                <Card.Header>\n                  <Card.Title>{cardTitle}</Card.Title>\n                </Card.Header>\n                {children}\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsBase))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY } from '../queries'\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction SettingsAbout({ t, match, history }) {\n  const headerSubTitle = t('settings.about.title')\n  const cardTitle = t(\"settings.about.about.title\")\n\n  const { \n    loading: loadingVersion, \n    error: errorVersion, \n    data: dataVersion \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version\"\n    }\n  })\n  const { \n    loading: loadingPatch, \n    error: errorPatch, \n    data: dataPatch \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"system_version_patch\"\n    }\n  })\n\n  if ((loadingVersion) || (loadingPatch)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorVersion) || errorPatch) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle} >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let version = 0\n  let patch = 0\n  if (dataVersion.systemSettings.edges.length){\n    version = dataVersion.systemSettings.edges[0].node.value\n  } \n  if (dataPatch.systemSettings.edges.length){\n    patch = dataPatch.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >\n      <Card.Body>\n        <h2>\n          {t(\"settings.about.about.this_is_costasiella\")} {`${version}.${patch}`}\n        </h2>\n        <h3>{t(\"general.license_info\")}</h3>\n        {t(\"settings.about.about.license_version\")} <br /><br />\n        <h3>{t(\"general.license\")}</h3>\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. <br /><br />\nThis program is distributed in the hope that it will be useful, but <b>WITHOUT ANY WARRANTY</b>; without even the implied warranty of <b>MERCHANTABILITY</b> or <b>FITNESS FOR A PARTICULAR PURPOSE</b>. See the GNU General Public License for more details. <br /><br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. <br />\n<br />\nGNU GENERAL PUBLIC LICENSE<br />\n<br />\nVersion 2, June 1991<br />\n<br />\nCopyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA<br />\n<br />\nEveryone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. <br />\n<br />\nPreamble<br />\n<br />\nThe licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.) You can apply it to your programs, too.<br />\n<br />\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.<br /><br />\n<br />\nTo protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.<br />\n<br />\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.<br />\n<br />\nWe protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.<br />\n<br />\nAlso, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.<br />\n<br />\nFinally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.<br />\n<br />\nThe precise terms and conditions for copying, distribution and modification follow.<br />\n<br />\nTERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION<br />\n<br />\n0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\".<br />\n<br />\nActivities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.<br />\n<br />\n1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.<br />\n<br />\nYou may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.<br />\n<br />\n2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:<br />\n<br />\na) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.<br />\n<br />\nThus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.<br />\n<br />\nIn addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.<br />\n<br />\n3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:<br />\n<br />\na) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.<br />\n<br />\nIf distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.<br />\n<br />\n4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.<br />\n<br />\n5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.<br />\n<br />\n6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.<br />\n<br />\n7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.<br />\n<br />\nIf any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.<br />\n<br />\nIt is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.<br />\n<br />\nThis section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.<br />\n<br />\n8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License.<br />\n<br />\n9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.<br />\n<br />\nEach version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.<br />\n<br />\n10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.<br />\n<br />\nNO WARRANTY<br />\n<br />\n11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.<br />\n<br />\n12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.<br />\n<br />\nEND OF TERMS AND CONDITIONS<br />\n<br />\nHow to Apply These Terms to Your New Programs<br />\n<br />\nIf you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.<br />\n<br />\nTo do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.<br />\n<br />\none line to give the program's name and an idea of what it does. Copyright (C) yyyy name of author<br />\n<br />\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.<br />\n<br />\nThis program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.<br />\n<br />\nYou should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. Also add information on how to contact you by electronic and paper mail.<br />\n<br />\nIf the program is interactive, make it output a short notice like this when it starts in an interactive mode:<br />\n<br />\nGnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program.<br />\n<br />\nYou should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names:<br />\n<br />\nYoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.<br />\n<br />\nsignature of Ty Coon, 1 April 1989 Ty Coon, President of Vice\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsAbout))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../SettingsBase\"\n\n\nfunction getLocalStorageValuesAsObject() {\n  let objLSItems = {}\n  const keys = Object.keys(localStorage)\n  let i = keys.length\n\n  while ( i-- ) {\n    objLSItems[ keys[i] ] = localStorage.getItem( keys[i] );\n  }\n\n  return objLSItems;\n}\n\n\nfunction SettingsDiagnostics({ t, match, history }) {\n  const headerSubTitle = t('settings.about.diagnostics.title')\n  const objLSItems = getLocalStorageValuesAsObject()\n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={t(\"settings.about.diagnostics.browser_local_storage\")}\n    >\n      <Card.Body>\n        {\n          Object.entries(objLSItems).map(([key, value]) => (\n            <div key={key}>\n              <strong>{key}:</strong> {value}\n            </div>\n          ))\n        }\n      </Card.Body>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsDiagnostics))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceBankAccountsForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group>\n            <Form.Label className=\"custom-switch\">\n              <Field \n                className=\"custom-switch-input\"\n                type=\"checkbox\" \n                name=\"finance_bank_accounts_iban\" \n                checked={values.finance_bank_accounts_iban}\n              />\n                <span className=\"custom-switch-indicator\" ></span>\n                <span className=\"custom-switch-description\">{t('settings.finance.bank_accounts.iban')}</span>\n            </Form.Label>\n          <ErrorMessage name=\"finance_bank_accounts_iban\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceBankAccountsForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceBankAccountsForm from \"./SettingsFinanceBankAccountsForm\"\n\n\nfunction SettingsFinanceIBAN({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.bank_accounts.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_bank_accounts_iban\"\n    },\n    // fetchPolicy: \"network-only\"\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >\n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    iban: false\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['iban'] = (data.systemSettings.edges[0].node.value.toLowerCase() === 'true')\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        finance_bank_accounts_iban: initialValues['iban'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_bank_accounts_iban\", value: values.finance_bank_accounts_iban },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value.toString(),\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceBankAccountsForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceBankAccountsForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceIBAN))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsFinanceCurrencyForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.finance.currency')}>\n            <Field type=\"text\" \n              name=\"finance_currency\" \n              className={(errors.finance_currency) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.finance.currency_symbol')}>\n            <Field type=\"text\" \n              name=\"finance_currency_symbol\" \n              className={(errors.finance_currency_symbol) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"finance_currency_symbol\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrencyForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsFinanceCurrencyForm from \"./SettingsFinanceCurrencyForm\"\n\n\nfunction SettingsFinanceCurrency({ t, match, history }) {\n  const headerSubTitle = t('settings.finance.title')\n  const cardTitle = t(\"settings.finance.currency.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingCurrency, \n    error: errorCurrency, \n    data: dataCurrency \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency\"\n    }\n  })\n  const { \n    loading: loadingSymbol, \n    error: errorSymbol, \n    data: dataSymbol \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"finance_currency_symbol\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingCurrency) || (loadingSymbol)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorCurrency) || errorSymbol) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    currency: \"EUR\",\n    symbol: \"€\"\n  }\n  if (dataCurrency.systemSettings.edges.length){\n    initialValues['currency'] = dataCurrency.systemSettings.edges[0].node.value\n  } \n  if (dataSymbol.systemSettings.edges.length){\n    initialValues['symbol'] = dataSymbol.systemSettings.edges[0].node.value\n  } \n    \n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        finance_currency: initialValues['currency'],\n        finance_currency_symbol: initialValues['symbol']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"finance_currency\", value: values.finance_currency },\n            { setting: \"finance_currency_symbol\", value: values.finance_currency_symbol },\n          ]\n\n          for (let i in settings) {\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsFinanceCurrencyForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsFinanceCurrencyForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsFinanceCurrency))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const DATETIME_SCHEMA = Yup.object().shape({\n    dateFormat: Yup.string()\n      .required(t('yup.field_required')),\n    timeFormat: Yup.string()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { v4 } from 'uuid'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralDateTimeForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.date_format')}>\n            <Field component=\"select\" \n                    name=\"dateFormat\" \n                    className={(errors.dateFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"YYYY-MM-DD\" key={v4()}>{t('settings.general.date_formats.YYYY-MM-DD')}</option>\n                <option value=\"MM-DD-YYYY\" key={v4()}>{t('settings.general.date_formats.MM-DD-YYYY')}</option>\n                <option value=\"DD-MM-YYYY\" key={v4()}>{t('settings.general.date_formats.DD-MM-YYYY')}</option>\n            </Field>\n            <ErrorMessage name=\"dateFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.general.time_format')}>\n            <Field component=\"select\" \n                    name=\"timeFormat\" \n                    className={(errors.timeFormat) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"24\" key={v4()}>{t('settings.general.time_formats.24hr')}</option>\n                <option value=\"12\" key={v4()}>{t('settings.general.time_formats.12hr')}</option>\n            </Field>\n            <ErrorMessage name=\"timeFormat\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTimeForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport { GET_APP_SETTINGS_QUERY, UPDATE_APP_SETTINGS } from './queries'\nimport { DATETIME_SCHEMA } from './yupSchema'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralDateTimeForm from \"./SettingsGeneralDateTimeForm\"\n\n\nfunction SettingsGeneralDateTime({ t, match, history }) {\n  const headerSubTitle = t(\"settings.general.datetime\")\n  const cardTitle = t(\"settings.general.datetime\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_APP_SETTINGS_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_APP_SETTINGS)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        dateFormat: data.appSettings.dateFormat,\n        timeFormat: data.appSettings.timeFormat,\n        note: \"\",\n      }}\n      validationSchema={DATETIME_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              dateFormat: values.dateFormat,\n              timeFormat: values.timeFormat,\n            }\n          }, refetchQueries: [\n              {query: GET_APP_SETTINGS_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralDateTimeForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralDateTimeForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralDateTime))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsGeneralSystemForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.general.system.system_hostname')}>\n            <Field type=\"text\" \n              name=\"system_hostname\" \n              className={(errors.system_hostname) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"system_hostname\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsGeneralSystemForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsGeneralSystemForm from \"./SettingsGeneralSystemForm\"\n\n\nfunction SettingsGeneralSystem({ t, match, history }) {\n  const headerSubTitle = t('settings.general.title')\n  const cardTitle = t(\"settings.general.system.title\")\n  const sidebarActive = \"general\"\n  const queryVariables = {\n    setting: \"system_hostname\"\n  }\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: queryVariables\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let hostname = \"\"\n  if (data.systemSettings.edges.length) {\n    hostname = data.systemSettings.edges[0].node.value \n  }\n\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        system_hostname: hostname\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"system_hostname\",\n              value: values.system_hostname\n            }\n          }, refetchQueries: [\n              { query: GET_SYSTEM_SETTINGS_QUERY, variables: queryVariables }\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsGeneralSystemForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsGeneralSystemForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsGeneralSystem))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\n\nimport {\n  Card,\n  Container,\n  Grid,\n  Page,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../SiteWrapper\"\nimport HomeItemButton from \"../../ui/HomeItemButton\"\n\nfunction SettingsHome({ t, match, params }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t('settings.title')} />\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.general.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.date_time.title\")}</h5>\n                  {t(\"settings.general.date_time.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/datetime\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.general.system.title\")}</h5>\n                  {t(\"settings.general.system.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/general/system\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.workflow.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.class_booking.title\")}</h5>\n                  {t(\"settings.workflow.class_booking.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/class_booking\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.subscription_pauses.title\")}</h5>\n                  {t(\"settings.workflow.subscription_pauses.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/subscription_pauses\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.trial.title\")}</h5>\n                  {t(\"settings.workflow.trial.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/trial\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.workflow.shop.title\")}</h5>\n                  {t(\"settings.workflow.shop.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/workflow/shop\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.finance.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.currency.title\")}</h5>\n                  {t(\"settings.finance.currency.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/currency\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.finance.bank_accounts.title\")}</h5>\n                  {t(\"settings.finance.bank_accounts.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/finance/bank_accounts\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.mail.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.mailchimp_lists.title\")}</h5>\n                  {t(\"settings.mail.mailchimp_lists.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/mailchimp_lists\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.templates.title\")}</h5>\n                  {t(\"settings.mail.templates.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/templates\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.mail.notifications.title\")}</h5>\n                  {t(\"settings.mail.notifications.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/mail/notifications\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.shop.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.features.title\")}</h5>\n                  {t(\"settings.shop.features.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/features/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.shop.account_profiles.title\")}</h5>\n                  {t(\"settings.shop.account_profiles.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/shop/account_profiles/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.integration.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mailchimp.title\")}</h5>\n                  {t(\"settings.integration.mailchimp.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mailchimp/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.integration.mollie.title\")}</h5>\n                  {t(\"settings.integration.mollie.explanation\")}\n                  <br /><br />\n                  <HomeItemButton link=\"/settings/integration/mollie/\" />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              <h4>{t(\"settings.about.title\")}</h4>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.about.title\")}</h5>\n                  {t(\"settings.about.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/about\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"settings.about.diagnostics.title\")}</h5>\n                  {t(\"settings.about.diagnostics.explanation\")}\n                  <br /><br />\n                  <HomeItemButton \n                    link=\"/settings/diagnostics\" \n                    linkTitle={t(\"View info\")}\n                  />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsHome))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMailChimpForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        <Form.Group label={t('settings.integration.mailchimp.api_key')}>\n          <Field type=\"text\" \n            name=\"mailchimp_api_key\" \n            className={(errors.mailchimp_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_api_key\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n        <Form.Group label={t('settings.integration.mailchimp.server_prefix')}>\n          <Field type=\"text\" \n            name=\"mailchimp_server_prefix\" \n            className={(errors.mailchimp_server_prefix) ? \"form-control is-invalid\" : \"form-control\"} \n            autoComplete=\"off\" />\n          <ErrorMessage name=\"mailchimp_server_prefix\" component=\"span\" className=\"invalid-feedback\" />\n        </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimpForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMailChimpForm from \"./SettingsIntegrationMailChimpForm\"\n\n\nfunction SettingsIntegrationMailChimp({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mailchimp.title\")\n  const sidebarActive = \"integration\"\n\n  const { \n    loading: loadingUser, \n    error: errorUser, \n    data: dataUser\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_server_prefix\"\n    }\n  })\n  const { \n    loading: loadingKey, \n    error: errorKey, \n    data: dataKey\n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mailchimp_api_key\"\n    }\n  })\n\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(dataUser)\n  console.log(dataKey)\n\n  if (loadingUser || loadingKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorUser || errorKey) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mcUser = \"\"\n  if (dataUser.systemSettings.edges.length) {\n    mcUser = dataUser.systemSettings.edges[0].node.value\n  }\n\n  let mcApiKey = \"\"\n  if (dataKey.systemSettings.edges.length) {\n    mcApiKey = dataKey.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >\n    <Formik\n      initialValues={{ \n        mailchimp_server_prefix: mcUser,\n        mailchimp_api_key: mcApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"integration_mailchimp_server_prefix\", value: values.mailchimp_server_prefix },\n            { setting: \"integration_mailchimp_api_key\", value: values.mailchimp_api_key },\n          ]\n\n          for (let i in settings) {\n            console.log(i)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMailChimpForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMailChimpForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMailChimp))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsIntegrationMollieForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.integration.mollie.api_key')}>\n            <Field type=\"text\" \n              name=\"mollie_api_key\" \n              className={(errors.mollie_api_key) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"mollie_api_key\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieForm))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Button,\n  Header,\n  Icon\n} from \"tabler-react\";\n\n\nfunction SettingsIntegrationMollieCreateAccount({ t, match, history, mollieApiKey }) {\n  if (mollieApiKey) {\n    return \"\"\n  }\n\n  return (\n    <Alert type=\"primary\">\n      <Header.H4>{t('settings.integration.mollie.create_account_title')}</Header.H4>\n      <p>\n        {t(\"settings.integration.mollie.create_account_message\")}\n      </p>\n      <a href=\"https://www.mollie.com/dashboard/signup/2488481\" target=\"_blank\" rel=\"noreferrer\" >\n        <Button color=\"success\" RootComponent=\"button\">\n          {t(\"settings.integration.mollie.to_mollie\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </a>\n    </Alert>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollieCreateAccount))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsIntegrationMollieForm from \"./SettingsIntegrationMollieForm\"\nimport SettingsIntegrationMollieCreateAccount from \"./SettingsIntegrationMollieCreateAccount\"\n\n\nfunction SettingsIntegrationMollie({ t, match, history }) {\n  const headerSubTitle = t('settings.integration.title')\n  const cardTitle = t(\"settings.integration.mollie.title\")\n  const sidebarActive = \"integration\"\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"integration_mollie_api_key\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let mollieApiKey = \"\"\n  if (data.systemSettings.edges.length) {\n    mollieApiKey = data.systemSettings.edges[0].node.value\n  }\n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n      alertBanner={<SettingsIntegrationMollieCreateAccount mollieApiKey={mollieApiKey} />}\n    >\n    <Formik\n      initialValues={{ \n        mollie_api_key: mollieApiKey\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              setting: \"integration_mollie_api_key\",\n              value: values.mollie_api_key\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_SETTINGS_QUERY,     variables: {\n                setting: \"integration_mollie_api_key\"\n              }}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsIntegrationMollieForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsIntegrationMollieForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsIntegrationMollie))","import { gql } from \"@apollo/client\"\n\nexport const GET_MAILCHIMP_LISTS_QUERY = gql`\n  query systemMailchimpLists($after: String, $before: String) {\n    systemMailchimpLists(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          mailchimpListId\n        }\n      }\n    }\n  }\n`\n\nexport const GET_MAILCHIMP_LIST_QUERY = gql`\n  query SystemMailchimpList($id: ID!) {\n    systemMailchimpList(id:$id) {\n      id\n      name\n      description\n      frequency\n      mailchimpListId\n    }\n  }\n`\n\nexport const ADD_MAILCHIMP_LIST = gql`\n  mutation CreateSystemMailChimpList($input:CreateSystemMailChimpListInput!) {\n    createSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST = gql`\n  mutation UpdateSystemMailChimpList($input:UpdateSystemMailChimpListInput!) {\n    updateSystemMailchimpList(input: $input) {\n      systemMailchimpList{\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_MAILCHIMP_LIST = gql`\nmutation DeleteSystemMailChimpList($input: DeleteSystemMailChimpListInput!) {\n  deleteSystemMailchimpList(input: $input) {\n    ok\n  }\n}\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport HasPermissionWrapper from \"../../../HasPermissionWrapper\"\nimport ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailMailChimpListsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/mailchimp_lists\" />  \n              :\n                <HasPermissionWrapper permission=\"add\"\n                                      resource=\"systemmailchimplist\">\n                  <ButtonAdd addUrl=\"/settings/mail/mailchimp_lists/add\" />\n                </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListsBase))","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_MAILCHIMP_LIST, GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport ButtonDelete from '../../../ui/ButtonDelete';\n\n\nfunction SettingsMailMailChimpListDelete({t, match, node}) {\n  const [ deleteMailChimpList ] = useMutation(DELETE_MAILCHIMP_LIST)\n\n  return <ButtonDelete\n    msgConfirm={t(\"settings.mail.mailchimp_lists.delete_confirm_msg\")}\n    msgDescription={<p>{node.name}</p>}\n    msgSuccess={t('settings.mail.mailchimp_lists.delete_success')}\n    deleteFunction={deleteMailChimpList}\n    deleteFunctionVariables={{ \n        variables: {\n          input: {\n            id: node.id\n          }\n        }, \n        refetchQueries: [\n          { query: GET_MAILCHIMP_LISTS_QUERY },\n        ]\n      }}\n  />\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListDelete))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ButtonEdit from \"../../../ui/ButtonEdit\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_MAILCHIMP_LISTS_QUERY } from \"./queries\"\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase'\nimport SettingsMailMailChimpListDelete from './SettingsMailMailChimpListDelete'\n\n\nfunction SettingsMailMailChimpLists({ t, history }) {\n  const cardTitle = t('settings.mail.mailchimp_lists.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_MAILCHIMP_LISTS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.mailchimp_lists.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  const mailchimpLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailchimpLists.edges.length) { return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.mailchimp_lists.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )}\n\n  return (\n    <SettingsMailMailChimpListsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={mailchimpLists.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: mailchimpLists.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.organizationmailchimpLists.edges\n                        const pageInfo = fetchMoreResult.organizationmailchimpLists.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              organizationmailchimpLists: {\n                                __typename: previousResult.organizationmailchimpLists.__typename,\n                                edges: [ ...previousResult.organizationmailchimpLists.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('settings.mail.mailchimp_lists.mailchimp_list_id')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {mailchimpLists.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col key={v4()}>\n                    {node.mailchimpListId}\n                  </Table.Col>\n                  <Table.Col className=\"text-right\" key={v4()}>\n                    <ButtonEdit editUrl={`/settings/mail/mailchimp_lists/edit/${node.id}`} />\n                    <SettingsMailMailChimpListDelete node={node} />\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpLists))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const MAILCHIMP_LIST_SCHEMA = Yup.object().shape({\n    name: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    description: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    frequency: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n    mailchimpListId: Yup.string()\n      .min(3, t('yup.min_len_3'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n    Button,\n    Card,\n    Form,\n    Grid\n  } from \"tabler-react\"\n  import { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\nconst SettingsMailChimpListForm = ({ t, history, isSubmitting, errors, values, setFieldValue, setFieldTouched, returnUrl }) => (\n    <FoForm>\n        <Card.Body>\n          <Grid.Row>\n            <Grid.Col>\n              <Form.Group label={t('general.name')}>\n                <Field type=\"text\" \n                        name=\"name\" \n                        className={(errors.name) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"name\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n            <Grid.Col>\n              <Form.Group label={t('settings.mail.mailchimp_lists.mailchimp_list_id')}>\n                <Field type=\"text\" \n                        name=\"mailchimpListId\" \n                        className={(errors.mailchimpListId) ? \"form-control is-invalid\" : \"form-control\"} \n                        autoComplete=\"off\" />\n                <ErrorMessage name=\"mailchimpListId\" component=\"span\" className=\"invalid-feedback\" />\n              </Form.Group>\n            </Grid.Col>\n          </Grid.Row>\n            <Form.Group label={t('general.frequency')}>\n              <Field type=\"text\" \n                      name=\"frequency\" \n                      className={(errors.frequency) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"frequency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n            <Form.Group label={t('general.description')}>\n              <Editor\n                tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n                textareaName=\"description\"\n                initialValue={values.description}\n                init={tinymceBasicConf}\n                onBlur={(e) => {\n                  setFieldValue(\"description\", e.target.getContent())\n                  setFieldTouched(\"description\", true, true)\n                }}\n              />\n              <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n            >\n            {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n                <Button color=\"link\">\n                    {t('general.cancel')}\n                </Button>\n            </Link>\n        </Card.Footer>\n    </FoForm>\n)\n  \n  \n  export default withTranslation()(withRouter(SettingsMailChimpListForm))","import React from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\n\nimport { GET_MAILCHIMP_LISTS_QUERY, ADD_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\n\n\nfunction SettingsMailMailChimpListAdd({t, history}) {\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const [ addMailChimpList ] = useMutation(ADD_MAILCHIMP_LIST)\n  \n  return (\n   <SettingsMailMailChimpListsBase showBack={true}>\n    <Card>\n      <Card.Header>\n        <Card.Title>{t('settings.mail.mailchimp_lists.title_add')}</Card.Title>\n      </Card.Header>\n      <Formik\n          initialValues={{ name: '', description: '', frequency: '', mailchimpListId: '' }}\n          validationSchema={MAILCHIMP_LIST_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              addMailChimpList({ variables: {\n                input: {\n                  name: values.name, \n                  description: values.description, \n                  frequency: values.frequency, \n                  mailchimpListId: values.mailchimpListId, \n                }\n              }, refetchQueries: [\n                  {query: GET_MAILCHIMP_LISTS_QUERY }\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data);\n                  history.push(returnUrl)\n                  toast.success((t('settings.mail.mailchimp_lists.toast_add_success')), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n            <SettingsMailMailChimpListForm \n              isSubmitting={isSubmitting}\n              values={values}\n              errors={errors}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              returnUrl={returnUrl}\n            />\n          )}\n      </Formik>\n    </Card>\n   </SettingsMailMailChimpListsBase> \n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListAdd))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_MAILCHIMP_LISTS_QUERY, GET_MAILCHIMP_LIST_QUERY, UPDATE_MAILCHIMP_LIST } from './queries'\nimport { MAILCHIMP_LIST_SCHEMA } from './yupSchema'\nimport SettingsMailMailChimpListForm from './SettingsMailMailChimpListForm'\n\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport SettingsMailMailChimpListsBase from './SettingsMailMailChimpListsBase';\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction SettingsMailMailChimpListEdit({t, match, history}) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/mailchimp_lists\"\n  const cardTitle = t('settings.mail.mailchimp_lists.title_edit')\n  const { loading, error, data } = useQuery(GET_MAILCHIMP_LIST_QUERY, {\n    variables: { id: id }\n  })\n  const [ updateMailchimpList ] = useMutation(UPDATE_MAILCHIMP_LIST)\n\n  if (loading) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n\n  if (error) return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ContentCard>\n    </SettingsMailMailChimpListsBase>\n  )\n                    \n  const initialData = data.systemMailchimpList;\n  console.log('query data')\n  console.log(data)\n\n  return (\n    <SettingsMailMailChimpListsBase showBack={true}>\n      <Card title={cardTitle}>\n        <Formik\n            initialValues={{ \n              name: initialData.name, \n              description: initialData.description, \n              frequency: initialData.frequency, \n              mailchimpListId: initialData.mailchimpListId, \n            }}\n            validationSchema={MAILCHIMP_LIST_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                updateMailchimpList({ variables: {\n                  input: {\n                    id: match.params.id,\n                    name: values.name, \n                    description: values.description, \n                    frequency: values.frequency, \n                    mailchimpListId: values.mailchimpListId, \n                  }\n                }, refetchQueries: [\n                    {query: GET_MAILCHIMP_LISTS_QUERY}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    history.push(returnUrl)\n                    toast.success((t('settings.mail.mailchimp_lists.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, setFieldTouched, setFieldValue, values, errors }) => (\n              <SettingsMailMailChimpListForm \n                isSubmitting={isSubmitting}\n                values={values}\n                errors={errors}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                returnUrl={returnUrl}\n              />\n            )}\n        </Formik>\n      </Card>\n    </SettingsMailMailChimpListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailMailChimpListEdit))","import { gql } from \"@apollo/client\"\n\nexport const GET_NOTIFICATIONS_QUERY = gql`\n  query systemNotifications($after: String, $before: String) {\n    systemNotifications(first: 15, before: $before, after: $after) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          name\n          accounts {\n            edges {\n              node {\n                id\n                fullName\n                email\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_NOTIFICATION_ACCOUNT = gql`\n  mutation CreateSystemNotificationAccount($input:CreateSystemNotificationAccountInput!) {\n    createSystemNotificationAccount(input:$input) {\n      systemNotificationAccount {\n        id\n      }\n    }\n  }\n`\n\nexport const DELETE_NOTIFICATION_ACCOUNT = gql`\n  mutation DeleteSystemNotificationAccount($input:DeleteSystemNotificationAccountInput!) {\n    deleteSystemNotificationAccount(input:$input) {\n      ok\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport ButtonBack from \"../../../ui/ButtonBack\"\n\n\nfunction SettingsMailNotificationsBase({ t, history, children, showBack=false }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"settings.title\")} subTitle={t(\"settings.mail.title\")} >\n            <div className='page-options d-flex'>\n              {(showBack) ?\n                <ButtonBack returnUrl=\"/settings/mail/notifications\" />  \n              : \"\"\n                // <HasPermissionWrapper permission=\"add\"\n                //                       resource=\"systemnotification\">\n                //   <ButtonAdd addUrl=\"/settings/mail/notifications/add\" />\n                // </HasPermissionWrapper>\n              }\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n)}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsBase))\n","import React from 'react'\nimport { useMutation } from '@apollo/client';\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport { DELETE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport confirm_delete from '../../../../tools/confirm_delete';\n\nimport {\n  Icon\n} from \"tabler-react\"\n\n\n\nfunction SettingsMailNotificationsDeleteAccount({t, match, node, accountId, notificationId}) {\n  const [deleteNotificationAccount ] = useMutation(DELETE_NOTIFICATION_ACCOUNT)\n\n    return (\n      <button className=\"icon btn btn-link btn-sm pull-right\" \n        title={t('general.delete')} \n        href=\"\"\n        onClick={() => {\n          confirm_delete({\n            t: t,\n            msgConfirm: t(\"settings.mail.notifications.delete_confirm_msg\"),\n            msgDescription: <p>{node.fullName}</p>,\n            msgSuccess: t('settings.mail.notifications.delete_success'),\n            deleteFunction: deleteNotificationAccount,\n            functionVariables: { \n              variables: {\n                input: {\n                  account: accountId,\n                  systemNotification: notificationId\n                }\n              }, \n              refetchQueries: [\n                { query: GET_NOTIFICATIONS_QUERY },\n              ]\n            }\n          })\n      }}>\n        <span className=\"text-red\"><Icon prefix=\"fe\" name=\"trash-2\" /></span>\n      </button>\n    )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsDeleteAccount))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport {\n  Button,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\n// import ButtonAdd from \"../../../ui/ButtonAdd\"\nimport ContentCard from \"../../../general/ContentCard\"\n\nimport { GET_NOTIFICATIONS_QUERY } from \"./queries\"\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SettingsMailNotificationButtonDeleteAccount from './SettingsMailNotificationButtonDeleteAccount'\n\n\nfunction SettingsMailNotifications({ t, history }) {\n  const cardTitle = t('settings.mail.notifications.title')\n  const { loading, error, data, fetchMore } = useQuery(GET_NOTIFICATIONS_QUERY)\n  // const [ archiveDiscovery ] = useMutation(ARCHIVE_DISCOVERY)\n\n  if (loading) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <Dimmer active={true}\n                loader={true}>\n        </Dimmer>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  if (error) return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}>\n        <p>{t('settings.mail.notifications.error_loading')}</p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )\n\n  const notifications = data.systemNotifications\n\n  // Empty list\n  if (!notifications.edges.length) { return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle} >\n        <p> \n          {t('settings.mail.notifications.empty_list')}\n        </p>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  )}\n\n  console.log(notifications)\n\n  return (\n    <SettingsMailNotificationsBase>\n      <ContentCard cardTitle={cardTitle}\n                    hasCardBody={false}\n                    pageInfo={notifications.pageInfo}\n                    onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                        after: notifications.pageInfo.endCursor\n                      },\n                      updateQuery: (previousResult, { fetchMoreResult }) => {\n                        const newEdges = fetchMoreResult.systemNotifications.edges\n                        const pageInfo = fetchMoreResult.systemNotifications.pageInfo\n\n                        return newEdges.length\n                          ? {\n                              // Put the new mailchimpLists at the end of the list and update `pageInfo`\n                              // so we have the new `endCursor` and `hasNextPage` values\n                              systemNotifications: {\n                                __typename: previousResult.systemNotifications.__typename,\n                                edges: [ ...previousResult.systemNotifications.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          : previousResult\n                      }\n                    })\n                  }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('settings.mail.notifications.accounts')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n              {notifications.edges.map(({ node }) => (\n                <Table.Row key={v4()}>\n                  <Table.Col key={v4()}>\n                    {node.name}\n                  </Table.Col>\n                  <Table.Col>\n                    <div className='float-right'>\n                      {node.accounts.edges.map(({ node: accountNode }) => (\n                        // TODO: Add a delete button to the right of each account\n                        // console.log(accountNode)\n                        <div>\n                          <div className='float-right'>\n                            <SettingsMailNotificationButtonDeleteAccount\n                              node={accountNode}\n                              notificationId={node.id}\n                              accountId={accountNode.id}\n                            />\n                          </div>\n                          {accountNode.fullName}<br />\n                          <span className='text-muted'>{accountNode.email}</span>\n                        </div>\n                      ))}\n                      <Link to={`/settings/mail/notifications/add_account/${node.id}`}>\n                        <Button\n                          color=\"link\"\n                          icon=\"plus-circle\">\n                            {t(\"settings.mail.notifications.add_account\")}\n                        </Button>\n                      </Link>\n                    </div>\n                  </Table.Col>\n                </Table.Row>\n              ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotifications))\n","import React from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\nimport { CREATE_NOTIFICATION_ACCOUNT, GET_NOTIFICATIONS_QUERY } from \"./queries\"\n\n\nfunction SettingsMailNotificationButtonAddAccount({ t, match, history, accountId })  {\n  const notificationId = match.params.id\n  const [ createNotificationAccount ] = useMutation(CREATE_NOTIFICATION_ACCOUNT)\n  \n  return (\n    <Button\n      color=\"secondary\"\n      onClick={ () => (\n        createNotificationAccount({ variables: {\n          input: {\n            systemNotification: notificationId,\n            account: accountId\n          }}, \n          refetchQueries: [\n            {query: GET_NOTIFICATIONS_QUERY}\n        ]})\n        .then(({ data }) => {\n          console.log('got data', data)\n          history.push(`/settings/mail/notifications`)\n          toast.success((t('settings.mail.notifications.toast_add_success')), {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        }).catch((error) => {\n          toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n          console.log('there was an error sending the query', error)\n          // setSubmitting(false)\n        })\n      )}\n    >\n      <Icon name=\"plus-circle\" /> {t(\"settings.mail.notifications.btn_add_account\")}\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationButtonAddAccount))\n","import React, { useState } from 'react'\nimport { useLazyQuery } from '@apollo/client'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Alert,\n  Dimmer,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../general/ContentCard\"\nimport InputSearch from '../general/InputSearch'\nimport { GET_ACCOUNTS_QUERY } from '../../queries/accounts/account_search_queries'\n\n// Action buttons\nimport SettingsMailNotificationButtonAddAccount from '../settings/mail/notifications/SettingsMailNotificationButtonAddAccount'\n\nfunction get_accounts_query_variables(searchName) {\n  let queryVars = {\n    instructor: undefined,\n    employee: undefined,\n    searchName: undefined,\n  }\n\n  if (searchName) {\n    queryVars.searchName = searchName\n  }\n\n  return queryVars\n}\n\n\nfunction SearchAccounts({ \n  t, \n  match, \n  localStorateKeySearchValue=\"\", \n  placeholderSearch=\"\", \n  btnDisableAccountIds=[],\n  btnDisabledMessage=\"\",\n  btnAction,\n }) {\n  const [showSearchResults, setShowSearchResults] = useState(false)\n  const [ getAccounts, { called, loading, error, data, refetch, fetchMore } ] = useLazyQuery( GET_ACCOUNTS_QUERY )\n\n  function renderActionButton(accountId) {\n    switch(btnAction) {\n      case \"settingsMailNotificationAddAccount\":\n        return <SettingsMailNotificationButtonAddAccount accountId={accountId} />\n      default:\n        return \"btnAction type not defined\"\n    }\n  }\n\n  function Search() {\n    return <InputSearch \n      className=\"mb-2\"\n      initialValueKey={localStorateKeySearchValue}\n      placeholder={placeholderSearch}\n      onChange={(value) => {\n        localStorage.setItem(localStorateKeySearchValue, value)\n        if (value && !called) {\n          setShowSearchResults(true)\n          getAccounts({ variables: get_accounts_query_variables(value)})\n        } else if (value) {\n          // This is important, as the current relayStylePagination doesn't include args.\n          // Don't use getAccounts again, but refetch with different vars.\n          setShowSearchResults(true)\n          refetch(get_accounts_query_variables(value))\n        } else {\n          setShowSearchResults(false)\n        }\n      }}\n    />\n  }\n\n  if (!showSearchResults) {\n    return <Search />\n  }\n\n  if (called && loading) return (\n    <React.Fragment>\n      <Search />\n      <ContentCard cardTitle={t('general.search_results')}>\n        <Dimmer active={true} loader={true} />\n      </ContentCard>\n    </React.Fragment>\n  )\n\n  if (called && error) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"danger\">{t(\"general.error_sad_smiley\")}</Alert>\n    </React.Fragment>\n  )\n\n  if (called && !data.accounts.edges.length) return (\n    <React.Fragment>\n      <Search />\n      <Alert type=\"primary\">\n        <strong>{t(\"general.search_account_not_found\")}</strong> {\" - \"}\n        {t(\"general.search_no_account_results\")}\n      </Alert>\n    </React.Fragment>\n  )\n\n  return (\n    <React.Fragment>\n      <Search />\n      {(called && data) ?\n      <ContentCard cardTitle={t('general.search_results')}\n                  pageInfo={data.accounts.pageInfo}\n                  hasCardBody={false}\n                  onLoadMore={() => {\n                    fetchMore({\n                      variables: {\n                      after: data.accounts.pageInfo.endCursor\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                      const newEdges = fetchMoreResult.accounts.edges\n                      const pageInfo = fetchMoreResult.accounts.pageInfo \n\n                      return newEdges.length\n                        ? {\n                            // Put the new accounts at the end of the list and update `pageInfo`\n                            // so we have the new `endCursor` and `hasNextPage` values\n                            queryAccountsData: {\n                              accounts: {\n                                __typename: previousResult.accounts.__typename,\n                                edges: [ ...previousResult.accounts.edges, ...newEdges ],\n                                pageInfo\n                              }\n                            }\n                          }\n                        : previousResult\n                    }\n                  })\n                }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n              <Table.ColHeader>{t('general.email')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {data.accounts.edges.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col key={v4()}>\n                  {node.fullName}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {node.email}\n                </Table.Col>\n                <Table.Col key={v4()}>\n                  {(btnDisableAccountIds.includes(node.id)) ? \n                    <span className=\"pull-right\">{btnDisabledMessage}</span> :\n                    <span className=\"pull-right\">{renderActionButton(node.id)}</span>\n                  }   \n                </Table.Col>\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      </ContentCard>\n      : \"\" }\n    </React.Fragment>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SearchAccounts))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport SettingsMailNotificationsBase from './SettingsMailNotificationsBase'\nimport SearchAccounts from '../../../ui/SearchAccounts'\n\n\nfunction SettingsMailNotificationsAddAccount({ t, match, history }) {\n\n  return (\n    <SettingsMailNotificationsBase showBack={true}>\n      <SearchAccounts\n        localStorateKeySearchValue=\"\" \n        placeholderSearch={t(\"settings.mail.notifications.placeholder_search_account\")} \n        btnDisableAccountIds={[1]}\n        btnDisabledMessage=\"already notified!\"\n        btnAction=\"settingsMailNotificationAddAccount\"\n      />\n    </SettingsMailNotificationsBase>\n  ) \n}\n\n\nexport default withTranslation()(withRouter(SettingsMailNotificationsAddAccount))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\n\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle=\"\"}) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t(\"settings.mail.title\")} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={12}>\n              {children}\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SYSTEM_MAIL_TEMPLATES_QUERY = gql`\n  query SystemMailTemplates {\n    systemMailTemplates(first:100) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          subject\n          title\n          description\n          content\n          comments\n        }\n      }\n    }\n  }\n`\n\nexport const GET_SYSTEM_MAIL_TEMPLATE_QUERY = gql`\n  query SystemMailTemplate($id: ID!) {\n    systemMailTemplate(id:$id) {\n      id\n      name\n      subject\n      title\n      description\n      content\n      comments\n    }\n  }\n`\n\nexport const UPDATE_SYSTEM_MAIL_TEMPLATE =  gql`\n  mutation UpdateSystemMailTemplate($input: UpdateSystemMailTemplateInput!) {\n    updateSystemMailTemplate(input: $input) {\n      systemMailTemplate {\n        id\n        name\n        subject\n        title\n        description\n        content\n        comments\n      }\n    }\n  }\n`","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Table\n} from \"tabler-react\";\n\nimport ContentCard from \"../../../general/ContentCard\"\nimport SettingsMailTemplatesBase from \"./SettingsMailTemplatesBase\"\n\nimport { GET_SYSTEM_MAIL_TEMPLATES_QUERY } from \"./queries\"\n\n\nfunction SystemMailTemplates({ t, match, params }) {\n  const title = t(\"settings.mail.templates.title\")\n  const { loading, error, data, fetchMore } = useQuery(GET_SYSTEM_MAIL_TEMPLATES_QUERY)\n\n  if (loading) return (\n    <SettingsMailTemplatesBase title={title} >\n      {t(\"general.loading_with_dots\")}\n    </SettingsMailTemplatesBase>\n  )\n  if (error) return (\n    <SettingsMailTemplatesBase title={title}>\n      {t(\"settings.mail.templates.error_loading\")}\n    </SettingsMailTemplatesBase>\n  )\n\n  const mailTemplates = data.systemMailTemplates\n\n  // TODO: add empty list message and request import\n\n  return (\n    <SettingsMailTemplatesBase title={title} >\n      <ContentCard \n        cardTitle={t('settings.mail.templates.title')}\n        // headerContent={headerOptions}\n        pageInfo={mailTemplates.pageInfo}\n        hasCardBody={false}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: mailTemplates.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.systemMailTemplates.edges\n              const pageInfo = fetchMoreResult.systemMailTemplates.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    systemMailTemplates: {\n                      __typename: previousResult.systemMailTemplates.__typename,\n                      edges: [ ...previousResult.systemMailTemplates.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n        <Table cards>\n          <Table.Header>\n            <Table.Row key={v4()}>\n              <Table.ColHeader>{t('settings.mail.templates.name')}</Table.ColHeader>\n              <Table.ColHeader></Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n              <Table.Body>\n                  {mailTemplates.edges.map(({ node }) => (\n                    <Table.Row key={v4()}>\n                      <Table.Col>\n                        {node.name}\n                      </Table.Col>\n                      <Table.Col>\n                        <Link to={\"/settings/mail/templates/edit/\" + node.id}>\n                          <Button className='btn-sm pull-right' \n                                  color=\"secondary\">\n                            {t('general.edit')}\n                          </Button>\n                        </Link>\n                      </Table.Col>\n                    </Table.Row>\n                  ))}\n              </Table.Body>\n            </Table>\n      </ContentCard>\n    </SettingsMailTemplatesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(SystemMailTemplates))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\n\nimport {\n  Card,\n  Page,\n  Grid,\n  Container,\n} from \"tabler-react\";\nimport SiteWrapper from \"../../../SiteWrapper\"\nimport SettingsBack from \"../../SettingsBack\"\n\nfunction SettingsMailTemplatesBase({ t, children, headerSubTitle, help={} }) {\n  return (\n    <SiteWrapper>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"general.settings\")} subTitle={`${t('settings.mail.title')} ${headerSubTitle}`}>\n            <div className=\"page-options d-flex\">\n              <SettingsBack returnUrl=\"/settings/mail/templates\" />\n            </div>\n          </Page.Header>\n          <Grid.Row>\n            <Grid.Col md={8}>\n              {children}\n            </Grid.Col>\n            <Grid.Col md={4}>\n              <Card title={t('general.subject')}>\n                <Card.Body>\n                  {help.subject}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.title')}>\n                <Card.Body>\n                  {help.title}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.description')}>\n                <Card.Body>\n                  {help.description}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.content')}>\n                <Card.Body>\n                  {help.content}\n                </Card.Body>\n              </Card>\n              <Card title={t('general.comments')}>\n                <Card.Body>\n                  {help.comments}\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row>\n        </Container>\n      </div>\n    </SiteWrapper>\n  )\n}\n\nexport default withTranslation()(withRouter(SettingsMailTemplatesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport { Link } from 'react-router-dom'\nimport {\n  Button,\n  Card,\n  Form\n} from \"tabler-react\";\n\nimport { Editor } from '@tinymce/tinymce-react'\nimport { tinymceBasicConf } from \"../../../../plugin_config/tinymce\"\n\n\n\n\n\nfunction SettingsMailTemplateEditForm({ t, history, isSubmitting, errors, values, setFieldTouched, setFieldValue, returnUrl, cardTitle }) {\n\n\n  return (\n    <FoForm>\n      <Card title={cardTitle}>\n        <Card.Body>    \n          <Form.Group label={t('general.subject')} >\n            <Field type=\"text\" \n                  name=\"subject\" \n                  className={(errors.subject) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"subject\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.title')} >\n            <Field type=\"text\" \n                  name=\"title\" \n                  className={(errors.title) ? \"form-control is-invalid\" : \"form-control\"} \n                  autoComplete=\"off\" />\n            <ErrorMessage name=\"title\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.description')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"description\"\n              initialValue={values.description}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"description\", e.target.getContent())\n                setFieldTouched(\"description\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"description\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.content')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"content\"\n              initialValue={values.content}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"content\", e.target.getContent())\n                setFieldTouched(\"content\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"content\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('general.comments')}>\n            <Editor\n              tinymceScriptSrc=\"/d/static/tinymce/tinymce.min.js\"\n              textareaName=\"comments\"\n              initialValue={values.comments}\n              init={tinymceBasicConf}\n              onBlur={(e) => {\n                setFieldValue(\"comments\", e.target.getContent())\n                setFieldTouched(\"comments\", true, true)\n              }}\n            />\n            <ErrorMessage name=\"comments\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n        </Card.Body>\n        <Card.Footer>\n            <Button \n              className=\"pull-right\"\n              color=\"primary\"\n              disabled={isSubmitting}\n              type=\"submit\"\n            >\n              {t('general.submit')}\n            </Button>\n            <Link to={returnUrl}>\n              <Button\n                type=\"button\" \n                color=\"link\" \n              >\n                {t('general.cancel')}\n              </Button>\n            </Link>\n        </Card.Footer>\n      </Card>\n    </FoForm>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEditForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_MAIL_TEMPLATE_QUERY, GET_SYSTEM_MAIL_TEMPLATES_QUERY, UPDATE_SYSTEM_MAIL_TEMPLATE } from './queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\nimport { getTemplateInfo } from './tools'\n\nimport SettingsMailTemplateEditBase from \"./SettingsMailTemplateEditBase\"\nimport SettingsMailTemplateEditForm from \"./SettingsMailTemplateEditForm\"\n\n\nfunction SettingsMailTemplateEdit({ t, match, history }) {\n  const id = match.params.id\n  const returnUrl = \"/settings/mail/templates\"\n  const headerSubTitle = t(\"settings.mail.templates.title\")\n  const cardTitle = t(\"settings.mail.templates.edit.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_MAIL_TEMPLATE_QUERY, {\n    variables: {\n      id: id\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_MAIL_TEMPLATE)\n\n  console.log('query data app settings')\n  console.log(data)\n\n  if (loading) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsMailTemplateEditBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsMailTemplateEditBase>\n    )\n  }\n\n  const templateInfo = getTemplateInfo(t, data.systemMailTemplate.name)\n  console.log(data.systemMailTemplate.name)\n  console.log(templateInfo)\n\n\n  return (\n    <SettingsMailTemplateEditBase \n      headerSubTitle={headerSubTitle}\n      help={templateInfo.helpTexts}\n    >  \n    <Formik\n      initialValues={{ \n        subject: data.systemMailTemplate.subject,\n        title: data.systemMailTemplate.title,\n        description: data.systemMailTemplate.description,\n        content: data.systemMailTemplate.content,\n        comments: data.systemMailTemplate.comments        \n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          updateSettings({ variables: {\n            input: {\n              id: id,\n              subject: values.subject,\n              title: values.title,\n              description: values.description,\n              content: values.content,\n              comments: values.comments\n            }\n          }, refetchQueries: [\n              {query: GET_SYSTEM_MAIL_TEMPLATES_QUERY}\n          ]})\n          .then(({ data }) => {\n              console.log('got data', data)\n              toast.success((t('settings.mail.templates.edit.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n        <SettingsMailTemplateEditForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n          setFieldTouched={setFieldTouched}\n          setFieldValue={setFieldValue}\n          cardTitle={templateInfo.cardTitle}\n          returnUrl={returnUrl}\n        >\n          {console.log(errors)}\n        </SettingsMailTemplateEditForm>\n      )}\n      </Formik>\n    </SettingsMailTemplateEditBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsMailTemplateEdit))","\nexport function getTemplateInfo(t, template_name) {\n  let cardTitle\n  let helpTexts\n\n\n  switch(template_name) {\n    case \"class_info_mail\":\n      cardTitle = t(\"settings.mail.templates.class_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.class_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.class_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.class_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.class_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.class_info_mail.help_comments\"), \n      }\n      break\n    case \"event_info_mail\":\n      cardTitle = t(\"settings.mail.templates.event_info_mail.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.event_info_mail.help_subject\"),\n        title: t(\"settings.mail.templates.event_info_mail.help_title\"),\n        description: t(\"settings.mail.templates.event_info_mail.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.event_info_mail.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.event_info_mail.help_comments\"), \n      }\n      break\n    case \"order_received\":\n      cardTitle = t(\"settings.mail.templates.order_received.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.order_received.help_subject\"),\n        title: t(\"settings.mail.templates.order_received.help_title\"),\n        description: t(\"settings.mail.templates.order_received.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.order_received.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.order_received.help_comments\"), \n      }\n      break\n    case \"recurring_payment_failed\":\n      cardTitle = t(\"settings.mail.templates.recurring_payment_failed.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.recurring_payment_failed.help_subject\"),\n        title: t(\"settings.mail.templates.recurring_payment_failed.help_title\"),\n        description: t(\"settings.mail.templates.recurring_payment_failed.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.recurring_payment_failed.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.recurring_payment_failed.help_comments\"), \n      }\n      break\n    case \"system_footer\":\n      cardTitle = t(\"settings.mail.templates.system_footer.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.system_footer.help_subject\"),\n        title: t(\"settings.mail.templates.system_footer.help_title\"),\n        description: t(\"settings.mail.templates.system_footer.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.system_footer.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.system_footer.help_comments\"), \n      }\n      break\n    case \"trialpass_followup\":\n      cardTitle = t(\"settings.mail.templates.trialpass_followup.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.trialpass_followup.help_subject\"),\n        title: t(\"settings.mail.templates.trialpass_followup.help_title\"),\n        description: t(\"settings.mail.templates.trialpass_followup.help_description\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        content: t(\"settings.mail.templates.trialpass_followup.help_content\", {\n          interpolation: { prefix: \"%%\", suffix: \"%%\" }\n        }),\n        comments: t(\"settings.mail.templates.trialpass_followup.help_comments\"), \n      }\n      break\n    default:\n      cardTitle = t(\"settings.mail.templates.not_found.title\")\n      helpTexts = {\n        subject: t(\"settings.mail.templates.not_found.help_subject\"),\n        title: t(\"settings.mail.templates.not_found.help_title\"),\n        description: t(\"settings.mail.templates.not_found.help_description\"),\n        content: t(\"settings.mail.templates.not_found.help_content\"),\n        comments: t(\"settings.mail.templates.not_found.help_comments\"),\n      }\n  }\n\n\n  return {\n    \"cardTitle\": cardTitle,\n    \"helpTexts\": helpTexts,\n  }\n}\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.shop.account_profiles.required_fields')}>\n            <Field component=\"select\" \n              name=\"shop_account_profile_required_fields\" \n              className={(errors.shop_account_profile_required_fields) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MINIMAL\">{t(\"settings.shop.account_profiles.options.minimal\")}</option>\n                <option value=\"CONTACT\">{t(\"settings.shop.account_profiles.options.contact\")}</option>\n            </Field>\n            <ErrorMessage name=\"shop_account_profile_required_fields\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfileForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopAccountProfileForm from \"./SettingsShopAccountProfileForm\"\n\n\nfunction SettingsShopAccountProfile({ t, match, history }) {\n  const headerSubTitle = t('settings.shop.title')\n  const cardTitle = t(\"settings.shop.account_profiles.title\")\n\n  const { loading, error, data } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"shop_account_profile_required_fields\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    shop_account_profile_required_fields: \"\",\n  }\n  if (data.systemSettings.edges.length){\n    initialValues['shop_account_profile_required_fields'] = data.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        shop_account_profile_required_fields: initialValues['shop_account_profile_required_fields'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"shop_account_profile_required_fields\", \n              value: values.shop_account_profile_required_fields },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopAccountProfileForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopAccountProfileForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopAccountProfile))","import * as Yup from 'yup'\n\nexport const SHOP_FEATURES_SCHEMA = Yup.object().shape({\n    subscriptions: Yup.boolean(),\n    classpasses: Yup.boolean(),\n    classes: Yup.boolean(),\n    events: Yup.boolean(),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsShopFeaturesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n        {/* <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"memberships\" \n              checked={values.memberships} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.memberships')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"memberships\" component=\"div\" />   \n        </Form.Group>   */}\n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"subscriptions\" \n              checked={values.subscriptions} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.subscriptions')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"subscriptions\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classpasses\" \n              checked={values.classpasses} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classpasses')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classpasses\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"classes\" \n              checked={values.classes} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.classes')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"classes\" component=\"div\" />   \n        </Form.Group>  \n        <Form.Group>\n          <Form.Label className=\"custom-switch\">\n              <Field \n              className=\"custom-switch-input\"\n              type=\"checkbox\" \n              name=\"events\" \n              checked={values.events} />\n              <span className=\"custom-switch-indicator\" ></span>\n              <span className=\"custom-switch-description\">{t('general.events')}</span>\n          </Form.Label>\n          <ErrorMessage name=\"events\" component=\"div\" />   \n        </Form.Group>  \n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsShopFeaturesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SHOP_FEATURES_QUERY, UPDATE_SHOP_FEATURES } from './queries'\nimport { SHOP_FEATURES_SCHEMA } from './yupSchema'\n\n\nimport {\n  Card,\n  Dimmer,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsShopFeaturesForm from \"./SettingsShopFeaturesForm\"\n\n\nfunction SettingsShopFeatures({ t, match, history }) {\n  const headerSubTitle = t(\"settings.shop.features.title\")\n  const cardTitle = t(\"settings.shop.features.title\")\n  const sidebarActive = \"general\"\n\n  const { loading, error, data } = useQuery(GET_SHOP_FEATURES_QUERY)\n  const [ updateSettings ] = useMutation(UPDATE_SHOP_FEATURES)\n\n  if (loading) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (error) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n          sidebarActive={sidebarActive}>  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  const shopFeatures = data.systemFeatureShop\n  \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n      sidebarActive={sidebarActive}\n    >  \n    <Formik\n      initialValues={{ \n        memberships: shopFeatures.memberships,\n        subscriptions: shopFeatures.subscriptions,\n        classpasses: shopFeatures.classpasses,\n        classes: shopFeatures.classes,\n        events: shopFeatures.events,\n      }}\n      validationSchema={SHOP_FEATURES_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          updateSettings({ variables: {\n            input: {\n              memberships: values.memberships,\n              subscriptions: values.subscriptions,\n              classpasses: values.classpasses,\n              classes: values.classes,\n              events: values.events\n            }\n          }, refetchQueries: [\n              {query: GET_SHOP_FEATURES_QUERY}\n          ]})\n          .then(({ data }) => {\n              toast.success((t('settings.general.toast_edit_success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              setSubmitting(false)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n              })\n              console.log('there was an error sending the query', error)\n              setSubmitting(false)\n            })\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsShopFeaturesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsShopFeaturesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsShopFeatures))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowClassBookingForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.class_booking.book_days_advance')}>\n            <Field type=\"text\" \n              name=\"workflow_class_book_days_advance\" \n              className={(errors.workflow_class_book_days_advance) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_book_days_advance\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.class_booking.cancel_until')}>\n            <Field type=\"text\" \n              name=\"workflow_class_cancel_until\" \n              className={(errors.workflow_class_cancel_until) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_class_cancel_until\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBookingForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowClassBookingForm from \"./SettingsWorkflowClassBookingForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingDaysAdvance, \n    error: errorDaysAdvance, \n    data: dataDaysAdvance \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_book_days_advance\"\n    }\n  })\n  const { \n    loading: loadingCancelUntil, \n    error: errorCancelUntil, \n    data: dataCancelUntil \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_class_cancel_until\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingDaysAdvance) || (loadingCancelUntil)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorDaysAdvance) || errorCancelUntil) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_class_book_days_advance: \"30\",\n    workflow_class_cancel_until: \"2\"\n  }\n  if (dataDaysAdvance.systemSettings.edges.length){\n    initialValues['workflow_class_book_days_advance'] = dataDaysAdvance.systemSettings.edges[0].node.value\n  } \n  if (dataCancelUntil.systemSettings.edges.length){\n    initialValues['workflow_class_cancel_until'] = dataCancelUntil.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_class_book_days_advance: initialValues['workflow_class_book_days_advance'],\n        workflow_class_cancel_until: initialValues['workflow_class_cancel_until']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_class_book_days_advance\", value: values.workflow_class_book_days_advance },\n            { setting: \"workflow_class_cancel_until\", value: values.workflow_class_cancel_until },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowClassBookingForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowClassBookingForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowShopForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.shop.subscription_payment_method')}>\n            <Field component=\"select\" \n              name=\"workflow_shop_subscription_payment_method\" \n              className={(errors.workflow_shop_subscription_payment_method) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\">\n                <option value=\"MOLLIE\">{t(\"finance.payment_methods.mollie\")}</option>\n                <option value=\"DIRECTDEBIT\">{t(\"finance.payment_methods.direct_debit\")}</option>\n            </Field>\n            <ErrorMessage name=\"workflow_shop_subscription_payment_method\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowShopForm))\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowShopForm from \"./SettingsWorkflowShopForm\"\n\n\nfunction SettingsWorkflowShop({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.shop.title\")\n\n  const { \n    loading: loadingSubscriptionPayment, \n    error: errorSubscriptionPayment, \n    data: dataSubscriptionPayment \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_shop_subscription_payment_method\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorSubscriptionPayment) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_shop_subscription_payment_method: \"\",\n  }\n  if (dataSubscriptionPayment.systemSettings.edges.length){\n    initialValues['workflow_shop_subscription_payment_method'] = dataSubscriptionPayment.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_shop_subscription_payment_method: initialValues['workflow_shop_subscription_payment_method'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          const settings = [\n            { setting: \"workflow_shop_subscription_payment_method\", \n              value: values.workflow_shop_subscription_payment_method },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowShopForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowShopForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowShop))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowSubscriptionPausesForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.subscription_pauses.min_duration_in_days')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_min_duration_in_days\" \n              className={(errors.workflow_subscription_pauses_min_duration_in_days) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_min_duration_in_days\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n          <Form.Group label={t('settings.workflow.subscription_pauses.max_pauses_in_year')}>\n            <Field type=\"text\" \n              name=\"workflow_subscription_pauses_max_pauses_in_year\" \n              className={(errors.workflow_subscription_pauses_max_pauses_in_year) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_subscription_pauses_max_pauses_in_year\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPausesForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowSubscriptionPausesForm from \"./SettingsWorkflowSubscriptionPausesForm\"\n\n\nfunction SettingsWorkflowSubscriptionPauses({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.subscription_pauses.title\")\n\n  const { \n    loading: loadingMinDuration, \n    error: errorMinDuration, \n    data: dataMinDuration \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_min_duration_in_days\"\n    }\n  })\n  const { \n    loading: loadingMaxPauses, \n    error: errorMaxPauses, \n    data: dataMaxPauses \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_subscription_pauses_max_pauses_in_year\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if ((loadingMinDuration) || (loadingMaxPauses)) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if ((errorMinDuration) || errorMaxPauses) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_subscription_pauses_min_duration_in_days: \"1\",\n    workflow_subscription_pauses_max_pauses_in_year: \"1\"\n  }\n\n  if (dataMinDuration.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_min_duration_in_days'] = dataMinDuration.systemSettings.edges[0].node.value\n  } \n  if (dataMaxPauses.systemSettings.edges.length){\n    initialValues['workflow_subscription_pauses_max_pauses_in_year'] = dataMaxPauses.systemSettings.edges[0].node.value\n  } \n\n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_subscription_pauses_min_duration_in_days: initialValues['workflow_subscription_pauses_min_duration_in_days'],\n        workflow_subscription_pauses_max_pauses_in_year: initialValues['workflow_subscription_pauses_max_pauses_in_year']\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_subscription_pauses_min_duration_in_days\", \n              value: values.workflow_subscription_pauses_min_duration_in_days },\n            { setting: \"workflow_subscription_pauses_max_pauses_in_year\", \n              value: values.workflow_subscription_pauses_max_pauses_in_year },\n          ]\n\n          for (let i in settings) {\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowSubscriptionPausesForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowSubscriptionPausesForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowSubscriptionPauses))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst SettingsWorkflowTrialForm = ({ t, history, isSubmitting, errors, values, returnUrl }) => (\n  <FoForm>\n      <Card.Body>\n          <Form.Group label={t('settings.workflow.trial.trial_pass_limit')}>\n            <Field type=\"text\" \n              name=\"workflow_trial_pass_limit\" \n              className={(errors.workflow_trial_pass_limit) ? \"form-control is-invalid\" : \"form-control\"} \n              autoComplete=\"off\" />\n            <ErrorMessage name=\"workflow_trial_pass_limit\" component=\"span\" className=\"invalid-feedback\" />\n          </Form.Group>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          {/* <Link to={returnUrl}>\n            <Button \n              type=\"button\" \n              color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link> */}\n      </Card.Footer>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(SettingsWorkflowTrialForm))","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { GET_SYSTEM_SETTINGS_QUERY, UPDATE_SYSTEM_SETTING } from '../../queries'\n\nimport {\n  Dimmer,\n  Card,\n} from \"tabler-react\";\n\n// import FinancePaymentMethodForm from './AppSettingsGeneralForm'\nimport SettingsBase from \"../../SettingsBase\"\nimport SettingsWorkflowTrialForm from \"./SettingsWorkflowTrialForm\"\n\n\nfunction SettingsWorkflowClassBooking({ t, match, history }) {\n  const headerSubTitle = t('settings.workflow.title')\n  const cardTitle = t(\"settings.workflow.class_booking.title\")\n\n  const { \n    loading: loadingTrialClassLimit, \n    error: errorTrialClassLimit, \n    data: dataTrialClassLimit \n  } = useQuery(GET_SYSTEM_SETTINGS_QUERY, {\n    variables: {\n      setting: \"workflow_trial_pass_limit\"\n    }\n  })\n  const [ updateSettings ] = useMutation(UPDATE_SYSTEM_SETTING)\n\n  if (loadingTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          <Dimmer active={true}\n                  loader={true}>\n          </Dimmer>\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n  if (errorTrialClassLimit) {\n    return (\n      <SettingsBase \n          headerSubTitle={headerSubTitle}\n          cardTitle={cardTitle}\n      >  \n        <Card.Body>\n          {t(\"settings.general.error_loading\")}\n        </Card.Body>\n      </SettingsBase>\n    )\n  }\n\n  let initialValues = {\n    workflow_trial_pass_limit: \"1\",\n  }\n  if (dataTrialClassLimit.systemSettings.edges.length){\n    initialValues['workflow_trial_pass_limit'] = dataTrialClassLimit.systemSettings.edges[0].node.value\n  } \n    \n  return (\n    <SettingsBase \n      headerSubTitle={headerSubTitle}\n      cardTitle={cardTitle}\n    >  \n    <Formik\n      initialValues={{ \n        workflow_trial_pass_limit: initialValues['workflow_trial_pass_limit'],\n      }}\n      // validationSchema={MOLLIE_SCHEMA}\n      onSubmit={(values, { setSubmitting }, errors) => {\n          console.log('submit values:')\n          console.log(values)\n          console.log(errors)\n\n          const settings = [\n            { setting: \"workflow_trial_pass_limit\", value: values.workflow_trial_pass_limit },\n          ]\n\n          for (let i in settings) {\n\n            console.log(i)\n            console.log(settings[i].setting)\n            console.log(settings[i].value)\n\n            updateSettings({ variables: {\n              input: {\n                setting: settings[i].setting,\n                value: settings[i].value,\n              }\n            }, refetchQueries: [\n                {query: GET_SYSTEM_SETTINGS_QUERY, variables: { setting: settings[i].setting }},\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                toast.success((t('settings.general.toast_edit_success')), {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                })\n                setSubmitting(false)\n              }).catch((error) => {\n                toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n          }\n      }}\n    >\n      {({ isSubmitting, errors, values }) => (\n        <SettingsWorkflowTrialForm\n          isSubmitting={isSubmitting}\n          errors={errors}\n          values={values}\n        >\n          {console.log(errors)}\n        </SettingsWorkflowTrialForm>\n      )}\n      </Formik>\n    </SettingsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(SettingsWorkflowClassBooking))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountHomeBase({ t, match, history, children, subTitle=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={subTitle}/>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from 'react-router'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopAccountHomeButton({ t, link, buttonText }) {\n  return (\n    <Link to={link} >\n      <Button \n        outline\n        block\n        color=\"primary\"\n      >\n        {buttonText} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountHomeButton))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage';\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountHomeBase from \"./ShopAccountHomeBase\"\nimport ShopAccountHomeButton from \"./ShopAccountHomeButton\"\n\n\nfunction ShopAccountHome({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n\n  // Unset any next link for bank accounts that might have come from /shop/subscription/:id\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n  // Unset any next link for profile that might have come from /shop/checkout/payment\n  localStorage.removeItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n\n\n  if (loading) return (\n    <ShopAccountHomeBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountHomeBase>\n  )\n  if (error) return (\n    <ShopAccountHomeBase>\n      {t(\"shop.account.error_loading_user_data\")}\n    </ShopAccountHomeBase>\n  )\n\n  const user = data.user\n\n  return (\n    <ShopAccountHomeBase subTitle={user.fullName}>\n      {(user.instructor || user.employee) ?\n        <div>\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={4} lg={4}>\n              <Card>\n                <Card.Body>\n                  <h5>{t(\"goto.title\")}</h5>\n                  {t(\"shop.account.goto.explanation\")}\n                  <br /><br />\n                  <ShopAccountHomeButton link=\"/user/welcome\" buttonText={t(\"shop.account.btn_go_to\")} />\n                </Card.Body>\n              </Card>\n            </Grid.Col>\n          </Grid.Row> \n          <hr />\n        </div>\n        : \"\"\n      } \n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classes.title\")}</h5>\n              {t(\"shop.account.classes.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classes\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.subscriptions.title\")}</h5>\n              {t(\"shop.account.subscriptions.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/subscriptions\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.classpasses.title\")}</h5>\n              {t(\"shop.account.classpasses.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/classpasses\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.event_tickets.title\")}</h5>\n              {t(\"shop.account.event_tickets.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/event_tickets\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <hr />\n      {/* Administrative stuff below this point, profile, invoices, orders, etc. */}\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.profile.title\")}</h5>\n              {t(\"shop.account.profile.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/profile\" buttonText={t(\"shop.account.btn_text_profile_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.bank_account.title\")}</h5>\n              {t(\"shop.account.bank_account.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/bank_account\" buttonText={t(\"shop.account.btn_text_bank_account_edit\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.orders.title\")}</h5>\n              {t(\"shop.account.orders.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/orders\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.invoices.title\")}</h5>\n              {t(\"shop.account.invoices.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/shop/account/invoices\" buttonText={t(\"shop.account.btn_text_view\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.mailing_lists.title\")}</h5>\n              {t(\"shop.account.mailing_lists.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton \n                link=\"/shop/account/mailing_lists\" \n                buttonText={t(\"shop.account.btn_text_manage\")} \n              />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.change_password.title\")}</h5>\n              {t(\"shop.account.change_password.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/password/change/\" buttonText={t(\"shop.account.btn_text_change_password\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4} lg={4}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.account.sign_out.title\")}</h5>\n              {t(\"shop.account.sign_out.explanation\")}\n              <br /><br />\n              <ShopAccountHomeButton link=\"/user/logout/\" buttonText={t(\"shop.account.btn_text_sign_out\")} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountHome))","import React from 'react'\nimport moment from 'moment'\nimport {\n  Icon,\n} from \"tabler-react\"\n\nexport function DisplayClassInfo({\n  t, \n  classDate, \n  classData,\n  dateFormat,\n  timeFormat,\n  showTimeEnd,\n}) {\n    return (\n      <>\n        <h6>{classData.organizationClasstype.name}</h6>\n        <Icon name=\"clock\" /> { moment(classDate).format(dateFormat) } { \" \" }\n        <span className=\"text-muted\">\n          {moment(classDate + ' ' + classData.timeStart).format(timeFormat)} \n          {(showTimeEnd) && <>{ \" - \" }{moment(classDate + ' ' + classData.timeEnd).format(timeFormat)}</>}\n        </span><br />\n        <Icon name=\"home\" /> { classData.organizationLocationRoom.organizationLocation.name } { \" \" }\n        <span className=\"text-muted\">\n          { classData.organizationLocationRoom.name }\n        </span> \n      </>\n      // <div>\n      //   <b>\n      //     {moment(classDate).format(dateFormat)} {' '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n      //     {moment(TimeStringToJSDateOBJ(classData.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n      //   </b>\n      //   {classData.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n      //     classData.scheduleClass.organizationLocationRoom.organizationLocation.name}\n      // </div>\n    )\n}","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      cancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassCancelBase from \"./ShopAccountClassCancelBase\"\n\n\n\nfunction ShopAccountClassCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus === 'CANCELLED') {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.already_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.cancellationPossible) {\n    return (\n      <ShopAccountClassCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_cancel.cancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_cancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"warning\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"CANCELLED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_cancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_cancel.confirm_yes\")}\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassCancel))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASS_QUERY = gql`\n  query ScheduleItemAttendance($scheduleItemId:ID!, $date:Date!, $id: ID!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n    scheduleItemAttendance(id: $id) {\n      id\n      uncancellationPossible\n      attendanceType\n      date\n      bookingStatus\n      scheduleItem {\n        id\n        timeStart\n        timeEnd\n        organizationLocationRoom {\n          name\n          organizationLocation {\n            name\n          }\n        }\n        organizationClasstype {\n          name\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassUnCancelBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancelBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\n\nimport { DisplayClassInfo } from \"../../tools\"\nimport { UPDATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/attendance/queries\"\nimport { GET_ACCOUNT_CLASS_QUERY } from \"./queries\"\n// import { GET_SCHEDULE_CLASS_QUERY } from \"../../checkout/class_info/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountClassUnCancelBase from \"./ShopAccountClassUnCancelBase\"\n\n\n\nfunction ShopAccountClassUnCancel({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const attendanceId = match.params.attendance_id\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date\n  const { loading: loadingAttendance, error: errorAttendance, data: dataAttendance } = useQuery(GET_ACCOUNT_CLASS_QUERY, {\n    variables: { \n      id: attendanceId,\n      scheduleItemId: scheduleItemId,\n      date: date\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const [updateScheduleItemAttendance] = useMutation(UPDATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loadingUser || loadingAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassUnCancelBase>\n  )\n  if (errorUser || errorAttendance) return (\n    <ShopAccountClassUnCancelBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassUnCancelBase>\n  )\n\n  const user = dataUser.user\n  console.log(dataUser)\n  console.log(dataAttendance)\n  const scheduleItemAttendance = dataAttendance.scheduleItemAttendance\n\n  // Booking already cancelled\n  if (scheduleItemAttendance.bookingStatus !== 'CANCELLED') {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.not_cancelled\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Cancellation no longer possible\n  if (!scheduleItemAttendance.uncancellationPossible) {\n    return (\n      <ShopAccountClassUnCancelBase accountName={user.fullName}>\n        <Card>\n          <Card.Body>\n            <h6>{t(\"shop.account.class_uncancel.uncancelation_not_possible\")}</h6>\n          </Card.Body>\n        </Card>\n      </ShopAccountClassUnCancelBase>\n    )\n  }\n\n  // Show cancel option\n  return (\n    <ShopAccountClassUnCancelBase accountName={user.fullName}>\n      <Card>\n        <Card.Body>\n          {/* TODO: Check if class already cancelled */}\n          <h6>\n            {t(\"shop.account.class_uncancel.confirmation_question\")}\n          </h6>\n          <DisplayClassInfo\n            t={t}\n            classDate={date}\n            classData={dataAttendance.scheduleItemAttendance.scheduleItem}\n            dateFormat={dateFormat}\n            timeFormat={timeFormat}\n          />\n          <br />\n          <Grid.Row>\n            <Grid.Col xs={12} sm={12} md={3} lg={3}>\n              <Button\n                block\n                className=\"mt-3\"\n                color=\"primary\"\n                size=\"sm\"\n                onClick={() =>\n                  updateScheduleItemAttendance({ variables: {\n                    input: {\n                      id: attendanceId,\n                      bookingStatus: \"BOOKED\"\n                    }\n                  }})\n                  .then(({ data }) => {\n                      console.log('got data', data)\n                      history.push(\"/shop/account/classes\")\n                      toast.success((t('shop.account.class_uncancel.success')), {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                    }).catch((error) => {\n                      toast.error((t('general.toast_server_error')) +  error, {\n                          position: toast.POSITION.BOTTOM_RIGHT\n                        })\n                      console.log('there was an error sending the query', error)\n                    })\n                  }\n              >\n                {t(\"shop.account.class_uncancel.confirm_yes\")} <Icon name=\"chevron-right\" />\n              </Button>\n            </Grid.Col>\n          </Grid.Row>\n          {/* <Link to={\"/shop/account/classes\"}>\n            {t(\"shop.account.class_cancel.confirm_no\")}\n          </Link> */}\n        </Card.Body>\n      </Card>\n    </ShopAccountClassUnCancelBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassUnCancel))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId:ID!, $date:Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId\n      frequencyType\n      date\n      organizationClasstype {\n        name\n      }\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n          timeStart\n      timeEnd\n      infoMailContent\n    }\n  }\n`\n\n\n\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Dimmer,\n  Icon,\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport { DisplayClassInfo } from \"../../tools\"\nimport { GET_SCHEDULE_CLASS_QUERY } from \"./queries\"\n\n\nfunction ShopCheckoutClassInfo({ t, scheduleItemId, date, complete=true}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_CLASS_QUERY, {\n    variables: { \n      scheduleItemId: scheduleItemId,\n      date: date\n    }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.class_info.error_loading\")\n  )\n\n  console.log(data)\n\n  return (\n    (!loading && !error) ?\n      <div className=\"text-muted\">\n        <h5><Icon name=\"book\" /> {\n          (complete) ? t(\"shop.checkout.class_info.have_been_checked_in\")\n                     : t(\"shop.checkout.class_info.will_be_checked_in\") \n        }</h5>\n        {/* Class display info $ mail content */}\n        <DisplayClassInfo \n          t={t} \n          classDate={date}\n          classData={data.scheduleClass} \n          dateFormat={dateFormat} \n          timeFormat={timeFormat}\n        />\n        <br />\n        {(data.scheduleClass.infoMailContent) ? \n          <div>\n            <h5><Icon name=\"info\" /> {t(\"shop.checkout.class_info.info_mail\")}</h5>\n            <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(data.scheduleClass.infoMailContent) }} /> \n          </div>\n          : \"\"\n        }\n      </div> \n      : \"\"\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutClassInfo))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Container,\n  Icon,\n  Page\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountClassInfoBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header \n              title={t(\"shop.account.title\")} \n              subTitle={ accountName }\n            >\n              <div className=\"page-options d-flex\">\n                <Link to={\"/shop/account/classes\"}\n                      className='btn btn-secondary'>\n                  <Icon prefix=\"fe\" name=\"arrow-left\" /> {t('general.back')} \n                </Link>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassInfoBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Dimmer\n} from \"tabler-react\"\n\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopCheckoutClassInfo from \"../../checkout/class_info/ShopCheckoutClassInfo\"\nimport ShopAccountClassInfoBase from \"./ShopAccountClassInfoBase\"\n\n\n\nfunction ShopAccountClassInfo({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const scheduleItemId = match.params.class_id\n  const date = match.params.date \n\n  if (loading) return (\n    <ShopAccountClassInfoBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassInfoBase>\n  )\n  if (error) return (\n    <ShopAccountClassInfoBase>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </ShopAccountClassInfoBase>\n  )\n\n  const user = data.user\n\n  // Populated list\n  return (\n    <ShopAccountClassInfoBase accountName={user.fullName}>\n      <Card title={t(\"shop.account.class_info.title\")}>\n        <Card.Body>\n          <ShopCheckoutClassInfo\n            scheduleItemId={scheduleItemId}\n            date={date}\n            complete={true}\n          />\n        </Card.Body>\n      </Card>\n    </ShopAccountClassInfoBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClassInfo))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_CLASSPASSES = gql`\n  query AccountClasspass($before: String, $after: String, $account: ID!) {\n    accountClasspasses(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationClasspass {\n            name\n          }\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport ButtonBack from \"../../ui/ButtonBack\"\n\n\nfunction ShopAccountBack({ t, returnUrl=\"/shop/account\" }) {\n  \n  return (\n    <ButtonBack returnUrl={returnUrl} />\n  )\n}\n\nexport default withTranslation()(ShopAccountBack)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_CLASSPASSES } from \"./queries\"\n\nimport ShopAccountClasspassesBase from \"./ShopAccountClasspassesBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountClasspasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_CLASSPASSES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClasspassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClasspassesBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountClasspassesBase>\n  )\n\n  const user = data.user\n  const classpasses = data.accountClasspasses\n\n  // Empty list\n  if (!classpasses.edges.length) {\n    return (\n      <ShopAccountClasspassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classpasses.title')} >\n              <Card.Body>\n                {t('shop.account.classpasses.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClasspassesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountClasspassesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.classpasses.title')}\n            hasCardBody={false}\n            pageInfo={classpasses.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: classpasses.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountClasspasses.edges\n                  const pageInfo = fetchMoreResult.accountClasspasses.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountClasspasses: {\n                          __typename: previousResult.accountClasspasses.__typename,\n                          edges: [ ...previousResult.accountClasspasses.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.name')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.date_end')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.classes_remaining')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {classpasses.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.organizationClasspass.name}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.dateEnd).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.classesRemainingDisplay}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountClasspassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasspasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../SiteWrapperShop\"\nimport ShopAccountBack from \"./ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Table\n} from \"tabler-react\";\nimport { GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY } from \"../../../relations/accounts/schedule_event_tickets/queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ContentCard from \"../../../general/ContentCard\"\n\n\nfunction ShopAccountEventTickets({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_SCHEDULE_EVENT_TICKETS_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.event_tickets.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const eventTickets = data.accountScheduleEventTickets\n\n  // Empty list\n  if (!eventTickets.edges.length) {\n    return (\n      <ShopAccountProfileBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.event_tickets.title')} >\n              <Card.Body>\n                {t('shop.account.event_tickets.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountProfileBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <ContentCard cardTitle={t('shop.account.event_tickets.title')}\n            hasCardBody={false}\n            pageInfo={eventTickets.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: eventTickets.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountScheduleEventTickets.edges\n                  const pageInfo = fetchMoreResult.accountScheduleEventTickets.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new tickets at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        eventTickets: {\n                          __typename: previousResult.accountScheduleEventTickets.__typename,\n                          edges: [ ...previousResult.accountScheduleEventTickets.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <Table cards>\n              <Table.Header>\n                <Table.Row key={v4()}>\n                  <Table.ColHeader>{t('general.ticket')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.start')}</Table.ColHeader>\n                  <Table.ColHeader>{t('general.location')}</Table.ColHeader>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {eventTickets.edges.map(({ node }) => (\n                  <Table.Row key={v4()}>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.name} <br />\n                      <Badge>{node.scheduleEventTicket.name}</Badge> {\" \"}\n                      {(node.cancelled) ? <Badge color=\"warning\">{t(\"general.cancelled\")}</Badge> : \"\"}\n                    </Table.Col>\n                    <Table.Col>\n                      {moment(node.scheduleEventTicket.scheduleEvent.dateStart).format(dateFormat)}\n                    </Table.Col>\n                    <Table.Col>\n                      {node.scheduleEventTicket.scheduleEvent.organizationLocation.name}\n                    </Table.Col>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n          </ContentCard>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountEventTickets))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_INVOICE_QUERY = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id:$id) {\n      id\n      account {\n        id\n        fullName\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      relationCompany\n      relationCompanyRegistration\n      relationCompanyTaxRegistration\n      relationContactName\n      relationAddress\n      relationPostcode\n      relationCity\n      relationCountry\n      status\n      summary\n      invoiceNumber\n      dateSent\n      dateDue\n      terms\n      footer\n      note\n      subtotalDisplay\n      taxDisplay\n      total\n      totalDisplay\n      paidDisplay\n      balance\n      balanceDisplay\n      creditInvoiceNumber\n      updatedAt\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            financeTaxRate {\n              id\n              name\n              percentage\n              rateType\n            }\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceInvoicePaymentLink($id: ID!) {\n  createFinanceInvoicePaymentLink(id: $id) {\n    financeInvoicePaymentLink {\n      paymentLink\n    }\n  }\n}\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicePaymentBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\"/>\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentBase))","import React, { useRef, useState } from 'react'\nimport { useMutation, useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY, CREATE_PAYMENT_LINK } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentBase from \"./ShopAccountInvoicePaymentBase\"\n\n\nfunction ShopAccountInvoicePayment({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceInvoicePaymentLink.financeInvoicePaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  \n  return (\n    <ShopAccountInvoicePaymentBase accountName={user.fullName}>\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <button\n            className=\"btn float-right btn-success\"\n            ref={btnPayNow}\n            onClick={ onClickPay }\n          >\n            {btn_text}\n          </button>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePayment))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\n\n\nfunction ShopAccountInvoicePaymentStatusBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName } />\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatusBase))","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\nimport { GET_INVOICE_QUERY } from \"../invoice_payment/queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountInvoicePaymentStatusBase from \"./ShopAccountInvoicePaymentStatusBase\"\n\n\nfunction ShopAccountInvoicePaymentStatus({t, match, history}) {\n  const id = match.params.id\n  const cardTitleLoadingError = t(\"shop.account.invoice_payment.title\")\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_INVOICE_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      id: id\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          <Dimmer active={true} loader={true} />\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicePaymentStatusBase>\n      <Card title={cardTitleLoadingError}>\n        <Card.Body>\n          {t(\"shop.account.invoice_payment_status.error_loading_data\")}\n        </Card.Body>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n\n  const user = dataUser.user\n  const invoice = data.financeInvoice\n\n  let alert\n  if (invoice.status === \"PAID\") {\n    alert = <Alert type=\"success\" icon=\"check\">\n      {t(\"shop.account.invoice_payment_status.payment_received\")}\n    </Alert>\n  } else {\n    alert = <Alert type=\"primary\" icon=\"help-circle\">\n      {t(\"shop.account.invoice_payment_status.payment_not_confirmed\")}\n    </Alert>\n  }\n\n  \n  return (\n    <ShopAccountInvoicePaymentStatusBase accountName={user.fullName}>\n      {alert}\n      <Card title={<span>{t(\"general.invoice\")} #{invoice.invoiceNumber}</span>}>\n        <Card.Body>\n          { invoice.items.edges.map(({ node }) => (\n            <Grid.Row>\n              <Grid.Col md={9}>\n                {node.productName} <br />\n                <small className=\"text-muted\">\n                  {node.description}\n                </small>\n              </Grid.Col>\n              <Grid.Col md={3}>\n                <span className=\"float-right\">\n                  {node.totalDisplay}\n                </span>\n              </Grid.Col>\n            </Grid.Row>\n          ))}\n          {/* Total */}\n          <Grid.Row>\n            <Grid.Col md={9} className=\"bold\">\n              <br />\n              {t(\"general.total\")}\n            </Grid.Col>\n            <Grid.Col md={3}>\n              <span className=\"bold float-right\">\n                <br />\n                {invoice.totalDisplay}\n              </span>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Body>\n        <Card.Footer>\n          <Link to=\"/shop/account/invoices\">\n            <Button \n              color=\"primary\"\n              className=\"float-right\"\n            >\n              {t(\"shop.account.invoice_payment_status.to_profile\")} <Icon name=\"chevron-right\" />\n            </Button>\n          </Link>\n        </Card.Footer>\n      </Card>\n    </ShopAccountInvoicePaymentStatusBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicePaymentStatus))\n","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICES = gql`\n  query FinanceInvoices($after: String, $before: String, $account: ID!) {\n    financeInvoices(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          business {\n            id\n            name\n          }\n          invoiceNumber\n          status\n          summary\n          relationCompany\n          relationContactName\n          dateSent\n          dateDue\n          total\n          totalDisplay\n          balance\n          balanceDisplay\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoicesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoicesBase))","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICES } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport ShopAccountInvoicesBase from \"./ShopAccountInvoicesBase\"\n\n\nfunction ShopAccountInvoices({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_INVOICES, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountInvoicesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoicesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountInvoicesBase>\n      {t(\"shop.account.invoices.error_loading_data\")}\n    </ShopAccountInvoicesBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const invoices = data.financeInvoices\n\n  // Empty list\n  if (!invoices.edges.length) {\n    return (\n      <ShopAccountInvoicesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.invoices.title')} >\n              <Card.Body>\n                {t('shop.account.invoices.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountInvoicesBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountInvoicesBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={invoices.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: invoices.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeInvoices.edges\n                  const pageInfo = fetchMoreResult.financeInvoices.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeInvoices: {\n                          __typename: previousResult.financeInvoices.__typename,\n                          edges: [ ...previousResult.financeInvoices.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} \n          >\n            <h4>{t(\"shop.account.invoices.title\")}</h4>\n            <Grid.Row>\n              {invoices.edges.map(({ node }) => (\n                <Grid.Col xs={12} sm={12} md={4} lg={4}>\n                  <Card>\n                    <Card.Header>\n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Card.Title>{node.invoiceNumber}</Card.Title>\n                      </Link>\n                      <Card.Options>\n                        <FinanceInvoicesStatus status={node.status}/>\n                      </Card.Options>\n                    </Card.Header>\n                    { node.business && \n                      <Card.Alert color=\"primary\">\n                        {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{node.business.name}</b>\n                      </Card.Alert> \n                    }\n                    <Card.Body>\n                      <span className=\"text-bold\">\n                        {node.summary}\n                      </span>\n                    </Card.Body>\n                      <Table cards>\n                        <Table.Body>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateSent).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                            <Table.Col>{moment(node.dateDue).format(dateFormat)}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                            <Table.Col>{node.totalDisplay}</Table.Col>\n                          </Table.Row>\n                          <Table.Row>\n                            <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                            <Table.Col><b>{node.balanceDisplay}</b></Table.Col>\n                          </Table.Row>\n                        </Table.Body>\n                      </Table>\n                    <Card.Footer>\n                      {((node.status === \"SENT\" || node.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/account/invoice_payment/\" + node.id}>\n                          <Button\n                            className=\"float-right\"\n                            color=\"success\"\n                          >\n                            {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                        : \"\"\n                      }  \n                      <Button \n                        outline\n                        color=\"primary\"\n                        icon=\"printer\"\n                        className=\"mr-2\"\n                        onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n                          t, doTokenRefresh, history, `/d/export/invoice/pdf/${node.id}`\n                        )}\n                      >\n                        {t('general.pdf')}\n                      </Button>    \n                      <Link to={`/shop/account/invoice/${node.id}`}>\n                        <Button \n                          outline\n                          color=\"primary\"\n                          icon=\"file-text\"\n                          className=\"mr-2\"\n                        >\n                          {t('general.details')}\n                        </Button>\n                      </Link>                  \n                    </Card.Footer>\n                  </Card>\n                </Grid.Col>\n              ))}\n            </Grid.Row>\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoicesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoices))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_INVOICE = gql`\n  query FinanceInvoice($id: ID!) {\n    financeInvoice(id: $id) {\n      id\n      business {\n        id\n        name\n      }\n      invoiceNumber\n      status\n      summary\n      relationCompany\n      relationContactName\n      dateSent\n      dateDue\n      total\n      totalDisplay\n      balance\n      balanceDisplay\n      items {\n        edges {\n          node {\n            id\n            lineNumber\n            productName\n            description\n            quantity\n            price\n            priceDisplay\n            subtotal\n            subtotalDisplay\n            tax\n            taxDisplay\n            total\n            totalDisplay\n          }\n        }\n      }\n      payments {\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            amount\n            amountDisplay\n            date\n            financePaymentMethod {\n              id\n              name\n            }\n            note\n            onlinePaymentId\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountInvoiceBase({ t, match, history, children, pageHeaderButtonList, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack returnUrl=\"/shop/account/invoices\" />\n                {pageHeaderButtonList}\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountInvoiceBase))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceInvoicesStatus from \"../../../ui/FinanceInvoiceStatus\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table,\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_INVOICE } from \"./queries\"\n\nimport ShopAccountInvoiceBase from \"./ShopAccountInvoiceBase\"\n\n\nfunction ShopAccountInvoice({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  const invoiceId = match.params.id\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading, error, data } = useQuery(QUERY_ACCOUNT_INVOICE, {\n    variables: {\n      id: invoiceId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  if (loading) return (\n    <ShopAccountInvoiceBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountInvoiceBase>\n  )\n  if (error) return (\n    <ShopAccountInvoiceBase>\n      {t(\"shop.account.invoice.error_loading_data\")}\n    </ShopAccountInvoiceBase>\n  )\n\n  const user = data.user\n  const invoice = data.financeInvoice\n\n  const pageHeaderButtonList = ((invoice.status === \"SENT\" || invoice.status === \"OVERDUE\") && onlinePaymentsAvailable) ?\n    <Link to={\"/shop/account/invoice_payment/\" + invoice.id}>\n      <Button\n        className=\"float-right ml-2\"\n        color=\"success\"\n      >\n        {t('shop.account.invoices.to_payment')} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n    : \"\"\n    \n\n  return (\n    <ShopAccountInvoiceBase accountName={user.fullName} pageHeaderButtonList={pageHeaderButtonList}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <div className='float-right'>\n            <FinanceInvoicesStatus status={invoice.status}/>\n          </div>\n          <h4>{t(\"shop.account.invoice.title\")} {invoice.invoiceNumber}</h4>\n          { invoice.business && \n              <Alert type=\"primary\">\n                {t(\"shop.account.invoice.billed_to_b2b\")}: <b>{invoice.business.name}</b>\n              </Alert> \n          }\n          <Card>\n            <Card.Body>\n              {invoice.summary}\n            </Card.Body>\n            <Table cards>\n              <Table.Body>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.date\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateSent).format(dateFormat)}</Table.Col>\n                  <Table.ColHeader>{t(\"finance.invoices.due\")}</Table.ColHeader>\n                  <Table.Col>{moment(invoice.dateDue).format(dateFormat)}</Table.Col>\n                </Table.Row>\n                <Table.Row>\n                  <Table.ColHeader>{t(\"general.total\")}</Table.ColHeader>\n                  <Table.Col>{invoice.totalDisplay}</Table.Col>\n                  <Table.ColHeader><b>{t(\"shop.account.invoices.to_be_paid\")}</b></Table.ColHeader>\n                  <Table.Col><b>{invoice.balanceDisplay}</b></Table.Col>\n                </Table.Row>\n              </Table.Body>\n            </Table>\n          </Card>\n          <h4>{t('general.items')}</h4>\n          {invoice.items.edges.map(({ node }) => (\n            <Card>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} sm={12} md={6}>\n                    <h6>{node.productName}</h6>\n                    {node.description}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={4}>\n                    {(parseFloat(node.quantity) > 1.00) ? <div>\n                      <b>{node.quantity} {t(\"shop.account.invoice.pieces\")} </b><br />\n                      {node.priceDisplay} {t(\"general.each\")}\n                    </div> : \"\"}\n                  </Grid.Col>\n                  <Grid.Col xs={12} sm={12} md={2}>\n                    <div className=\"float-right\">\n                      <b>{node.totalDisplay}</b><br />\n                    </div>\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n          {(invoice.payments.edges.length) ?\n            <React.Fragment>\n              <h4>{t(\"general.payments\")}</h4>\n              {invoice.payments.edges.map(({ node }) => (\n              <Card>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} sm={12} md={8}>\n                      <h6>{moment(node.date).format(dateFormat)}</h6>\n                      {node.financePaymentMethod && node.financePaymentMethod.name}\n                    </Grid.Col>\n                    <Grid.Col xs={12} sm={12} md={4}>\n                      <div className=\"float-right\">\n                        <b>{node.amountDisplay}</b><br />\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n            </React.Fragment>\n          : \"\"}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountInvoiceBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountInvoice))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_SYSTEM_MAILCHIMP_LISTS = gql`\n  query SystemMailchimpLists($before: String, $after: String) {\n    systemMailchimpLists(first: 100, before: $before, after: $after) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          description\n          frequency\n          subscribed\n          mailchimpListId\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\nexport const UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS = gql`\n  mutation updateSystemMailchimpListSubscriptionStatus($input: UpdateSystemMailChimpListSubscriptionStatusInput!) {\n    updateSystemMailchimpListSubscriptionStatus(input: $input) {\n      subscriptionStatus\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountMailingListsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListsBase))","import React, { useState } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  GalleryCard,\n  Button,\n  Badge,\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS, UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS } from './queries'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopAccountMailingListCard({ t, mailingList, btnLink, active=false }) {\n  let [isSubmitting, setSubmitting] = useState(false)\n  const [ updateSubscriptionStatus ] = useMutation(UPDATE_MAILCHIMP_LIST_SUBSCRIPTION_STATUS)\n\n  function doUpdateSubscriptionStatus(mailchimpListId) {\n    setSubmitting(true)\n\n    updateSubscriptionStatus({ variables: {\n      input: {\n        mailchimpListId: mailchimpListId\n      }\n    }, refetchQueries: [\n      {query: QUERY_SYSTEM_MAILCHIMP_LISTS}\n    ]})\n    .then(({ data }) => {\n        console.log('got data', data)\n        toast.success((t('shop.account.mailing_lists.toast_update_subscription_status_success')), {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n        setSubmitting(false)\n      }).catch((error) => {\n        toast.error((t('general.toast_server_error')) +  error, {\n            position: toast.POSITION.BOTTOM_RIGHT\n          })\n        console.log('there was an error sending the query', error)\n        setSubmitting(false)\n      })\n    }  \n\n  return (\n    <GalleryCard>\n      <GalleryCard.Details>\n        <div>\n        <span className='float-right'>\n        {(mailingList.subscribed) ? <Badge color=\"success\">Subscribed</Badge> : \"\"}\n        </span>\n        <h4>{mailingList.name}</h4>\n        </div>\n        \n        <h6>{mailingList.frequency}</h6>\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(mailingList.description) }} />\n\n        {(mailingList.subscribed) ? \n              <Button\n                color=\"secondary\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.unsubscribing\") : \n                  t(\"shop.account.mailing_lists.unsubscribe\") \n                }\n              </Button> :\n              <Button\n                color=\"success\" \n                block\n                outline\n                disabled={isSubmitting}\n                onClick={() => doUpdateSubscriptionStatus(mailingList.mailchimpListId)}\n              >\n                { (isSubmitting) ? \n                  t(\"shop.account.mailing_lists.subscribing\") : \n                  t(\"shop.account.mailing_lists.subscribe\") \n                }\n              </Button>\n        }\n      </GalleryCard.Details>\n    </GalleryCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountMailingListCard))\n","import React from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport {\n  Card,\n  Dimmer,\n  Grid\n} from \"tabler-react\";\n\nimport { QUERY_SYSTEM_MAILCHIMP_LISTS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport ShopAccountMailingListsBase from \"./ShopAccountMailingListsBase\"\nimport ShopAccountMailingListCard from \"./ShopAccountMailingListCard\"\n\n\nfunction ShopAccountMailingLists({t, match, history}) {\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(QUERY_SYSTEM_MAILCHIMP_LISTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    }\n  })\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountMailingListsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountMailingListsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountMailingListsBase>\n      {t(\"shop.account.mailing_lists.error_loading_data\")}\n    </ShopAccountMailingListsBase>\n  )\n\n  const user = data.user\n  const mailingLists = data.systemMailchimpLists\n\n  // Empty list\n  if (!mailingLists.edges.length) {\n    return (\n      <ShopAccountMailingListsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.mailing_lists.title')} >\n              <Card.Body>\n                {t('shop.account.mailing_lists.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountMailingListsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountMailingListsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.mailing_lists.title')}</h4>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        {mailingLists.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={4}>\n            <ShopAccountMailingListCard\n              mailingList={node}\n              // btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopAccountMailingListsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountMailingLists))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_ORDERS = gql`\n  query FinanceOrders($after: String, $before: String, $account: ID!) {\n    financeOrders(first: 15, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          orderNumber\n          account {\n            id\n            fullName\n          }\n          message\n          status\n          deliveryErrorMessage\n          total\n          totalDisplay\n          createdAt\n          items(first: 100) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                id\n                productName\n                description\n                quantity\n                priceDisplay\n                subtotalDisplay\n                taxDisplay\n                totalDisplay                \n              }\n            }\n          }\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_ORDER = gql`\n  mutation UpdateOrder($input: UpdateFinanceOrderInput!) {\n    updateFinanceOrder(input: $input) {\n      financeOrder {\n        id\n        status\n      }\n    }\n  }\n`\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountOrdersBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountOrdersBase))","export function get_order_card_status_color(status) {\n    switch(status) {\n        case (\"RECEIVED\"): \n          return \"blue\"\n        case (\"AWAITING_PAYMENT\"): \n          return \"blue\"\n        case (\"PAID\"):\n          return \"green\"\n        case (\"DELIVERED\"):\n          return \"green\"\n        case \"CANCELLED\":\n          return \"orange\"\n        default:\n          return \"\"\n      }\n}","import React, { useContext } from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport FinanceOrderStatus from \"../../../finance/orders/FinanceOrderStatus\"\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  Table\n} from \"tabler-react\"\nimport { QUERY_ACCOUNT_ORDERS, UPDATE_ORDER } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountOrdersBase from \"./ShopAccountOrdersBase\"\nimport { cancelOrder } from \"./ShopAccountOrderCancel\"\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\n\nimport { get_order_card_status_color } from \"./tools\"\n\nfunction ShopAccountOrders({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  const dateTimeFormat = dateFormat + ' ' + timeFormat\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n\n  // Chain queries. First query user data and then query orders for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_ORDERS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountOrdersBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountOrdersBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountOrdersBase>\n      {t(\"shop.account.classpasses.error_loading_data\")}\n    </ShopAccountOrdersBase>\n  )\n\n  console.log(\"User data: ###\")\n  console.log(data)\n  const user = dataUser.user\n  const orders = data.financeOrders\n\n  // Empty list\n  if (!orders.edges.length) {\n    return (\n      <ShopAccountOrdersBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.orders.title')} >\n              <Card.Body>\n                {t('shop.account.orders.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountOrdersBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountOrdersBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={orders.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: orders.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.financeOrders.edges\n                  const pageInfo = fetchMoreResult.financeOrders.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        financeOrders: {\n                          __typename: previousResult.financeOrders.__typename,\n                          edges: [ ...previousResult.financeOrders.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }} >\n            <h4>{t(\"shop.account.orders.title\")}</h4>\n            {orders.edges.map(({ node }) => (\n              <div>\n                <span className=\"pull-right\">\n                  <FinanceOrderStatus status={node.status} />\n                </span>\n                <small className=\"text-muted\">\n                  {moment(node.createdAt).format(dateTimeFormat)}\n                </small>\n                <Card statusColor={get_order_card_status_color(node.status)}>\n                  <Card.Header>\n                    <Card.Title>{t(\"general.order\") + \" #\" + node.orderNumber}</Card.Title>\n                    <Card.Options>\n                      {(node.status === \"RECEIVED\" || node.status === \"AWAITING_PAYMENT\") ?\n                        <Button\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          onClick={() => cancelOrder({\n                            t: t,\n                            msgConfirm: t('shop.account.orders.msg_cancel_confirm'),\n                            msgDescription: <p>{t('general.order') + \" #\" + node.orderNumber}</p>, \n                            msgSuccess: t('shop.account.orders.order.cancelled'), \n                            cancelFunction: updateOrder, \n                            functionVariables: {\n                              variables: {\n                                input: {\n                                  id: node.id,\n                                  status: 'CANCELLED'\n                                }\n                              }\n                            }\n                          })}\n                        >\n                          {t('general.cancel')}\n                        </Button>\n                      : \"\"}\n                      {(node.status === \"AWAITING_PAYMENT\" && onlinePaymentsAvailable) ?\n                        <Link to={\"/shop/checkout/payment/\" + node.id}>\n                          <Button\n                            className=\"ml-4\"\n                            color=\"success\"\n                            size=\"sm\"\n                          >\n                            {t('shop.account.orders.to_payment')} <Icon name=\"chevron-right\" />\n                          </Button>\n                        </Link>\n                      : \"\"}\n                      {(node.status === \"DELIVERY_ERROR\" && node.deliveryErrorMessage) ? \n                       <span>{node.deliveryErrorMessage}</span>\n                      : \"\"}\n                    </Card.Options>\n                  </Card.Header>\n                  <Table cards>\n                    <Table.Header>\n                      <Table.Row>\n                        <Table.ColHeader>{t(\"general.product\")}</Table.ColHeader>\n                        <Table.ColHeader>{t(\"general.description\")}</Table.ColHeader>\n                        <Table.ColHeader><span className=\"float-right\">{t(\"general.total\")}</span></Table.ColHeader>\n                      </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                      {node.items.edges.map(({ node }) => (\n                        <Table.Row>\n                          <Table.Col>{node.productName}</Table.Col>\n                          <Table.Col>{node.description}</Table.Col>\n                          <Table.Col><span className=\"float-right\">{node.totalDisplay}</span></Table.Col>\n                        </Table.Row>    \n                      ))}\n                      <Table.Row>\n                        <Table.Col></Table.Col>\n                        <Table.Col></Table.Col>\n                        <Table.Col><span className=\"bold float-right\">{node.totalDisplay}</span></Table.Col>\n                      </Table.Row>\n                    </Table.Body>\n                  </Table>\n                </Card>\n              </div>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountOrdersBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountOrders))","import React from 'react'\nimport { toast } from 'react-toastify'\nimport { confirmAlert } from 'react-confirm-alert'\nimport { v4 } from 'uuid'\n\n\nexport function cancelOrder({t, msgConfirm, msgDescription, msgSuccess, cancelFunction, functionVariables}) {\n  return (\n    confirmAlert({\n      customUI: ({ onClose }) => {\n        return (\n          <div key={v4()} className='custom-ui'>\n            <h1>{t('shop.account.orders.confirm_cancel')}</h1>\n            {msgConfirm}\n            {msgDescription}\n            <button className=\"btn btn-link pull-right\" onClick={onClose}>{t('shop.account.orders.confirm_cancel_no')}</button>\n            <button\n              className=\"btn btn-warning btn-sm outline\"\n              onClick={() => {\n                cancelFunction(functionVariables)\n                  .then(({ data }) => {\n                    console.log('got data', data);\n                    toast.success(\n                      msgSuccess, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error);\n                  })\n                onClose()\n              }}\n            >\n              {t('shop.account.orders.confirm_cancel_yes')}\n            </button>\n          </div>\n        )\n      }\n    })\n  )\n}\n","import { gql } from \"@apollo/client\"\n\n\nexport const UPDATE_PROFILE = gql`\n  mutation UpdateAccount($input:UpdateAccountInput!) {\n    updateAccount(input: $input) {\n      account {\n        id\n        firstName\n        lastName\n        email\n      }\n    }\n  }\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\n\nimport { TOKEN_REFRESH } from \"../../../../queries/system/auth\"\nimport { refreshTokenAndOpenExportLinkInNewTab } from \"../../../../tools/refresh_token_and_open_export_link\"\n\nimport {\n  Button,\n} from \"tabler-react\";\n\n\nfunction ShopAccountProfileBtnDownloadData({ t, history }) {\n  const export_url = \"/d/export/account_data\"\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n\n  //TODO Check if account data download feature is enabled\n\n  return (\n    <Button\n      color=\"secondary\"\n      icon=\"download\"\n      className=\"ml-2\"\n      onClick={() => refreshTokenAndOpenExportLinkInNewTab(\n        t, doTokenRefresh, history, export_url\n      )}\n    >\n      {t('shop.account.profile.download_my_data')} \n    </Button>\n  )\n}\n\nexport default withTranslation()(ShopAccountProfileBtnDownloadData)\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\nimport ShopAccountProfileBtnDownloadData from './ShopAccountProfileBtnDownloadData'\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  // Fetch back location from localStorage, if no value set, default back to /finance/invoices\n  let returnUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n  if (!returnUrl) {\n    returnUrl = \"/shop/account\"\n  }\n\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n            <div className=\"page-options d-flex\">\n              <ShopAccountBack returnUrl={returnUrl} />\n              <ShopAccountProfileBtnDownloadData />\n            </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { v4 } from 'uuid'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nimport CSDatePicker from \"../../../ui/CSDatePicker\"\nimport ISO_COUNTRY_CODES from \"../../../../tools/iso_country_codes\"\n\n\nconst ShopAccountProfileForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm>\n    <Card title={t(\"shop.accounts.profile.edit\")} >\n      <Card.Body>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.first_name')}>\n              <Field type=\"text\" \n                      name=\"firstName\" \n                      className={(errors.firstName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"firstName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.last_name')}>\n              <Field type=\"text\" \n                      name=\"lastName\" \n                      className={(errors.lastName) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"lastName\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n         <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.date_of_birth')}>\n              <CSDatePicker \n                selected={values.dateOfBirth}\n                onChange={(date) => setFieldValue(\"dateOfBirth\", date)}\n                onBlur={() => setFieldTouched(\"dateOfBirth\", true)}\n              />\n              <ErrorMessage name=\"dateOfBirth\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.gender')}>\n              <Field component=\"select\" \n                    name=\"gender\" \n                    className={(errors.organizationMembership) ? \"form-control is-invalid\" : \"form-control\"} \n                    autoComplete=\"off\">\n                <option value=\"\"></option>\n                <option value=\"F\">{t(\"genders.female\")}</option>\n                <option value=\"M\">{t(\"genders.male\")}</option>\n                <option value=\"X\">{t(\"genders.other\")}</option>\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.email')}>\n              <Field type=\"text\" \n                      name=\"email\" \n                      className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('relations.accounts.emergency')}>\n              <Field type=\"text\" \n                     name=\"emergency\" \n                     className={(errors.emergency) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"emergency\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.phone')}>\n              <Field type=\"text\" \n                      name=\"phone\" \n                      className={(errors.phone) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"phone\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.mobile')}>\n              <Field type=\"text\" \n                     name=\"mobile\" \n                     className={(errors.mobile) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"mobile\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.address')}>\n              <Field type=\"text\" \n                      name=\"address\" \n                      className={(errors.address) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"address\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.postcode')}>\n              <Field type=\"text\" \n                     name=\"postcode\" \n                     className={(errors.postcode) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\" />\n              <ErrorMessage name=\"postcode\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.city')}>\n              <Field type=\"text\" \n                      name=\"city\" \n                      className={(errors.city) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"city\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Form.Group label={t('general.country')}>\n              <Field component=\"select\" \n                     name=\"country\" \n                     className={(errors.country) ? \"form-control is-invalid\" : \"form-control\"} \n                     autoComplete=\"off\">\n                <option value=\"\"></option>\n                { ISO_COUNTRY_CODES.map(\n                    country => <option value={country.Code} key={v4()}>{country.Name}</option>\n                )}\n              </Field>\n              <ErrorMessage name=\"gender\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group> \n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountProfileForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SCHEMA_MINIMAL = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n  })\n\nexport const ACCOUNT_SCHEMA_CONTACT = Yup.object().shape({\n    firstName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    lastName: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    email: Yup.string()\n      .email(t('yup.email'))\n      .required(t('yup.field_required')),\n    address: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    postcode: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    city: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    country: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    phone: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { UPDATE_PROFILE } from \"./queries\"\nimport ShopAccountProfileBase from \"./ShopAccountProfileBase\"\nimport ShopAccountProfileForm from \"./ShopAccountProfileForm\"\nimport { dateToLocalISO } from '../../../../tools/date_tools'\nimport { ACCOUNT_SCHEMA_MINIMAL, ACCOUNT_SCHEMA_CONTACT } from \"./yupSchema\"\n\n\nfunction ShopAccountProfile({t, match, history}) {\n  const { loading, error, data } = useQuery(GET_USER_PROFILE)\n  const [ updateProfile ] = useMutation(UPDATE_PROFILE)\n  const profileSubmitNext = localStorage.getItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT)\n\n  if (loading) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.profile.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n// TODO: Fetch required level or profile completeness and set correct YupSchema for it.\n\n  const user = data.user\n\n  let validationSchema = ACCOUNT_SCHEMA_MINIMAL\n  if (user.profilePolicy === \"CONTACT\") {\n    validationSchema = ACCOUNT_SCHEMA_CONTACT\n  }\n\n  let dateOfBirth = null\n  if (user.dateOfBirth) {\n    dateOfBirth = new Date(user.dateOfBirth)\n  }\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              firstName: user.firstName, \n              lastName: user.lastName, \n              email: user.email,\n              dateOfBirth: dateOfBirth,\n              gender: user.gender,\n              emergency: user.emergency,\n              phone: user.phone,\n              mobile: user.mobile,\n              address: user.address,\n              postcode: user.postcode,\n              city: user.city,\n              country: user.country\n            }}\n            validationSchema={validationSchema}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: user.accountId,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  gender: values.gender,\n                  emergency: values.emergency,\n                  phone: values.phone,\n                  mobile: values.mobile,\n                  address: values.address,\n                  postcode: values.postcode,\n                  city: values.city,\n                  country: values.country\n                }\n\n                if (values.dateOfBirth) {\n                  input_vars['dateOfBirth'] = dateToLocalISO(values.dateOfBirth)\n                } \n\n                updateProfile({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (profileSubmitNext) {\n                      history.push(profileSubmitNext)\n                    }\n                    toast.success((t('shop.account.profile.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n              <ShopAccountProfileForm\n                isSubmitting={isSubmitting}\n                setFieldTouched={setFieldTouched}\n                setFieldValue={setFieldValue}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountProfile))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTIONS = gql`\n  query AccountSubscriptions($before: String, $after: String, $account: ID!) {\n    accountSubscriptions(first: 100, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          organizationSubscription {\n            name\n            unlimited\n          }\n          creditTotal\n          dateStart\n          dateEnd\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountProfileBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountProfileBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport { QUERY_ACCOUNT_SUBSCRIPTIONS } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../general/LoadMoreOnBottomScroll'\n\nimport ShopAccountSubscriptionsBase from \"./ShopAccountSubscriptionsBase\"\n\n\nfunction ShopAccountSubscriptions({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTIONS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionsBase>\n  )\n\n  const user = data.user\n  const subscriptions = data.accountSubscriptions\n\n  // Empty list\n  if (!subscriptions.edges.length) {\n    return (\n      <ShopAccountSubscriptionsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionsBase>\n    )  \n  }\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptions.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptions.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptions.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptions.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscriptions at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptions: {\n                          __typename: previousResult.accountSubscriptions.__typename,\n                          edges: [ ...previousResult.accountSubscriptions.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptions.edges.map(({ node }) => (\n              <Card key={v4()}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={10}>\n                      <div className='mb-xs-3'>\n                        <h6>\n                          { node.organizationSubscription.name }\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                        </h6>\n                        <Icon name=\"calendar\" /> { moment(node.dateStart).format(dateFormat) } \n                        { (node.dateEnd) && <span> - {moment(node.dateEnd).format(dateFormat)}</span> }\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={2}>\n                      <Link to={`/shop/account/subscriptions/${node.id}/credits`}>\n                        <Button\n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                        >\n                          {(node.organizationSubscription.unlimited) ? \n                            t(\"general.unlimited\") : node.creditTotal } {\" \"}\n                          {t(\"general.credits\")}\n                        </Button>\n                      </Link>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptions))","import { gql } from \"@apollo/client\"\n\n\nexport const QUERY_ACCOUNT_SUBSCRIPTION_CREDITS = gql`\n  query AccountSubscriptionCredits($before: String, $after: String, $accountSubscription: ID!) {\n    accountSubscriptionCredits(first: 20, before: $before, after: $after, accountSubscription: $accountSubscription) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          advance\n          reconciled\n          createdAt\n          description\n          expiration\n          scheduleItemAttendance {\n            id\n            date\n            scheduleItem {\n              id\n              timeStart\n              timeEnd\n              organizationClasstype {\n                id\n                name\n              }\n              organizationLocationRoom {\n                id\n                name\n                organizationLocation {\n                  id \n                  name\n                }\n              }\n            }\n          }\n          accountSubscription {\n            id\n            organizationSubscription {\n              name\n              unlimited\n            }\n            creditTotal\n            dateStart\n            dateEnd\n          }\n        }\n      }\n    }\n    accountSubscription(id: $accountSubscription) {\n      id\n      organizationSubscription {\n        id\n        name\n        unlimited\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../../SiteWrapperShop\"\nimport ButtonBack from '../../../../ui/ButtonBack';\n\n\nfunction ShopAccountSubscriptionCreditsBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n    <SiteWrapperShop>\n      <div className=\"my-3 my-md-5\">\n        <Container>\n          <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ButtonBack returnUrl={`/shop/account/subscriptions`} />\n              </div>\n          </Page.Header>\n          { children }\n        </Container>\n      </div>\n    </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCreditsBase))","import React, { useContext} from 'react'\nimport { useQuery } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport moment from 'moment'\nimport {\n  Badge,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../../context/AppSettingsContext'\nimport GET_USER_PROFILE from \"../../../../../queries/system/get_user_profile\"\nimport LoadMoreOnBottomScroll from '../../../../general/LoadMoreOnBottomScroll'\n\nimport { QUERY_ACCOUNT_SUBSCRIPTION_CREDITS } from \"./queries\"\nimport ShopAccountSubscriptionCreditsBase from \"./ShopAccountSubscriptionCreditsBase\"\n\n\nfunction ShopAccountSubscriptionCredits({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query invoices for that user once we have the account Id.\n  const subscriptionId = match.params.subscription_id\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(QUERY_ACCOUNT_SUBSCRIPTION_CREDITS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      accountSubscription: subscriptionId\n    },\n    fetchPolicy: \"network-only\"\n  })\n  \n  if (loading || loadingUser || !data) return (\n    <ShopAccountSubscriptionCreditsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountSubscriptionCreditsBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountSubscriptionCreditsBase>\n      {t(\"shop.account.subscriptions.error_loading_data\")}\n    </ShopAccountSubscriptionCreditsBase>\n  )\n\n  const user = dataUser.user\n  const subscriptionCredits = data.accountSubscriptionCredits\n  const organizationSubscription = data.accountSubscription.organizationSubscription\n\n  // Unlimited credits, no need to go into details.\n  if (organizationSubscription.unlimited) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                <Card.Alert color=\"primary\"><Icon name=\"check\" /> {t('shop.account.subscriptions.credits.unlimited')}</Card.Alert>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n  // Empty list\n  if (!subscriptionCredits.edges.length) {\n    return (\n      <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.subscriptions.credits.title')} >\n              <Card.Body>\n                {t('shop.account.subscriptions.credits.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountSubscriptionCreditsBase>\n    )  \n  }\n\n\n\n  // Populated list\n  return (\n    <ShopAccountSubscriptionCreditsBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h4>{t('shop.account.subscriptions.credits.title')}</h4>\n          <LoadMoreOnBottomScroll\n            // headerContent={headerOptions}\n            pageInfo={subscriptionCredits.pageInfo}\n            onLoadMore={() => {\n              fetchMore({\n                variables: {\n                  after: subscriptionCredits.pageInfo.endCursor\n                },\n                updateQuery: (previousResult, { fetchMoreResult }) => {\n                  const newEdges = fetchMoreResult.accountSubscriptionCredits.edges\n                  const pageInfo = fetchMoreResult.accountSubscriptionCredits.pageInfo\n\n                  return newEdges.length\n                    ? {\n                        // Put the new subscription credits at the end of the list and update `pageInfo`\n                        // so we have the new `endCursor` and `hasNextPage` values\n                        accountSubscriptionCredits: {\n                          __typename: previousResult.accountSubscriptionCredits.__typename,\n                          edges: [ ...previousResult.accountSubscriptionCredits.edges, ...newEdges ],\n                          pageInfo\n                        }\n                      }\n                    : previousResult\n                }\n              })\n            }}\n          >\n            {/* <Grid.Row> */}\n            { subscriptionCredits.edges.map(({ node }) => (\n              <Card key={v4()} statusColor={(!node.scheduleItemAttendance) ? \"success\" : \"default\"}>\n                <Card.Body>\n                  <Grid.Row>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.added_on\")}\n                        </small>\n                        <h6>\n                          { moment(node.createdAt).format(dateFormat) }\n                          <div><small className='text-muted'> {node.description}</small></div>\n                          {/* Perhaps a badge here to indicate active /inactive in the future? */}\n                          { (node.reconciled) && <div>\n                            <small className='text-muted'>\n                              {t(\"shop.account.subscriptions.credits.reconciled_on\")} { moment(node.reconciled).format(dateFormat) }\n                            </small>\n                          </div>}\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.expiration\")}\n                        </small>\n                        <h6>\n                          { moment(node.expiration).format(dateFormat) }\n                        </h6>\n                      </div>\n                    </Grid.Col>\n                    <Grid.Col xs={12} md={4}>\n                      <div className='mb-xs-3'>\n                        <small className='text-muted'>\n                          {t(\"shop.account.subscriptions.credits.status\")}\n                        </small>\n                        {(!node.scheduleItemAttendance) ?\n                          // No attendance recorded yet, show available or expired\n                          ( moment() > moment(node.expiration) ) ? \n                          <h6><Badge color=\"danger\">{t(\"shop.account.subscriptions.credits.expired\")}</Badge></h6> :\n                          <h6><Badge color=\"success\">{t(\"shop.account.subscriptions.credits.available\")}</Badge></h6>\n                          : \n                          <h6><Badge color=\"default\">{t(\"shop.account.subscriptions.credits.used\")}</Badge></h6>\n                        }\n                        \n                        {(node.scheduleItemAttendance) && <small className='text-muted'>\n                          <div>\n                            {`${moment(node.scheduleItemAttendance.date).format(dateFormat)} \n                            ${moment(node.scheduleItemAttendance.date + \" \" + node.scheduleItemAttendance.scheduleItem.timeStart).format(timeFormat)}\n                            - ${node.scheduleItemAttendance.scheduleItem.organizationClasstype.name}`}\n                          </div> \n                          {node.scheduleItemAttendance.scheduleItem.organizationLocationRoom.organizationLocation.name}\n                        </small>}\n                      </div>\n                    </Grid.Col>\n                  </Grid.Row>\n                </Card.Body>\n              </Card>\n            ))}\n          </LoadMoreOnBottomScroll>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountSubscriptionCreditsBase>\n  )\n}\n\n\n\nexport default withTranslation()(withRouter(ShopAccountSubscriptionCredits))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\"\n\n\nconst ShopClassBookBack = ({ t }) => (\n  <Link to={\"/shop/classes\"} >\n    <Button color=\"primary btn-block mb-6\">\n      <Icon prefix=\"fe\" name=\"chevrons-left\" /> {t('general.back')}\n    </Button>\n  </Link>\n)\n\nexport default withTranslation()(withRouter(ShopClassBookBack))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.book.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookBase))","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookClasspassBtn({t, match, history, classpass}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountClasspass\": classpass.accountClasspass.id,\n    \"date\": class_date,\n    \"attendanceType\": \"CLASSPASS\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspassBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport moment from 'moment'\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookClasspassBtn from \"./ShopClassBookClasspassBtn\"\n\n\nfunction ShopClassBookClasspasses({ t, match, history, classpasses }) {\n  console.log(\"CLASSPASSES\")\n  console.log(classpasses)\n\n  return (\n    classpasses.map((classpass) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.classpass\")} >\n        <Card.Body>\n          <b>{classpass.accountClasspass.organizationClasspass.name}</b><br />\n          <span className=\"text-muted\">\n            {t('general.classes_remaining')}: {classpass.accountClasspass.classesRemainingDisplay} <br />\n            {t('general.valid_until')}: {moment(classpass.accountClasspass.dateEnd).format('LL')} <br />\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!classpass.allowed) ? t('schedule.classes.class.book.classpass_not_allowed') :\n            <ShopClassBookClasspassBtn classpass={classpass} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookClasspasses))\n\n","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\nimport { toast } from 'react-toastify'\n\nimport { CREATE_SCHEDULE_ITEM_ATTENDANCE } from \"../../../schedule/classes/class/book/queries\"\n\n\nfunction ShopClassBookSubscriptionBtn({t, match, history, subscription}) {\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n\n  const createInput = {\n    \"scheduleItem\": schedule_item_id,\n    \"accountSubscription\": subscription.accountSubscription.id,\n    \"date\": class_date,\n    \"attendanceType\": \"SUBSCRIPTION\",\n    \"onlineBooking\": true,\n    \"bookingStatus\": \"BOOKED\"\n  }\n\n  const [classCheckin, { loading, error }] = useMutation(CREATE_SCHEDULE_ITEM_ATTENDANCE)\n\n  if (loading) {\n    return t(\"general.please_wait\")\n  }\n\n  if (error) {\n    return t(\"general.error_sad_smiley\")\n  }\n\n  return (\n    <Button \n      block \n      outline \n      color=\"primary\" \n      onClick={() => classCheckin({\n        variables: { \"input\": createInput }, \n        refetchQueries: [\n          // {query: GET_SCHEDULE_CLASS_ATTENDANCE_QUERY, variables: get_attendance_list_query_variables(schedule_item_id, class_date)},\n        ]})\n        .then(({ data }) => {\n            console.log('got data', data);\n            // redirect to class booked page\n            console.log(\"Checkin success!\")\n            history.push(`/shop/classes/booked/${schedule_item_id}/${class_date}`)\n\n            // show message to user\n            // toast.success((t('schedule.classes.class.book.toast_success')), {\n            //   position: toast.POSITION.BOTTOM_RIGHT\n            // })\n          }).catch((error) => {\n            toast.error((t('general.toast_server_error')) +  error, {\n                position: toast.POSITION.BOTTOM_RIGHT\n              })\n            console.log('there was an error sending the query', error)\n          })}\n    >\n      {t(\"general.book\")} <Icon name=\"chevron-right\" />\n    </Button>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptionBtn))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Grid,\n  Card,\n} from \"tabler-react\";\n\nimport ShopClassBookSubscriptionBtn from \"./ShopClassBookSubscriptionBtn\"\n\n\nfunction ShopClassBookSubscriptions({ t, match, history, subscriptions }) {\n\n  return (\n    subscriptions.map((subscription) =>(\n      <Grid.Col xs={12} sm={6} md={4} xl={3}>\n        <Card \n          statusColor=\"blue\"\n          title={t(\"general.subscription\")} >\n        <Card.Body>\n          <b>{subscription.accountSubscription.organizationSubscription.name}</b><br />\n          <span className=\"text-muted\">\n            {(subscription.accountSubscription.organizationSubscription.unlimited) ? t(\"general.unlimited\") : \n            <span>{t(\"general.credits_valid_for_class\")}: {subscription.creditsOnDate}</span>}\n          </span>\n        </Card.Body>\n        <Card.Footer>\n          {(!subscription.allowed) ? t('schedule.classes.class.book.subscription_not_allowed') :\n            <ShopClassBookSubscriptionBtn subscription={subscription} />\n          }\n        </Card.Footer>\n        </Card>\n      </Grid.Col>\n    ))\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookSubscriptions))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Icon\n} from \"tabler-react\";\n\n\nfunction ShopClassBookPriceBtn({t, match, history, price}) {\n  console.log(price)\n  const classpassId = price.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  return (\n    <Link to={`/shop/classpass/${classpassId}/${scheduleItemId}/${classDate}`}>\n    <Button \n      block \n      outline \n      color=\"primary\" \n    >\n      {t(\"shop.classes.book.pay_and_book\")} <Icon name=\"chevron-right\" />\n    </Button>\n    </Link>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassBookPriceBtn))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceDropin({ \n  t, \n  match, \n  history, \n  priceDropin\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"blue\"\n        title={t(\"general.dropin\")} >\n      <Card.Body>\n        <b>{priceDropin.priceDisplay}</b><br />\n        {t(\"shop.classes.book.dropin_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceDropin} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceDropin))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport ShopClassBookPriceBtn from './ShopClassBookPriceBtn'\n\nfunction ShopClassBookPriceTrial({ \n  t, \n  match, \n  history, \n  priceTrial\n}) {\n\n  return (\n    <Grid.Col xs={12} sm={6} md={4} xl={3}>\n      <Card \n        statusColor=\"green\"\n        title={t(\"general.trial\")} >\n      <Card.Body>\n        <b>{priceTrial.priceDisplay}</b><br />\n        {t(\"shop.classes.book.trial_pay_and_book\")} <br />\n      </Card.Body>\n      <Card.Footer>\n        <ShopClassBookPriceBtn price={priceTrial} />\n      </Card.Footer>\n      </Card>\n    </Grid.Col>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookPriceTrial))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_BOOKING_OPTIONS_QUERY = gql`\n  query ScheduleClassBookingOptions($scheduleItem:ID!, $date:Date!, $listType:String!) {\n    scheduleClass(scheduleItemId: $scheduleItem, date:$date) {\n      bookingStatus\n    }\n    scheduleClassBookingOptions(scheduleItem: $scheduleItem, date:$date, listType:$listType) {\n      date\n      alreadyBooked\n      account {\n        id\n        fullName\n        hasReachedTrialLimit\n      }\n      scheduleItem {\n        frequencyType\n        frequencyInterval\n        organizationLocationRoom {\n          id\n          name\n          organizationLocation {\n            id\n            name\n          }\n        }\n        organizationClasstype {\n          id\n          name\n        }\n        organizationLevel {\n          id\n          name\n        }\n        dateStart\n        dateEnd\n        timeStart\n        timeEnd\n      }\n    \tscheduleItemPrices {\n        organizationClasspassDropin {\n          id\n          name\n          priceDisplay\n        }\n        organizationClasspassTrial {\n          id\n          name\n          priceDisplay\n        }\n      }\n      classpasses {\n        bookingType \n        allowed\n        accountClasspass {\n          id\n          dateStart\n          dateEnd\n          classesRemainingDisplay\n          organizationClasspass {\n            id\n            name\n          }\n        }\n      }\n      subscriptions {\n        bookingType\n        allowed\n        creditsOnDate\n        accountSubscription {\n          id\n          dateStart\n          dateEnd\n          organizationSubscription {\n            id\n            name\n            unlimited\n          }\n          creditTotal\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\n\nimport {\n  Alert,\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport { TimeStringToJSDateOBJ } from '../../../../tools/date_tools'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport ShopClassBookBack from \"./ShopClassBookBack\"\nimport ShopClassBookBase from \"./ShopClassBookBase\"\nimport ShopClassBookClasspasses from './ShopClassBookClasspasses'\nimport ShopClassBookSubscriptions from \"./ShopClassBookSubscriptions\"\nimport ShopClassBookPriceDropin from \"./ShopClassBookPriceDropin\"\nimport ShopClassBookPriceTrial from \"./ShopClassBookPriceTrial\"\n\nimport { GET_BOOKING_OPTIONS_QUERY } from \"./queries\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_BOOKING_OPTIONS_QUERY, {\n      variables: {\n        scheduleItem: schedule_item_id,\n        date: class_date,\n        listType: \"SHOP_BOOK\"\n      },\n      fetchPolicy: \"network-only\"\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    console.log(error.graphQLErrors)\n    if (error.graphQLErrors && error.graphQLErrors[0].extensions) {\n      if (error.graphQLErrors[0].extensions.code === \"CLASS_DOESNT_TAKE_PLACE_ON_DATE\") {\n        return (\n          <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n            <p>\n              <Alert type=\"warning\">\n                <strong>{(t(\"shop.classes.book.class_doesnt_take_place_on_this_date\"))}</strong>\n              </Alert>\n            </p>\n          </ShopClassBookBase>\n        )\n      }\n    } \n      \n    return (\n      <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookBase>\n    )\n  }\n  \n  console.log(data)\n  const scheduleClass = data.scheduleClass\n\n  const alreadyBooked = data.scheduleClassBookingOptions.alreadyBooked\n  const account = data.scheduleClassBookingOptions.account\n  const classpasses = data.scheduleClassBookingOptions.classpasses\n  const subscriptions = data.scheduleClassBookingOptions.subscriptions\n  const prices = data.scheduleClassBookingOptions.scheduleItemPrices\n  const scheduleItem = data.scheduleClassBookingOptions.scheduleItem\n\n  const location = scheduleItem.organizationLocationRoom.organizationLocation.name\n  const classType = scheduleItem.organizationClasstype.name\n  const timeStart = moment(TimeStringToJSDateOBJ(scheduleItem.timeStart)).format(timeFormat) \n  const timeEnd = moment(TimeStringToJSDateOBJ(scheduleItem.timeEnd)).format(timeFormat) \n  const date_display = moment(class_date).format(dateFormat)\n  // const subtitle = class_subtitle({\n  //   t: t,\n  //   location: , \n  //   locationRoom: scheduleItem.organizationLocationRoom.name,\n  //   classtype: , \n  //   timeStart: , \n  //   date: class_date\n  // })\n  const class_info = date_display + ' ' + timeStart + ' - ' + timeEnd + ' ' + classType + ' ' + t(\"general.at\") + ' ' + location\n\n  console.log(prices)\n  console.log(\"ALREADY BOOKED: \" + alreadyBooked)\n  console.log(scheduleClass.bookingStatus)\n\n  let content\n\n  switch(scheduleClass.bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      const bookingOpenOn = scheduleClass.bookingOpenOn\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </Alert>\n      break\n    case \"CANCELLED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled\")}\n        </Alert>\n      break\n    case \"HOLIDAY\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.cancelled_holiday\")}\n        </Alert>\n      break\n    case \"FINISHED\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.finished\")}\n        </Alert>\n      break\n    case \"ONGOING\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.ongoing\")}\n        </Alert>\n      break\n    case \"FULL\":\n      content = <Alert type=\"primary\" hasExtraSpace>\n          <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n          {t(\"shop.classes.book.class_booking_status.full\")}\n        </Alert>\n      break\n    case \"OK\":\n      content = <Grid.Row cards deck>\n        <ShopClassBookSubscriptions subscriptions={subscriptions} />\n        <ShopClassBookClasspasses classpasses={classpasses} />\n        {(prices) ?\n          (prices.organizationClasspassDropin) ? \n            <ShopClassBookPriceDropin priceDropin={prices.organizationClasspassDropin}/> : \"\" \n        : \"\" }\n        {(prices) ?\n          ((prices.organizationClasspassTrial) && (!account.hasReachedTrialLimit)) ? \n            <ShopClassBookPriceTrial priceTrial={prices.organizationClasspassTrial}/> : \"\" \n          : \"\" } \n      </Grid.Row>\n      break\n    default:\n      content = \"\"\n  }\n\n  return (\n    <ShopClassBookBase pageHeaderOptions={<ShopClassBookBack />}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <h5>{ class_info }</h5>\n          <div className=\"mt-6\">\n            {/* Show alert when already booked */}\n            {(alreadyBooked) ?\n              <Alert type=\"primary\" hasExtraSpace>\n                <h5>{t(\"shop.classes.book.unable_to_show_booking_options\")}</h5>\n                {t(\"shop.classes.book.already_booked\")} <br /><br />\n                <Link to='/shop/account/classes'>\n                  <Button\n                    color=\"primary\"\n                    outline\n                  >\n                    {t('shop.account.classes.title')} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Alert>\n              // Display booking options\n              : content\n            }\n          </div>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassBookedBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.classes.booked.title\")} pageHeaderOptions={pageHeaderOptions}>\n        {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBookedBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASS_QUERY = gql`\n  query ScheduleClass($scheduleItemId: ID!, $date: Date!) {\n    scheduleClass(scheduleItemId: $scheduleItemId, date:$date) {\n      scheduleItemId \n      date\n      organizationLocationRoom {\n        organizationLocation {\n          name\n        }\n      }\n      organizationClasstype {\n        name\n      }\n      timeStart\n      timeEnd\n    }\n  }\n`\n\n\nexport const CREATE_ORDER = gql`\n  mutation CreateFinanceOrder($input: CreateFinanceOrderInput!) {\n    createFinanceOrder(input: $input) {\n      financeOrder {\n        id\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopClassBookedBase from \"./ShopClassBookedBase\"\nimport { GET_CLASS_QUERY } from \"../../queries\"\nimport { DisplayClassInfo } from \"../../tools\"\n\n\nfunction ShopClassBook({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const schedule_item_id = match.params.class_id\n  const class_date = match.params.date\n  const { loading, error, data } = useQuery(\n    GET_CLASS_QUERY, {\n      variables: {\n        scheduleItemId: schedule_item_id,\n        date: class_date,\n      }\n    }\n  )\n\n  // Loading\n  if (loading) return (\n    <ShopClassBookedBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClassBookedBase>\n  )\n  // Error\n  if (error) {\n    console.log(error)\n    return (\n      <ShopClassBookedBase>\n        <p>{t('general.error_sad_smiley')}</p>\n      </ShopClassBookedBase>\n    )\n  }\n  \n  console.log(data)\n  // TODO: display class info in a card\n\n  \n  return (\n    <ShopClassBookedBase>\n      <Grid.Row cards deck>\n        <Grid.Col xs={12} sm={12} md={6} lg={6}>\n          <Card title={t(\"shop.classes.booked.class\")}>\n            <Card.Body>\n              {t(\"shop.classes.booked.class_explanation\")} <br /><br />\n              <DisplayClassInfo \n                t={t} \n                classDate={class_date}\n                classData={data.scheduleClass} \n                dateFormat={dateFormat} \n                timeFormat={timeFormat}\n              />\n            </Card.Body>\n            <Card.Footer>\n              <Link to={\"/shop/account\"}>\n                <Button\n                  outline\n                  block\n                  color=\"success\"\n                >\n                  {t(\"shop.classes.booked.to_profile\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Footer>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClassBookedBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassBook))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopClassesScheduleBase({ t, match, history, children, pageHeaderOptions=\"\" }) {  \n  return (\n    <ShopBase title={t(\"shop.classes.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClassesScheduleBase))\n","import CSLS from \"../../../../tools/cs_local_storage\"\n\nexport function get_list_query_variables() {\n    // let orderBy\n    let organizationClasstype\n    let instructor\n    let organizationLevel\n    let organizationLocation\n  \n    let queryVars = {\n      dateFrom: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM), \n      dateUntil: localStorage.getItem(CSLS.SHOP_CLASSES_DATE_UNTIL),\n    }\n  \n    // orderBy = localStorage.getItem(CSLS.SHOP_CLASSES_ORDER_BY)\n    // if (orderBy) {\n    //   queryVars.orderBy = orderBy\n    // }\n  \n    organizationClasstype = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)\n    if (organizationClasstype) {\n      queryVars.organizationClasstype = organizationClasstype\n    } else {\n      queryVars.organizationClasstype = \"\"\n    }\n  \n    instructor = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)\n    if (instructor) {\n      queryVars.instructor = instructor\n    } else {\n      queryVars.instructor = \"\"\n    }\n  \n    organizationLevel = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LEVEL)\n    if (organizationLevel) {\n      queryVars.organizationLevel = organizationLevel\n    } else {\n      queryVars.organizationLevel = \"\"\n    }\n  \n    organizationLocation = localStorage.getItem(CSLS.SHOP_CLASSES_FILTER_LOCATION)\n    if (organizationLocation) {\n      queryVars.organizationLocation = organizationLocation\n    } else {\n      queryVars.organizationLocation = \"\"\n    }\n  \n    console.log(queryVars)\n  \n    return queryVars\n  }\n  ","import React from 'react'\nimport { v4 } from \"uuid\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport { get_list_query_variables } from './tools'\n\nimport { \n  Grid,\n} from \"tabler-react\";\n\n\n\nfunction getDefaultValue(value) {\n  let defaultValue = localStorage.getItem(value)\n  if (defaultValue) {\n    return defaultValue\n  } else {\n    return \"\"\n  }\n}\n\n\nfunction updateLocalStorageAndRefetch(key, value, refetch) {\n  localStorage.setItem(key, value)\n  refetch(get_list_query_variables())\n\n}\n\nconst selectClass = \"form-control custom-select mb-2\"\n\nconst ShopClassesScheduleFilter = ({ t, history, data, refetch }) => (\n  <Grid.Row>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Locations */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LOCATION)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LOCATION,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_locations\")}</option>\n        {data.organizationLocations.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Classtypes */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_CLASSTYPE)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_CLASSTYPE,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_classtypes\")}</option>\n        {data.organizationClasstypes.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n          {/* Instructors */}\n          <select \n            className={selectClass}\n            defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR)}\n            onChange={ (event) => {\n              updateLocalStorageAndRefetch(\n                CSLS.SHOP_CLASSES_FILTER_INSTRUCTOR,\n                event.target.value,\n                refetch\n              )\n            }}\n          >\n            <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_instructors\")}</option>\n            {data.instructors.edges.map(({ node }) =>\n              <option value={node.id} key={v4()}>{node.fullName}</option>\n            )}\n          </select>\n        </Grid.Col>\n    <Grid.Col xs={12} sm={12} md={3}>\n      {/* Levels */}\n      <select \n        className={selectClass}\n        defaultValue={getDefaultValue(CSLS.SHOP_CLASSES_FILTER_LEVEL)}\n        onChange={ (event) => {\n          updateLocalStorageAndRefetch(\n            CSLS.SHOP_CLASSES_FILTER_LEVEL,\n            event.target.value,\n            refetch\n          )\n        }}\n      >\n        <option value=\"\" key={v4()}>{t(\"shop.classes.filter_all_levels\")}</option>\n        {data.organizationLevels.edges.map(({ node }) =>\n          <option value={node.id} key={v4()}>{node.name}</option>\n        )}\n      </select>\n    </Grid.Col>\n  </Grid.Row>\n);\n\nexport default withTranslation()(withRouter(ShopClassesScheduleFilter))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\";\n\n\nfunction ShopClassesScheduleButtonBook({ t, match, history, scheduleItemId, classDate, bookingOpenOn, bookingStatus }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let buttonBook\n  // Uncomment the line below when testing the book component statuses. (Development only)\n  // bookingStatus = \"OK\"\n\n  switch(bookingStatus) {\n    case \"NOT_YET_OPEN\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.open_on\") + \" \" + moment(bookingOpenOn).format(dateFormat)}\n        </span>\n      break\n    case \"CANCELLED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled\")}\n        </span>\n      break\n    case \"HOLIDAY\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.cancelled_holiday\")}\n        </span>\n      break\n    case \"FINISHED\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.finished\")}\n        </span>\n      break\n    case \"ONGOING\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.ongoing\")}\n        </span>\n      break\n    case \"FULL\":\n      buttonBook = <span className=\"pull-right\">\n          {t(\"shop.classes.class_booking_status.full\")}\n        </span>\n      break\n    case \"OK\":\n      buttonBook = <Link to={`/shop/classes/book/${scheduleItemId}/${classDate}`}>\n          <Button className=\"pull-right\" color=\"primary\" outline>\n            {t(\"general.book\")} <Icon name=\"chevron-right\" />\n          </Button>\n        </Link>\n      break\n    \n    default:\n      buttonBook = \"\"\n  }\n  \n  return buttonBook\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesScheduleButtonBook))\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport CSLS from \"../../../../tools/cs_local_storage\"\nimport AppSettingsContext from '../../../context/AppSettingsContext'\n\nimport {\n  Button,\n  Card, \n  Dimmer,\n  Grid,\n  Icon,\n  Progress,\n  Table,\n} from \"tabler-react\";\n\nimport { capitalize } from '../../../../tools/string_tools'\nimport ShopClassesScheduleBase from \"./ShopClassesScheduleBase\"\nimport ShopClassesScheduleFilter from \"./ShopClassesScheduleFilter\"\nimport ShopClassesScheduleButtonBook from \"./ShopClassesScheduleButtonBook\"\n\nimport { GET_CLASSES_QUERY } from \"../../../schedule/classes/queries\"\nimport { get_list_query_variables } from './tools'\n\n\n// Set some initial values for dates, if not found\nif (!localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)) {\n  console.log('date from not found... defaulting to today...')\n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n  localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n} else {\n  const date_from  = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM))\n  if (date_from.isBefore(moment(), \"day\")) {\n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, moment().format('YYYY-MM-DD')) \n    localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, moment().add(6, 'days').format('YYYY-MM-DD')) \n  }\n}\n\n\nfunction ShopClassesSchedule({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const timeFormat = appSettings.timeFormatMoment\n\n  const title = t(\"shop.home.title\")\n  const { loading, error, data, refetch } = useQuery(GET_CLASSES_QUERY, {\n    variables: get_list_query_variables(),\n    // https://github.com/apollographql/react-apollo/issues/321\n    // Set loading to true when refetching\n    notifyOnNetworkStatusChange: true\n  })\n\n  console.log(loading)\n\n  const pageHeaderOptions = <Button.List className=\"schedule-list-page-options-btn-list\">\n    <Button \n      icon=\"chevron-left\"\n      color=\"secondary\"\n      disabled={ (moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days').isBefore(moment(), \"day\")) }\n      onClick={ () => {\n        let prevWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).subtract(7, 'days')\n        let prevWeekUntil = moment(prevWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, prevWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, prevWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n    <Button \n      color=\"secondary\"\n      onClick={ () => {\n        let currentWeekFrom = moment()\n        let currentWeekUntil = moment(currentWeekFrom).add(6, 'days')\n\n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, currentWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, currentWeekUntil.format('YYYY-MM-DD')) \n        \n        refetch(get_list_query_variables())\n    }} > \n      {t(\"general.today\")}\n    </Button>\n    <Button \n      icon=\"chevron-right\"\n      color=\"secondary\"\n      onClick={ () => {\n        let nextWeekFrom = moment(localStorage.getItem(CSLS.SHOP_CLASSES_DATE_FROM)).add(7, 'days')\n        let nextWeekUntil = moment(nextWeekFrom).add(6, 'days')\n        \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_FROM, nextWeekFrom.format('YYYY-MM-DD')) \n        localStorage.setItem(CSLS.SHOP_CLASSES_DATE_UNTIL, nextWeekUntil.format('YYYY-MM-DD')) \n\n        refetch(get_list_query_variables())\n    }} />\n  </Button.List>\n\n  if (loading) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions} >\n      <br /><br /><br /><br />    \n      <Dimmer active={true} loader={true} />\n    </ShopClassesScheduleBase>\n  )\n  if (error) return (\n    <ShopClassesScheduleBase title={title} pageHeaderOptions={pageHeaderOptions}>\n      {t(\"shop.classes.error_loading\")}\n    </ShopClassesScheduleBase>\n  )\n\n  console.log(data)\n  console.log(data.scheduleClasses)\n  \n\n  return (\n    <ShopClassesScheduleBase \n      title={title}\n      pageHeaderOptions={pageHeaderOptions}\n    >\n      <ShopClassesScheduleFilter data={data} refetch={refetch} />\n      {data.scheduleClasses.map(({ date, bookingOpenOn, classes }) =>\n        <Grid.Row key={v4()}>\n          <Grid.Col md={12}>\n              <Card>\n                <Card.Header>\n                  <Card.Title>\n                    <b>{capitalize(moment(date).format(\"dddd\"))}</b> {' '}\n                    <span className=\"text-muted\">\n                      {moment(date).format(\"LL\")} \n                    </span>\n                  </Card.Title>\n                </Card.Header>                \n                {!(classes.length) ? \n                  <Card.Body>\n                    <p>{t('schedule.classes.empty_list')}</p>\n                  </Card.Body> :\n                  <Table cards>\n                    <Table.Body>\n                      {classes.map(({ \n                        scheduleItemId, \n                        frequencyType,\n                        date, \n                        status,\n                        holiday,\n                        holidayName,\n                        description,\n                        account, \n                        role,\n                        account2,\n                        role2,\n                        organizationLocationRoom, \n                        organizationClasstype, \n                        organizationLevel,\n                        timeStart, \n                        timeEnd,\n                        spaces,\n                        availableSpacesOnline,\n                        displayPublic,\n                        bookingStatus }) => (\n                          <Table.Row>\n                            <Table.Col>\n                            <h5>\n                              { organizationClasstype.name } { ' ' }\n                              {moment(date + ' ' + timeStart).format(timeFormat)} {' - '}\n                              {moment(date + ' ' + timeEnd).format(timeFormat)} { ' ' }\n\n                            </h5> \n                             <span className=\"mr-2\">{ (account) ? account.fullName : \"\" }</span>\n                             <span className=\"text-muted\">{organizationLevel && organizationLevel.name}</span>\n                             <br />\n                            <span className=\"text-muted\">{ organizationLocationRoom.organizationLocation.name }</span>\n                            </Table.Col>\n                            <Table.Col>\n                              <ShopClassesScheduleButtonBook\n                                scheduleItemId={scheduleItemId}\n                                classDate={date}\n                                bookingOpenOn={bookingOpenOn}\n                                bookingStatus={bookingStatus}\n                              />\n                              {(bookingStatus !== \"FINISHED\" && status !== \"CANCELLED\") ? \n                                <React.Fragment>\n                                  <div style={{clear: \"both\"}} />\n                                    <div className=\"cs-shop-classes-schedule-business-indicator mt-2\">\n                                      <div className=\"float-right\"><small><Icon name=\"users\" className=\"text-muted\" /></small></div>\n                                      <Progress size=\"xs\" className=\"cs-shop-classes-schedule-business-indicator\">\n                                        {/* This strange calculation shows online spaces in the progress bar, not all spaces. */}\n                                        <Progress.Bar color=\"primary\" width={((spaces-availableSpacesOnline)/spaces) * 100} /> \n                                      </Progress>\n                                  </div>\n                                </React.Fragment>\n                                : \"\"\n                              }\n                            </Table.Col>\n                          </Table.Row>\n                        )\n                      )}\n                    </Table.Body>\n                  </Table>\n                }\n              </Card>\n          </Grid.Col>\n        </Grid.Row>\n      )}\n    </ShopClassesScheduleBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClassesSchedule))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopContactBase({ t, match, history, children, pageHeaderOptions=\"\" }) {\n  \n  return (\n    <ShopBase title={t(\"shop.contact.title\")} pageHeaderOptions={pageHeaderOptions}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContactBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card, Grid, \n} from \"tabler-react\";\nimport ShopContactBase from \"./ShopContactBase\"\n\nimport { GET_ORGANIZATION_QUERY } from \"../../organization/organization/queries\"\n\n\nfunction ShopContact({ t, match, history }) {\n  // The ID is fixed, as there's only one organization supported at the moment... easy peasy.\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: { id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n  if (loading) return (\n    <ShopContactBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopContactBase>\n  )\n  if (error) return (\n    <ShopContactBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopContactBase>\n  )\n\n  const organization = data.organization\n\n  return (\n    <ShopContactBase>\n      <Card title={organization.name}>\n        <Card.Body>\n          <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organization.address) }} />\n          <p>{organization.email} <br /> {organization.phone}</p>\n          <p>{organization.registration} <br /> {organization.taxRegistration}</p>\n        </Card.Body>\n        <Card.Footer>\n          <Grid.Row>\n            <Grid.Col xs={12}>\n              <a href=\"/d/export/terms-and-conditions\" target=\"_blank\">\n                {t(\"general.terms_and_conditions\")}\n              </a>\n            </Grid.Col>\n            <Grid.Col xs={12}>\n              <a className=\"float-sm-right float-md-right float-lg-right float-xl-right\" \n                href=\"/d/export/privacy-policy\" target=\"_blank\">\n                {t(\"general.privacy_policy\")}\n              </a>\n            </Grid.Col>\n          </Grid.Row>\n        </Card.Footer>\n      </Card>\n    </ShopContactBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopContact))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventsBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.events.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventsBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_SCHEDULE_EVENTS_QUERY = gql`\n  query ScheduleEvents($before:String, $after:String) {\n    scheduleEvents(first: 100, before: $before, after:$after, archived:false, displayShop:true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          autoSendInfoMail\n          organizationLocation {\n            id\n            name\n          }\n          name\n          tagline\n          preview\n          description\n          organizationLevel {\n            id\n            name\n          }\n          instructor {\n            id \n            fullName\n          }\n          instructor2 {\n            id\n            fullName\n          }\n          dateStart\n          dateEnd\n          timeStart\n          timeEnd\n          infoMailContent\n          scheduleItems {\n            edges {\n              node {\n                id\n              }\n            }\n          }\n          media(first: 1) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n            edges {\n              node {\n                urlImageThumbnailSmall\n                urlImageThumbnailLarge\n              }\n            }\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\nimport moment from 'moment'\n\nimport {\n  Button,\n  Dimmer,\n  Grid,\n  Icon,\n  GalleryCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopEventsBase from \"./ShopEventsBase\"\nimport { GET_SCHEDULE_EVENTS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEvents({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENTS_QUERY)\n\n  if (loading) return (\n    <ShopEventsBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventsBase>\n  )\n  if (error) return (\n    <ShopEventsBase title={title}>\n      {t(\"shop.events.error_loading\")}\n    </ShopEventsBase>\n  )\n\n  console.log(data)\n  const scheduleEvents = data.scheduleEvents\n  console.log(scheduleEvents)\n\n  return (\n    <ShopEventsBase title={title}>\n        <Grid.Row>\n          {scheduleEvents.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={6} lg={4} key={v4()}>\n              <GalleryCard>\n                {(node.media.edges.length) ?\n                  <GalleryCard.Image \n                    src={(node.media.edges.length) ? node.media.edges[0].node.urlImageThumbnailLarge: \"\"} \n                    href={`#/shop/events/${node.id}`}\n                  /> : \"\" }\n                <GalleryCard.Footer>\n                  <h4>{node.name}</h4>\n                </GalleryCard.Footer>\n                <GalleryCard.Footer>                  \n                  <GalleryCard.Details\n                    fullName={<span className=\"\">{(node.instructor) ? node.instructor.fullName: \"\"}</span>}\n                    dateString={node.organizationLocation.name}\n                  />\n                  <GalleryCard.IconGroup>\n                  <GalleryCard.IconItem \n                    name=\"calendar\"\n                    label={moment(node.dateStart).format(dateFormat)}\n                    right={false}\n                    RootComponent=\"span\"\n                  />\n                  </GalleryCard.IconGroup>\n                </GalleryCard.Footer>\n                <Link to={`/shop/events/${node.id}`}>\n                  <GalleryCard.Footer pt={10}>\n                    <Button\n                      block\n                      color=\"link\"\n                    >\n                      {t(\"shop.events.tell_me_more\")} <Icon name=\"chevron-right\" />\n                    </Button>\n                  </GalleryCard.Footer>\n                </Link>\n              </GalleryCard>\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n    </ShopEventsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvents))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventBase({ t, match, history, children, title=\"\" }) {\n  \n  return (\n    <ShopBase \n      title={title}\n      returnUrl=\"/shop/events\"\n      // checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventBase))","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport moment from 'moment'\n\nimport {\n  Badge,\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopEventTicketPricingCard({ t, match, eventTicket, showButton=true, active=false }) {\n  // eventTicket should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, \n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n  console.log(eventTicket)\n  const ticketScheduleItems = eventTicket.ticketScheduleItems\n\n  const eventId = match.params.event_id\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {eventTicket.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        { (eventTicket.price === 0) ? \n          t(\"shop.event.ticket.free\") :\n          eventTicket.totalPriceDisplay \n        }\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          {(eventTicket.isEarlybirdPrice) ? <span>\n            <Badge className=\"mr-2\" color=\"primary\">{t(\"shop.event.ticket.earlybird_price\")}</Badge>\n          </span> : \"\"}\n          {(eventTicket.isSubscriptionDiscountPrice) ? <span>\n            <Badge color=\"success\">{t(\"shop.event.ticket.subscription_discount\")}</Badge>\n          </span> : \"\"}\n        </PricingCard.AttributeItem>\n        {(eventTicket.isEarlybirdPrice || eventTicket.isSubscriptionDiscountPrice) ? \n          <PricingCard.AttributeItem>\n            {t(\"shop.event.ticket.regular_price\")} {eventTicket.priceDisplay}\n          </PricingCard.AttributeItem>\n          : \"\" \n        }\n        {ticketScheduleItems.edges.map(({ node }) => (\n          <PricingCard.AttributeItem>\n              <Icon name=\"calendar\" /> { \" \" }\n              {moment(node.scheduleItem.dateStart).format(dateFormat)} {\" \"}\n              {/* Start & end time */}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeStart).format(timeFormat)} {' - '}\n              {moment(node.scheduleItem.dateStart + ' ' + node.scheduleItem.timeEnd).format(timeFormat)} { ' ' }\n            <br />\n            <small className=\"text-muted\">\n              {node.scheduleItem.name} <Icon name=\"map-pin\" /> {node.scheduleItem.organizationLocationRoom.organizationLocation.name}\n            </small>\n          </PricingCard.AttributeItem>\n        ))}\n      </PricingCard.AttributeList>\n      {(showButton && !eventTicket.isSoldOut) ?\n        <Link to={`/shop/events/${eventId}/ticket/${eventTicket.id}`}>\n          <PricingCard.Button>\n            {t(\"shop.event.ticket.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\" \n      }\n      {(showButton && eventTicket.isSoldOut) ? \n        <PricingCard.Button \n          className=\"disabled\"\n        >\n          {t('general.sold_out')}\n        </PricingCard.Button> : \"\"}\n    </PricingCard>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEventTicketPricingCard))\n\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_QUERY = gql`\nquery ScheduleEvent($id: ID!) {\n  scheduleEvent(id: $id) {\n    id\n    archived\n    displayPublic\n    displayShop\n    autoSendInfoMail\n    organizationLocation {\n      id\n      name\n    }\n    name\n    tagline\n    preview\n    description\n    organizationLevel {\n      id\n      name\n    }\n    instructor {\n      id \n      fullName\n    }\n    instructor2 {\n      id\n      fullName\n    }\n    dateStart\n    dateEnd\n    timeStart\n    timeEnd\n    infoMailContent\n    media(first: 1) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          urlImageThumbnailSmall\n          urlImageThumbnailLarge\n        }\n      }\n    }\n    tickets(first: 100, displayPublic: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          name\n          price\n          priceDisplay\n          totalPrice\n          totalPriceDisplay\n          description\n          isSoldOut\n          isEarlybirdPrice\n          isSubscriptionDiscountPrice\n          ticketScheduleItems(included: true, orderBy: \"date_start\") {\n           pageInfo{\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n            }\n            edges {\n              node {\n                id\n                included\n                scheduleItem {\n                  name\n                  dateStart\n                  timeStart\n                  timeEnd\n                  organizationLocationRoom {\n                    organizationLocation {\n                      name\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from \"react-router-dom\"\nimport moment from 'moment'\nimport DOMPurify from 'dompurify'\nimport {\n  Alert,\n  Card,\n  Dimmer,\n  GalleryCard,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from '../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopEventBase from \"./ShopEventBase\"\nimport ShopEventTicketPricingCard from \"./ShopEventTicketPricingCard\"\nimport { GET_SCHEDULE_EVENT_QUERY } from \"./queries\"\n\n\nfunction ShopEvent({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n\n  let tempTitle = t(\"shop.home.title\")\n  const eventId = match.params.event_id\n\n  // Check if refresh token is present and if so, hasn't expired\n  // To see whether a user is signed in now\n  const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n  let userIsAuthenticated = true\n  if (new Date() / 1000 >= refreshTokenExp || refreshTokenExp == null ) {\n    userIsAuthenticated = false\n  }\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_QUERY, {\n    variables: { id: eventId },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopEventBase title={tempTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventBase>\n  )\n  if (error) return (\n    <ShopEventBase title={tempTitle}>\n      {t(\"shop.event.error_loading\")}\n    </ShopEventBase>\n  )\n\n  const event = data.scheduleEvent\n  const tickets = event.tickets\n\n\n  return (\n    <ShopEventBase title={event.name}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h5>{event.tagline}</h5>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={6} lg={4}>\n          {((event.media.edges.length) ? \n            <GalleryCard>\n              <GalleryCard.Image src={(event.media.edges.length) ? event.media.edges[0].node.urlImageThumbnailLarge : \"\"} />\n              <GalleryCard.Details>\n                {(event.media.edges.length) ? event.media.edges[0].node.description : \"\"}\n              </GalleryCard.Details>\n            </GalleryCard>\n          : \"\" )}\n          <Card title={t(\"general.info\")}>\n            <Card.Body>\n              <h6>{t('general.instructor')}: {(event.instructor) ? event.instructor.fullName: \"\"}</h6>\n              <h6>{t('general.start')}: {(event.dateStart) ? moment(event.dateStart).format(dateFormat): \"\"}</h6>\n              <h6>{t('general.end')}: {(event.dateEnd) ? moment(event.dateEnd).format(dateFormat): \"\"}</h6>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={6} lg={8}>\n          <Card title={t(\"general.description\")}>\n            <Card.Body>\n              <h5>{t('general.description')}</h5>\n              <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(event.description) }} />\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <h3>{t(\"shop.event.tickets\")}</h3>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          {(!userIsAuthenticated) ? <Alert type=\"primary\">\n              <Link to=\"/user/login\">\n                <b>{t(\"general.sign_in\")}</b>\n              </Link> {t(\"shop.events.sign_in_to_see_discounts\")}\n            </Alert>\n            : \"\"}\n        </Grid.Col>\n        {tickets.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} lg={4}>\n            <ShopEventTicketPricingCard eventID={eventId} eventTicket={node} />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopEventBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopEvent))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopEventTicketBase({ t, match, history, children, subTitle }) {\n  const eventId = match.params.event_id\n  \n  return (\n    <ShopBase \n      title={t(\"shop.events.ticket.title\")}\n      subTitle={subTitle}\n      returnUrl={`/shop/events/${eventId}`}\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicketBase))","const cs_django_links = {\n    EXPORT_TERMS_AND_CONDITIONS: \"/d/export/terms-and-conditions\",\n    EXPORT_PRIVACY_POLICY: \"/d/export/privacy-policy\",\n}\n\nexport default cs_django_links\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport cs_django_links from \"../../tools/cs_django_links\"\n\n\nconst ShopCheckoutForm = ({ t, isSubmitting, errors }) => (\n    <FoForm>\n      <Form.Group label={t('shop.order.message')}>\n        <Field type=\"text\" \n               component=\"textarea\"\n               name=\"message\" \n               className={(errors.message) ? \"form-control is-invalid\" : \"form-control\"} \n               autoComplete=\"off\" />\n        <ErrorMessage name=\"message\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\"\n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}>{t(\"general.terms_and_conditions\")}</a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" rel=\"noreferrer\" href={cs_django_links.EXPORT_PRIVACY_POLICY}>{t(\"general.privacy_policy\")}</a>\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting}\n      >\n        {t('shop.place_order')} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopCheckoutForm))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SCHEDULE_EVENT_TICKET_QUERY = gql`\n  query ScheduleEventTicket($id: ID!) {\n    scheduleEventTicket(id:$id) {\n      id\n      name\n      price\n      priceDisplay\n      totalPrice\n      totalPriceDisplay\n      description\n      isSoldOut\n      isEarlybirdPrice\n      isSubscriptionDiscountPrice\n      ticketScheduleItems(included: true, orderBy: \"date_start\") {\n        pageInfo{\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n        }\n        edges {\n          node {\n            id\n            included\n            scheduleItem {\n              name\n              dateStart\n              timeStart\n              timeEnd\n              organizationLocationRoom {\n                organizationLocation {\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n      scheduleEvent {\n        id\n        name\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport ShopEventTicketBase from \"./ShopEventTicketBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopEventTicketPricingCard from \"../event/ShopEventTicketPricingCard\"\n\nimport { GET_SCHEDULE_EVENT_TICKET_QUERY } from \"./queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopEventTicket({ t, match, history }) {\n  let title = t(\"shop.home.title\")\n  const scheduleEventTicketId = match.params.id\n  const eventId = match.params.event_id\n\n  const { loading, error, data } = useQuery(GET_SCHEDULE_EVENT_TICKET_QUERY, {\n    variables: { id: scheduleEventTicketId },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopEventTicketBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopEventTicketBase>\n  )\n  if (error) return (\n    <ShopEventTicketBase title={title}>\n      {t(\"shop.events.ticket.error_loading\")}\n    </ShopEventTicketBase>\n  )\n\n  const eventTicket = data.scheduleEventTicket\n  const subTitle = eventTicket.scheduleEvent.name\n\n  // Chceck sold out\n  if (eventTicket.isSoldOut) {\n    return (\n      <ShopEventTicketBase title={title} subTitle={subTitle}>\n        <Card title={t(\"shop.events.ticket.sold_out_title\")}>\n          <Card.Body>{t(\"shop.events.ticket.sold_out\")}</Card.Body>\n        </Card>\n      </ShopEventTicketBase>\n    )\n  }\n\n  return (\n    <ShopEventTicketBase title={title} subTitle={subTitle}>\n      <Grid.Row>\n        <Grid.Col md={4}>\n          <ShopEventTicketPricingCard eventId={eventId} eventTicket={eventTicket} showButton={false} active={true} />\n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.events.ticket.additional_info\")}>\n            <Card.Body>\n              {(eventTicket.description) ?\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(eventTicket.description) }} />\n              : t(\"shop.events.ticket.no_additional_info\")}\n            </Card.Body>\n          </Card> \n        </Grid.Col>\n        <Grid.Col md={4}>\n          <Card title={t(\"shop.checkout.title\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      scheduleEventTicket: match.params.id,\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopEventTicketBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopEventTicket))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_SHOP_ANNOUNCEMENTS_QUERY = gql`\n  query OrganizationAnnouncements($after: String, $before: String) {\n    organizationAnnouncements(first: 100, before: $before, after: $after, displayPublic: true, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          displayPublic\n          displayShop\n          title\n          content\n          dateStart\n          dateEnd\n          priority\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopHomeBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.home.title\")}>\n        {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopHomeBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Grid,\n} from \"tabler-react\";\n\nimport { GET_SHOP_ANNOUNCEMENTS_QUERY } from \"./queries\"\nimport ShopHomeBase from \"./ShopHomeBase\"\n\n\nfunction ShopHome({ t, match, history }) {\n  \n  const { loading, error, data } = useQuery(GET_SHOP_ANNOUNCEMENTS_QUERY);\n\n  if (loading) return (\n    <ShopHomeBase>\n      {t(\"general.loading_with_dots\")}\n    </ShopHomeBase>\n  )\n  if (error) return (\n    <ShopHomeBase>\n      {t(\"shop.home.announcements.error_loading\")}\n    </ShopHomeBase>\n  )\n\n  const announcements = data.organizationAnnouncements\n\n  return (\n    <ShopHomeBase title={t(\"shop.home.title\")}>\n      <Grid.Row cards deck>\n        {(announcements.edges.length) ? announcements.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={6} key={v4()}>\n            <Card title={node.title}>\n              <Card.Body>\n                <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(node.content) }}></div>\n              </Card.Body>\n            </Card> \n          </Grid.Col>\n        )) : \"\"\n        }\n      </Grid.Row>\n    </ShopHomeBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopHome))","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutPaymentBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      // title={t(\"shop.order.payment\")}\n      checkoutProgress=\"payment\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutPaymentBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ORDER_QUERY = gql`\n  query FinanceOrder($id: ID!) {\n    financeOrder(id: $id) {\n      id\n      orderNumber\n      account {\n        id\n        fullName\n        hasCompleteEnoughProfile\n      }\n      message\n      status\n      total\n      totalDisplay\n      createdAt\n      items {\n        edges {\n          node {\n            id\n            productName\n            description\n            quantity\n            totalDisplay\n            scheduleItem {\n              id\n            }\n            attendanceDate\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Card,\n  Dimmer,\n  Icon,\n  Table,\n} from \"tabler-react\";\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport ShopCheckoutClassInfo from \"../class_info/ShopCheckoutClassInfo\"\n\n\nfunction ShopCheckoutOrderSummary({ t, id, complete=false }) {\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <Dimmer active={true} loader={true} />\n  )\n  if (error) return (\n      t(\"shop.checkout.order_summary.error_loading\")\n  )\n\n  const order = data.financeOrder\n  const orderItems = order.items.edges\n\n  let classDate \n  let scheduleItemId\n  let item\n  for (item of orderItems) {\n    let node = item.node\n    if (node.scheduleItem) {\n      classDate = node.attendanceDate\n      scheduleItemId = node.scheduleItem.id\n    }\n  }\n\n\n  return (\n    <Card title={t(\"shop.checkout.payment.order_summary\")}>\n      <div className=\"table-responsive\">\n        <Table cards={true}>\n          <Table.Header>\n            <Table.Row>\n              <Table.ColHeader>{t('general.item')}</Table.ColHeader>\n              <Table.ColHeader className=\"text-right\">{t('general.price')}</Table.ColHeader>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            {orderItems.map(({ node }) => (\n              <Table.Row key={v4()}>\n                <Table.Col>\n                  {node.productName} <br /> \n                  <span className=\"text-muted\">\n                    {node.description}\n                  </span>\n                </Table.Col>\n                <Table.Col className=\"text-right\">{node.totalDisplay}</Table.Col>\n              </Table.Row>      \n            ))}\n            <Table.Row className=\"bold\">\n              <Table.Col>\n                {t(\"general.total\")}\n              </Table.Col>\n              <Table.Col className=\"text-right\">\n                  {order.totalDisplay}\n              </Table.Col>\n            </Table.Row>\n          </Table.Body>\n        </Table>\n      </div>\n      {(order.message) || (scheduleItemId && classDate) ? \n        <Card.Body>\n          {(order.message) ?\n            <span className=\"text-muted\">\n              <h5><Icon name=\"message-square\" /> {t(\"shop.checkout.order_summary.message\")}</h5> \n              {/* Order message */}\n              {order.message}\n              <br /><br />\n            </span> \n            : \"\"\n          }\n          {(scheduleItemId && classDate) ?\n            <ShopCheckoutClassInfo \n              scheduleItemId={scheduleItemId}\n              date={classDate}\n              complete={complete}\n            />\n            : \"\"\n          }\n        </Card.Body>\n        : \"\"\n      }\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutOrderSummary))\n","import { gql } from \"@apollo/client\"\n\n\nexport const CREATE_PAYMENT_LINK = gql`\nmutation CreateFinanceOrderPaymentLink($id: ID!) {\n  createFinanceOrderPaymentLink(id: $id) {\n    financeOrderPaymentLink {\n      paymentLink\n    }\n  }\n}\n`","// This file is closely related to shop > subscription > CheckoutCardDirectDebitAccountInfoRequired.jsx.\n// They should have the same error messages when more account info is required.\n\nimport React, { useContext, useRef, useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { toast } from 'react-toastify'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport ShopCheckoutPaymentBase from \"./ShopCheckoutPaymentBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\nimport { CREATE_PAYMENT_LINK } from \"./queries\"\n\n\nfunction ShopCheckoutPayment({ t, match, history, location }) {\n  const appSettings = useContext(AppSettingsContext)\n  const onlinePaymentsAvailable = appSettings.onlinePaymentsAvailable\n  const btnPayNow = useRef(null);\n  const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const [createPaymentLink] = useMutation(CREATE_PAYMENT_LINK)\n\n  localStorage.setItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT, location.pathname)\n\n  if (loading) return (\n    <ShopCheckoutPaymentBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutPaymentBase>\n  )\n  if (error) return (\n    <ShopCheckoutPaymentBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutPaymentBase>\n  )\n\n  const order = data.financeOrder\n  const account = data.financeOrder.account\n  // const orderItems = order.items.edges\n\n  function onClickPay() {\n    btnPayNow.current.setAttribute(\"disabled\", \"disabled\")\n    setBtnText(t(\"shop.checkout.payment.redirecting\"))\n    // btnPayNow.current.setValue(\"redirecting...\")\n    // btnPayNow\n    // btnPayNow.current.removeAttribute(\"disabled\")\n    createPaymentLink({ variables: { id: id } }).then(({ data }) => {\n      console.log('got data', data);\n      const paymentLink = data.createFinanceOrderPaymentLink.financeOrderPaymentLink.paymentLink\n      window.location.href = paymentLink\n    }).catch((error) => {\n      toast.error((t('general.toast_server_error')) +  error, {\n          position: toast.POSITION.BOTTOM_RIGHT\n        })\n      console.log('there was an error sending the query', error)\n    })\n  }\n\n  let msgNextStep\n  let buttonNext\n  \n  // The order has been added to the users' account as it's free.\n  // No need for a payment.\n  if (order.total === \"0.00\") {\n    history.push(`/shop/checkout/complete/${id}`)\n  }\n\n  // Continue processing and see if online payments are available\n  // Check profile complete enough\n  if (!account.hasCompleteEnoughProfile) {\n    // If not, show message that a more complete profile is required\n    msgNextStep = <Alert type=\"primary\">\n      {t(\"shop.checkout.payment.profile_not_complete_enough\")}\n    </Alert>\n    buttonNext = <Link to=\"/shop/account/profile\">\n      <Button\n        block\n        color=\"primary\"\n      >\n        {t(\"shop.checkout.payment.update_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  } else if (onlinePaymentsAvailable) {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_payment_text\")\n    buttonNext = <button\n      className=\"btn btn-block btn-success\"\n      ref={btnPayNow}\n      onClick={ onClickPay }\n    >\n      {btn_text}\n    </button>\n  } else {\n    msgNextStep = t(\"shop.checkout.payment.order_received_to_profile_text\")\n    buttonNext = <Link to=\"/\">\n      <Button\n        block\n        color=\"success\"\n      >\n        {t(\"shop.checkout.payment.to_profile\")} <Icon name=\"chevron-right\" />\n      </Button>\n    </Link>\n  }\n\n\n  return (\n    <ShopCheckoutPaymentBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.payment.order_received\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{t(\"shop.checkout.payment.order_received_subheader\")}</h5>\n                {t(\"shop.checkout.payment.order_received_to_payment_explanation\")} <br />< br />\n                {msgNextStep}\n              </Card.Body>\n              <Card.Footer>\n                {buttonNext}\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutPaymentBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutPayment))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../../ShopBase\"\n\nfunction ShopCheckoutCompleteBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={\"\"}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopCheckoutCompleteBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\";\nimport ShopCheckoutCompleteBase from \"./ShopCheckoutCompleteBase\"\nimport ShopCheckoutOrderSummary from \"../order_summary/ShopCheckoutOrderSummary\"\n\nimport { GET_ORDER_QUERY } from \"../queries\"\n\n\nfunction ShopCheckoutComplete({ t, match, history }) {\n  // const btnPayNow = useRef(null);\n  // const initialBtnText = <span><Icon name=\"credit-card\" /> {t('shop.checkout.payment.to_payment')} <Icon name=\"chevron-right\" /></span>\n  // const [btn_text, setBtnText] = useState(initialBtnText)\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n  const { loading, error, data } = useQuery(GET_ORDER_QUERY, {\n    variables: { id: id }\n  })\n\n  if (loading) return (\n    <ShopCheckoutCompleteBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopCheckoutCompleteBase>\n  )\n  if (error) return (\n    <ShopCheckoutCompleteBase title={title}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopCheckoutCompleteBase>\n  )\n\n  console.log(data)\n  const order = data.financeOrder\n  console.log(order)\n  const orderItems = order.items.edges\n  console.log(orderItems)\n\n  // Order not found\n  if (!order) {\n    return (\n      <ShopCheckoutCompleteBase title={title}>\n        {t(\"shop.checkout.complete.order_not_found\")}\n      </ShopCheckoutCompleteBase>\n    )\n  }\n\n  let subHeader = \"\"\n  let contentText = \"\"\n  let paymentText = \"\"\n  let complete = false\n\n  // Success!\n  if (order.status === \"DELIVERED\") {\n    // subHeader: thank you message\n    // contentText: Something to explain the user what's next\n    if (order.total === \"0.00\") {\n      subHeader = t(\"shop.checkout.complete.success_subheader_free_order\") \n      contentText = t(\"shop.checkout.complete.success_content_text_free_order\")\n    } else {\n      subHeader = t(\"shop.checkout.complete.success_subheader\") \n      contentText = t(\"shop.checkout.complete.success_content_text\")\n    }\n    \n    complete = true\n\n    // Confirm receiving payment to user\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.success_payment_text\")\n    }\n  } else {\n    // Fail...\n    // Looks like something went wrong message\n    subHeader = t(\"shop.checkout.complete.fail_subheader\") \n    // Notify user of ways to contact\n    contentText = t(\"shop.checkout.complete.fail_content_text\")\n\n    // Notify user that payment hasn't been received\n    if (order.total !== \"0.00\") {\n      paymentText = t(\"shop.checkout.complete.fail_payment_text\")\n    }\n  }\n\n\n  return (\n    <ShopCheckoutCompleteBase title={title}>\n        <Grid.Row>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <Card title={t(\"shop.checkout.complete.title\")}>\n              <Card.Body>\n                <h5 className={\"mb-4\"}>{subHeader}</h5>\n                {paymentText} <br />\n                {contentText}\n              </Card.Body>\n              <Card.Footer>\n                <Link to=\"/shop/account/\">\n                  <Button \n                    block\n                    color=\"success\"\n                  >\n                    {t(\"shop.complete.to_account\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Footer>\n            </Card>\n          </Grid.Col>\n          <Grid.Col xs={12} sm={12} md={6} lg={6}>\n            <ShopCheckoutOrderSummary id={id} complete={complete} />\n          </Grid.Col>\n        </Grid.Row>\n    </ShopCheckoutCompleteBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopCheckoutComplete))\n","import { gql } from \"@apollo/client\"\n\n\nexport const GET_ACCOUNT_CLASSES_QUERY = gql`\n  query ScheduleItemAttendance($before: String, $after: String, $account: ID!) {\n    scheduleItemAttendances(first: 20, before: $before, after: $after, account: $account, accountScheduleEventTicket_Isnull: true) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          cancellationPossible\n          uncancellationPossible\n          attendanceType\n          date\n          bookingStatus\n          scheduleItem {\n            id\n            timeStart\n            timeEnd\n            organizationLocationRoom {\n              name\n              organizationLocation {\n                name\n              }\n            }\n            organizationClasstype {\n              name\n            }\n          }\n        }\n      } \n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport {\n  Page,\n  Container\n} from \"tabler-react\";\nimport SiteWrapperShop from \"../../../SiteWrapperShop\"\nimport ShopAccountBack from \"../ShopAccountBack\"\n\n\nfunction ShopAccountClassesBase({ t, match, history, children, accountName=\"\" }) {\n  return (\n      <SiteWrapperShop>\n        <div className=\"my-3 my-md-5\">\n          <Container>\n            <Page.Header title={t(\"shop.account.title\")} subTitle={ accountName }>\n              <div className=\"page-options d-flex\">\n                <ShopAccountBack />\n              </div>\n            </Page.Header>\n            { children }\n          </Container>\n        </div>\n      </SiteWrapperShop>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopAccountClassesBase))","import React, { useContext } from 'react'\nimport { useQuery, } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { v4 } from \"uuid\"\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\n\nimport AppSettingsContext from '../../../context/AppSettingsContext'\nimport BadgeBookingStatus from '../../../ui/BadgeBookingStatus'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n} from \"tabler-react\"\n\nimport LoadMoreOnBottomScroll from \"../../../general/LoadMoreOnBottomScroll\"\nimport { GET_ACCOUNT_CLASSES_QUERY } from \"./queries\"\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\n\nimport ShopAccountClassesBase from \"./ShopAccountClassesBase\"\n\n\nfunction ShopAccountClasses({t, match, history}) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data, fetchMore } = useQuery(GET_ACCOUNT_CLASSES_QUERY, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  // TODO: add cancel class button & query\n  // const [ updateOrder ] = useMutation(UPDATE_ORDER)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountClassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountClassesBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountClassesBase>\n      {t(\"shop.account.classes.error_loading_data\")}\n    </ShopAccountClassesBase>\n  )\n\n  const user = dataUser.user\n  const scheduleItemAttendances = data.scheduleItemAttendances\n\n  // Empty list\n  if (!scheduleItemAttendances.edges.length) {\n    return (\n      <ShopAccountClassesBase accountName={user.fullName}>\n        <Grid.Row>\n          <Grid.Col md={12}>\n            <Card cardTitle={t('shop.account.classes.title')} >\n              <Card.Body>\n                {t('shop.account.classes.empty_list')}\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </Grid.Row>\n      </ShopAccountClassesBase>\n    )  \n  }\n\n\n  // Populated list\n  return (\n    <ShopAccountClassesBase accountName={user.fullName}>\n      <h4>{t(\"shop.account.classes.title\")}</h4>\n      <LoadMoreOnBottomScroll\n        // headerContent={headerOptions}\n        pageInfo={scheduleItemAttendances.pageInfo}\n        onLoadMore={() => {\n          fetchMore({\n            variables: {\n              after: scheduleItemAttendances.pageInfo.endCursor\n            },\n            updateQuery: (previousResult, { fetchMoreResult }) => {\n              const newEdges = fetchMoreResult.scheduleItemAttendances.edges\n              const pageInfo = fetchMoreResult.scheduleItemAttendances.pageInfo\n\n              return newEdges.length\n                ? {\n                    // Put the new subscriptions at the end of the list and update `pageInfo`\n                    // so we have the new `endCursor` and `hasNextPage` values\n                    scheduleItemAttendances: {\n                      __typename: previousResult.scheduleItemAttendances.__typename,\n                      edges: [ ...previousResult.scheduleItemAttendances.edges, ...newEdges ],\n                      pageInfo\n                    }\n                  }\n                : previousResult\n            }\n          })\n        }} >\n          {/* <Grid.Row> */}\n          { scheduleItemAttendances.edges.map(({ node }) => (\n            <Card key={v4()}>\n              <Card.Body>\n                <Grid.Row>\n                  <Grid.Col xs={12} md={10}>\n                    <div className='mb-xs-3'>\n                      <h6>\n                        { node.scheduleItem.organizationClasstype.name }\n                        <span className='float-xs-right'> <BadgeBookingStatus status={node.bookingStatus} /></span>\n                      </h6>\n                      <Icon name=\"clock\" /> { moment(node.date).format(dateFormat) } { \" \" }\n                      <span className=\"text-muted\">\n                        {moment(node.date + ' ' + node.scheduleItem.timeStart).format(timeFormat)}\n                      </span><br />\n                      <Icon name=\"home\" /> { node.scheduleItem.organizationLocationRoom.organizationLocation.name } { \" \" }\n                      <span className=\"text-muted\">\n                        { node.scheduleItem.organizationLocationRoom.name }\n                      </span> \n                    </div>\n                  </Grid.Col>\n                  <Grid.Col xs={12} md={2}>\n                    {(node.bookingStatus !== \"CANCELLED\") ?\n                      <Link to={`/shop/account/class_info/${node.scheduleItem.id}/${node.date}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"info\"\n                          size=\"sm\"\n                          className=\"\"\n                          >\n                          {t(\"general.info\")}\n                        </Button>\n                      </Link>\n                      : \"\"\n                    }\n                    {((node.bookingStatus !== \"CANCELLED\") && node.cancellationPossible) ?  \n                      <Link to={`/shop/account/class_cancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                        <Button \n                          block\n                          outline\n                          color=\"warning\"\n                          size=\"sm\"\n                          className=\"mt-3\"\n                          >\n                          {t(\"general.cancel\")}\n                        </Button>\n                      </Link>\n                      : (node.uncancellationPossible) ? \n                        <Link to={`/shop/account/class_uncancel/${node.scheduleItem.id}/${node.date}/${node.id}`}>\n                          <Button \n                            block\n                            outline\n                            color=\"primary\"\n                            size=\"sm\"\n                            className=\"mt-3\"\n                            >\n                            {t(\"general.book\")}\n                          </Button>\n                        </Link>\n                      : \"\"\n                    }\n                  </Grid.Col>\n                </Grid.Row>\n              </Card.Body>\n            </Card>\n          ))}\n      </LoadMoreOnBottomScroll>\n    </ShopAccountClassesBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountClasses))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassesBase({ t, match, history, children }) {  \n  return (\n    <ShopBase title={t(\"shop.classpasses.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassesBase))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspassPricingCard({ t, classpass, btnLink, active=false }) {\n  // classpass should be an object with at least the following values from an organizationClasspass object:\n  // id, name, priceDisplay, unlimited, classes, validity, link\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {classpass.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {classpass.priceDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem>\n          <b>{(classpass.unlimited) ? t('general.unlimited') : classpass.classes }</b> { \" \" }\n          {((classpass.classes !== 1) || (classpass.unlimited))? t('general.classes'): t('general.class')}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem>\n          {t('general.valid_for')} { \" \" }\n          <b>{classpass.validity} {' '} {classpass.validityUnitDisplay}</b>\n        </PricingCard.AttributeItem>\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button >\n            {t(\"shop.classpasses.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspassPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_CLASSPASSES_QUERY = gql`\n  query OrganizationClasspasses($after: String, $before: String) {\n    organizationClasspasses(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          displayPublic\n          displayShop\n          trialPass\n          name\n          description\n          price\n          priceDisplay\n          validity\n          validityUnit\n          validityUnitDisplay\n          classes\n          unlimited\n          quickStatsAmount\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopClasspassesBase from \"./ShopClasspassesBase\"\nimport ShopClasspassPricingCard from \"../classpass/ShopClasspassPricingCard\"\n\nimport { GET_ORGANIZATION_CLASSPASSES_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopClasspasses({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_CLASSPASSES_QUERY)\n\n  if (loading) return (\n    <ShopClasspassesBase>\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassesBase>\n  )\n  if (error) return (\n    <ShopClasspassesBase>\n      {t(\"shop.classpasses.error_loading\")}\n    </ShopClasspassesBase>\n  )\n\n  const classpasses = data.organizationClasspasses\n  \n  return (\n    <ShopClasspassesBase>\n      <Grid.Row>\n        {classpasses.edges.map(({ node }) => (\n          <Grid.Col xs={12} sm={12} md={3}>\n            <ShopClasspassPricingCard\n              classpass={node}\n              btnLink={\"/shop/classpass/\" + node.id}\n            />\n          </Grid.Col>\n        ))}\n      </Grid.Row>\n    </ShopClasspassesBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspasses))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopClasspassBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/classpasses\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopClasspassBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_CLASSPASS_QUERY = gql`\n  query OrganizationClasspass($id: ID!) {\n    organizationClasspass(id:$id) {\n      id\n      archived\n      displayPublic\n      displayShop\n      trialPass\n      name\n      description\n      price\n      priceDisplay\n      validity\n      validityUnit\n      validityUnitDisplay\n      classes\n      unlimited\n      quickStatsAmount\n    }\n    user {\n      hasReachedTrialLimit\n    }\n  }\n`\n","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport moment from 'moment'\n\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport { TimeStringToJSDateOBJ } from '../../../tools/date_tools'\nimport AppSettingsContext from '../../context/AppSettingsContext'\n\nimport ShopClasspassBase from \"./ShopClasspassBase\"\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport ShopClasspassesPricingCard from \"./ShopClasspassPricingCard\"\n\nimport { GET_CLASSPASS_QUERY } from \"./queries\"\nimport { GET_CLASS_QUERY } from \"../queries\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction ShopClasspass({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const timeFormat = appSettings.timeFormatMoment\n\n  const pageTitle = t(\"general.classpass\")\n  const id = match.params.id\n  const scheduleItemId = match.params.class_id\n  const classDate = match.params.date\n\n  const { loading, error, data } = useQuery(GET_CLASSPASS_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  const { loading: loadingClass, error: errorClass, data: dataClass } = useQuery(GET_CLASS_QUERY, {\n    variables: { scheduleItemId: scheduleItemId, date: classDate },\n    skip: (!scheduleItemId || !classDate)\n  })\n\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n\n  if (loading) return (\n    <ShopClasspassBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopClasspassBase>\n  )\n  if (error) return (\n    <ShopClasspassBase pageTitle={pageTitle}>\n      {t(\"shop.classpass.error_loading\")}\n    </ShopClasspassBase>\n  )\n\n  const classpass = data.organizationClasspass\n  const user = data.user\n  const pageSubTitle = classpass.name\n\n  if (user.hasReachedTrialLimit && classpass.trialPass) {\n    return (\n      <ShopClasspassBase pageTitle={pageTitle}>\n        <Card pageTitle={t(\"shop.classpass.trial_limit_reached\")}>\n          <Card.Body>\n            {t(\"shop.classpass.trial_limit_reached_explanation\")}\n          </Card.Body>\n        </Card>\n      </ShopClasspassBase>\n    )\n  }\n\n  return (\n    <ShopClasspassBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopClasspassesPricingCard classpass={classpass} active={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {(dataClass && !loadingClass && !errorClass) ?\n            <Card pageTitle={t(\"shop.classpass.class_book_information\")}>\n              <Card.Body>\n                {t(\"shop.classpass.class_book_explanation\")} <br /><br />\n                <b>\n                  {moment(classDate).format(dateFormat)} {' '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeStart)).format(timeFormat)} {' - '}\n                  {moment(TimeStringToJSDateOBJ(dataClass.scheduleClass.timeEnd)).format(timeFormat)} <br />  \n                </b>\n                {dataClass.scheduleClass.organizationClasstype.name + \" \" + t(\"general.at\") + ' ' + \n                  dataClass.scheduleClass.organizationLocationRoom.organizationLocation.name}\n\n              </Card.Body>\n            </Card>\n            : \"\" \n          }\n          <Card pageTitle={t(\"shop.classpass.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(classpass.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.checkout.pageTitle\")}>\n            <Card.Body>\n              <Formik\n                initialValues={{ message: \"\" }}\n                // validationSchema={CLASSTYPE_SCHEMA}\n                onSubmit={(values, { setSubmitting }) => {\n\n                    let createOrderInput = {\n                      message: values.message,\n                      organizationClasspass: match.params.id,\n                    }\n\n                    if (scheduleItemId && classDate) {\n                      createOrderInput.attendanceDate = classDate\n                      createOrderInput.scheduleItem = scheduleItemId\n                    }\n\n                    createOrder({ variables: {\n                      input: createOrderInput,\n                      // file: values.image\n                    }, refetchQueries: [\n                        // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n                    ]})\n                    .then(({ data }) => {\n                        console.log('got data', data)\n                        console.log('good...  now redirect to the payment page')\n                        const orderId = data.createFinanceOrder.financeOrder.id\n                        history.push('/shop/checkout/payment/' + orderId)\n                      }).catch((error) => {\n                        toast.error((t('general.toast_server_error')) +  error, {\n                            position: toast.POSITION.BOTTOM_RIGHT\n                          })\n                        console.log('there was an error sending the query', error)\n                        setSubmitting(false)\n                      })\n                }}\n                >\n                {({ isSubmitting, errors, values }) => (\n                  <ShopCheckoutForm \n                    isSubmitting={isSubmitting}\n                    errors={errors}\n                    values={values}\n                  />\n                )}\n              </Formik>\n\n              {/* When a user is not logged in, show a login button to redirect to the login page */}\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopClasspassBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopClasspass))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\n\nfunction ShopSubscriptionsBase({ t, match, history, children }) {\n  return (\n    <ShopBase title={t(\"shop.subscriptions.title\")}>\n      {children}\n    </ShopBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionsBase))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { v4 } from 'uuid'\n\nimport {\n  Icon,\n  PricingCard\n} from \"tabler-react\";\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptionPricingCard({ t, subscription, btnLink, active=false, displayCheckoutInfo=false }) {\n  // subscription should be an object with at least the following values from an organizationSubscription object:\n  // id, name, priceTodayDisplay, subscriptionUnit, unlimited, minDuration, priceFirstMonthDisplay, \n  // accountRegistrationfee\n\n  let unit = t(\"general.month\")\n  if (!subscription.unlimited && subscription.subscriptionUnit === 'WEEK') {\n    unit = t(\"general.week\")\n  }\n\n  return (\n    <PricingCard active={active}>\n      <PricingCard.Category>\n        {subscription.name}\n      </PricingCard.Category>\n      <PricingCard.Price>\n        {subscription.priceTodayDisplay}\n      </PricingCard.Price>\n      <PricingCard.AttributeList>\n        <PricingCard.AttributeItem key={v4()}>\n          <b>{(subscription.unlimited) ? t('general.unlimited') : subscription.classes }</b> { \" \" }\n          {t('general.classes')} / {unit}\n        </PricingCard.AttributeItem>\n        <PricingCard.AttributeItem key={v4()}>\n          {t('general.min_duration')} { \" \" }\n          <b>{subscription.minDuration} {(subscription.minDuration === 1) ? t(\"general.month\") : t(\"general.months\")}</b> \n        </PricingCard.AttributeItem>\n        {(displayCheckoutInfo) ? \n          <PricingCard.AttributeItem key={v4()}>\n            {t(\"general.first_month\")}: <b>{subscription.priceFirstMonthDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n        {(displayCheckoutInfo && subscription.accountRegistrationFee > 0) ? \n          <PricingCard.AttributeItem key={v4()}>\n            {t(\"general.registration_fee\")}: <b>{subscription.accountRegistrationFeeDisplay}</b>\n          </PricingCard.AttributeItem>\n        : \"\"}\n      </PricingCard.AttributeList>\n      {(btnLink) ?\n        <Link to={btnLink}>\n          <PricingCard.Button rootComponent={\"button\"}>\n            {t(\"shop.subscriptions.choose\")} <Icon name=\"chevron-right\" />\n          </PricingCard.Button>\n        </Link>\n        : \"\"\n      }\n    </PricingCard>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionPricingCard))\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ORGANIZATION_SUBSCRIPTIONS_QUERY = gql`\n  query OrganizationSubscriptions($after: String, $before: String) {\n    organizationSubscriptions(first: 100, before: $before, after: $after, archived: false, displayShop: true) {\n      pageInfo {\n        startCursor\n        endCursor\n        hasNextPage\n        hasPreviousPage\n      }\n      edges {\n        node {\n          id\n          archived\n          priceTodayDisplay\n          displayPublic\n          displayShop\n          name\n          description\n          sortOrder\n          minDuration\n          classes\n          subscriptionUnit\n          subscriptionUnitDisplay\n          reconciliationClasses\n          unlimited\n          termsAndConditions\n          registrationFee\n          quickStatsAmount\n        }\n      }\n    }\n  }\n`","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { v4 } from 'uuid'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\nimport ShopSubscriptionsBase from \"./ShopSubscriptionsBase\"\nimport ShopSubscriptionPricingCard from \"../subscription/ShopSubscriptionPricingCard\"\n\nimport { GET_ORGANIZATION_SUBSCRIPTIONS_QUERY } from \"./queries\"\n\n// Example:\n// https://github.com/tabler/tabler-react/blob/master/example/src/interface/PricingCardsPage.react.js\n\n\nfunction ShopSubscriptions({ t, match, history }) {\n  const { loading, error, data } = useQuery(GET_ORGANIZATION_SUBSCRIPTIONS_QUERY)\n\n  if (loading) return (\n    <ShopSubscriptionsBase>\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionsBase>\n  )\n  if (error) return (\n    <ShopSubscriptionsBase>\n      {t(\"shop.subscriptions.error_loading\")}\n    </ShopSubscriptionsBase>\n  )\n\n  const subscriptions = data.organizationSubscriptions\n\n  return (\n    <ShopSubscriptionsBase>\n        <Grid.Row>\n          {subscriptions.edges.map(({ node }) => (\n            <Grid.Col xs={12} sm={12} md={3} key={v4()}>\n              <ShopSubscriptionPricingCard\n                subscription={node}\n                btnLink={\"/shop/subscription/\" + node.id}\n              />\n            </Grid.Col>\n          ))}\n        </Grid.Row>\n\n        \n    </ShopSubscriptionsBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptions))\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Card,\n} from \"tabler-react\"\n\nimport ShopCheckoutForm from \"../ShopCheckoutForm\"\nimport { CREATE_ORDER } from \"../queries\"\n\n\nfunction CheckoutCardMollie({ t, match, history, organizationSubscriptionId }) {\n  const [createOrder] = useMutation(CREATE_ORDER)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        <Formik\n          initialValues={{ message: \"\" }}\n          // validationSchema={CLASSTYPE_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n\n              let createOrderInput = {\n                message: values.message,\n                organizationSubscription: organizationSubscriptionId,\n              }\n\n              createOrder({ variables: {\n                input: createOrderInput,\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the payment page')\n                  const orderId = data.createFinanceOrder.financeOrder.id\n                  history.push('/shop/checkout/payment/' + orderId)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values }) => (\n            <ShopCheckoutForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardMollie))\n\n","// This file is closely related to shop > checkout > payment > ShopCheckoutPayment.jsx\n// They should have the same error messages when more account info is required.\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Alert,\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardDirectDebitAccountInfoRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        <Alert type=\"primary\">\n          {t(\"shop.checkout.payment.profile_not_complete_enough\")}\n        </Alert>\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/profile\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t(\"shop.checkout.payment.update_profile\")} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardDirectDebitAccountInfoRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport {\n  Button,\n  Card,\n  Icon,\n} from \"tabler-react\"\n\n\nfunction CheckoutCardBankAccountRequired({ t, match, history }) {\n\n  return (\n    <Card title={t(\"shop.subscription.bank_account_required\")}>\n      <Card.Body>\n        {t(\"shop.subscription.bank_account_required_explanation\")}\n      </Card.Body>\n      <Card.Footer>\n      <Link to=\"/shop/account/bank_account\">\n        <Button \n          block\n          color=\"primary\"\n          className=\"pull-right\" \n          type=\"submit\" \n        >\n          {t('shop.subscription.to_bank_account')} <Icon name=\"chevron-right\" />\n        </Button>\n      </Link>\n      </Card.Footer>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutCardBankAccountRequired))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, ErrorMessage } from 'formik'\n\nimport {\n  Button,\n  Form,\n  Icon\n} from \"tabler-react\"\n\nimport CSDatePicker from \"../../ui/CSDatePicker\"\nimport cs_django_links from \"../../../tools/cs_django_links\"\n\n\nconst ShopClasspassForm = ({ t, isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n    <FoForm>\n      <Form.Group label={t('shop.subscription.start_on')}>\n        <CSDatePicker\n          selected={values.dateStart}\n          onChange={(date) => setFieldValue(\"dateStart\", date)}\n          onBlur={() => setFieldTouched(\"dateStart\", true)}\n        />\n        <ErrorMessage name=\"dateStart\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <small className=\"text-muted\">\n        {t(\"shop.order.by_placing_this_order\")} <br />\n        <ul>\n          <li>{t(\"shop.order.agree_terms\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_TERMS_AND_CONDITIONS}\n            >\n              {t(\"general.terms_and_conditions\")}\n            </a>\n          </li>\n          <li>{t(\"shop.order.agree_privacy\")} {\" \"}\n            <a target=\"_blank\" \n              rel=\"noreferrer\" \n              href={cs_django_links.EXPORT_PRIVACY_POLICY}\n            >\n              {t(\"general.privacy_policy\")}\n            </a>\n          </li>\n          <li>\n            {t(\"shop.order.direct_debit_permission\")}\n          </li>\n        </ul>\n      </small>\n      <Button \n        block\n        color=\"primary\"\n        className=\"pull-right\" \n        type=\"submit\" \n        disabled={isSubmitting || !values.dateStart}\n      >\n        {(!values.dateStart) ? t(\"shop.subscription.please_select_date\") : t(\"general.i_agree\")}\n        {\" \"} <Icon name=\"chevron-right\" />\n      </Button>\n    </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopClasspassForm))","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_SUBSCRIPTION_SCHEMA = Yup.object().shape({\n    dateStart: Yup.string()\n      .nullable()\n      .required(t('yup.field_required')),\n  })\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n} from \"tabler-react\"\nimport CheckoutCardDirectDebitForm from \"./CheckoutCardDirectDebitForm\"\nimport { ACCOUNT_SUBSCRIPTION_SCHEMA } from \"./yupSchemaDirectDebit\"\n\n\nimport { dateToLocalISO } from \"../../../tools/date_tools\"\nimport { CREATE_ACCOUNT_SUBSCRIPTION } from \"../../relations/accounts/subscriptions/queries\"\n\n\nfunction CheckoutDirectDebit({ t, match, history, accountId, organizationSubscription }) {\n  const [createSubscription] = useMutation(CREATE_ACCOUNT_SUBSCRIPTION)\n\n  return (\n    <Card title={t(\"shop.checkout.title\")}>\n      <Card.Body>\n        {/* <p>{t(\"shop.subscription.bank_account_required_explanation\")}</p> */}\n        <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(organizationSubscription.termsAndConditions) }} />\n        <Formik\n          initialValues={{ message: \"\" }}\n          validationSchema={ACCOUNT_SUBSCRIPTION_SCHEMA}\n          onSubmit={(values, { setSubmitting }) => {\n              createSubscription({ variables: {\n                input: {\n                  organizationSubscription: organizationSubscription.id,\n                  account: accountId,\n                  dateStart: dateToLocalISO(values.dateStart),\n                },\n                // file: values.image\n              }, refetchQueries: [\n                  // {query: GET_CLASSTYPES_QUERY, variables: {\"archived\": false }}\n              ]})\n              .then(({ data }) => {\n                  console.log('got data', data)\n                  console.log('good...  now redirect to the subscription activated page')\n                  const accountSubscriptionId = data.createAccountSubscription.accountSubscription.id\n                  history.push(`/shop/subscription/direct_debit_activated/${accountSubscriptionId}`)\n                }).catch((error) => {\n                  toast.error((t('general.toast_server_error')) +  error, {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  console.log('there was an error sending the query', error)\n                  setSubmitting(false)\n                })\n          }}\n          >\n          {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n            <CheckoutCardDirectDebitForm \n              isSubmitting={isSubmitting}\n              errors={errors}\n              values={values}\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n            />\n          )}\n        </Formik>\n      </Card.Body>\n    </Card>\n  )\n}\n\n\nexport default withTranslation()(withRouter(CheckoutDirectDebit))\n\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionBase({ t, match, history, pageTitle, pageSubTitle, children }) {\n  \n  return (\n    <ShopBase \n      title={pageTitle}\n      subTitle={pageSubTitle}\n      returnUrl=\"/shop/subscriptions\"\n      checkoutProgress=\"order\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionBase))","import { gql } from \"@apollo/client\"\n\n\nexport const GET_SUBSCRIPTION_QUERY = gql`\n  query OrganizationSubscription($id: ID!) {\n    organizationSubscription(id:$id) {\n      id\n      archived\n      priceTodayDisplay\n      displayPublic\n      displayShop\n      name\n      description\n      sortOrder\n      minDuration\n      classes\n      subscriptionUnit\n      subscriptionUnitDisplay\n      reconciliationClasses\n      unlimited\n      termsAndConditions\n      registrationFee\n      shopPaymentMethod\n      accountRegistrationFee\n      accountRegistrationFeeDisplay\n      priceFirstMonthDisplay\n      quickStatsAmount\n      financeGlaccount {\n        id \n        name\n      }\n      financeCostcenter {\n        id\n        name\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n      instructor\n      employee\n      hasBankAccountInfo\n      hasCompleteEnoughProfile\n    }\n  }\n`\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport DOMPurify from 'dompurify'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n} from \"tabler-react\"\n\nimport CSLS from \"../../../tools/cs_local_storage\"\nimport CheckoutCardMollie from './CheckoutCardMollie'\nimport CheckoutCardDirectDebitAccountInfoRequired from './CheckoutCardDirectDebitAccountInfoRequired'\nimport CheckoutCardBankAccountRequired from './CheckoutCardBankAccountRequired'\nimport CheckoutCardDirectDebit from './CheckoutCardDirectDebit'\nimport ShopSubscriptionBase from \"./ShopSubscriptionBase\"\nimport ShopSubscriptionPricingCard from \"./ShopSubscriptionPricingCard\"\n\nimport { GET_SUBSCRIPTION_QUERY } from \"./queries\"\n\nfunction ShopSubscription({ t, match, history }) {\n  const pageTitle = t(\"general.subscription\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionBase pageTitle={pageTitle} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionBase>\n  )\n  if (error) return (\n    <ShopSubscriptionBase pageTitle={pageTitle}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionBase>\n  )\n\n  const subscription = data.organizationSubscription\n  const account = data.user\n  const pageSubTitle = subscription.name\n\n  let CheckoutCard\n\n  // Check for shop subscription payment method\n  if (subscription.shopPaymentMethod === \"DIRECTDEBIT\") {\n    // Check for profile completeness, if not sufficient, \n    if (!account.hasCompleteEnoughProfile) {\n      localStorage.setItem(CSLS.SHOP_ACCOUNT_PROFILE_NEXT, `/shop/subscription/${id}`)\n      // Show Account info required card\n      CheckoutCard = <CheckoutCardDirectDebitAccountInfoRequired />\n    } else {\n      // Check for bank account details, if not set, \n      if (!account.hasBankAccountInfo) {\n        // Create local storage back url for account bank account component    \n        localStorage.setItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT, `/shop/subscription/${id}`)\n        // Show bank account required \n        CheckoutCard = <CheckoutCardBankAccountRequired />\n      } else {\n        // Allow customer to create a subscription\n        CheckoutCard = <CheckoutCardDirectDebit accountId={account.accountId} organizationSubscription={subscription} />\n      }\n    }\n  } else {\n    CheckoutCard = <CheckoutCardMollie organizationSubscriptionId={id} />\n  }\n\n\n  return (\n    <ShopSubscriptionBase pageTitle={pageTitle} pageSubTitle={pageSubTitle}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <ShopSubscriptionPricingCard subscription={subscription} active={true} displayCheckoutInfo={true} />\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          <Card pageTitle={t(\"shop.subscription.additional_information\")}>\n            <Card.Body>\n              <div dangerouslySetInnerHTML={{__html: DOMPurify.sanitize(subscription.description) }}></div>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={4}>\n          {CheckoutCard}\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscription))\n","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\n\nimport ShopBase from \"../ShopBase\"\n\nfunction ShopSubscriptionDirectDebitActivatedBase({ t, match, history, children }) {\n  \n  return (\n    <ShopBase \n      title={t(\"shop.title\")}\n      checkoutProgress=\"complete\"\n    >\n      {children}\n    </ShopBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivatedBase))","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_SUBSCRIPTION_QUERY = gql`\n  query AccountSubscription($id: ID!) {\n    accountSubscription(id:$id) {\n      id\n      organizationSubscription {\n        id\n        name\n      }\n      financePaymentMethod {\n        id\n        name\n      }\n      dateStart\n      dateEnd\n      note\n      creditTotal\n      registrationFeePaid\n      createdAt\n    }\n  }\n`","import React, { useContext } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { useQuery } from '@apollo/client'\nimport { Link } from 'react-router-dom'\nimport moment from 'moment'\nimport {\n  Card,\n  Dimmer,\n  Grid,\n  Icon,\n  List\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport ShopSubscriptionDirectDebitActivatedBase from \"./ShopSubscriptionDirectDebitActivatedBase\"\nimport { GET_ACCOUNT_SUBSCRIPTION_QUERY } from \"./queries\"\n\n\nfunction ShopSubscriptionDirectDebitActivated({ t, match, history }) {\n  const appSettings = useContext(AppSettingsContext)\n  const dateFormat = appSettings.dateFormat\n  const title = t(\"shop.home.title\")\n  const id = match.params.id\n\n  // fetchPolicy network-only prevents caching. Need fresh results when coming back after setting bank account.\n  const { loading, error, data } = useQuery(GET_ACCOUNT_SUBSCRIPTION_QUERY, {\n    variables: { id: id },\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title} >\n      <Dimmer active={true} loader={true} />\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n  if (error) return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      {t(\"shop.subscription.error_loading\")}\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n\n  console.log(data)\n  const subscription = data.accountSubscription\n  const account = data.user\n  console.log(subscription)\n  console.log(account)\n\n  return (\n    <ShopSubscriptionDirectDebitActivatedBase title={title}>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={12} lg={12}>\n          <Card title={t(\"shop.subscription_directdebit_activated.thank_you\")}>\n            <Card.Body>\n              {t(\"shop.subscription_directdebit_activated.message_activated\")} <br/>\n\n              <b>{subscription.organizationSubscription.name}</b> {t(\"shop.subscription_directdebit_activated.starting_on\")} {' '}\n              <b>{moment(subscription.dateStart).format(dateFormat)}</b>.\n              <br /><br />\n              <b>{t(\"shop.subscription_directdebit_activated.what_next_question\")}</b>\n              <List.Group>\n                <Link to=\"/shop/classes\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_book_class')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/shop/account\" className=\"mb-1\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_account')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n                <Link to=\"/\">\n                  <List.GroupItem>\n                    {t('shop.subscription_directdebit_activated.next_continue_shopping')} <Icon name=\"chevron-right\"/>\n                  </List.GroupItem>\n                </Link>\n              </List.Group>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopSubscriptionDirectDebitActivatedBase>\n  )\n}\n\nexport default withTranslation()(withRouter(ShopSubscriptionDirectDebitActivated))\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const PASSWORD_CHANGE_SCHEMA = Yup.object().shape({\n    passwordCurrent: Yup.string()\n      .required(t('yup.field_required')),\n    passwordNew: Yup.string()\n      .required(t('yup.field_required'))\n      .min(2, t('yup.min_len_9')),\n    passwordNew2: Yup.string()\n      .oneOf([Yup.ref('passwordNew'), null], t('yup.passwords_must_match')),\n  })\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\nimport {\n  Button,\n  Card,\n  Form,\n} from \"tabler-react\"\n\n\nconst UserPasswordChangeForm = ({ t, history, isSubmitting, errors, values, returnUrl, setFieldTouched, setFieldValue }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.change_password.title')}\n      </Card.Title>\n      <Form.Group label={t('user.change_password.password_current')}>\n        <Field type=\"password\" \n                name=\"passwordCurrent\" \n                className={(errors.passwordCurrent) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordCurrent\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new')}>\n        <Field type=\"password\" \n                name=\"passwordNew\" \n                className={(errors.passwordNew) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('user.change_password.password_new_repeat')}>\n        <Field type=\"password\" \n                name=\"passwordNew2\" \n                className={(errors.passwordNew2) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"passwordNew2\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Button \n          block\n          loading={isSubmitting}\n          color=\"primary\"\n          type=\"submit\" \n          disabled={isSubmitting}\n        >\n          {t('user.change_password.title')}\n        </Button>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserPasswordChangeForm))\n\n","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { ToastContainer, Slide } from 'react-toastify'\n\nimport {\n  Container,\n  Grid,\n  Page\n} from \"tabler-react\"\n\n\nfunction CSStandalonePage({ t, urlLogo=\"\", children}) {\n\n  return (\n    <Page>\n      <div className=\"page-single\">\n        <Container>\n          <Grid.Row>\n            <div className=\"col col-login mx-auto\">            \n              <div className=\"text-center mb-5\">\n                { (urlLogo) ? <img src={urlLogo} className=\"h-9\" alt=\"logo\" /> : \"\" }\n              </div>\n              {children}\n              <ToastContainer \n                autoClose={5000} \n                transition={Slide}\n              />\n            </div>\n          </Grid.Row>\n        </Container>\n      </div>\n    </Page>\n  )\n}\n\nexport default withTranslation()(CSStandalonePage)\n\n\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport { PASSWORD_CHANGE_SCHEMA } from './yupSchema'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  List,\n} from \"tabler-react\"\n\nimport { UPDATE_ACCOUNT_PASSWORD } from \"../../../queries/system/auth\"\nimport UserPasswordChangeForm from './UserPasswordChangeForm';\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserChangePassword({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const [updatePassword] = useMutation(UPDATE_ACCOUNT_PASSWORD)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      {/* TODO: point imageURL to logo */}\n      <Formik\n        initialValues={{ \n          passwordCurrent: \"\",\n          passwordNew: \"\",\n          passwordNew2: \"\"\n        }}\n        validationSchema={PASSWORD_CHANGE_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            console.log('submit values:')\n            console.log(values)\n\n            let vars = {\n              input: {\n                passwordCurrent: values.passwordCurrent,\n                passwordNew: values.passwordNew\n              }\n            }\n\n            updatePassword({ variables: vars })\n              .then(({ data }) => {\n                console.log('got data', data)\n                setTimeout(() => toast.success((t('user.change_password.success')), {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                }), 300)\n                window.history.back()\n              }).catch((error) => {\n                console.log('#############')\n                console.log(error.messages)\n                console.log(error.graphQLErrors)\n                console.log(Object.keys(error))\n\n                if (error.graphQLErrors) {\n                  let i\n                  for (i = 0; i < error.graphQLErrors.length; i++) {\n                    toast.error(error.graphQLErrors[0].message\n                        .replace(/'/g, \"\")\n                        .replace(/,/g, \"\")\n                        .replace(/\\[/g, \"\")\n                        .replace(/\\]/g, \"\"), {\n                      position: toast.POSITION.BOTTOM_RIGHT\n                    })\n                  }\n                } else {\n                  // Show general error message\n                  toast.error((t('general.toast_server_error')) +  error, {\n                    position: toast.POSITION.BOTTOM_RIGHT\n                  })\n                }\n                \n                console.log('there was an error sending the query', error)\n                setSubmitting(false)\n              })\n        }}\n        >\n        {({ isSubmitting, errors, values, setFieldTouched, setFieldValue }) => (\n          <UserPasswordChangeForm\n            isSubmitting={isSubmitting}\n            etFieldValue={setFieldValue}\n            esetFieldTouched={setFieldTouched}\n            errors={errors}\n            values={values}\n          />\n        )}\n      </Formik>    \n      <h5>{t('user.change_password.requirements')}</h5>\n      <List>\n        <List.Item>{t('user.change_password.requirement_not_a_digit')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_common')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_min_length')}</List.Item>\n        <List.Item>{t('user.change_password.requirement_not_similar_account')}</List.Item>\n      </List>\n      {/* Cancel button below form */}\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserChangePassword))","import React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\n// import CSDatePicker from \"../../ui/CSDatePicker\"\n// import ISO_COUNTRY_CODES from \"../../../tools/iso_country_codes\"\n\n\nconst UserLoginForm = ({ t, history, isSubmitting, errors }) => (\n  <FoForm className=\"card\" autoComplete=\"off\">\n    <Card.Body className=\"p-6\">\n      <Card.Title>\n        {t('user.login.title')}\n      </Card.Title>\n      <Form.Group label={t('user.login.email')}>\n        <Field type=\"text\" \n                name=\"email\" \n                placeholder={t('user.login.email_placeholder')}\n                className={(errors.email) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Group label={t('general.password')}>\n        <Field type=\"password\" \n                name=\"password\" \n                placeholder={t('user.login.password_placeholder')}\n                className={(errors.password) ? \"form-control is-invalid\" : \"form-control\"} \n                autoComplete=\"off\" />\n        <ErrorMessage name=\"password\" component=\"span\" className=\"invalid-feedback\" />\n      </Form.Group>\n      <Form.Footer>\n        <Grid.Row>\n          <Grid.Col md={6}>\n            <Button \n              block\n              loading={isSubmitting}\n              color=\"primary\"\n              type=\"submit\" \n              disabled={isSubmitting}\n            >\n              {t('general.login')}\n            </Button>\n          </Grid.Col>\n          <Grid.Col md={6}>\n            <Button \n              color=\"link\"\n              RootComponent=\"a\"\n              href={(window.location.hostname === \"localhost\" || window.location.hostname === \"127.0.0.1\") ? \n                \"http://localhost:8000/d/accounts/password/reset/\" :\n                \"/d/accounts/password/reset/\"\n              } \n            >\n              {t('user.register.reset_password')}\n            </Button>\n          </Grid.Col>\n        </Grid.Row>\n      </Form.Footer>\n    </Card.Body>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(UserLoginForm))\n\n","import React, { useContext } from 'react'\nimport { useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\nimport {\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport AppSettingsContext from '../../context/AppSettingsContext'\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport { TOKEN_AUTH } from \"../../../queries/system/auth\"\nimport { CSAuth } from \"../../../tools/authentication\"\nimport CSLS from \"../../../tools/cs_local_storage\"\n\nimport UserLoginForm from \"./UserLoginForm\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogin({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const appSettings = useContext(AppSettingsContext)\n  const accountSignupEnabled = appSettings.accountSignupEnabled\n\n  const [ doTokenAuth ] = useMutation(TOKEN_AUTH)\n\n  // Do an auth cleanup, so we start clean when signing in\n  CSAuth.cleanup()\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin} >\n      <div className=\"text-center text-muted mb-1\">\n        {organization ? organization.name : \"\"}\n      </div>\n      <Formik\n        initialValues={{ \n          email: \"\",\n          password: \"\"\n        }}\n        // validationSchema={ACCOUNT_SCHEMA}\n        onSubmit={(values, { setSubmitting }) => {\n            let vars = {\n              username: values.email,\n              password: values.password,\n            }\n\n            doTokenAuth({ variables: vars,\n              refetchQueries: [\n                // // Refetch list\n                // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                // // Refresh local cached results for this account\n                // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n            ]})\n            .then(({ data }) => {\n                console.log('got data', data)\n                // TODO: Add link to \"feature switcher\" here\n                const next = localStorage.getItem(CSLS.AUTH_LOGIN_NEXT) || \"/user/welcome\"\n                CSAuth.login(data.tokenAuth)\n                setTimeout(() => history.push(next), 500)\n            }).catch((error) => {\n              toast.error((t('general.toast_server_error')) +  error, {\n                  position: toast.POSITION.BOTTOM_RIGHT\n                })\n              console.log(error)\n              setSubmitting(false)\n            })\n        }}\n        >\n        {({ isSubmitting, errors }) => (\n          <UserLoginForm\n            isSubmitting={isSubmitting}\n            errors={errors}\n          />\n        )}\n      </Formik>\n      {\n        (accountSignupEnabled) && <React.Fragment>\n          <div className=\"text-center\">\n            <h5>{t('user.register.create_account')}</h5>\n            {t('user.register.create_account_msg')} <br />\n            {t('user.register.create_account_msg_click_below')} <br />\n          </div>\n          <Button \n            block\n            color=\"link\"\n            RootComponent=\"a\"\n            href={(window.location.hostname === \"localhost\" || window.location.hostname === \"dev.costasiella.com\") ? \n              \"http://localhost:8000/d/accounts/signup/\" :\n              \"/d/accounts/signup/\"\n            } \n          >\n            {t('user.register.create_account')} <Icon name=\"chevron-right\" />\n          </Button>\n        </React.Fragment>\n      }\n    </CSStandaloneFormPage>\n  )\n}\n\n\nexport default withTranslation()(withRouter(UserLogin))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer, Slide} from 'react-toastify'\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLoginRequired({t, match, history}) {\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.login_required.title')}\n          </Card.Title>\n          {t('user.login_required.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.login_required.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer \n          autoClose={5000} \n          transition={Slide}\n      />\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLoginRequired))","import React, { useContext, useState } from 'react'\nimport { useMutation } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { toast } from 'react-toastify'\nimport {\n  Card,\n  Button,\n} from \"tabler-react\"\n\nimport OrganizationContext from '../../context/OrganizationContext'\nimport { CSAuth } from \"../../../tools/authentication\"\nimport { TOKEN_COOKIE_DELETE, TOKEN_REFRESH_COOKIE_DELETE } from \"../../../queries/system/auth\"\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\n\nfunction UserLogout({t, match, history}) {\n  const [ deleteCookie ] = useMutation(TOKEN_COOKIE_DELETE)\n  const [ deleteRefreshCookie ] = useMutation(TOKEN_REFRESH_COOKIE_DELETE)\n  const [active, setActive] = useState(false)\n\n  const organization = useContext(OrganizationContext)\n  console.log(organization)\n\n  return (\n    <CSStandaloneFormPage urlLogo={organization.urlLogoLogin}>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.logout.title')}\n          </Card.Title>\n          {t('user.logout.confirmation_message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              CSAuth.logout()\n              deleteCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              deleteRefreshCookie().then(({ data }) => {\n                console.log('got data', data)\n                })\n              .catch((error) => {\n                console.log(error)\n              })\n              setTimeout(() => toast.info(t('user.logout.success'), {\n                position: toast.POSITION.BOTTOM_RIGHT\n              }), 350)\n              setTimeout(() => history.push('/'), 250)\n            }}\n          >\n            {t('general.logout')}\n          </Button>\n        </Card.Body>\n      </Card>\n      <Button \n        block\n        color=\"link\"\n        onClick={(event) => {\n          event.preventDefault()  \n          window.history.back()\n        }}\n      >\n        {t('general.cancel')}\n      </Button>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserLogout))","import React, { useState } from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { ToastContainer } from 'react-toastify'\n\nimport {\n  Card,\n  Button,\n  Icon,\n} from \"tabler-react\"\n\nimport CSStandaloneFormPage from \"../../ui/CSStandaloneFormPage\"\n\nfunction UserSessionExpired({t, match, history}) {\n  // const organization = useContext(OrganizationContext)\n  // console.log(organization)\n\n  const [active, setActive] = useState(false);\n\n  return (\n    <CSStandaloneFormPage>\n      {/* TODO: point imageURL to logo */}\n      <Card>\n        <Card.Body>\n          <Card.Title>\n            {t('user.session_expired.title')}\n          </Card.Title>\n          {t('user.session_expired.message')} <br /><br />\n          <Button \n            block\n            loading={active}\n            disabled={active}\n            color=\"primary\"\n            type=\"button\" \n            onClick={() => {\n              setActive(true)\n              setTimeout(() => history.push('/user/login'), 250)\n            }}\n          >\n            {t('user.session_expired.go_to_login')} <Icon name=\"chevron-right\" />\n          </Button>\n        </Card.Body>\n      </Card>\n      <ToastContainer autoClose={5000}/>\n    </CSStandaloneFormPage>\n  )\n}\n\nexport default withTranslation()(withRouter(UserSessionExpired))","import React, { useContext } from 'react'\nimport { useQuery } from \"@apollo/client\";\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from \"react-router-dom\"\n\nimport GET_USER_PROFILE from \"../../../queries/system/get_user_profile\"\n\n\nimport OrganizationContext from '../../context/OrganizationContext'\n\nimport {\n  Button,\n  Card,\n  Dimmer,\n  Grid,\n  Icon\n} from \"tabler-react\"\nimport HasPermissionWrapper from \"../../HasPermissionWrapper\"\n\nimport CSStandalonePageWide from \"../../ui/CSStandalonePageWide\"\n\n\nfunction Welcome({t, match, history}) {\n  const organization = useContext(OrganizationContext)\n  const { loading, error, data } = useQuery(GET_USER_PROFILE, {\n    fetchPolicy: \"network-only\"\n  })\n\n  if (loading) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <Dimmer active={true} loader={true} />\n    </CSStandalonePageWide>\n  )\n  if (error) return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      {t(\"shop.account.class_info.error_loading_data\")}\n    </CSStandalonePageWide>\n  )\n\n  const user = data.user\n\n  // Push the user to the shop in case they're not an employee or instructor\n  if (!user.employee && !user.instructor) {\n    history.push(\"/shop/account\")\n  } \n\n\n  return (\n    <CSStandalonePageWide urlLogo={organization.urlLogoLogin}>\n      <div className=\"text-center mb-5\">\n        <h2>{t(\"general.welcome\")} {user.firstName}</h2>\n        <h5>{t(\"user.welcome.where_next_question\")}</h5>\n      </div>\n      <Grid.Row>\n        <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"shop.title\")}</h5>\n              {t(\"user.welcome.shop_explanation\")} <br /><br />\n              <Link to=\"/\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.shop_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <Grid.Col xs={12} sm={12} md={3}>\n          <Card>\n            <Card.Body>\n              <h5>{t(\"general.backend\")}</h5>\n              {t(\"user.welcome.backend_explantion\")} <br /><br />\n              <Link to=\"/backend\">\n                <Button \n                  block\n                  outline\n                  color=\"primary\"\n                >\n                  {t(\"user.welcome.backend_to\")} <Icon name=\"chevron-right\" />\n                </Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </Grid.Col>\n        <HasPermissionWrapper resource=\"selfcheckin\" permission=\"view\" hideLoading={true}>\n          <Grid.Col xs={12} sm={12} md={3} offsetMd={3}>\n            <Card>\n              <Card.Body>\n                <h5>{t(\"selfcheckin.home.title\")}</h5>\n                {t(\"user.welcome.selfcheckin_explantion\")} <br /><br />\n                <Link to=\"/selfcheckin\">\n                  <Button \n                    block\n                    outline\n                    color=\"primary\"\n                  >\n                    {t(\"user.welcome.selfcheckin_to\")} <Icon name=\"chevron-right\" />\n                  </Button>\n                </Link>\n              </Card.Body>\n            </Card>\n          </Grid.Col>\n        </HasPermissionWrapper>\n      </Grid.Row>\n    </CSStandalonePageWide>\n  )\n}\n\nexport default withTranslation()(withRouter(Welcome))","import * as React from \"react\";\n\nimport { Error404Page } from \"tabler-react\";\n\n// type Props = {||}\n\n// function Error404(props: Props): React.Node {\n//   return <Error404Page />\n// }\n\nfunction Error404() {\n  return <Error404Page />\n}\n\nexport default Error404\n","import { gql } from \"@apollo/client\"\n\nexport const GET_ACCOUNT_BANK_ACCOUNTS = gql`\n  query AccountBankAccounts($before: String, $after: String, $account: ID!) {\n    accountBankAccounts(first: 1, before: $before, after: $after, account: $account) {\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n      edges {\n        node {\n          id\n          account {\n            id\n            fullName\n          }\n          number\n          holder\n          bic\n        }\n      }\n    }\n    user {\n      id\n      accountId\n      firstName\n      lastName\n      fullName\n      email\n      gender\n      dateOfBirth\n      address\n      postcode\n      city\n      country\n      phone\n      mobile\n      emergency\n    }\n  }\n`\n\n\nexport const UPDATE_BANK_ACCOUNT = gql`\n  mutation UpdateBankAccount($input:UpdateAccountBankAccountInput!) {\n    updateAccountBankAccount(input: $input) {\n      accountBankAccount {\n        id\n      }\n    }\n  }\n`","// @flow\n\nimport React from 'react'\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Link } from 'react-router-dom'\nimport { Form as FoForm, Field, ErrorMessage } from 'formik'\n\n\nimport {\n  Button,\n  Card,\n  Form,\n  Grid\n} from \"tabler-react\"\n\n\nconst ShopAccountBankAccountForm = ({ t, history, isSubmitting, errors, returnUrl }) => (\n  <FoForm>\n    <Card title={t(\"shop.account.bank_account.title\")} >\n    <Card.Body>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.holder')}>\n              <Field type=\"text\" \n                      name=\"holder\" \n                      className={(errors.holder) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n        <Grid.Row>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.number')}>\n              <Field type=\"text\" \n                      name=\"number\" \n                      className={(errors.number) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"number\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n          <Grid.Col>\n            <Form.Group label={t('relations.account.bank_accounts.bic')}>\n              <Field type=\"text\" \n                      name=\"bic\" \n                      className={(errors.bic) ? \"form-control is-invalid\" : \"form-control\"} \n                      autoComplete=\"off\" />\n              <ErrorMessage name=\"bic\" component=\"span\" className=\"invalid-feedback\" />\n            </Form.Group>\n          </Grid.Col>\n        </Grid.Row>\n      </Card.Body>\n      <Card.Footer>\n          <Button \n            color=\"primary\"\n            className=\"pull-right\" \n            type=\"submit\" \n            disabled={isSubmitting}\n          >\n            {t('general.submit')}\n          </Button>\n          <Link to={returnUrl}>\n            <Button color=\"link\">\n                {t('general.cancel')}\n            </Button>\n          </Link>\n      </Card.Footer>\n    </Card>\n  </FoForm>\n)\n\nexport default withTranslation()(withRouter(ShopAccountBankAccountForm))\n\n","import { t } from 'i18next'\nimport * as Yup from 'yup'\n\nexport const ACCOUNT_BANK_ACCOUNT_SCHEMA = Yup.object().shape({\n    holder: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n    number: Yup.string()\n      .min(2, t('yup.min_len_2'))\n      .required(t('yup.field_required')),\n  })\n","import React from 'react'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { withTranslation } from 'react-i18next'\nimport { withRouter } from \"react-router\"\nimport { Formik } from 'formik'\nimport { toast } from 'react-toastify'\n\nimport {\n  Dimmer,\n  Grid,\n} from \"tabler-react\";\n\nimport CSLS from '../../../../tools/cs_local_storage'\nimport GET_USER_PROFILE from \"../../../../queries/system/get_user_profile\"\nimport { GET_ACCOUNT_BANK_ACCOUNTS, UPDATE_BANK_ACCOUNT } from \"./queries\"\n\nimport ShopAccountProfileBase from \"../ShopAccountProfileBase\"\nimport ShopAccountBankAccountForm from \"./ShopAccountBankAccountForm\"\nimport { ACCOUNT_BANK_ACCOUNT_SCHEMA } from \"./yupSchema\"\n\n\nfunction ShopAccountBankAccount({t, match, history}) {\n  // TODO fetch returnUrl from local storage to see if the user comes from a shop subscription component\n  const nextUrl = localStorage.getItem(CSLS.SHOP_ACCOUNT_BANK_ACCOUNT_NEXT)\n\n  // Chain queries. First query user data and then query class attendance for that user once we have the account Id.\n  const { loading: loadingUser, error: errorUser, data: dataUser } = useQuery(GET_USER_PROFILE)\n  const { loading, error, data } = useQuery(GET_ACCOUNT_BANK_ACCOUNTS, {\n    skip: loadingUser || errorUser || !dataUser,\n    variables: {\n      account: dataUser && dataUser.user ? dataUser.user.accountId : null\n    },\n    fetchPolicy: \"network-only\"\n  })\n  const [ updateBankAccount ] = useMutation(UPDATE_BANK_ACCOUNT)\n\n  if (loading || loadingUser || !data) return (\n    <ShopAccountProfileBase>\n      <Dimmer active={true} loader={true} />\n    </ShopAccountProfileBase>\n  )\n  if (error || errorUser) return (\n    <ShopAccountProfileBase>\n      {t(\"shop.account.bank_account.error_loading_data\")}\n    </ShopAccountProfileBase>\n  )\n\n  const user = dataUser.user\n  const bankAccount = data.accountBankAccounts.edges[0].node\n\n  return (\n    <ShopAccountProfileBase accountName={user.fullName}>\n      <Grid.Row>\n        <Grid.Col md={12}>\n          <Formik\n            initialValues={{ \n              number: bankAccount.number,\n              holder: bankAccount.holder,\n              bic: bankAccount.bic\n            }}\n            validationSchema={ACCOUNT_BANK_ACCOUNT_SCHEMA}\n            onSubmit={(values, { setSubmitting }) => {\n                console.log('submit values:')\n                console.log(values)\n\n                let input_vars = {\n                  id: bankAccount.id,\n                  number: values.number,\n                  holder: values.holder,\n                  bic: values.bic\n                }\n\n                updateBankAccount({ variables: {\n                  input: input_vars\n                }, refetchQueries: [\n                    // // Refetch list\n                    // {query: GET_ACCOUNTS_QUERY, variables: get_list_query_variables()},\n                    // // Refresh local cached results for this account\n                    // {query: GET_ACCOUNT_QUERY, variables: {\"id\": match.params.account_id}}\n                ]})\n                .then(({ data }) => {\n                    console.log('got data', data)\n                    if (nextUrl) {\n                      history.push(nextUrl)\n                    }\n\n                    toast.success((t('shop.account.bank_account.toast_edit_success')), {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    setSubmitting(false)\n                  }).catch((error) => {\n                    toast.error((t('general.toast_server_error')) +  error, {\n                        position: toast.POSITION.BOTTOM_RIGHT\n                      })\n                    console.log('there was an error sending the query', error)\n                    setSubmitting(false)\n                  })\n            }}\n            >\n            {({ isSubmitting, errors, values }) => (\n              <ShopAccountBankAccountForm\n                isSubmitting={isSubmitting}\n                errors={errors}\n                values={values}\n                returnUrl={\"/shop/account\"}\n              />\n            )}\n          </Formik>\n        </Grid.Col>\n      </Grid.Row>\n    </ShopAccountProfileBase>\n  )\n}\n\n\nexport default withTranslation()(withRouter(ShopAccountBankAccount))","// import React, { Component } from 'react';\n// import logo from './logo.svg';\n\nimport React, { useState } from 'react'\nimport {\n  Route, \n  Switch, \n  HashRouter,\n  Redirect\n} from 'react-router-dom'\nimport { withTranslation } from 'react-i18next'\nimport { useQuery, useMutation } from \"@apollo/client\"\nimport { toast } from 'react-toastify'\nimport { Dimmer } from 'tabler-react'\n\n\nimport { GET_APP_SETTINGS_QUERY } from \"./components/settings/general/date_time/queries\"\nimport { GET_ORGANIZATION_QUERY } from \"./components/organization/organization/queries\"\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\n// Import moment locale\n// import moment from 'moment'\nimport 'moment/locale/nl'\n\nimport CSStandalonePageLoader from './components/ui/CSStandalonePageLoader'\n\nimport { AppSettingsProvider } from \"./components/context/AppSettingsContext\"\nimport { OrganizationProvider } from \"./components/context/OrganizationContext\"\n\nimport CookiePolicy from './components/shop/cookie_policy/CookiePolicy'\nimport HomeHome from './components/home/home/HomeHome'\n\nimport AutomationHome from './components/automation/home/AutomationHome'\nimport AutomationAccountSubscriptionCredits from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCredits'\nimport AutomationAccountSubscriptionCreditAdd from './components/automation/account/subscription/credits/AutomationAccountSubscriptionCreditAdd'\nimport AutomationAccountSubscriptionInvoices from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoices'\nimport AutomationAccountSubscriptionInvoicesAdd from './components/automation/account/subscription/invoices/AutomationAccountSubscriptionInvoicesAdd'\nimport AutomationAccountSubscriptionMollieCollections \n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollections'\nimport AutomationAccountSubscriptionMollieCollectionAdd\n  from './components/automation/account/subscription/mollie_collection/AutomationAccountSubscriptionMollieCollectionAdd'\n\nimport FinanceHome from './components/finance/home/FinanceHome'\nimport FinanceCostCenters from './components/finance/costcenters/FinanceCostCenters'\nimport FinanceCostCenterAdd from './components/finance/costcenters/FinanceCostCenterAdd'\nimport FinanceCostCenterEdit from './components/finance/costcenters/FinanceCostCenterEdit'\nimport FinanceExpenses from './components/finance/expenses/FinanceExpenses'\nimport FinanceExpenseAdd from './components/finance/expenses/FinanceExpenseAdd'\nimport FinanceExpenseEdit from './components/finance/expenses/FinanceExpenseEdit'\nimport FinanceExpensesExport from './components/finance/expenses/export/FinanceExpensesExport'\nimport FinanceGLAccounts from './components/finance/glaccounts/FinanceGLAccounts'\nimport FinanceGLAccountAdd from './components/finance/glaccounts/FinanceGLAccountAdd'\nimport FinanceGLAccountEdit from './components/finance/glaccounts/FinanceGLAccountEdit'\nimport FinanceInvoices from './components/finance/invoices/FinanceInvoices'\nimport FinanceInvoicesExport from './components/finance/invoices/export/FinanceInvoicesExport'\nimport FinanceInvoiceEdit from './components/finance/invoices/edit/FinanceInvoiceEdit'\nimport FinanceInvoiceEditTo from './components/finance/invoices/edit_to/FinanceInvoiceEditTo'\nimport FinanceInvoiceGroups from './components/finance/invoices/groups/FinanceInvoiceGroups'\nimport FinanceInvoiceGroupAdd from './components/finance/invoices/groups/FinanceInvoiceGroupAdd'\nimport FinanceInvoiceGroupEdit from './components/finance/invoices/groups/FinanceInvoiceGroupEdit'\nimport FinanceInvoiceGroupDefaults from './components/finance/invoices/groups/defaults/FinanceInvoiceGroupDefaults'\nimport FinanceInvoicePaymentAdd from './components/finance/invoices/payments/FinanceInvoicePaymentAdd'\nimport FinanceInvoicePaymentEdit from './components/finance/invoices/payments/FinanceInvoicePaymentEdit'\nimport FinanceOrders from './components/finance/orders/FinanceOrders'\nimport FinancePaymentBatches from './components/finance/payment_batches/FinancePaymentBatches'\nimport FinancePaymentBatchAddWhat from './components/finance/payment_batches/FinancePaymentBatchAddWhat'\nimport FinancePaymentBatchView from './components/finance/payment_batches/FinancePaymentBatchView'\nimport FinancePaymentCollectionBatchAdd from './components/finance/payment_batches/FinancePaymentCollectionBatchAdd'\nimport FinancePaymentCollectionBatchEdit from './components/finance/payment_batches/FinancePaymentCollectionBatchEdit'\nimport FinancePaymentBatchCategories from './components/finance/payment_batch_categories/FinancePaymentBatchCategories'\nimport FinancePaymentBatchCategoryAdd from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryAdd'\nimport FinancePaymentBatchCategoryEdit from './components/finance/payment_batch_categories/FinancePaymentBatchCategoryEdit'\nimport FinanceOrderEdit from './components/finance/orders/edit/FinanceOrderEdit'\nimport FinancePaymentMethods from './components/finance/payment_methods/FinancePaymentMethods'\nimport FinancePaymentMethodAdd from './components/finance/payment_methods/FinancePaymentMethodAdd'\nimport FinancePaymentMethodEdit from './components/finance/payment_methods/FinancePaymentMethodEdit'\nimport FinanceQuotes from './components/finance/quotes/FinanceQuotes'\nimport FinanceQuotesExport from './components/finance/quotes/export/FinanceQuotesExport'\nimport FinanceQuoteEdit from './components/finance/quotes/edit/FinanceQuoteEdit'\nimport FinanceQuoteEditTo from './components/finance/quotes/edit_to/FinanceQuoteEditTo'\nimport FinanceQuoteGroups from './components/finance/quotes/groups/FinanceQuoteGroups'\nimport FinanceQuoteGroupAdd from './components/finance/quotes/groups/FinanceQuoteGroupAdd'\nimport FinanceQuoteGroupEdit from './components/finance/quotes/groups/FinanceQuoteGroupEdit'\nimport FinanceTaxRates from './components/finance/taxrates/FinanceTaxRates'\nimport FinanceTaxRatesAdd from './components/finance/taxrates/FinanceTaxRateAdd'\nimport FinanceTaxRatesEdit from './components/finance/taxrates/FinanceTaxRateEdit'\nimport FinanceTaxRatesSummary from './components/finance/taxrates_summary/FinanceTaxRatesSummary'\n\nimport InsightHome from './components/insight/home/InsightHome'\nimport InsightInactiveAccounts from './components/insight/inactive_accounts/InsightInactiveAccounts'\nimport InsightInactiveAccountsAdd from './components/insight/inactive_accounts/InsightInactiveAccountsAdd'\nimport InsightInactiveAccountsView from './components/insight/inactive_accounts/InsightInactiveAccountsView'\nimport InsightFinanceInvoicesOpenOnDate from './components/insight/invoices_open_on_date/InsightFinanceInvoicesOpenOnDate'\nimport InsightClasspasses from './components/insight/classpasses/InsightClasspasses'\nimport InsightKeyNumbersWoSubscription from './components/insight/keynumbers_wo_subscription/InsightKeyNumbersWoSubscription'\nimport InsightRevenue from './components/insight/revenue/InsightRevenue'\nimport InsightInstructorClassesMonth from './components/insight/instructor_classes/InsightInstructorClassesMonth'\nimport InsightSubscriptions from './components/insight/subscriptions/InsightSubscriptions'\nimport InsightTrialpasses from './components/insight/trialpasses/InsightTrialpasses'\n\nimport OrganizationHome from './components/organization/home/OrganizationHome'\nimport OrganizationEdit from './components/organization/organization/OrganizationEdit'\nimport OrganizationBranding from './components/organization/organization/branding/OrganizationBranding'\nimport OrganizationBrandingEdit from './components/organization/organization/branding/OrganizationBrandingEdit'\nimport OrganizationAnnouncements from './components/organization/announcements/OrganizationAnnouncements'\nimport OrganizationAnnouncementAdd from './components/organization/announcements/OrganizationAnnouncementAdd'\nimport OrganizationAnnouncementEdit from './components/organization/announcements/OrganizationAnnouncementEdit'\nimport OrganizationAppointments from './components/organization/appointment_categories/appointments/OrganizationAppointments'\nimport OrganizationAppointmentAdd from './components/organization/appointment_categories/appointments/OrganizationAppointmentAdd'\nimport OrganizationAppointmentEdit from './components/organization/appointment_categories/appointments/OrganizationAppointmentEdit'\nimport OrganizationAppointmentCategories from './components/organization/appointment_categories/OrganizationAppointmentCategories'\nimport OrganizationAppointmentCategoryAdd from './components/organization/appointment_categories/OrganizationAppointmentCategoryAdd'\nimport OrganizationAppointmentCategoryEdit from './components/organization/appointment_categories/OrganizationAppointmentCategoryEdit'\nimport OrganizationAppointmentPrices from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPrices'\nimport OrganizationAppointmentPriceAdd from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceAdd'\nimport OrganizationAppointmentPriceEdit from './components/organization/appointment_categories/appointments/prices/OrganizationAppointmentPriceEdit'\nimport OrganizationClasspasses from './components/organization/classpasses/OrganizationClasspasses'\nimport OrganizationClasspassAdd from './components/organization/classpasses/OrganizationClasspassAdd'\nimport OrganizationClasspassEdit from './components/organization/classpasses/OrganizationClasspassEdit'\nimport OrganizationClasspassesGroups from './components/organization/classpasses_groups/OrganizationClasspassesGroups'\nimport OrganizationClasspassesGroupAdd from './components/organization/classpasses_groups/OrganizationClasspassesGroupAdd'\nimport OrganizationClasspassesGroupEdit from './components/organization/classpasses_groups/OrganizationClasspassesGroupEdit'\nimport OrganizationClasspassesGroupEditPasses from './components/organization/classpasses_groups/OrganizationClasspassesGroupEditPasses'\nimport OrganizationClasstypes from './components/organization/classtypes/OrganizationClasstypes'\nimport OrganizationClasstypeAdd from './components/organization/classtypes/OrganizationClasstypeAdd'\nimport OrganizationClasstypeEdit from './components/organization/classtypes/OrganizationClasstypeEdit'\nimport OrganizationClasstypeEditImage from './components/organization/classtypes/OrganizationClasstypeEditImage'\nimport OrganizationDiscoveries from './components/organization/discovery/OrganizationDiscoveries'\nimport OrganizationDiscoveryAdd from './components/organization/discovery/OrganizationDiscoveryAdd'\nimport OrganizationDiscoveryEdit from './components/organization/discovery/OrganizationDiscoveryEdit'\nimport OrganizationDocuments from './components/organization/documents/OrganizationDocuments'\nimport OrganizationListDocuments from './components/organization/documents/OrganizationListDocuments'\nimport OrganizationDocumentAdd from './components/organization/documents/OrganizationDocumentAdd'\nimport OrganizationDocumentEdit from './components/organization/documents/OrganizationDocumentEdit'\nimport OrganizationHolidays from './components/organization/holidays/OrganizationHolidays'\nimport OrganizationHolidayAdd from './components/organization/holidays/OrganizationHolidayAdd'\nimport OrganizationHolidayEdit from './components/organization/holidays/OrganizationHolidayEdit'\nimport OrganizationHolidayEditLocations from './components/organization/holidays/OrganizationHolidayEditLocations'\nimport OrganizationLanguages from './components/organization/languages/OrganizationLanguages'\nimport OrganizationLanguageAdd from './components/organization/languages/OrganizationLanguageAdd'\nimport OrganizationLanguageEdit from './components/organization/languages/OrganizationLanguageEdit'\nimport OrganizationLocations from './components/organization/locations/OrganizationLocations'\nimport OrganizationLocationAdd from './components/organization/locations/OrganizationLocationAdd'\nimport OrganizationLocationEdit from './components/organization/locations/OrganizationLocationEdit'\nimport OrganizationLocationRooms from './components/organization/locations/rooms/OrganizationLocationRooms'\nimport OrganizationLocationRoomAdd from './components/organization/locations/rooms/OrganizationLocationRoomAdd'\nimport OrganizationLocationRoomEdit from './components/organization/locations/rooms/OrganizationLocationRoomEdit'\nimport OrganizationLevels from './components/organization/levels/OrganizationLevels'\nimport OrganizationLevelAdd from './components/organization/levels/OrganizationLevelAdd'\nimport OrganizationLevelEdit from './components/organization/levels/OrganizationLevelEdit'\nimport OrganizationProducts from './components/organization/products/OrganizationProducts'\nimport OrganizationProductAdd from './components/organization/products/OrganizationProductAdd'\nimport OrganizationProductEdit from './components/organization/products/OrganizationProductEdit'\nimport OrganizationShifts from './components/organization/shifts/OrganizationShifts'\nimport OrganizationShiftAdd from './components/organization/shifts/OrganizationShiftAdd'\nimport OrganizationShiftEdit from './components/organization/shifts/OrganizationShiftEdit'\nimport OrganizationSubscriptions from './components/organization/subscriptions/OrganizationSubscriptions'\nimport OrganizationSubscriptionAdd from './components/organization/subscriptions/OrganizationSubscriptionAdd'\nimport OrganizationSubscriptionEdit from './components/organization/subscriptions/OrganizationSubscriptionEdit'\nimport OrganizationSubscriptionsGroups from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroups'\nimport OrganizationSubscriptionsGroupAdd from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupAdd'\nimport OrganizationSubscriptionsGroupEdit from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEdit'\nimport OrganizationSubscriptionsGroupEditSubscriptions from './components/organization/subscriptions_groups/OrganizationSubscriptionsGroupEditSubscriptions'\nimport OrganizationSubscriptionsPrices from './components/organization/subscriptions/prices/OrganizationSubscriptionsPrices'\nimport OrganizationSubscriptionPriceAdd from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceAdd'\nimport OrganizationSubscriptionPriceEdit from './components/organization/subscriptions/prices/OrganizationSubscriptionPriceEdit'\n\nimport RelationsHome from './components/relations/home/RelationsHome'\nimport RelationsAccounts from './components/relations/accounts/RelationsAccounts'\nimport RelationsAccountAdd from './components/relations/accounts/RelationsAccountAdd'\nimport RelationsAccountProfile from './components/relations/accounts/RelationsAccountProfile'\nimport RelationsAccountProfileImage from './components/relations/accounts/RelationsAccountProfileImage'\nimport AccountAcceptedDocuments from './components/relations/accounts/accepted_documents/AcceptedDocuments.jsx'\nimport RelationsAccountBankAccount from './components/relations/accounts/bank_accounts/RelationsAccountBankAccount'\nimport RelationsAccountBankAccountMandateAdd from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateAdd'\nimport RelationsAccountBankAccountMandateEdit from './components/relations/accounts/bank_accounts/mandates/RelationsAccountBankAccountMandateEdit'\nimport RelationsAccountClasses from './components/relations/accounts/classes/AccountClasses'\nimport RelationsAccountClassesFindClass from './components/relations/accounts/classes/AccountClassesFindClass'\nimport RelationsAccountEnrollments from './components/relations/accounts/enrollments/AccountEnrollments'\nimport RelationsAccountEnrollmentEdit from './components/relations/accounts/enrollments/AccountEnrollmentEdit'\nimport RelationsAccountEnrollmentFindClass from './components/relations/accounts/enrollments/AccountEnrollmentFindClass'\nimport RelationsAccountTools from './components/relations/accounts/tools/RelationsAccountTools'\nimport AccountClasspasses from './components/relations/accounts/classpasses/AccountClasspasses'\nimport AccountClasspassAdd from './components/relations/accounts/classpasses/AccountClasspassAdd'\nimport AccountClasspassEdit from './components/relations/accounts/classpasses/AccountClasspassEdit'\nimport AccountClasspassClasses from './components/relations/accounts/classpass_classes/AccountClasspassClasses'\nimport AccountDocuments from './components/relations/accounts/documents/AccountDocuments'\nimport AccountDocumentAdd from './components/relations/accounts/documents/AccountDocumentAdd'\nimport AccountDocumentEdit from './components/relations/accounts/documents/AccountDocumentEdit'\nimport AccountFinancePaymentBatchCategoryItems from \n  './components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItems'\nimport AccountFinancePaymentBatchCategoryItemAdd from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemAdd'\nimport AccountFinancePaymentBatchCategoryItemEdit from \n'./components/relations/accounts/finance_payment_batch_category_items/AccountFinancePaymentBatchCategoryItemEdit'\nimport AccountInvoices from './components/relations/accounts/invoices/AccountInvoices'\nimport AccountInvoiceAdd from './components/relations/accounts/invoices/AccountInvoiceAdd'\nimport AccountMemberships from './components/relations/accounts/memberships/AccountMemberships'\nimport AccountMembershipAdd from './components/relations/accounts/memberships/AccountMembershipAdd'\nimport AccountMembershipEdit from './components/relations/accounts/memberships/AccountMembershipEdit'\nimport AccountNotes from './components/relations/accounts/notes/AccountNotes.jsx'\nimport AccountNoteAdd from './components/relations/accounts/notes/AccountNoteAdd.jsx'\nimport AccountNoteEdit from './components/relations/accounts/notes/AccountNoteEdit.jsx'\nimport AccountOrders from './components/relations/accounts/orders/AccountOrders'\nimport AccountProducts from './components/relations/accounts/products/AccountProducts'\nimport AccountProductAdd from './components/relations/accounts/products/AccountProductAdd'\nimport AccountQuotes from './components/relations/accounts/quotes/AccountQuotes'\nimport AccountQuoteAdd from './components/relations/accounts/quotes/AccountQuoteAdd'\nimport AccountScheduleEventTickets from './components/relations/accounts/schedule_event_tickets/AccountScheduleEventTickets'\nimport AccountSubscriptions from './components/relations/accounts/subscriptions/AccountSubscriptions'\nimport AccountSubscriptionAdd from './components/relations/accounts/subscriptions/AccountSubscriptionAdd'\nimport AccountSubscriptionEdit from './components/relations/accounts/subscriptions/edit/AccountSubscriptionEdit'\nimport AccountSubscriptionEditAltPrices from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPrices'\nimport AccountSubscriptionEditAltPriceAdd from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceAdd'\nimport AccountSubscriptionEditAltPriceEdit from './components/relations/accounts/subscriptions/edit/alt_prices/AccountSubscriptionEditAltPriceEdit'\nimport AccountSubscriptionEditBlocks from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlocks'\nimport AccountSubscriptionEditBlockAdd from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockAdd'\nimport AccountSubscriptionEditBlockEdit from './components/relations/accounts/subscriptions/edit/blocks/AccountSubscriptionEditBlockEdit'\nimport AccountSubscriptionEditCredits from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCredits'\nimport AccountSubscriptionEditCreditAdd from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditAdd'\nimport AccountSubscriptionEditCreditEdit from './components/relations/accounts/subscriptions/edit/credits/AccountSubscriptionEditCreditEdit'\nimport AccountSubscriptionEditInvoices from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoices'\nimport AccountSubscriptionEditInvoiceAdd from './components/relations/accounts/subscriptions/edit/invoices/AccountSubscriptionEditInvoiceAdd'\nimport AccountSubscriptionEditPauses from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauses'\nimport AccountSubscriptionEditPauseAdd from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseAdd'\nimport AccountSubscriptionEditPauseEdit from './components/relations/accounts/subscriptions/edit/pauses/AccountSubscriptionEditPauseEdit'\nimport RelationsAccountInstructorProfile from './components/relations/accounts/instructor_profile/RelationsAccountInstructorProfile'\nimport RelationsB2B from './components/relations/b2b/RelationsB2B'\nimport RelationsB2BAdd from './components/relations/b2b/RelationsB2BAdd.jsx'\nimport RelationsB2BEdit from './components/relations/b2b/RelationsB2BEdit.jsx'\nimport RelationsB2BInvoices from './components/relations/b2b/invoices/RelationsB2BInvoices'\nimport RelationsB2BInvoiceAdd from './components/relations/b2b/invoices/RelationsB2BInvoiceAdd'\n\nimport ScheduleHome from './components/schedule/home/ScheduleHome'\nimport ScheduleAppointments from './components/schedule/appointments/ScheduleAppointments'\nimport ScheduleAppointmentAdd from './components/schedule/appointments/ScheduleAppointmentAdd'\nimport ScheduleAppointmentEditAll from './components/schedule/appointments/all/edit/ScheduleAppointmentEditAll'\nimport ScheduleClasses from './components/schedule/classes/ScheduleClasses'\nimport ScheduleClassAdd from './components/schedule/classes/ScheduleClassAdd'\nimport ScheduleClassEditAll from './components/schedule/classes/all/edit/ScheduleClassEditAll'\nimport ScheduleClassEnrollments from './components/schedule/classes/all/enrollments/ScheduleClassEnrollments'\nimport ScheduleClassEnrollmentsSearch from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentsSearch'\nimport ScheduleClassEnrollmentAdd from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentAdd'\nimport ScheduleClassEnrollmentEdit from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentEdit'\nimport ScheduleClassEnrollmentOptions from './components/schedule/classes/all/enrollments/ScheduleClassEnrollmentOptions'\nimport ScheduleClassClasspasses from './components/schedule/classes/all/classpasses/ScheduleClassClasspasses'\nimport ScheduleClassSubscriptions from './components/schedule/classes/all/subscriptions/ScheduleClassSubscriptions'\nimport ScheduleClassInstructors from './components/schedule/classes/all/instructors/ScheduleClassInstructors'\nimport ScheduleClassInstructorAdd from './components/schedule/classes/all/instructors/ScheduleClassInstructorAdd'\nimport ScheduleClassInstructorEdit from './components/schedule/classes/all/instructors/ScheduleClassInstructorEdit'\nimport ScheduleClassAttendance from './components/schedule/classes/class/attendance/ScheduleClassAttendance'\nimport ScheduleClassAttendanceChart from './components/schedule/classes/class/attendance_chart/ScheduleClassAttendanceChart'\nimport ScheduleClassBook from './components/schedule/classes/class/book/ScheduleClassBook'\nimport ScheduleClassEdit from './components/schedule/classes/class/edit/ScheduleClassEdit'\nimport ScheduleClassPrices from './components/schedule/classes/all/prices/ScheduleClassPrices'\nimport ScheduleClassPriceAdd from './components/schedule/classes/all/prices/ScheduleClassPriceAdd'\nimport ScheduleClassPriceEdit from './components/schedule/classes/all/prices/ScheduleClassPriceEdit'\nimport ScheduleEvents from './components/schedule/events/ScheduleEvents'\nimport ScheduleEventAdd from './components/schedule/events/ScheduleEventAdd'\nimport ScheduleEventEdit from './components/schedule/events/edit/ScheduleEventEdit'\nimport ScheduleEventActivities from './components/schedule/events/activities/ScheduleEventActivities'\nimport ScheduleEventActivityAdd from './components/schedule/events/activities/ScheduleEventActivityAdd'\nimport ScheduleEventActivityEdit from './components/schedule/events/activities/ScheduleEventActivityEdit'\nimport ScheduleEventActivityAttendance from './components/schedule/events/activities/attendance/ScheduleEventActivityAttendance'\nimport ScheduleEventEarlybirds from './components/schedule/events/earlybirds/ScheduleEventEarlybirds'\nimport ScheduleEventEarlybirdAdd from './components/schedule/events/earlybirds/ScheduleEventEarlybirdAdd'\nimport ScheduleEventEarlybirdEdit from './components/schedule/events/earlybirds/ScheduleEventEarlybirdEdit'\nimport ScheduleEventMedia from './components/schedule/events/media/ScheduleEventMedia'\nimport ScheduleEventMediaAdd from './components/schedule/events/media/ScheduleEventMediaAdd'\nimport ScheduleEventMediaEdit from './components/schedule/events/media/ScheduleEventMediaEdit'\nimport ScheduleEventSubscriptionGroupDiscounts from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscounts'\nimport ScheduleEventSubscriptionGroupDiscountAdd from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountAdd'\nimport ScheduleEventSubscriptionGroupDiscountEdit from './components/schedule/events/subscription_group_discounts/ScheduleEventSubscriptionGroupDiscountEdit'\nimport ScheduleEventTickets from './components/schedule/events/tickets/ScheduleEventTickets'\nimport ScheduleEventTicketAdd from './components/schedule/events/tickets/ScheduleEventTicketAdd'\nimport ScheduleEventTicketEdit from './components/schedule/events/tickets/ScheduleEventTicketEdit'\nimport ScheduleEventTicketEditActivities from './components/schedule/events/tickets/activities/ScheduleEventTicketEditActivities'\nimport ScheduleEventTicketEditCustomers from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomers'\nimport ScheduleEventTicketEditCustomersSearch from './components/schedule/events/tickets/customers/ScheduleEventTicketEditCustomersSearch'\nimport ScheduleShifts from './components/schedule/shifts/ScheduleShifts'\nimport ScheduleShiftAdd from './components/schedule/shifts/ScheduleShiftAdd'\nimport ScheduleShiftEditAll from './components/schedule/shifts/all/edit/ScheduleShiftEditAll'\nimport ScheduleShiftEdit from './components/schedule/shifts/shift/edit/ScheduleShiftEdit'\nimport ScheduleShiftEmployees from './components/schedule/shifts/all/employees/ScheduleShiftEmployees'\nimport ScheduleShiftEmployeeAdd from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeAdd'\nimport ScheduleShiftEmployeeEdit from './components/schedule/shifts/all/employees/ScheduleShiftEmployeeEdit'\n\nimport SelfCheckinCheckin from './components/selfcheckin/Checkin/Checkin'\nimport SelfCheckinBookingOptions from './components/selfcheckin/BookingOptions/BookingOptions'\nimport SelfCheckinLocations from './components/selfcheckin/Locations/Locations'\nimport SelfCheckinLocationClasses from './components/selfcheckin/LocationClasses/LocationClasses'\n\nimport SettingsAbout from './components/settings/about/SettingsAbout'\nimport SettingsDiagnostics from './components/settings/diagnostics/SettingsDiagnostics.jsx'\nimport SettingsFinanceBankAccounts from './components/settings/finance/bank_accounts/SettingsFinanceBankAccounts'\nimport SettingsFinanceCurrency from './components/settings/finance/currency/SettingsFinanceCurrency'\nimport SettingsGeneralDateTime from './components/settings/general/date_time/SettingsGeneralDateTime'\nimport SettingsGeneralSystem from './components/settings/general/system/SettingsGeneralSystem'\nimport SettingsHome from './components/settings/home/SettingsHome'\nimport SettingsIntegrationMailChimp from './components/settings/integration/mailchimp/SettingsIntegrationMailChimp'\nimport SettingsIntegrationMollie from './components/settings/integration/mollie/SettingsIntegrationMollie'\nimport SettingsMailMailChimpLists from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpLists'\nimport SettingsMailMailChimpListAdd from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListAdd'\nimport SettingsMailMailChimpListEdit from './components/settings/mail/mailchimp_lists/SettingsMailMailChimpListEdit'\nimport SettingsMailNotifications from './components/settings/mail/notifications/SettingsMailNotifications'\nimport SettingsMailNotificationsAddAccount from './components/settings/mail/notifications/SettingsMailNotificationsAddAccount'\nimport SettingsMailTemplates from './components/settings/mail/templates/SettingsMailTemplates'\nimport SettingsMailTemplateEdit from './components/settings/mail/templates/SettingsMailTemplateEdit'\nimport SettingsShopAccountProfile from './components/settings/shop/account_profiles/SettingsShopAccountProfile'\nimport SettingsShopFeatures from './components/settings/shop/features/SettingsShopFeatures'\nimport SettingsWorkflowClassBooking from './components/settings/workflow/class_booking/SettingsWorkflowClassBooking'\nimport SettingsWorkflowShop from './components/settings/workflow/shop/SettingsWorkflowShop'\nimport SettingsWorkflowSubscriptionPauses from './components/settings/workflow/subscription_pauses/SettingsWorkflowSubscriptionPauses'\nimport SettingsWorkflowTrial from './components/settings/workflow/trial/SettingsWorkflowTrial'\n\nimport ShopAccountHome from './components/shop/account/home/ShopAccountHome'\nimport ShopAccountClassCancel from './components/shop/account/class_cancel/ShopAccountClassCancel'\nimport ShopAccountClassUnCancel from './components/shop/account/class_uncancel/ShopAccountClassUnCancel'\nimport ShopAccountClassInfo from './components/shop/account/class_info/ShopAccountClassInfo'\nimport ShopAccountClasspasses from './components/shop/account/classpasses/ShopAccountClasspasses'\nimport ShopAccountEventTickets from './components/shop/account/event_tickets/ShopAccountEventTickets'\nimport ShopAccountInvoicePayment from './components/shop/account/invoice_payment/ShopAccountInvoicePayment'\nimport ShopAccountInvoicePaymentStatus from './components/shop/account/invoice_payment_status/ShopAccountInvoicePaymentStatus'\nimport ShopAccountInvoices from './components/shop/account/invoices/ShopAccountInvoices'\nimport ShopAccountInvoice from './components/shop/account/invoice/ShopAccountInvoice'\nimport ShopAccountMailingLists from './components/shop/account/mailing_lists/ShopAccountMailingLists'\nimport ShopAccountOrders from './components/shop/account/orders/ShopAccountOrders'\nimport ShopAccountProfile from './components/shop/account/profile/ShopAccountProfile'\nimport ShopAccountSubscriptions from './components/shop/account/subscriptions/ShopAccountSubscriptions'\nimport ShopAccountSubscriptionCredits from './components/shop/account/subscriptions/credits/ShopAccountSubscriptionCredits'\nimport ShopClassBook from './components/shop/classes/book/ShopClassBook'\nimport ShopClassBooked from './components/shop/classes/booked/ShopClassBooked'\nimport ShopClassesSchedule from './components/shop/classes/schedule/ShopClassesSchedule'\nimport ShopContact from './components/shop/contact/ShopContact'\nimport ShopEvents from './components/shop/events/ShopEvents'\nimport ShopEvent from './components/shop/event/ShopEvent'\nimport ShopEventTicket from './components/shop/event_ticket/ShopEventTicket'\nimport ShopHome from './components/shop/home/ShopHome'\nimport ShopCheckoutPayment from './components/shop/checkout/payment/ShopCheckoutPayment'\nimport ShopCheckoutComplete from './components/shop/checkout/complete/ShopCheckoutComplete'\nimport ShopClasses from './components/shop/account/classes/ShopAccountClasses'\nimport ShopClasspasses from './components/shop/classpasses/ShopClasspasses'\nimport ShopClasspass from './components/shop/classpass/ShopClasspass'\nimport ShopSubscriptions from './components/shop/subscriptions/ShopSubscriptions'\nimport ShopSubscription from './components/shop/subscription/ShopSubscription'\nimport ShopSubscriptionDirectDebitActivated from './components/shop/subscription_directdebit_activated/ShopSubscriptionDirectDebitActivated'\n\nimport UserChangePassword from './components/user/password/UserPasswordChange'\nimport UserLogin from './components/user/login/UserLogin'\nimport UserLoginRequired from './components/user/login/UserLoginRequired'\nimport UserLogout from './components/user/login/UserLogout'\nimport UserSessionExpired from './components/user/session/UserSessionExpired'\nimport UserWelcome from './components/user/welcome/UserWelcome'\n\n\nimport Error404 from \"./components/Error404\"\n\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\nimport ShopAccountBankAccount from './components/shop/account/bank_account/ShopAccountBankAccount'\n\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } else {\n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, \"/user/welcome\")\n  }\n}\n\n\n// Private routes catches expires tokens\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const [ refreshingToken, setRefreshingToken ] = useState(false)\n  const [doTokenRefresh] = useMutation(TOKEN_REFRESH)\n  let authTokenExpired = false\n  console.log(rest.path)\n\n  const ContinueAsYouAre = <Route {...rest} render={(props) => ( <Component {...props} /> )} />\n  const WaitAsYouAre = <Route {...rest} render={(props) => ( \n    <Dimmer active={true} loader={true}><Component {...props} /> </Dimmer>)} />\n  const LoginRequired = <Route {...rest} render={(props) => ( <Redirect to='/user/login/required' /> )} />\n  // const SessionExpired = <Route {...rest} render={(props) => ( <Redirect to='/user/session/expired' /> )} />\n  \n  // Check expiration\n  const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n  if ((new Date() / 1000) >= tokenExp) {\n    authTokenExpired = true\n  }\n\n  if (refreshingToken) {\n    console.log(\"Refreshing token... please wait\")\n    return WaitAsYouAre\n  }\n\n  if (authTokenExpired)  {\n    // Catch loading state\n    setRefreshingToken(true)\n    const refreshTokenExp = localStorage.getItem(CSLS.AUTH_REFRESH_TOKEN_EXP)\n    // if (refreshTokenExp == null) {\n    //   console.log(\"refresh token not found\")\n    //   SetCurrentUrlAsNext()\n    //   CSAuth.cleanup()\n      \n    //   return LoginRequired\n    // } else if ((new Date() / 1000) >= refreshTokenExp) {\n    //   console.log(\"refresh token expired\")\n    //   console.log(new Date() / 1000)\n    //   console.log(refreshTokenExp)\n    //   SetCurrentUrlAsNext()\n    //   CSAuth.cleanup()\n\n    //   return SessionExpired\n    // } else {\n      // Refresh token\n    console.log(\"auth token expired, trying to refresh\")\n    console.log(new Date() / 1000)\n    console.log(refreshTokenExp)\n\n    doTokenRefresh().then(({ data }) => {\n      console.log('got refresh data', data)\n      CSAuth.updateTokenInfo(data.refreshToken)\n      setTimeout(function() {\n        setRefreshingToken(false)\n      }, 100)\n      return ContinueAsYouAre  \n    }).catch((error) => {\n      SetCurrentUrlAsNext()\n      toast.error(error, {\n        position: toast.POSITION.BOTTOM_RIGHT\n      })\n      console.log('there was an error refreshing the token', error) \n      // As there was an issue detected with the refresh token, clear all.\n      CSAuth.cleanup()\n      return LoginRequired\n    })\n    // }\n  } else {\n    return ContinueAsYouAre\n  }\n  // return null\n}\n\n\nfunction AppRoot({ t }) {\n  const { loading: loadingAppSettings, error: errorAppSettings, data: dataAppSettings } = useQuery(GET_APP_SETTINGS_QUERY)\n  const { loading: loadingOrganization, error: errorOrganization, data: dataOrganization } = useQuery(GET_ORGANIZATION_QUERY, {\n    variables: {id: \"T3JnYW5pemF0aW9uTm9kZToxMDA=\"}\n  })\n\n\n\n  if (loadingAppSettings || loadingOrganization) {\n    return (\n      <CSStandalonePageLoader />\n    )\n  }\n  if (errorAppSettings || errorOrganization) {\n    if (errorAppSettings.message === \"Signature has expired\")  {\n      return \"\"\n    } else {\n      return (\n        <div>\n          { t('settings.error_loading') } <br />\n          { errorAppSettings.message } <br />\n          { errorOrganization.message}\n        </div>\n      )\n    }\n  }\n\n  // Register \"US\" locale for moment\n  // moment.locale('en-US')\n  let appSettings = dataAppSettings.appSettings\n  let organization = dataOrganization.organization\n\n  return (\n    <AppSettingsProvider value={appSettings}>\n      <OrganizationProvider value={organization}>\n        <HashRouter>\n          <Switch>\n            {/* COOKIE POLICY */}\n            <Route exact path=\"/cookie_policy\" component={CookiePolicy} />\n            {/* BACKEND HOME */}\n            <PrivateRoute exact path=\"/backend\" component={HomeHome} />\n\n            {/* AUTOMATION */}\n            <PrivateRoute exact path=\"/automation\" component={AutomationHome} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits\" \n                                component={AutomationAccountSubscriptionCredits} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/credits/add\" \n                                component={AutomationAccountSubscriptionCreditAdd} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices\" \n                                component={AutomationAccountSubscriptionInvoices} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/invoices/add\" \n                                component={AutomationAccountSubscriptionInvoicesAdd} />    \n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections\" \n                                component={AutomationAccountSubscriptionMollieCollections} />\n            <PrivateRoute exact path=\"/automation/account/subscriptions/mollie_collections/add\" \n                                component={AutomationAccountSubscriptionMollieCollectionAdd} />\n\n            \n            {/* FINANCE */}\n            <PrivateRoute exact path=\"/finance\" component={FinanceHome} />\n            <PrivateRoute exact path=\"/finance/costcenters\" component={FinanceCostCenters} />\n            <PrivateRoute exact path=\"/finance/costcenters/add\" component={FinanceCostCenterAdd} />\n            <PrivateRoute exact path=\"/finance/costcenters/edit/:id\" component={FinanceCostCenterEdit} />\n            <PrivateRoute exact path=\"/finance/expenses\" component={FinanceExpenses} />\n            <PrivateRoute exact path=\"/finance/expenses/add\" component={FinanceExpenseAdd} />\n            <PrivateRoute exact path=\"/finance/expenses/edit/:id\" component={FinanceExpenseEdit} />\n            <PrivateRoute exact path=\"/finance/expenses/export\" component={FinanceExpensesExport} />\n            <PrivateRoute exact path=\"/finance/invoices\" component={FinanceInvoices} />\n            <PrivateRoute exact path=\"/finance/invoices/export\" component={FinanceInvoicesExport} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id\" component={FinanceInvoiceEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/edit/:id/to\" component={FinanceInvoiceEditTo} />\n            <PrivateRoute exact path=\"/finance/invoices/groups\" component={FinanceInvoiceGroups} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/add\" component={FinanceInvoiceGroupAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/edit/:id\" component={FinanceInvoiceGroupEdit} />\n            <PrivateRoute exact path=\"/finance/invoices/groups/defaults\" component={FinanceInvoiceGroupDefaults} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/add\" component={FinanceInvoicePaymentAdd} />\n            <PrivateRoute exact path=\"/finance/invoices/:invoice_id/payment/edit/:id\" component={FinanceInvoicePaymentEdit} />\n            <PrivateRoute exact path=\"/finance/glaccounts\" component={FinanceGLAccounts} />\n            <PrivateRoute exact path=\"/finance/glaccounts/add\" component={FinanceGLAccountAdd} />\n            <PrivateRoute exact path=\"/finance/glaccounts/edit/:id\" component={FinanceGLAccountEdit} />\n            <PrivateRoute exact path=\"/finance/orders\" component={FinanceOrders} />\n            <PrivateRoute exact path=\"/finance/orders/edit/:id\" component={FinanceOrderEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type\" component={FinancePaymentBatches} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add_what\" component={FinancePaymentBatchAddWhat} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/view/:id\" component={FinancePaymentBatchView} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/add/:category_type\" component={FinancePaymentCollectionBatchAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatches/:batch_type/edit/:id\" component={FinancePaymentCollectionBatchEdit} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories\" component={FinancePaymentBatchCategories} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/add\" component={FinancePaymentBatchCategoryAdd} />\n            <PrivateRoute exact path=\"/finance/paymentbatchcategories/edit/:id\" component={FinancePaymentBatchCategoryEdit} />\n            <PrivateRoute exact path=\"/finance/paymentmethods\" component={FinancePaymentMethods} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/add\" component={FinancePaymentMethodAdd} />\n            <PrivateRoute exact path=\"/finance/paymentmethods/edit/:id\" component={FinancePaymentMethodEdit} />\n            <PrivateRoute exact path=\"/finance/quotes\" component={FinanceQuotes} />\n            <PrivateRoute exact path=\"/finance/quotes/export\" component={FinanceQuotesExport} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id\" component={FinanceQuoteEdit} />\n            <PrivateRoute exact path=\"/finance/quotes/edit/:id/to\" component={FinanceQuoteEditTo} />\n            <PrivateRoute exact path=\"/finance/quotes/groups\" component={FinanceQuoteGroups} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/add\" component={FinanceQuoteGroupAdd} />\n            <PrivateRoute exact path=\"/finance/quotes/groups/edit/:id\" component={FinanceQuoteGroupEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates\" component={FinanceTaxRates} />\n            <PrivateRoute exact path=\"/finance/taxrates/add\" component={FinanceTaxRatesAdd} />\n            <PrivateRoute exact path=\"/finance/taxrates/edit/:id\" component={FinanceTaxRatesEdit} />\n            <PrivateRoute exact path=\"/finance/taxrates_summary\" component={FinanceTaxRatesSummary} />\n            \n            {/* ORGANIZATION */}\n            <PrivateRoute exact path=\"/organization\" component={OrganizationHome} />\n            <PrivateRoute exact path=\"/organization/edit/:id\" component={OrganizationEdit} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding\" component={OrganizationBranding} />\n            <PrivateRoute exact path=\"/organization/edit/:id/branding/:update_field\" component={OrganizationBrandingEdit} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id\" component={OrganizationDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type\" component={OrganizationListDocuments} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/add\" component={OrganizationDocumentAdd} />\n            <PrivateRoute exact path=\"/organization/documents/:organization_id/:document_type/edit/:id\" component={OrganizationDocumentEdit} />\n            <PrivateRoute exact path=\"/organization/announcements\" component={OrganizationAnnouncements} />\n            <PrivateRoute exact path=\"/organization/announcements/add\" component={OrganizationAnnouncementAdd} />\n            <PrivateRoute exact path=\"/organization/announcements/edit/:id\" component={OrganizationAnnouncementEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories\" component={OrganizationAppointmentCategories} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/add\" component={OrganizationAppointmentCategoryAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/edit/:id\" component={OrganizationAppointmentCategoryEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments\" component={OrganizationAppointments} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/add/\" component={OrganizationAppointmentAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/edit/:id\" component={OrganizationAppointmentEdit} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id\" \n                  component={OrganizationAppointmentPrices} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/add\" \n                  component={OrganizationAppointmentPriceAdd} />\n            <PrivateRoute exact path=\"/organization/appointment_categories/:category_id/appointments/prices/:appointment_id/edit/:id\" \n                  component={OrganizationAppointmentPriceEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses\" component={OrganizationClasspasses} />\n            <PrivateRoute exact path=\"/organization/classpasses/add\" component={OrganizationClasspassAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/edit/:id\" component={OrganizationClasspassEdit} />    \n            <PrivateRoute exact path=\"/organization/classpasses/groups\" component={OrganizationClasspassesGroups} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/add\" component={OrganizationClasspassesGroupAdd} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/:id\" component={OrganizationClasspassesGroupEdit} />\n            <PrivateRoute exact path=\"/organization/classpasses/groups/edit/passes/:id\" component={OrganizationClasspassesGroupEditPasses} />\n            <PrivateRoute exact path=\"/organization/classtypes\" component={OrganizationClasstypes} />\n            <PrivateRoute exact path=\"/organization/classtypes/add\" component={OrganizationClasstypeAdd} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit/:id\" component={OrganizationClasstypeEdit} />\n            <PrivateRoute exact path=\"/organization/classtypes/edit_image/:id\" component={OrganizationClasstypeEditImage} />\n            <PrivateRoute exact path=\"/organization/discoveries\" component={OrganizationDiscoveries} />\n            <PrivateRoute exact path=\"/organization/discoveries/add\" component={OrganizationDiscoveryAdd} /> \n            <PrivateRoute exact path=\"/organization/discoveries/edit/:id\" component={OrganizationDiscoveryEdit} /> \n            <PrivateRoute exact path=\"/organization/holidays\" component={OrganizationHolidays} />\n            <PrivateRoute exact path=\"/organization/holidays/add\" component={OrganizationHolidayAdd} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id\" component={OrganizationHolidayEdit} />\n            <PrivateRoute exact path=\"/organization/holidays/edit/:id/locations\" component={OrganizationHolidayEditLocations} />\n            <PrivateRoute exact path=\"/organization/languages\" component={OrganizationLanguages} />\n            <PrivateRoute exact path=\"/organization/languages/add\" component={OrganizationLanguageAdd} />\n            <PrivateRoute exact path=\"/organization/languages/edit/:id\" component={OrganizationLanguageEdit} />\n            <PrivateRoute exact path=\"/organization/levels\" component={OrganizationLevels} />\n            <PrivateRoute exact path=\"/organization/levels/add\" component={OrganizationLevelAdd} />\n            <PrivateRoute exact path=\"/organization/levels/edit/:id\" component={OrganizationLevelEdit} />\n            <PrivateRoute exact path=\"/organization/locations\" component={OrganizationLocations} />\n            <PrivateRoute exact path=\"/organization/locations/add\" component={OrganizationLocationAdd} />\n            <PrivateRoute exact path=\"/organization/locations/edit/:id\" component={OrganizationLocationEdit} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/:location_id\" component={OrganizationLocationRooms} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/add/:location_id\" component={OrganizationLocationRoomAdd} />\n            <PrivateRoute exact path=\"/organization/locations/rooms/edit/:location_id/:id\" component={OrganizationLocationRoomEdit} />\n            <PrivateRoute exact path=\"/organization/products\" component={OrganizationProducts} />\n            <PrivateRoute exact path=\"/organization/products/add\" component={OrganizationProductAdd} />\n            <PrivateRoute exact path=\"/organization/products/edit/:id\" component={OrganizationProductEdit} />\n            <PrivateRoute exact path=\"/organization/shifts\" component={OrganizationShifts} />\n            <PrivateRoute exact path=\"/organization/shifts/add\" component={OrganizationShiftAdd} />\n            <PrivateRoute exact path=\"/organization/shifts/edit/:id\" component={OrganizationShiftEdit} /> \n            {/* <PrivateRoute exact path=\"/organization/memberships\" component={OrganizationMemberships} />\n            <PrivateRoute exact path=\"/organization/memberships/add\" component={OrganizationMembershipAdd} />\n            <PrivateRoute exact path=\"/organization/memberships/edit/:id\" component={OrganizationMembershipEdit} />  */}\n            <PrivateRoute exact path=\"/organization/subscriptions\" component={OrganizationSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/add\" component={OrganizationSubscriptionAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/edit/:id\" component={OrganizationSubscriptionEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups\" component={OrganizationSubscriptionsGroups} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/add\" component={OrganizationSubscriptionsGroupAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/:id\" component={OrganizationSubscriptionsGroupEdit} />\n            <PrivateRoute exact path=\"/organization/subscriptions/groups/edit/subscriptions/:id\" component={OrganizationSubscriptionsGroupEditSubscriptions} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/:subscription_id\" component={OrganizationSubscriptionsPrices} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/add/:subscription_id\" component={OrganizationSubscriptionPriceAdd} />\n            <PrivateRoute exact path=\"/organization/subscriptions/prices/edit/:subscription_id/:id\" component={OrganizationSubscriptionPriceEdit} />\n\n            {/* RELATIONS */}\n            <PrivateRoute exact path=\"/relations\" component={RelationsHome} />\n            <PrivateRoute exact path=\"/relations/accounts\" component={RelationsAccounts} />\n            <PrivateRoute exact path=\"/relations/accounts/add\" component={RelationsAccountAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile\" component={RelationsAccountProfile} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/profile/image\" component={RelationsAccountProfileImage} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/accepted_documents\" component={AccountAcceptedDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts\" component={RelationsAccountBankAccount} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/add\" \n                          component={RelationsAccountBankAccountMandateAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/bank_accounts/:bank_account_id/mandates/edit/:id\" \n                          component={RelationsAccountBankAccountMandateEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes\" component={RelationsAccountClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classes_find_class\" component={RelationsAccountClassesFindClass} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses\" component={AccountClasspasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/add\" component={AccountClasspassAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/edit/:id\" component={AccountClasspassEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/classpasses/classes/:id\" component={AccountClasspassClasses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents\" component={AccountDocuments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/add\" component={AccountDocumentAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/documents/edit/:id\" component={AccountDocumentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments\" component={RelationsAccountEnrollments} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollments/edit/:id\" component={RelationsAccountEnrollmentEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/enrollment_find_class\" component={RelationsAccountEnrollmentFindClass} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items\" \n                          component={AccountFinancePaymentBatchCategoryItems} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/add\" \n                          component={AccountFinancePaymentBatchCategoryItemAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/finance_payment_batch_category_items/edit/:id\" \n                          component={AccountFinancePaymentBatchCategoryItemEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices\" component={AccountInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/invoices/add\" component={AccountInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships\" component={AccountMemberships} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/add\" component={AccountMembershipAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/memberships/edit/:id\" component={AccountMembershipEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes\" component={AccountNotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/add\" component={AccountNoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/notes/edit/:id\" component={AccountNoteEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/orders\" component={AccountOrders} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products\" component={AccountProducts} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/products/add\" component={AccountProductAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes\" component={AccountQuotes} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/quotes/add\" component={AccountQuoteAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/event_tickets\" component={AccountScheduleEventTickets} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions\" component={AccountSubscriptions} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/add\" component={AccountSubscriptionAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id\" \n                          component={AccountSubscriptionEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices\" \n                          component={AccountSubscriptionEditAltPrices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/add\" \n                          component={AccountSubscriptionEditAltPriceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/alt_prices/edit/:id\" \n                          component={AccountSubscriptionEditAltPriceEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks\" component={AccountSubscriptionEditBlocks} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/add\" component={AccountSubscriptionEditBlockAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/blocks/edit/:id\" \n                          component={AccountSubscriptionEditBlockEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits\" component={AccountSubscriptionEditCredits} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/add\" component={AccountSubscriptionEditCreditAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/credits/edit/:id\" \n                          component={AccountSubscriptionEditCreditEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices\" \n              component={AccountSubscriptionEditInvoices} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/invoices/add\" \n              component={AccountSubscriptionEditInvoiceAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses\" component={AccountSubscriptionEditPauses} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/add\" component={AccountSubscriptionEditPauseAdd} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/subscriptions/edit/:subscription_id/pauses/edit/:id\" \n                          component={AccountSubscriptionEditPauseEdit} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/tools\" component={RelationsAccountTools} />\n            <PrivateRoute exact path=\"/relations/accounts/:account_id/instructor_profile\" component={RelationsAccountInstructorProfile} />\n            <PrivateRoute exact path=\"/relations/b2b\" component={RelationsB2B} />\n            <PrivateRoute exact path=\"/relations/b2b/add\" component={RelationsB2BAdd} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/edit\" component={RelationsB2BEdit} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices\" component={RelationsB2BInvoices} />\n            <PrivateRoute exact path=\"/relations/b2b/:business_id/invoices/add\" component={RelationsB2BInvoiceAdd} />\n\n            {/* SCHEDULE */}\n            <PrivateRoute exact path=\"/schedule\" component={ScheduleHome} />\n            <PrivateRoute exact path=\"/schedule/appointments\" component={ScheduleAppointments} />\n            <PrivateRoute exact path=\"/schedule/appointments/add\" component={ScheduleAppointmentAdd} />\n            <PrivateRoute exact path=\"/schedule/appointments/all/edit/:appointment_id\" component={ScheduleAppointmentEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes\" component={ScheduleClasses} />\n            <PrivateRoute exact path=\"/schedule/classes/add/\" component={ScheduleClassAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/edit/:class_id/\" component={ScheduleClassEditAll} />\n            <PrivateRoute exact path=\"/schedule/classes/all/classpasses/:class_id/\" component={ScheduleClassClasspasses} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/\" component={ScheduleClassEnrollments} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/search\" component={ScheduleClassEnrollmentsSearch} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/add/:account_id/:account_subscription_id\" \n                          component={ScheduleClassEnrollmentAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/edit/:id\" \n                          component={ScheduleClassEnrollmentEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/enrollments/:class_id/options/:account_id\" component={ScheduleClassEnrollmentOptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/\" component={ScheduleClassPrices} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/add\" component={ScheduleClassPriceAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/prices/:class_id/edit/:id\" component={ScheduleClassPriceEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/all/subscriptions/:class_id/\" component={ScheduleClassSubscriptions} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/\" component={ScheduleClassInstructors} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/add\" component={ScheduleClassInstructorAdd} />\n            <PrivateRoute exact path=\"/schedule/classes/all/instructors/:class_id/edit/:id\" component={ScheduleClassInstructorEdit} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance/:class_id/:date\" component={ScheduleClassAttendance} />\n            <PrivateRoute exact path=\"/schedule/classes/class/attendance_chart/:class_id/:date\" \n                          component={ScheduleClassAttendanceChart} />\n            <PrivateRoute exact path=\"/schedule/classes/class/book/:class_id/:date/:account_id\" component={ScheduleClassBook} />\n            <PrivateRoute exact path=\"/schedule/classes/class/edit/:class_id/:date\" component={ScheduleClassEdit} />\n            <PrivateRoute exact path=\"/schedule/events\" component={ScheduleEvents} />\n            <PrivateRoute exact path=\"/schedule/events/add\" component={ScheduleEventAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id\" component={ScheduleEventEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities\" component={ScheduleEventActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/add\" component={ScheduleEventActivityAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id\" component={ScheduleEventActivityEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/activities/edit/:id/attendance\" \n                          component={ScheduleEventActivityAttendance} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds\" component={ScheduleEventEarlybirds} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/add\" component={ScheduleEventEarlybirdAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/earlybirds/edit/:id\" component={ScheduleEventEarlybirdEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media\" component={ScheduleEventMedia} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/add\" component={ScheduleEventMediaAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/media/edit/:id\" component={ScheduleEventMediaEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts\" \n                          component={ScheduleEventSubscriptionGroupDiscounts} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/add\" \n                          component={ScheduleEventSubscriptionGroupDiscountAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/subscription_group_discounts/edit/:id\" \n                          component={ScheduleEventSubscriptionGroupDiscountEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets\" component={ScheduleEventTickets} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/add\" component={ScheduleEventTicketAdd} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id\" component={ScheduleEventTicketEdit} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/activities\" component={ScheduleEventTicketEditActivities} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers\" component={ScheduleEventTicketEditCustomers} />\n            <PrivateRoute exact path=\"/schedule/events/edit/:event_id/tickets/edit/:id/customers/search\" \n                          component={ScheduleEventTicketEditCustomersSearch} />\n            <PrivateRoute exact path=\"/schedule/shifts\" component={ScheduleShifts} />\n            <PrivateRoute exact path=\"/schedule/shifts/add\" component={ScheduleShiftAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/edit/:shift_id/\" component={ScheduleShiftEditAll} />\n            <PrivateRoute exact path=\"/schedule/shifts/shift/edit/:shift_id/:date\" component={ScheduleShiftEdit} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/\" component={ScheduleShiftEmployees} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/add\" component={ScheduleShiftEmployeeAdd} />\n            <PrivateRoute exact path=\"/schedule/shifts/all/employees/:shift_id/edit/:id\" component={ScheduleShiftEmployeeEdit} />\n\n\n            {/* Insight */}\n            <PrivateRoute exact path=\"/insight\" component={InsightHome} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts\" component={InsightInactiveAccounts} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/add\" component={InsightInactiveAccountsAdd} />\n            <PrivateRoute exact path=\"/insight/inactive_accounts/view/:id\" component={InsightInactiveAccountsView} />\n            <PrivateRoute exact path=\"/insight/classpasses\" component={InsightClasspasses} />\n            <PrivateRoute exact path=\"/insight/instructor_classes_month\" component={InsightInstructorClassesMonth} />\n            <PrivateRoute exact path=\"/insight/invoices_open_on_date\" component={InsightFinanceInvoicesOpenOnDate} />\n            <PrivateRoute exact path=\"/insight/keynumbers_wo_subscription\" component={InsightKeyNumbersWoSubscription} />\n            <PrivateRoute exact path=\"/insight/revenue\" component={InsightRevenue} />\n            <PrivateRoute exact path=\"/insight/subscriptions\" component={InsightSubscriptions} />\n            <PrivateRoute exact path=\"/insight/trialpasses\" component={InsightTrialpasses} />\n\n            {/* Self Check-in */}\n            <PrivateRoute exact path=\"/selfcheckin/checkin/:location_id/:class_id/:date\" component={SelfCheckinCheckin} />\n            <PrivateRoute exact path=\"/selfcheckin/book/:location_id/:class_id/:date/:account_id\" \n                                component={SelfCheckinBookingOptions} />\n            <PrivateRoute exact path=\"/selfcheckin\" component={SelfCheckinLocations} />\n            <PrivateRoute exact path=\"/selfcheckin/location/:location_id\" component={SelfCheckinLocationClasses} />\n\n            {/* Shop */}\n            <Route exact path = \"/\" component={ShopHome} />\n            <PrivateRoute exact path = \"/shop/account\" component={ShopAccountHome} />\n            <PrivateRoute exact path = \"/shop/account/bank_account\" component={ShopAccountBankAccount} />\n            <PrivateRoute exact path = \"/shop/account/class_cancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_uncancel/:class_id/:date/:attendance_id\" \n                                component={ShopAccountClassUnCancel} />\n            <PrivateRoute exact path = \"/shop/account/class_info/:class_id/:date\" component={ShopAccountClassInfo} />\n            <PrivateRoute exact path = \"/shop/account/classes\" component={ShopClasses} />\n            <PrivateRoute exact path = \"/shop/account/classpasses\" component={ShopAccountClasspasses} />\n            <PrivateRoute exact path = \"/shop/account/event_tickets\" component={ShopAccountEventTickets} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment/:id\" component={ShopAccountInvoicePayment} />\n            <PrivateRoute exact path = \"/shop/account/invoice_payment_status/:id\" component={ShopAccountInvoicePaymentStatus} />\n            <PrivateRoute exact path = \"/shop/account/invoices\" component={ShopAccountInvoices} />\n            <PrivateRoute exact path = \"/shop/account/invoice/:id\" component={ShopAccountInvoice} />\n            <PrivateRoute exact path = \"/shop/account/mailing_lists\" component={ShopAccountMailingLists} />\n            <PrivateRoute exact path = \"/shop/account/orders\" component={ShopAccountOrders} />\n            <PrivateRoute exact path = \"/shop/account/profile\" component={ShopAccountProfile} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions\" component={ShopAccountSubscriptions} />\n            <PrivateRoute exact path = \"/shop/account/subscriptions/:subscription_id/credits\" component={ShopAccountSubscriptionCredits} />\n            <PrivateRoute exact path = \"/shop/checkout/payment/:id\" component={ShopCheckoutPayment} />\n            <PrivateRoute exact path = \"/shop/checkout/complete/:id\" component={ShopCheckoutComplete} />\n            <Route exact path = \"/shop/classes\" component={ShopClassesSchedule} />\n            <PrivateRoute exact path = \"/shop/classes/book/:class_id/:date\" component={ShopClassBook} />\n            <PrivateRoute exact path = \"/shop/classes/booked/:class_id/:date\" component={ShopClassBooked} />\n            <Route exact path = \"/shop/classpasses\" component={ShopClasspasses} />\n            <PrivateRoute exact path = \"/shop/classpass/:id\" component={ShopClasspass} />\n            <PrivateRoute exact path = \"/shop/classpass/:id/:class_id/:date\" component={ShopClasspass} />\n            <Route exact path = \"/shop/contact\" component={ShopContact} />\n            <Route exact path = \"/shop/events\" component={ShopEvents} />\n            <Route exact path = \"/shop/events/:event_id\" component={ShopEvent} />\n            <PrivateRoute exact path = \"/shop/events/:event_id/ticket/:id\" component={ShopEventTicket} />\n            <Route exact path = \"/shop/subscriptions\" component={ShopSubscriptions} />\n            <PrivateRoute exact path = \"/shop/subscription/:id\" component={ShopSubscription} />\n            <PrivateRoute exact path = \"/shop/subscription/direct_debit_activated/:id\" component={ShopSubscriptionDirectDebitActivated} />\n\n            {/* Settings */}\n            <PrivateRoute exact path=\"/settings\" component={SettingsHome} />\n            <PrivateRoute exact path=\"/settings/about\" component={SettingsAbout} />\n            <PrivateRoute exact path=\"/settings/diagnostics\" component={SettingsDiagnostics} />\n            <PrivateRoute exact path=\"/settings/finance/bank_accounts\" component={SettingsFinanceBankAccounts} />\n            <PrivateRoute exact path=\"/settings/finance/currency\" component={SettingsFinanceCurrency} />\n            <PrivateRoute exact path=\"/settings/general/datetime\" component={SettingsGeneralDateTime} />\n            <PrivateRoute exact path=\"/settings/general/system\" component={SettingsGeneralSystem} />\n            <PrivateRoute exact path=\"/settings/integration/mailchimp\" component={SettingsIntegrationMailChimp} />\n            <PrivateRoute exact path=\"/settings/integration/mollie\" component={SettingsIntegrationMollie} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists\" component={SettingsMailMailChimpLists} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/add\" component={SettingsMailMailChimpListAdd} />\n            <PrivateRoute exact path=\"/settings/mail/mailchimp_lists/edit/:id\" component={SettingsMailMailChimpListEdit} />\n            <PrivateRoute exact path=\"/settings/mail/notifications\" component={SettingsMailNotifications} />\n            <PrivateRoute exact path=\"/settings/mail/notifications/add_account/:id\" component={SettingsMailNotificationsAddAccount} />\n            <PrivateRoute exact path=\"/settings/mail/templates\" component={SettingsMailTemplates} />\n            <PrivateRoute exact path=\"/settings/mail/templates/edit/:id\" component={SettingsMailTemplateEdit} />\n            <PrivateRoute exact path=\"/settings/shop/account_profiles\" component={SettingsShopAccountProfile} />\n            <PrivateRoute exact path=\"/settings/shop/features\" component={SettingsShopFeatures} />\n            <PrivateRoute exact path=\"/settings/workflow/class_booking\" component={SettingsWorkflowClassBooking} />\n            <PrivateRoute exact path=\"/settings/workflow/shop\" component={SettingsWorkflowShop} />\n            <PrivateRoute exact path=\"/settings/workflow/subscription_pauses\" component={SettingsWorkflowSubscriptionPauses} />\n            <PrivateRoute exact path=\"/settings/workflow/trial\" component={SettingsWorkflowTrial} />\n\n            {/* User */}\n            <PrivateRoute exact path=\"/user/password/change\" component={UserChangePassword} />\n            <Route exact path=\"/user/login\" component={UserLogin} />\n            <Route exact path=\"/user/login/required\" component={UserLoginRequired} />\n            <Route exact path=\"/user/logout\" component={UserLogout} />\n            <Route exact path=\"/user/session/expired\" component={UserSessionExpired} />\n            <Route exact path=\"/user/welcome\" component={UserWelcome} />\n            \n            <Route component={Error404} />\n          </Switch>\n        </HashRouter>\n      </OrganizationProvider>\n    </AppSettingsProvider>\n  )\n}\n\nexport default withTranslation()(AppRoot)\n\n","import React from 'react'\nimport {\n  ApolloClient,\n  ApolloLink,\n  from,\n  createHttpLink,\n  InMemoryCache,\n  ApolloProvider,\n  Observable,\n} from \"@apollo/client\";\n\nimport { relayStylePagination } from \"@apollo/client/utilities\";\nimport { onError } from \"@apollo/client/link/error\";\n// import { setContext } from '@apollo/client/link/context';\nimport Cookies from 'js-cookie';\nimport moment from 'moment';\n\nimport { TOKEN_REFRESH } from \"./queries/system/auth\"\n\nimport CSEC from \"./tools/cs_error_codes\"\nimport CSLS from \"./tools/cs_local_storage\"\nimport { CSAuth } from './tools/authentication'\n\n// Main app\nimport AppRoot from \"./AppRoot\"\n\n// Tabler css \nimport \"tabler-react/dist/Tabler.css\"\n// React-datepicker css\nimport \"react-datepicker/dist/react-datepicker.css\"\n// App css\nimport './App.css'\n\n\n// Register \"nl\" locale for react-datepicker\n// https://reactdatepicker.com/#example-17\n// import { registerLocale } from \"react-datepicker\"\n// import nl from 'date-fns/locale/nl';\n// registerLocale('nl', nl);\n\n// This allows <string>.trunc(x)\n// eslint-disable-next-line no-extend-native\nString.prototype.trunc = \n  function(n){\n      return this.substr(0, n-1) + (this.length > n ? '...' : '')\n  }\n\nfunction SetCurrentUrlAsNext() {\n  console.log(\"Storing current location as next in local storage\")\n  const currentUrl = window.location.href\n  const next = currentUrl.split(\"#\")[1]\n  console.log(next)\n  if ((next !== \"/user/login\") && (next !== \"/user/session/expired\") && (next !== \"/user/login/required\") && (next)) {\n    // This is a dirty hack to work around the following, a user refreshes the page but has an expired refreshtoken.\n    // This will produce an error on the orinal component, setting the correct next URL in localStorage. However, \n    // the code below will move the user to /user/login, which will also error at first, thus /user/login always\n    // gets set... we don't want that. This flow can be refactored at some point, but it works for now. \n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, next)\n  } else {\n    localStorage.setItem(CSLS.AUTH_LOGIN_NEXT, \"/user/welcome\")\n  }\n}\n\nlet refreshingToken = false\n\nconst errorLink = onError(({ graphQLErrors, networkError, operation, forward, response }) => {\n  console.log(operation)\n  console.log(response)\n\n  let user_not_logged_in_within_graphql_errors = false\n  let user_not_logged_in_within_response_errors = false\n  \n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`,\n      )\n      // Catch broken promises (Check needed since django-graphene 3.0.0b8)\n      // Instead of adding a graphql error, there's a broken promise on an exception raised.\n      // if (message.includes(CSEC.USER_NOT_LOGGED_IN)) {\n      //   user_not_logged_in_within_graphql_errors = true\n      // }\n    });\n\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n\n  // request size check\n  if (graphQLErrors && graphQLErrors[0].message === \"Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.\") {\n    console.error('CHOSEN FILE EXCEEDS SIZE LIMIT')\n  }\n\n  // No refresh token check\n  if (graphQLErrors && graphQLErrors[0].message === \"Refresh token is required\") {\n    console.error('REFRESH TOKEN IS REQUIRED')\n    CSAuth.cleanup()\n    SetCurrentUrlAsNext()\n\n    refreshingToken = false\n    window.location.href = \"/#/user/login\"\n    setTimeout(function() {\n      window.location.reload()\n    }, 100)\n  }\n\n  // Catch errors in response\n  if (response) {\n    let i\n    for (i = 0; i < response.errors.length; i++) {\n      if (response.errors[i].extensions && response.errors[i].extensions.code === CSEC.USER_NOT_LOGGED_IN) {\n        user_not_logged_in_within_response_errors = true\n      }\n    }\n  }\n\n  // Catch expired tokens on refresh\n  if (user_not_logged_in_within_response_errors || user_not_logged_in_within_graphql_errors) {\n    console.log('Time to refresh the token')\n    if (refreshingToken) {\n      console.log(\"Token already refreshing...\")\n    } else { \n      return refreshToken(forward, operation)\n    }\n    \n  }\n})\n\n\n// Actually try to refresh the token\nfunction refreshToken(forward, operation) {\n  if (refreshingToken) {\n    console.log(\"Token already refreshing...\")\n  } else {\n    refreshingToken = true\n    console.log(\"Start token refresh...\")\n\n    return new Observable(observer => {\n      doTokenRefresh()\n        .then(({ data }) => { \n          console.log(data)\n          CSAuth.updateTokenInfo(data.refreshToken)\n          // Token is no longer refreshing\n          refreshingToken = false\n        })\n        .then(() => {\n          const subscriber = {\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          };\n          \n          // Retry last failed request\n          forward(operation).subscribe(subscriber);\n        })\n        .catch(error => {\n          // No or invalid refresh token we request user to login, after a cleanup\n          console.error(\"Error refreshing token!\")\n          console.error(error);\n          observer.error(error);\n\n          refreshingToken = false\n\n          // Don't redirect users to the login component here.\n          // A simultaneous refresh might happen, causing an invalid refresh token error.\n          // This isn't very clean, but it works. It just means no user feedback on an\n          // invalid refresh token and they'll have to reload the page.\n        });  \n    })\n  }\n}\n\nasync function doTokenRefresh () {\n  const refreshResolverResponse = await client.mutate({\n    mutation: TOKEN_REFRESH,\n  })\n\n  return refreshResolverResponse\n}\n\n   \n// // Fetch CSRF Token\n// let csrftoken\n// async function getCsrfToken() {\n//   if (csrftoken) return csrftoken\n\n//   csrftoken = await fetch('/d/csrf/')\n//     .then(response => response.json())\n//     .then(data => data.csrfToken)\n\n//   return await csrftoken\n// }\n\n// Fetch CSRF Token from Cookie\nlet csrftoken\nasync function getCsrfToken() {\n  if (csrftoken) return csrftoken\n\n  await fetch('/d/csrf/')\n    .then(response => response.json())\n\n  // For troubleshooting\n  // const result =  await fetch('/d/csrf/')\n  //   .then(response => response.json())\n  // console.log(reuslt)\n\n  csrftoken = Cookies.get('csrftoken');\n  \n  return await csrftoken\n}\n\nconst httpLink = createHttpLink({\n  uri: '/d/graphql/',\n  credentials: 'same-origin',\n  // request: async (operation) => {\n  //   const csrftoken = await getCsrfToken();\n  //   Cookies.set('csrftoken', csrftoken);\n  //   // set the cookie 'csrftoken'\n  //   operation.setContext({\n  //       // set the 'X-CSRFToken' header to the csrftoken\n  //       headers: {\n  //           'X-CSRFToken': csrftoken,\n  //       },\n  //   })}\n});\n\nconst csrfMiddleware = new ApolloLink(async (operation, forward) => {\n  const csrftoken = await getCsrfToken();\n  Cookies.set('csrftoken', csrftoken);\n\n  operation.setContext({\n    // set the 'X-CSRFToken' header to the csrftoken\n    headers: {\n        'X-CSRFToken': csrftoken,\n    },\n  })\n\n  return forward(operation)\n})\n\n// const authLink = setContext(async (request, { headers }) => {\n//   // get the authentication token from local storage if it exists\n//   // const token = localStorage.getItem(CSLS.AUTH_TOKEN)\n//   // return the headers to the context so httpLink can read them\n//   return {\n//     headers: {\n//       ...headers,\n//       // Authorization: token ? `JWT ${token}`: ''\n//     }\n//   }\n// });\n\n\n// Ideally before executing anything, a token is refreshed.\n// But it needs more work... how to handle unauthenticated users for example.\n\n\n// const authLink = new ApolloLink((operation, forward) => {\n//   // Ensure the user is signed in\n\n//   console.log(\"Doing authLink\")\n//   // Check expiration\n//   let authTokenExpired = false\n//   const tokenExp = localStorage.getItem(CSLS.AUTH_TOKEN_EXP)\n//   if ((new Date() / 1000) >= tokenExp) {\n//     authTokenExpired = true\n//   }\n\n//   if (authTokenExpired) {\n//     return refreshToken(forward, operation)\n//   }\n//   // const token = localStorage.getItem('token');\n//   // operation.setContext({\n//   //   headers: {\n//   //     authorization: token ? `Bearer ${token}` : \"\",\n//   //   },\n//   // });\n//   return forward(operation);\n// });\n\n\n// set up ApolloClient\nconst client = new ApolloClient({\n  link: from([csrfMiddleware, errorLink, httpLink]),\n  cache: new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          accounts: relayStylePagination(),\n        },\n      },\n    },\n  }),\n})\n\n\nfunction App() {\n  // Register \"NL\" locale for moment\n  moment.locale('en-US')\n\n  return (\n    <ApolloProvider client={client}>\n      <AppRoot />\n    </ApolloProvider>\n  )\n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './i18n'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}